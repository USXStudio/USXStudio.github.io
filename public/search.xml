<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>光栅化填充三角形算法TriangleRasterization</title>
      <link href="/2018/10/16/%E5%85%89%E6%A0%85%E5%8C%96%E5%A1%AB%E5%85%85%E4%B8%89%E8%A7%92%E5%BD%A2%E7%AE%97%E6%B3%95TriangleRasterization/"/>
      <url>/2018/10/16/%E5%85%89%E6%A0%85%E5%8C%96%E5%A1%AB%E5%85%85%E4%B8%89%E8%A7%92%E5%BD%A2%E7%AE%97%E6%B3%95TriangleRasterization/</url>
      
        <content type="html"><![CDATA[<h3 id="简介-triangle-光栅化算法"><a href="#简介-triangle-光栅化算法" class="headerlink" title="简介 triangle 光栅化算法"></a>简介 triangle 光栅化算法</h3><p> 本文讨论三角形光栅化算法，也就是三角形的填充算法，在平时的开发中其实该算法很少会遇到，目前的光栅化其实都是已经固化到了显卡芯片里，<br> 但是里面的很多思路我们还是可以借鉴的，比如扫描线算法在gis，计算几何的应用中很广泛。</p><h3 id="标准三角形光栅化算法"><a href="#标准三角形光栅化算法" class="headerlink" title="标准三角形光栅化算法"></a>标准三角形光栅化算法</h3><p>标准算法主要主要考虑了底部平行x轴和顶部平行x轴这两种情况，事实上大家都知道这两种情况很好绘制。<br>如下图所示</p><div><br>        <img src="/2018/10/16/光栅化填充三角形算法TriangleRasterization/flatbottomtriangle.png" alt="flatbottomtriangle" style="float:left"><img src="/2018/10/16/光栅化填充三角形算法TriangleRasterization/flattoptriangle.png" alt="flattoptriangle" style="float:left"><br>        <br style="clear:both"><br></div><br>如左图所示我们从点v1开始平行于底部边v2v3开始绘制一条一条的平行线。他们的交点分别为p1 ，p2。<br>显而易见，p1.y = p2.y，他们的y值是一样的。<br><br><br>同时v1.y1 - p1.y = v1.y - p2.y。 这个算法的主要流程就是从点v1 开始，沿着边v2v3一步一步的绘制直线填充这个三角形。<br><br><br>从点v1开始每一次一条线都是向下扫描前进的单位是dy = 1。两条腿的斜率为 slope =  dy/dx ,dx = dy/slope;<br><br><br>这个的算法思想如下:<br>1. 计算边 v1v2,v1v3斜率的倒数invslope1 , invslope2<br>2. 然后从v1.y 开始不断的 vec2 p1 = v1 + vec2(invslope1,1) vec2 p2 = v1 + vec2(invslope2,1)(这里偷懒用向量表示下)一步一步的前进构建直线<br><br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 采用笛卡尔坐标系，下为正y，右为正x</span><br><span class="line">fillBottomFlatTriangle(Vertice v1, Vertice v2, Vertice v3)</span><br><span class="line">&#123;</span><br><span class="line">  float invslope1 = (v2.x - v1.x) / (v2.y - v1.y);</span><br><span class="line">  float invslope2 = (v3.x - v1.x) / (v3.y - v1.y);</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  float curx1 = v1.x;</span><br><span class="line">  float curx2 = v1.x;</span><br><span class="line"></span><br><span class="line">  for (int scanlineY = v1.y; scanlineY &lt;= v2.y; scanlineY++)</span><br><span class="line">  &#123;</span><br><span class="line">    drawLine((int)curx1, scanlineY, (int)curx2, scanlineY);</span><br><span class="line">    // 勘误 假设左边的点x为curx1，那么curx1 -= invslope1 原文为 +=</span><br><span class="line">    // 可能坐标系不一样</span><br><span class="line">    curx1 += invslope1;</span><br><span class="line">    curx2 += invslope2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>然后考虑后面一种情况<br><br><div><br>    <img src="/2018/10/16/光栅化填充三角形算法TriangleRasterization/flattoptriangle.png" alt="flattoptriangle"><br></div><p>同理绘制下面这个三角形。只不过，开始的点不一样，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 采用笛卡尔坐标系，下为正y，右为正x</span><br><span class="line">fillTopFlatTriangle(Vertice v1, Vertice v2, Vertice v3)</span><br><span class="line">&#123;</span><br><span class="line">  float invslope1 = (v3.x - v1.x) / (v3.y - v1.y);</span><br><span class="line">  float invslope2 = (v3.x - v2.x) / (v3.y - v2.y);</span><br><span class="line"></span><br><span class="line">  float curx1 = v3.x;</span><br><span class="line">  float curx2 = v3.x;</span><br><span class="line"></span><br><span class="line">  for (int scanlineY = v3.y; scanlineY &gt; v1.y; scanlineY--)</span><br><span class="line">  &#123;</span><br><span class="line">    drawLine((int)curx1, scanlineY, (int)curx2, scanlineY);</span><br><span class="line">    // 勘误 假设左边的点x为curx1，那么curx1 -= invslope1 原文为 +=</span><br><span class="line">    // 可能坐标系不一样</span><br><span class="line">    curx1 -= invslope1;</span><br><span class="line">    curx2 -= invslope2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有了前面的基础，现在我们考虑一下如下图所示的更加一般的情况,基本思路就是将该三角形分解为和上面类型一样的两个三角形<br>一个平顶的一个平底的。这样我们就能将一个新问题转化为已经解决了的问题了。现在问题的关键点就是我们如何使用切分这个一般的三角形，如下图所示。<br><img src="/2018/10/16/光栅化填充三角形算法TriangleRasterization/generalTriangle.png" alt="generalTriangle"><br>现在我们穿过点v2 沿着x轴构建一条直线。假设这条直线与三角形的交点为v4，并且v4.y = v2.y。至于v4.x 我们可以使用截线定理(Intercept theorem)获得。<br>具体的推导过程上图的右边已经给出了，最终我们获得了两个三角形Δ1 = (V1, V2, V4) ， Δ2 = (V2, V4, V3)，分割成这两个三角形之后，我们就能使用上面的两种特殊情况来拼凑成一般情况下的三角形光栅化算法了，稳！！<br>一下为具体的三角形绘制算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 采用笛卡尔坐标系，下为正y，右为正x</span><br><span class="line">drawTriangle()</span><br><span class="line">&#123;</span><br><span class="line">   /* at first sort the three vertices by y-coordinate ascending so v1 is the topmost vertice */</span><br><span class="line">   /* 第一步将三个点按照y值大小进行排序，确定顶部的第一个点 */</span><br><span class="line">  sortVerticesAscendingByY();</span><br><span class="line"></span><br><span class="line">  /* here we know that v1.y &lt;= v2.y &lt;= v3.y */</span><br><span class="line">  /* 这里默认的是 v1.y &lt;= v2.y &lt;= v3.y */</span><br><span class="line">  /* check for trivial case of bottom-flat triangle */</span><br><span class="line">  /* 这种情况下是一个底部平行于x轴的三角形 */</span><br><span class="line">  if (v2.y == v3.y)</span><br><span class="line">  &#123;</span><br><span class="line">    fillBottomFlatTriangle(v1, v2, v3);</span><br><span class="line">  &#125;</span><br><span class="line">  /* check for trivial case of top-flat triangle */</span><br><span class="line">  /* 这种情况下是一个顶部平行于x轴的三角形 */</span><br><span class="line">  else if (vt1.y == vt2.y)</span><br><span class="line">  &#123;</span><br><span class="line">    fillTopFlatTriangle(g, vt1, vt2, vt3);</span><br><span class="line">  &#125; </span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    /* general case - split the triangle in a topflat and bottom-flat one */</span><br><span class="line">    /* 一般情况下算法 */</span><br><span class="line">    /* 这里默认的是 v1.y &lt;= v2.y &lt;= v3.y */</span><br><span class="line">    /* 所以 第二个点是v2 但是在实际的应用中我们这个需要先对整个点进行排序 */</span><br><span class="line">    Vertice v4 = new Vertice( (int)(vt1.x + ((float)(vt2.y - vt1.y) / (float)(vt3.y - vt1.y)) * (vt3.x - vt1.x)), vt2.y);</span><br><span class="line">    fillBottomFlatTriangle(g, vt1, vt2, v4);</span><br><span class="line">    fillTopFlatTriangle(g, vt2, v4, vt3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Bresenham-三角形光栅化算法"><a href="#Bresenham-三角形光栅化算法" class="headerlink" title="Bresenham 三角形光栅化算法"></a>Bresenham 三角形光栅化算法</h3><h3 id="Barycentric-三角形光栅化算法"><a href="#Barycentric-三角形光栅化算法" class="headerlink" title="Barycentric 三角形光栅化算法"></a>Barycentric 三角形光栅化算法</h3><p>本文主要翻译自<br><a href="http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html" target="_blank" rel="noopener">http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html</a></p><hr><h2 id="原文作者-Chaos"><a href="#原文作者-Chaos" class="headerlink" title="原文作者: Chaos"></a>原文作者: <a href="https://github.com/ChowBu" target="_blank" rel="noopener">Chaos</a></h2><h2 id="原文链接-https-usxstudio-github-io-2018-10-16-E5-85-89-E6-A0-85-E5-8C-96-E5-A1-AB-E5-85-85-E4-B8-89-E8-A7-92-E5-BD-A2-E7-AE-97-E6-B3-95TriangleRasterization"><a href="#原文链接-https-usxstudio-github-io-2018-10-16-E5-85-89-E6-A0-85-E5-8C-96-E5-A1-AB-E5-85-85-E4-B8-89-E8-A7-92-E5-BD-A2-E7-AE-97-E6-B3-95TriangleRasterization" class="headerlink" title="原文链接: https://usxstudio.github.io/2018/10/16/%E5%85%89%E6%A0%85%E5%8C%96%E5%A1%AB%E5%85%85%E4%B8%89%E8%A7%92%E5%BD%A2%E7%AE%97%E6%B3%95TriangleRasterization/"></a>原文链接: <a href="https://usxstudio.github.io/2018/10/16/%E5%85%89%E6%A0%85%E5%8C%96%E5%A1%AB%E5%85%85%E4%B8%89%E8%A7%92%E5%BD%A2%E7%AE%97%E6%B3%95TriangleRasterization/">https://usxstudio.github.io/2018/10/16/%E5%85%89%E6%A0%85%E5%8C%96%E5%A1%AB%E5%85%85%E4%B8%89%E8%A7%92%E5%BD%A2%E7%AE%97%E6%B3%95TriangleRasterization/</a></h2><h2 id="许可协议-知识共享署名-非商业性使用-4-0-国际许可协议"><a href="#许可协议-知识共享署名-非商业性使用-4-0-国际许可协议" class="headerlink" title="许可协议: 知识共享署名-非商业性使用 4.0 国际许可协议"></a>许可协议: <a href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">知识共享署名-非商业性使用 4.0 国际许可协议</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机图形图像 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/10/14/Py004-01-16%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8CEvent/"/>
      <url>/2018/10/14/Py004-01-16%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8CEvent/</url>
      
        <content type="html"><![CDATA[<hr><p>title: Py004-01-16信号量和Event<br>date: 2018-10-13 14:04:20</p><h2 id="tags-M04"><a href="#tags-M04" class="headerlink" title="tags: M04"></a>tags: M04</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量也是一把锁，可以指定信号量为5，对比互斥锁同一时间只能有一个任务抢到锁去执行，信号量同一时间可以有5个任务拿到锁去执行，如果说互斥锁是合租房屋的人去抢一个厕所，那么信号量就相当于一群路人争抢公共厕所，公共厕所有多个坑位，这意味着同一时间可以有多个人上公共厕所，但公共厕所容纳的人数是一定的，这便是信号量的大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread,Semaphore</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    sm.acquire()</span><br><span class="line">    print(&apos;%s 占住了坑位&apos; %threading.current_thread().getName())</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(&apos;%s 解脱了-------------------\n&apos; % threading.current_thread().getName())</span><br><span class="line">    sm.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 公共厕所只有3个坑</span><br><span class="line">    sm=Semaphore(3)</span><br><span class="line"></span><br><span class="line">    # 23个人冲进厕所</span><br><span class="line">    for i in range(23):</span><br><span class="line">        t=Thread(target=func)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread,Semaphore,currentThread</span><br><span class="line">import time,random</span><br><span class="line"></span><br><span class="line"># 公共厕所只有三个坑</span><br><span class="line">sm=Semaphore(3)</span><br><span class="line"></span><br><span class="line">def task():</span><br><span class="line">    with sm:</span><br><span class="line">        print(&apos;%s get 厕所&apos; %currentThread().getName())</span><br><span class="line">        time.sleep(random.randint(1,3))</span><br><span class="line">        print(&apos;%s out 厕所----------\n&apos; % currentThread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Semaphore管理一个内置的计数器，</span><br><span class="line">每当调用acquire()时内置计数器-1；</span><br><span class="line">调用release() 时内置计数器+1；</span><br><span class="line">计数器不能小于0；当计数器为0时，acquire()将阻塞线程直到其他线程调用release()。</span><br></pre></td></tr></table></figure><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p>线程的一个关键特性是每个线程都是独立运行且状态不可预测。</p><p>如果程序中的其 他线程需要通过判断某个线程的状态来确定自己下一步的操作,这时线程同步问题就会变得非常棘手。为了解决这些问题,我们需要使用threading库中的Event对象。 对象包含一个可由线程设置的信号标志,它允许线程等待某些事件的发生。在 初始情况下,Event对象中的信号标志被设置为假。如果有线程等待一个Event对象, 而这个Event对象的标志为假,那么这个线程将会被一直阻塞直至该标志为真。一个线程如果将一个Event对象的信号标志设置为真,它将唤醒所有等待这个Event对象的线程。如果一个线程等待一个已经被设置为真的Event对象,那么它将忽略这个事件, 继续执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from threading import Event</span><br><span class="line"></span><br><span class="line">event.isSet()：返回event的状态值；是否被触发</span><br><span class="line"></span><br><span class="line">event.wait()：如果 event.isSet()==False将阻塞线程；</span><br><span class="line"></span><br><span class="line">event.set()： 设置event的状态值为True，所有阻塞池的线程激活进入就绪状态， 等待操作系统调度；</span><br><span class="line"></span><br><span class="line">event.clear()：恢复event的状态值为False。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/py/py004_01_1601.png" alt=""></p><blockquote><h4 id="上课实例"><a href="#上课实例" class="headerlink" title="上课实例"></a>上课实例</h4></blockquote><p>在高中以下，老师没宣布下课大部分人都会停在座位上。。。佯装上课。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread,Event</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">event=Event()</span><br><span class="line"></span><br><span class="line">def student(name):</span><br><span class="line">    print(&apos;学生%s 正在听课----------&apos; %name)</span><br><span class="line">    event.wait()</span><br><span class="line">    print(&apos;学生%s 下课并开始自由活动--吃鸡吃鸡！！！&apos; %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def teacher(name):</span><br><span class="line">    print(&apos;老师%s 正在授课&apos; %name)</span><br><span class="line">    time.sleep(7)</span><br><span class="line">    event.set()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    stu1=Thread(target=student,args=(&apos;刘备&apos;,))</span><br><span class="line">    stu2=Thread(target=student,args=(&apos;关羽&apos;,))</span><br><span class="line">    stu3=Thread(target=student,args=(&apos;张飞&apos;,))</span><br><span class="line">    t1=Thread(target=teacher,args=(&apos;诸葛&apos;,))</span><br><span class="line"></span><br><span class="line">    stu1.start()</span><br><span class="line">    stu2.start()</span><br><span class="line">    stu3.start()</span><br><span class="line">    t1.start()</span><br><span class="line">    </span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">学生调用 event.wait() 就会一直等待老师 宣布下课（调用event.set()）</span><br><span class="line">所以开始上课后  直到老师 通知下课（event.set()）学生才被释放</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>有木有学生不等老师的情况？</p></blockquote><p>有，大学里   老师讲课学生不会等老师宣布，因为你会逃课</p><blockquote><h4 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h4></blockquote><p>如果20分钟内你不点名，我就走了。。。哈哈哈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># wait能接受参数，单位是秒——超时时间</span><br><span class="line">def student(name):</span><br><span class="line">    print(&apos;学生%s 正在听课----------&apos; %name)</span><br><span class="line">    event.wait(2)</span><br><span class="line">    print(&apos;学生%s 下课并开始自由活动--吃鸡吃鸡！！！&apos; %name)</span><br></pre></td></tr></table></figure><p>例如，有多个工作线程尝试链接MySQL，我们想要在链接前确保MySQL服务正常才让那些工作线程去连接MySQL服务器，如果连接不成功，都会去尝试重新连接。那么我们就可以采用threading.Event机制来协调各个工作线程的连接操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread,Event,currentThread</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">event=Event()</span><br><span class="line"></span><br><span class="line">def conn():</span><br><span class="line">    n=0</span><br><span class="line">    while not event.is_set():</span><br><span class="line">        if n == 3:</span><br><span class="line">            print(&apos;%s try too many times&apos; %currentThread().getName())</span><br><span class="line">            return</span><br><span class="line">        print(&apos;%s try %s&apos; %(currentThread().getName(),n))</span><br><span class="line">        event.wait(0.5)</span><br><span class="line">        n+=1</span><br><span class="line"></span><br><span class="line">    print(&apos;%s is connected&apos; %currentThread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check():</span><br><span class="line">    print(&apos;%s is checking&apos; %currentThread().getName())</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    event.set()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(3):</span><br><span class="line">        t=Thread(target=conn)</span><br><span class="line">        t.start()</span><br><span class="line">    t=Thread(target=check)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><blockquote><p>看看javascript的定时器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(&apos;冲咖啡。。。&apos;)</span><br><span class="line">&#125;,1000)</span><br><span class="line">// 一秒后 执行该函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setInterval(function()&#123;</span><br><span class="line">    console.log(&apos;抢票。。。&apos;)</span><br><span class="line">&#125;,5000)</span><br><span class="line">// 每5秒 看一下出票信息</span><br></pre></td></tr></table></figure><h4 id="python-的定时器，指定n秒后执行某操作"><a href="#python-的定时器，指定n秒后执行某操作" class="headerlink" title="python 的定时器，指定n秒后执行某操作"></a>python 的定时器，指定n秒后执行某操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Timer(延迟时间,执行的函数,args=?,kwargs=?) </span><br><span class="line">支持给 执行函数传递参数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from threading import Timer</span><br><span class="line"></span><br><span class="line">def hello():</span><br><span class="line">    print(&quot;hello, world&quot;)</span><br><span class="line"></span><br><span class="line">t = Timer(1, hello)</span><br><span class="line">t.start()  # after 1 seconds, &quot;hello, world&quot; will be printed</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>es test</title>
      <link href="/2018/10/14/es-test/"/>
      <url>/2018/10/14/es-test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Bresenham 直线算法</title>
      <link href="/2018/10/13/Bresenham-%E7%9B%B4%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
      <url>/2018/10/13/Bresenham-%E7%9B%B4%E7%BA%BF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介Bresenham-算法"><a href="#简介Bresenham-算法" class="headerlink" title="简介Bresenham 算法"></a>简介Bresenham 算法</h3><p>在计算机图形图像中，因为屏幕是一个一个的像素点。所以在屏幕上展示的直线也是一个一个的点组成的，这个很好理解。生活中的电视屏幕，电脑显示屏像素点都比较小，可能不直观，但是我们可以看见户外那些一个个LED灯组成的LED广告牌，就会明白这个事情。Bresenham 算法就是将连续的线段计算为一个个连续的点，然后绘制在屏幕上的。</p><p>事实上Bresenham算法现在应用非常广泛，基于它的改进算法已经应用到很多其他地方，比如画圆，比如硬化到硬件芯片。不过这些都不是我们进行讨论的内容。</p><h3 id="基本的Bresenham算法-原理"><a href="#基本的Bresenham算法-原理" class="headerlink" title="基本的Bresenham算法 原理"></a>基本的Bresenham算法 原理</h3><p>在（x，y）处绘制了一个点，那么很明显下一个点就是（x + 1，y）或：（x + 1，y + 1）。如图所示<br><img src="/2018/10/13/Bresenham-直线算法/./bres1.gif"><br>咋这里我们引入两个参数，用来决定到底选择那个点绘制。<br>第一个参数就是</p><h3 id="Rogers-Bresenham算法"><a href="#Rogers-Bresenham算法" class="headerlink" title="Rogers Bresenham算法"></a>Rogers Bresenham算法</h3><h3 id="整数Bresenham算法"><a href="#整数Bresenham算法" class="headerlink" title="整数Bresenham算法"></a>整数Bresenham算法</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机图形图像 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-18进程池和线程池</title>
      <link href="/2018/10/13/Py004-01-18%E8%BF%9B%E7%A8%8B%E6%B1%A0%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2018/10/13/Py004-01-18%E8%BF%9B%E7%A8%8B%E6%B1%A0%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="进程池与线程池"><a href="#进程池与线程池" class="headerlink" title="进程池与线程池"></a>进程池与线程池</h3><p>在刚开始学多进程或多线程时，我们迫不及待地基于多进程或多线程实现并发的套接字通信，然而这种实现方式的致命缺陷是：服务的开启的进程数或线程数都会随着并发的客户端数目地增多而增多，这会对服务端主机带来巨大的压力，甚至于不堪重负而瘫痪，于是我们必须对服务端开启的进程数或线程数加以控制，让机器在一个自己可以承受的范围内运行，这就是进程池或线程池的用途，例如进程池，就是用来存放进程的池子，本质还是基于多进程，只不过是对开启进程的数目加上了限制</p><blockquote><p>介绍</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">官网：https://docs.python.org/dev/library/concurrent.futures.html</span><br><span class="line"></span><br><span class="line">concurrent.futures模块提供了高度封装的异步调用接口</span><br><span class="line">ThreadPoolExecutor：线程池，提供异步调用</span><br><span class="line">ProcessPoolExecutor: 进程池，提供异步调用</span><br><span class="line">Both implement the same interface, which is defined by the abstract Executor class.</span><br></pre></td></tr></table></figure><blockquote><h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1、submit(fn, *args, **kwargs)</span><br><span class="line">异步提交任务</span><br><span class="line"></span><br><span class="line">2、map(func, *iterables, timeout=None, chunksize=1) </span><br><span class="line">取代for循环submit的操作</span><br><span class="line"></span><br><span class="line">3、shutdown(wait=True) </span><br><span class="line">相当于进程池的pool.close()+pool.join()操作</span><br><span class="line">wait=True，等待池内所有任务执行完毕回收完资源后才继续</span><br><span class="line">wait=False，立即返回，并不会等待池内的任务执行完毕</span><br><span class="line">但不管wait参数为何值，整个程序都会等到所有任务执行完毕</span><br><span class="line">submit和map必须在shutdown之前</span><br><span class="line"></span><br><span class="line">4、result(timeout=None)</span><br><span class="line">取得结果</span><br><span class="line"></span><br><span class="line">5、add_done_callback(fn)</span><br><span class="line">回调函数</span><br></pre></td></tr></table></figure><h4 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h4><blockquote><p>介绍</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The ProcessPoolExecutor class is an Executor subclass that uses a pool of processes to execute calls asynchronously. ProcessPoolExecutor uses the multiprocessing module, which allows it to side-step the Global Interpreter Lock but also means that only picklable objects can be executed and returned.</span><br><span class="line"></span><br><span class="line">class concurrent.futures.ProcessPoolExecutor(max_workers=None, mp_context=None)</span><br><span class="line">An Executor subclass that executes calls asynchronously using a pool of at most max_workers processes. If max_workers is None or not given, it will default to the number of processors on the machine. If max_workers is lower or equal to 0, then a ValueError will be raised.</span><br></pre></td></tr></table></figure><blockquote><p>用法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from concurrent.futures import ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line">import os,time,random</span><br><span class="line">def task(n):</span><br><span class="line">    print(&apos;%s is runing&apos; %os.getpid())</span><br><span class="line">    time.sleep(random.randint(1,3))</span><br><span class="line">    return n**2</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 设置开启进程的最大数量</span><br><span class="line">    executor=ProcessPoolExecutor(max_workers=3)</span><br><span class="line"></span><br><span class="line">    futures=[]</span><br><span class="line">    # 虽然循环里会开10个进程，但是进程池里最多3 其他的进程就会等着——从始至终池子里最多有三个进程</span><br><span class="line">    for i in range(10):</span><br><span class="line">        # 异步提交任务(只触发任务开启，不等待结果)</span><br><span class="line">        future=executor.submit(task,i)</span><br><span class="line">        futures.append(future)</span><br><span class="line">    # 主进程等待所有子进程的任务都完毕在结束——join操作</span><br><span class="line">    # 这时要设置 shutdown(True) or shutdown(wait=True)</span><br><span class="line">    executor.shutdown(True)</span><br><span class="line">    print(&apos;+++&gt;&apos;)</span><br><span class="line">    for future in futures:</span><br><span class="line">        print(future.result())</span><br></pre></td></tr></table></figure><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><blockquote><p>介绍</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor is an Executor subclass that uses a pool of threads to execute calls asynchronously.</span><br><span class="line">class concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix=&apos;&apos;)</span><br><span class="line">An Executor subclass that uses a pool of at most max_workers threads to execute calls asynchronously.</span><br><span class="line"></span><br><span class="line">Changed in version 3.5: If max_workers is None or not given, it will default to the number of processors on the machine, multiplied by 5, assuming that ThreadPoolExecutor is often used to overlap I/O instead of CPU work and the number of workers should be higher than the number of workers for ProcessPoolExecutor.</span><br><span class="line"></span><br><span class="line">New in version 3.6: The thread_name_prefix argument was added to allow users to control the threading.Thread names for worker threads created by the pool for easier debugging.</span><br></pre></td></tr></table></figure><blockquote><p>用法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把ProcessPoolExecutor换成ThreadPoolExecutor，其余用法全部相同</span><br></pre></td></tr></table></figure><h4 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from concurrent.futures import ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line">import os,time,random</span><br><span class="line">def task(n):</span><br><span class="line">    print(&apos;%s is runing&apos; %os.getpid())</span><br><span class="line">    time.sleep(random.randint(1,3))</span><br><span class="line">    return n**2</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    executor=ThreadPoolExecutor(max_workers=3)</span><br><span class="line"></span><br><span class="line">    # for i in range(11):</span><br><span class="line">    #     future=executor.submit(task,i)</span><br><span class="line"></span><br><span class="line">    gg = executor.map(task,range(1,12)) #map取代了for+submit</span><br><span class="line">    # gg是个生成器 里面存放task返回的结果</span><br><span class="line">    for res in gg:</span><br><span class="line">        print(res)</span><br></pre></td></tr></table></figure><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>可以为进程池或线程池内的每个进程或线程绑定一个函数，该函数在进程或线程的任务执行完毕后自动触发，并接收任务的返回值当作参数，该函数称为回调函数</p><ul><li>add_done_callback(callback)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def get(url):</span><br><span class="line">    print(&apos;GET %s&apos; %url)</span><br><span class="line">    response=requests.get(url)</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    return &#123;&apos;url&apos;:url,&apos;content&apos;:response.text&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse(res):</span><br><span class="line">    res=res.result()</span><br><span class="line">    print(&apos;%s parse res is %s&apos; %(res[&apos;url&apos;],len(res[&apos;content&apos;])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    urls=[</span><br><span class="line">        &apos;http://www.cnblogs.com/linhaifeng&apos;,</span><br><span class="line">        &apos;https://www.python.org&apos;,</span><br><span class="line">        &apos;https://www.openstack.org&apos;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    pool=ThreadPoolExecutor(2)</span><br><span class="line"></span><br><span class="line">    for url in urls:</span><br><span class="line">        pool.submit(get,url).add_done_callback(parse)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from concurrent.futures import ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def get_page(url):</span><br><span class="line">    print(&apos;&lt;进程%s&gt; get %s&apos; %(os.getpid(),url))</span><br><span class="line">    respone=requests.get(url)</span><br><span class="line">    if respone.status_code == 200:</span><br><span class="line">        return &#123;&apos;url&apos;:url,&apos;text&apos;:respone.text&#125;</span><br><span class="line"></span><br><span class="line">def parse_page(res):</span><br><span class="line">    res=res.result()</span><br><span class="line">    print(&apos;&lt;进程%s&gt; parse %s&apos; %(os.getpid(),res[&apos;url&apos;]))</span><br><span class="line">    parse_res=&apos;url:&lt;%s&gt; size:[%s]\n&apos; %(res[&apos;url&apos;],len(res[&apos;text&apos;]))</span><br><span class="line">    with open(&apos;db.txt&apos;,&apos;a&apos;) as f:</span><br><span class="line">        f.write(parse_res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    urls=[</span><br><span class="line">        &apos;https://www.baidu.com&apos;,</span><br><span class="line">        &apos;https://www.python.org&apos;,</span><br><span class="line">        &apos;https://www.openstack.org&apos;,</span><br><span class="line">        &apos;https://help.github.com/&apos;,</span><br><span class="line">        &apos;http://www.sina.com.cn/&apos;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    p=ThreadPoolExecutor(3)</span><br><span class="line">    for url in urls:</span><br><span class="line">        p.submit(get_page,url).add_done_callback(parse_page) #parse_page拿到的是一个future对象obj，需要用obj.result()拿到结果</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-17线程queue</title>
      <link href="/2018/10/13/Py004-01-17%E7%BA%BF%E7%A8%8Bqueue/"/>
      <url>/2018/10/13/Py004-01-17%E7%BA%BF%E7%A8%8Bqueue/</url>
      
        <content type="html"><![CDATA[<h3 id="线程queue"><a href="#线程queue" class="headerlink" title="线程queue"></a>线程queue</h3><p>queue is especially useful in threaded programming when information must be exchanged safely between multiple threads.</p><blockquote><p>有三种不同的用法</p></blockquote><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>class queue.Queue(maxsize=0) #队列：先进先出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q=queue.Queue()</span><br><span class="line">q.put(&apos;first&apos;)</span><br><span class="line">q.put(&apos;second&apos;)</span><br><span class="line">q.put(&apos;third&apos;)</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"># print(q.get()) 只put三次 但是get第四次就会阻塞了 队列里就三个。怎么可能取到第四个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">结果(先进先出):</span><br><span class="line">first</span><br><span class="line">second</span><br><span class="line">third</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"># 队列限制数量</span><br><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q2=queue.Queue(3)</span><br><span class="line">q2.put(&apos;first&apos;)</span><br><span class="line">q2.put(&apos;second&apos;)</span><br><span class="line">q2.put(&apos;third&apos;)</span><br><span class="line"></span><br><span class="line"># 这样队列满了就阻塞 默认阻塞</span><br><span class="line">q2.put(4) # 等价于 q2.put(4,block=True) </span><br><span class="line"># q2.put(4,block=True,timeout=3)  # 3秒内没人把值取走 也报错</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q3=queue.Queue(3)</span><br><span class="line">q3.put(&apos;first&apos;)</span><br><span class="line">q3.put(&apos;second&apos;)</span><br><span class="line">q3.put(&apos;third&apos;)</span><br><span class="line"></span><br><span class="line"># 这样队列满了就不阻塞 于是报错</span><br><span class="line">q3.put(4,block=False) # 报错 queue.Full</span><br><span class="line"># 同样效果的不等待</span><br><span class="line"># q3.put_nowait(4)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------</span><br><span class="line"># 取值的时候设置超时时间 超过就报错</span><br><span class="line">q3.get(block=True,timeout=3)</span><br></pre></td></tr></table></figure><h4 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h4><blockquote><p>class queue.LifoQueue(maxsize=0) #堆栈：last in fisrt out（后进先出）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q=queue.LifoQueue()</span><br><span class="line">q.put(&apos;first&apos;)</span><br><span class="line">q.put(&apos;second&apos;)</span><br><span class="line">q.put(&apos;third&apos;)</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">结果(后进先出):</span><br><span class="line">third</span><br><span class="line">second</span><br><span class="line">first</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h4><blockquote><p>class queue.PriorityQueue(maxsize=0) #优先级队列：存储数据时可设置优先级的队列</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q=queue.PriorityQueue()</span><br><span class="line">#put进入一个元组,元组的第一个元素是优先级(通常是数字,也可以是非数字之间的比较),数字越小优先级越高</span><br><span class="line">q.put((20,&apos;a&apos;))</span><br><span class="line">q.put((10,&apos;b&apos;))</span><br><span class="line">q.put((30,&apos;c&apos;))</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">结果(数字越小优先级越高,优先级高的优先出队):</span><br><span class="line">(10, &apos;b&apos;)</span><br><span class="line">(20, &apos;a&apos;)</span><br><span class="line">(30, &apos;c&apos;)</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-15死锁和递归锁</title>
      <link href="/2018/10/13/Py004-01-15%E6%AD%BB%E9%94%81%E5%92%8C%E9%80%92%E5%BD%92%E9%94%81/"/>
      <url>/2018/10/13/Py004-01-15%E6%AD%BB%E9%94%81%E5%92%8C%E9%80%92%E5%BD%92%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="死锁现象"><a href="#死锁现象" class="headerlink" title="死锁现象"></a>死锁现象</h3><blockquote><p>所谓死锁： </p></blockquote><p>是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程，如下就是死锁</p><blockquote><p>通俗的讲:</p></blockquote><p>就是你和你同事回家时拿错了彼此的钥匙，于是俩人都开不了门。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread,Lock</span><br><span class="line">import time</span><br><span class="line">mutexA=Lock()</span><br><span class="line">mutexB=Lock()</span><br><span class="line"></span><br><span class="line">class MyThread(Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        self.func1()</span><br><span class="line">        self.func2()</span><br><span class="line">    def func1(self):</span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(&apos;\033[41m%s 拿到A锁\033[0m&apos; %self.name)</span><br><span class="line"></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(&apos;\033[42m%s 拿到B锁\033[0m&apos; %self.name)</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">    def func2(self):</span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(&apos;\033[43m%s 拿到B锁\033[0m&apos; %self.name)</span><br><span class="line">        time.sleep(2)</span><br><span class="line"></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(&apos;\033[44m%s 拿到A锁\033[0m&apos; %self.name)</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        t=MyThread()</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><p>执行效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread-1 拿到A锁</span><br><span class="line">Thread-1 拿到B锁</span><br><span class="line">Thread-1 拿到B锁</span><br><span class="line">Thread-2 拿到A锁</span><br><span class="line">#出现死锁，整个程序阻塞住</span><br></pre></td></tr></table></figure><h4 id="递归锁"><a href="#递归锁" class="headerlink" title="递归锁"></a>递归锁</h4><p>解决方法，递归锁，在Python中为了支持在同一线程中多次请求同一资源，python提供了可重入锁RLock。</p><p>这个RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次require。直到一个线程所有的acquire都被release，其他的线程才能获得资源。上面的例子如果使用RLock代替Lock，则不会发生死锁，二者的区别是：递归锁可以连续acquire多次，而互斥锁只能acquire一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread,RLock</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">mutexA=mutexB=RLock() #一个线程拿到锁，counter加1,该线程内又碰到加锁的情况，则counter继续加1，这期间所有其他线程都只能等待，等待该线程释放所有锁，即counter递减到0为止</span><br><span class="line"></span><br><span class="line">class MyThread(Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        self.func1()</span><br><span class="line">        self.func2()</span><br><span class="line">    def func1(self):</span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(&apos;\033[41m%s 拿到A锁\033[0m&apos; %self.name)</span><br><span class="line"></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(&apos;\033[42m%s 拿到B锁\033[0m&apos; %self.name)</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">    def func2(self):</span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(&apos;\033[43m%s 拿到B锁\033[0m&apos; %self.name)</span><br><span class="line">        time.sleep(2)</span><br><span class="line"></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(&apos;\033[44m%s 拿到A锁\033[0m&apos; %self.name)</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        t=MyThread()</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><p>非常像堆栈操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">问索引2的左括号对应的右括号在哪？</span><br><span class="line">(((((()()()())))(()))())</span><br><span class="line"></span><br><span class="line">( ==&gt; +1</span><br><span class="line">) ==&gt; -1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Aileen</title>
      <link href="/2018/10/12/Aileen/"/>
      <url>/2018/10/12/Aileen/</url>
      
        <content type="html"><![CDATA[<h1 id="my-daughter"><a href="#my-daughter" class="headerlink" title="my daughter"></a>my daughter</h1><p> 游山南寺二首</p><p>作者：殷尧藩</p><p>山中尽日无人到，竹外交加百鸟鸣。<br>昨日小楼微雨过，樱桃花落晚风晴。<br>踏碎羊山黄叶堆，天飞细雨隐轻雷。<br>朗陵莫讶来何晚，不忍听君话别杯</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>hexo commands</title>
      <link href="/2018/10/12/hexo-commands/"/>
      <url>/2018/10/12/hexo-commands/</url>
      
        <content type="html"><![CDATA[<h2 id="title-Commands"><a href="#title-Commands" class="headerlink" title="title: Commands"></a>title: Commands</h2><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>Initializes a website. If no <code>folder</code> is provided, Hexo will set up the website in the current directory.</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>Creates a new article. If no <code>layout</code> is provided, Hexo will use the <code>default_layout</code> from <a href="configuration.html">_config.yml</a>. If the <code>title</code> contains spaces, surround it with quotation marks.</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>Generates static files.</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>Deploy after generation finishes</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>Watch file changes</td></tr><tr><td><code>-b</code>, <code>--bail</code></td><td>Raise an error if any unhandled exception is thrown during generation</td></tr><tr><td><code>-f</code>, <code>--force</code></td><td>Force regenerate</td></tr></tbody></table><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>Publishes a draft.</p><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p>直接删除source/_post 内对应的 .md 文章即可</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>Starts a local server. By default, this is at <code>http://localhost:4000/</code>.</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>Override default port</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>Only serve static files</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>Enable logger. Override logger format.</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>Deploys your website.</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>Generate before deployment</td></tr></tbody></table><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>Renders files.</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>Output destination</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><p><a href="migration.html">Migrates</a> content from other blog systems.</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>Cleans the cache file (<code>db.json</code>) and generated files (<code>public</code>).</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><p>Lists all routes.</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>Displays version information.</p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><h3 id="Safe-mode"><a href="#Safe-mode" class="headerlink" title="Safe mode"></a>Safe mode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p>Disables loading plugins and scripts. Try this if you encounter problems after installing a new plugin.</p><h3 id="Debug-mode"><a href="#Debug-mode" class="headerlink" title="Debug mode"></a>Debug mode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>Logs verbose messages to the terminal and to <code>debug.log</code>. Try this if you encounter any problems with Hexo. If you see errors, please <a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="noopener">raise a GitHub issue</a>.</p><h3 id="Silent-mode"><a href="#Silent-mode" class="headerlink" title="Silent mode"></a>Silent mode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><p>Silences output to the terminal.</p><h3 id="Customize-config-file-path"><a href="#Customize-config-file-path" class="headerlink" title="Customize config file path"></a>Customize config file path</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure><p>Uses a custom config file (instead of <code>_config.yml</code>). Also accepts a comma-separated list (no spaces) of JSON or YAML config files that will combine the files into a single <code>_multiconfig.yml</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --config custom.yml,custom2.json</span><br></pre></td></tr></table></figure><h3 id="Display-drafts"><a href="#Display-drafts" class="headerlink" title="Display drafts"></a>Display drafts</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><p>Displays draft posts (stored in the <code>source/_drafts</code> folder).</p><h3 id="Customize-CWD"><a href="#Customize-CWD" class="headerlink" title="Customize CWD"></a>Customize CWD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure><p>Customizes the path of current working directory.</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Cactus-guide</title>
      <link href="/2018/10/12/Cactus-guide/"/>
      <url>/2018/10/12/Cactus-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="Cactus"><a href="#Cactus" class="headerlink" title="Cactus"></a>Cactus</h1><p>A responsive, clean and simple <a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a> theme for a personal website.</p><p>:cactus: <a href="https://probberechts.github.io/hexo-theme-cactus/" target="_blank" rel="noopener">Demo</a></p><p><img src="https://docs.google.com/uc?id=1K66bccwr4z9TgJev0AzCqbI7BxzVr7md" alt="screenshot"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul><li><a href="#general">General</a></li><li><a href="#features">Features</a></li><li><a href="#install">Install</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#license">License</a></li></ul><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><ul><li><strong>Version</strong> : 3.0</li><li><strong>Compatibility</strong> : Hexo 3 or later</li></ul><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>Fully responsive</li><li>Multiple color schemes</li><li>Pick your own code highlighting scheme</li><li>Configurable navigation menu</li><li>Support for local search</li><li>Projects list</li><li>I18n support</li><li>Disqus integration</li><li>Google analytics / Baidu Tongji</li><li>Font Awesome icons</li><li>Simplicity</li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ol><li><p>In the <code>root</code> directory:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/probberechts/hexo-theme-cactus.git themes/cactus</span><br></pre></td></tr></table></figure></li><li><p>Change the <code>theme</code> property in the <code>config.yml</code> file.</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">cactus</span></span><br></pre></td></tr></table></figure></li><li><p>Run: <code>hexo generate</code> and <code>hexo server</code></p></li></ol><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>You can (and should) modify a couple of settings. An overview of all settings<br>can be found in  <a href="_config.yml">_config.yml</a>. The most important ones are<br>discussed below.</p><p>There are two possible methods to override these variables. As a first option,<br>you could fork the theme and maintain a custom branch with your settings.<br>Alternatively, you can configure it from your site’s primary configuration<br>file. Therefore, define you custom settings under the <code>theme_config</code> variable.<br>For example:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">theme_config:</span></span><br><span class="line"><span class="attr">  colorscheme:</span> <span class="string">white</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># themes/cactus/_config.yml</span></span><br><span class="line"><span class="attr">colorscheme:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><p>This will result in the white color scheme.</p><h3 id="Color-scheme"><a href="#Color-scheme" class="headerlink" title="Color scheme"></a>Color scheme</h3><p>Currently, this theme is delivered with four color schemes: <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-dark/public/" target="_blank" rel="noopener">dark</a>, <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-light/public/" target="_blank" rel="noopener">light</a>,<br><a href="https://probberechts.github.io/hexo-theme-cactus/cactus-white/public/" target="_blank" rel="noopener">white</a> and <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-classic/public/" target="_blank" rel="noopener">classic</a>. Set your preferred color scheme in the <code>_config.yml</code> file.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">colorscheme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><p>Alternatively, you can easily create your own color scheme by creating a new<br>file in <code>source/css/_colors</code>.</p><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><p>Setup the navigation menu in the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line"><span class="attr">  Home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  About:</span> <span class="string">/about/</span></span><br><span class="line"><span class="attr">  Writing:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">  Projects:</span> <span class="attr">http://github.com/probberechts</span></span><br><span class="line"><span class="attr">  LINK_NAME:</span> <span class="string">URL</span></span><br></pre></td></tr></table></figure><h3 id="Blog-posts-list-on-home-page"><a href="#Blog-posts-list-on-home-page" class="headerlink" title="Blog posts list on home page"></a>Blog posts list on home page</h3><p>You have two options for the list of blog posts on the home page:</p><ul><li><p>Show only the 5 most recent posts (default)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">posts_overview:</span></span><br><span class="line"><span class="attr">  show_all_posts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  post_count:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>Show all posts</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">posts_overview:</span></span><br><span class="line"><span class="attr">  show_all_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Projects-list"><a href="#Projects-list" class="headerlink" title="Projects list"></a>Projects list</h3><p>Create a projects file <code>source/_data/projects.json</code> to show a list of your projects on the index page.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="attr">"name"</span>:<span class="string">"Hexo"</span>,</span><br><span class="line">       <span class="attr">"url"</span>:<span class="string">"https://hexo.io/"</span>,</span><br><span class="line">       <span class="attr">"desc"</span>:<span class="string">"A fast, simple &amp; powerful blog framework"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="attr">"name"</span>:<span class="string">"Font Awesome"</span>,</span><br><span class="line">       <span class="attr">"url"</span>:<span class="string">"http://fontawesome.io/"</span>,</span><br><span class="line">       <span class="attr">"desc"</span>:<span class="string">"The iconic font and CSS toolkit"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Social-media-links"><a href="#Social-media-links" class="headerlink" title="Social media links"></a>Social media links</h3><p>Cactus can automatically add links to your social media accounts.<br>Therefore, update the theme’s <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social_links:</span></span><br><span class="line"><span class="attr">  github:</span> <span class="string">your-github-url</span></span><br><span class="line"><span class="attr">  twitter:</span> <span class="string">your-twitter-url</span></span><br><span class="line"><span class="attr">  NAME:</span> <span class="string">your-NAME-url</span></span><br></pre></td></tr></table></figure><p>where <code>NAME</code> is the name of a <a href="https://fontawesome.com/icons?d=gallery&amp;s=brands" target="_blank" rel="noopener">Font Awesome icon</a>.</p><h3 id="Language-configuration"><a href="#Language-configuration" class="headerlink" title="Language configuration"></a>Language configuration</h3><p>If you are new to Hexo and internationalization (i18n), please read<br><a href="https://hexo.io/docs/internationalization.html" target="_blank" rel="noopener">Hexo documentation - internationalization (i18n) section</a></p><p>Currently, the theme is delivered with support for:</p><ul><li>English (en), default</li><li>Chinese (Simplified, PRC) (zh-CN)</li><li>Dutch (nl)</li><li>French (fr)</li><li>Persian (fa)</li><li>Russian (ru)</li><li>Spanish (es)</li></ul><p>If you would like to use one the languages listed above, simply set <code>language</code><br>to the desired language (e.g., <code>fr</code>) in <code>_config.yml</code>.<br>Otherwise, you can follow the steps below (E.g., to add a Japanese (ja) translation):</p><ol><li>Set <code>language</code> to <code>ja</code> in Hexo configuration file <code>_config.yml</code></li><li>Create a <code>ja.yml</code> file in the <code>themes/cactus/languages/</code> folder</li><li>Copy the content of <code>themes/cactus/languages/default.yml</code> and paste it it into the <code>ja.yml</code> file</li><li>Replace all English strings by their Japanese translation</li></ol><p><strong>Note: Cactus does not support multi-language sites.</strong></p><h3 id="RTL-support"><a href="#RTL-support" class="headerlink" title="RTL support"></a>RTL support</h3><p>This theme support RTL languages for Persian and Arabic language.<br>If you would like to use RTL layout, change <code>direction</code> attribute in <code>_config.yml</code> to <code>rtl</code>.<br>Note that this also will change the font to <a href="https://github.com/rastikerdar/vazir-font" target="_blank" rel="noopener">Vazir</a>, wich is a Persian font.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">direction: rtl</span><br></pre></td></tr></table></figure><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>Set the <code>rss</code> field in the <code>_config.yml</code> to one of the following values:</p><ol><li><code>rss: false</code> will totally disable rss (default).</li><li><code>rss: atom.xml</code> sets a specific feed link.</li><li><code>rss:</code>leave empty to use the <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> plugin.</li></ol><h3 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h3><p>Add you Google Analytics or Baidu Tongji <code>tracking_id</code> to the <code>_config.yml</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">'UA-49627206-1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">baidu_analytics:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span> <span class="number">2e6</span><span class="string">da3c375c8a87f5b664cea6d4cb29c</span></span><br></pre></td></tr></table></figure><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>First, create a site on Disqus: <a href="http://disqus.com/admin/create/" target="_blank" rel="noopener">https://disqus.com/admin/create/</a>.</p><p>Next, update the <code>_config.yml</code> file:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">SITENAME</span></span><br></pre></td></tr></table></figure><p>where <code>SITENAME</code> is the name you gave your site on Disqus.</p><h3 id="Code-Highlighting"><a href="#Code-Highlighting" class="headerlink" title="Code Highlighting"></a>Code Highlighting</h3><p>Pick one of <a href="https://github.com/probberechts/hexo-theme-cactus/tree/master/source/css/_highlight" target="_blank" rel="noopener">the available colorschemes</a> and add it to the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span> <span class="string">COLORSCHEME_NAME</span></span><br></pre></td></tr></table></figure><h3 id="Local-search"><a href="#Local-search" class="headerlink" title="Local search"></a>Local search</h3><p>First, install the <a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="noopener">hexo-generate-search</a><br>plugin, which will generate a search index file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>Next, create a page to display the search engine:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page Search</span><br></pre></td></tr></table></figure><p>and put <code>search: true</code> in the front-matter.</p><p>Finally, edit the <code>_config.yml</code> and add a link to the navigation menu.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line"><span class="attr">  search:</span> <span class="string">/Search/</span></span><br></pre></td></tr></table></figure><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Py004-01-14GIL全局解释器锁</title>
      <link href="/2018/10/11/Py004-01-14GIL%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81/"/>
      <url>/2018/10/11/Py004-01-14GIL%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="GIL全局解释器锁"><a href="#GIL全局解释器锁" class="headerlink" title="GIL全局解释器锁"></a>GIL全局解释器锁</h3><p>本质就是一个互斥锁</p><blockquote><p>引子</p></blockquote><p>定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple </span><br><span class="line">native threads from executing Python bytecodes at once. This lock is necessary mainly </span><br><span class="line">because CPython’s memory management is not thread-safe. (However, since the GIL </span><br><span class="line">exists, other features have grown to depend on the guarantees that it enforces.)</span><br><span class="line"></span><br><span class="line">结论：在Cpython解释器中，同一个进程下开启的多线程，同一时刻只能有一个线程执行，无法利用多核优势</span><br></pre></td></tr></table></figure></p><blockquote><p>首先需要明确的一点是GIL并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。&gt;有名的编译器例如GCC，INTEL C++，Visual C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把GIL归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL</p></blockquote><h4 id="GIL介绍"><a href="#GIL介绍" class="headerlink" title="GIL介绍"></a>GIL介绍</h4><p>GIL本质就是一把互斥锁，既然是互斥锁，所有互斥锁的本质都一样，都是将并发运行变成串行，以此来控制同一时间内共享数据只能被一个任务所修改，进而保证数据安全。</p><p>可以肯定的一点是：保护不同的数据的安全，就应该加不同的锁。</p><p>要想了解GIL，首先确定一点：每次执行python程序，都会产生一个独立的进程。例如python test.py，python aaa.py，python bbb.py会产生3个不同的python进程</p><blockquote><p>验证python test.py只会产生一个进程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#test.py内容</span><br><span class="line">import os,time</span><br><span class="line">print(os.getpid())</span><br><span class="line">time.sleep(1000)</span><br><span class="line"></span><br><span class="line">#打开终端执行</span><br><span class="line">python3 test.py</span><br><span class="line"></span><br><span class="line">#在windows下查看</span><br><span class="line">tasklist |findstr python</span><br><span class="line"></span><br><span class="line">#在linux下下查看</span><br><span class="line">ps aux |grep python</span><br></pre></td></tr></table></figure><p>在一个python的进程内，不仅有test.py的主线程或者由该主线程开启的其他线程，还有解释器开启的垃圾回收等解释器级别的线程，总之，所有线程都运行在这一个进程内，毫无疑问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、所有数据都是共享的，这其中，代码作为一种数据也是被所有线程共享的（test.py的所有代码以及Cpython解释器的所有代码）</span><br><span class="line">例如：test.py定义一个函数work（代码内容如下图），在进程内所有线程都能访问到work的代码，于是我们可以开启三个线程然后target都指向该代码，能访问到意味着就是可以执行。</span><br><span class="line"></span><br><span class="line">2、所有线程的任务，都需要将任务的代码当做参数传给解释器的代码去执行，即所有的线程要想运行自己的任务，首先需要解决的是能够访问到解释器的代码。</span><br></pre></td></tr></table></figure><p>综上：</p><p>如果多个线程的target=work，那么执行流程是</p><p>多个线程先访问到解释器的代码，即拿到执行权限，然后将target的代码交给解释器的代码去执行</p><blockquote><p>解释器的代码是所有线程共享的，所以垃圾回收线程也可能访问到解释器的代码而去执行，这就导致了一个问题:对于同一个数据100，可能线程1执行x=100的同时，而垃圾回收执行的是回收100的操作，解决这种问题没有什么高明的方法，就是加锁处理，如下图的GIL，保证python解释器同一时间只能执行一个任务的代码三 </p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/py/py004_01_1401.png" alt=""></p><h4 id="GIL与Lock"><a href="#GIL与Lock" class="headerlink" title="GIL与Lock"></a>GIL与Lock</h4><p>机智的同学可能会问到这个问题：Python已经有一个GIL来保证同一时间只能有一个线程来执行了，为什么这里还需要lock?</p><p>首先，我们需要达成共识：锁的目的是为了保护共享的数据，同一时间只能有一个线程来修改共享的数据</p><p>然后，我们可以得出结论：保护不同的数据就应该加不同的锁。</p><p>最后，问题就很明朗了，GIL 与Lock是两把锁，保护的数据不一样，前者是解释器级别的（当然保护的就是解释器级别的数据，比如垃圾回收的数据），后者是保护用户自己开发的应用程序的数据，很明显GIL不负责这件事，只能用户自定义加锁处理，即Lock，如下图</p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/py/py004_01_1402.png" alt=""></p><p>分析：</p><ol><li>100个线程去抢GIL锁，即抢执行权限</li><li>肯定有一个线程先抢到GIL（暂且称为线程1），然后开始执行，一旦执行就会拿到lock.acquire()</li><li>极有可能线程1还未运行完毕，就有另外一个线程2抢到GIL，然后开始运行，但线程2发现互斥锁lock还未被线程1释放，于是阻塞，被迫交出执行权限，即释放GIL</li><li>直到线程1重新抢到GIL，开始从上次暂停的位置继续执行，直到正常释放互斥锁lock，然后其他的线程再重复2 3 4的过程</li></ol><p>代码示范</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread,Lock</span><br><span class="line">import os,time</span><br><span class="line">def` work():</span><br><span class="line">    global n</span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    n=temp-1</span><br><span class="line">    lock.release()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    n=100</span><br><span class="line">    l=[]</span><br><span class="line">    for i in range(100):</span><br><span class="line">        p=Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    for p in l:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(n) #结果肯定为0，由原来的并发执行变成串行，牺牲了执行效率保证了数据安全，不加锁则结果可能为99</span><br></pre></td></tr></table></figure><h4 id="GIL与多线程"><a href="#GIL与多线程" class="headerlink" title="GIL与多线程"></a>GIL与多线程</h4><p>有了GIL的存在，同一时刻同一进程中只有一个线程被执行</p><p>听到这里，有的同学立马质问：进程可以利用多核，但是开销大，而python的多线程开销小，但却无法利用多核优势，也就是说python没用了，php才是最牛逼的语言？</p><p>别着急啊，老娘还没讲完呢。</p><blockquote><p>要解决这个问题，我们需要在几个点上达成一致：</p></blockquote><ol><li><p>cpu到底是用来做计算的，还是用来做I/O的？</p></li><li><p>多cpu，意味着可以有多个核并行完成计算，所以多核提升的是计算性能</p></li><li><p>每个cpu一旦遇到I/O阻塞，仍然需要等待，所以多核对I/O操作没什么用处</p></li></ol><p>一个工人相当于cpu，此时计算相当于工人在干活，I/O阻塞相当于为工人干活提供所需原材料的过程，工人干活的过程中如果没有原材料了，则工人干活的过程需要停止，直到等待原材料的到来。</p><p>如果你的工厂干的大多数任务都要有准备原材料的过程（I/O密集型），那么你有再多的工人，意义也不大，还不如一个人，在等材料的过程中让工人去干别的活，</p><p>反过来讲，如果你的工厂原材料都齐全，那当然是工人越多，效率越高</p><blockquote><p>结论：</p></blockquote><ol><li>对计算来说，cpu越多越好，但是对于I/O来说，再多的cpu也没用</li><li>当然对运行一个程序来说，随着cpu的增多执行效率肯定会有所提高（不管提高幅度多大，总会有所提高），这是因为一个程序基本上不会是纯计算或者纯I/O，所以我们只能相对的去看一个程序到底是计算密集型还是I/O密集型，从而进一步分析python的多线程到底有无用武之地</li></ol><blockquote><p>假设我们有四个任务需要处理，处理方式肯定是要玩出并发的效果，解决方案可以是：</p></blockquote><p>方案一：开启四个进程<br>方案二：一个进程下，开启四个线程</p><blockquote><p>单核情况下，分析结果:</p></blockquote><p>如果四个任务是计算密集型，没有多核来并行计算，方案一徒增了创建进程的开销，方案二胜<br>如果四个任务是I/O密集型，方案一创建进程的开销大，且进程的切换速度远不如线程，方案二胜</p><blockquote><p>多核情况下，分析结果：</p></blockquote><p>如果四个任务是计算密集型，多核意味着并行计算，在python中一个进程中同一时刻只有一个线程执行用不上多核，方案一胜<br>如果四个任务是I/O密集型，再多的核也解决不了I/O问题，方案二胜</p><blockquote><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4></blockquote><p>现在的计算机基本上都是多核，python对于计算密集型的任务开多线程的效率并不能带来多大性能上的提升，甚至不如串行(没有大量切换)，但是，对于IO密集型的任务效率还是有显著提升的。</p><h4 id="多线程性能测试"><a href="#多线程性能测试" class="headerlink" title="多线程性能测试"></a>多线程性能测试</h4><p>如果并发的多个任务是计算密集型：多进程效率高<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">from threading import Thread</span><br><span class="line">import os,time</span><br><span class="line">def work():</span><br><span class="line">    res=0</span><br><span class="line">    for i in range(100000000):</span><br><span class="line">        res*=i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    l=[]</span><br><span class="line">    print(os.cpu_count()) #本机为4核</span><br><span class="line">    start=time.time()</span><br><span class="line">    for i in range(4):</span><br><span class="line">        p=Process(target=work) #耗时5s多</span><br><span class="line">        p=Thread(target=work) #耗时18s多</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    for p in l:</span><br><span class="line">        p.join()</span><br><span class="line">    stop=time.time()</span><br><span class="line">    print(&apos;run time is %s&apos; %(stop-start))</span><br></pre></td></tr></table></figure></p><p>如果并发的多个任务是I/O密集型：多线程效率高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">from threading import Thread</span><br><span class="line">import threading</span><br><span class="line">import os,time</span><br><span class="line">def work():</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&apos;===&gt;&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    l=[]</span><br><span class="line">    print(os.cpu_count()) #本机为4核</span><br><span class="line">    start=time.time()</span><br><span class="line">    for i in range(400):</span><br><span class="line">        # p=Process(target=work) #耗时12s多,大部分时间耗费在创建进程上</span><br><span class="line">        p=Thread(target=work) #耗时2s多</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    for p in l:</span><br><span class="line">        p.join()</span><br><span class="line">    stop=time.time()</span><br><span class="line">    print(&apos;run time is %s&apos; %(stop-start))</span><br></pre></td></tr></table></figure><blockquote><p>应用：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多线程用于IO密集型，如socket，爬虫，web</span><br><span class="line">多进程用于计算密集型，如金融分析</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-13互斥锁</title>
      <link href="/2018/10/11/Py004-01-13%E4%BA%92%E6%96%A5%E9%94%81/"/>
      <url>/2018/10/11/Py004-01-13%E4%BA%92%E6%96%A5%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>多线程下操作同一数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from threading import Thread</span><br><span class="line"></span><br><span class="line">n = 100</span><br><span class="line"></span><br><span class="line">def task():</span><br><span class="line">    global n</span><br><span class="line">    temp = n</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    n = temp-1</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    arr = []</span><br><span class="line">    for i in range(100):</span><br><span class="line">        t = Thread(target=task)</span><br><span class="line">        arr.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    # 保证所有线程都执行完毕</span><br><span class="line">    for t in arr:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    print(&apos;主&apos;,n)</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">主 99</span><br></pre></td></tr></table></figure><p>此时就不安全了，100个线程都操作了但是数据还是99</p><h4 id="互斥锁的应用"><a href="#互斥锁的应用" class="headerlink" title="互斥锁的应用"></a>互斥锁的应用</h4><p>牺牲效率来保证数据的安全——将并行变成串行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from threading import Thread,Lock</span><br><span class="line"></span><br><span class="line">n = 100</span><br><span class="line"></span><br><span class="line">def task(mutex):</span><br><span class="line">    global n</span><br><span class="line">    mutex.acquire()</span><br><span class="line">    temp = n</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    n = temp-1</span><br><span class="line">    mutex.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    mutex=Lock()</span><br><span class="line">    arr = []</span><br><span class="line">    for i in range(100):</span><br><span class="line">        t = Thread(target=task,args=(mutex,))</span><br><span class="line">        arr.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    # 保证所有线程都执行完毕</span><br><span class="line">    for t in arr:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    print(&apos;主&apos;,n)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-12守护线程</title>
      <link href="/2018/10/10/Py004-01-12%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/10/10/Py004-01-12%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>无论是进程还是线程，都遵循：守护xxx会等待主xxx运行完毕后被销毁</p><p>需要强调的是：运行完毕并非终止运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、对主进程来说，运行完毕指的是主进程代码运行完毕</span><br><span class="line"></span><br><span class="line">2、对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才算运行完毕</span><br></pre></td></tr></table></figure><p>详细解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、主进程在其代码结束后就已经算运行完毕了（守护进程在此时就被回收）,然后主进程会一直等非守护的子进程都运行完毕后回收子进程的资源(否则会产生僵尸进程)，才会结束，</span><br><span class="line"></span><br><span class="line">2、主线程在其他非守护线程运行完毕后才算运行完毕（守护线程在此时就被回收）。因为主线程的结束意味着进程的结束，进程整体的资源都将被回收，而进程必须保证非守护线程都运行完毕后才能结束。</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import time</span><br><span class="line">def sayhi(name):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&apos;%s say hello&apos; %name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    t=Thread(target=sayhi,args=(&apos;egon&apos;,))</span><br><span class="line">    t.setDaemon(True) #必须在t.start()之前设置</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;主线程&apos;)</span><br><span class="line">    print(t.is_alive())</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主线程</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>思考下述代码的执行结果有可能是哪些情况？为什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    print(123)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&quot;end123&quot;)</span><br><span class="line"></span><br><span class="line">def bar():</span><br><span class="line">    print(456)</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(&quot;end456&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    t1=Thread(target=foo)</span><br><span class="line">    t2=Thread(target=bar)</span><br><span class="line"></span><br><span class="line">    t1.daemon=True</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    print(&quot;main-------&quot;)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">main-------</span><br><span class="line">end123 (守护线程虽然要等主线程结束才陪葬 ，但是此守护线程已经执行结束——死了)</span><br><span class="line">end456 (主线程要等待其他非守护线程结束而结束)</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-11线程其他属性和方法</title>
      <link href="/2018/10/10/Py004-01-11%E7%BA%BF%E7%A8%8B%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2018/10/10/Py004-01-11%E7%BA%BF%E7%A8%8B%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Thread对象的其他属性或方法"><a href="#Thread对象的其他属性或方法" class="headerlink" title="Thread对象的其他属性或方法"></a>Thread对象的其他属性或方法</h3><blockquote><p>介绍</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread实例对象的方法</span><br><span class="line">  # isAlive(): 返回线程是否活动的。</span><br><span class="line">  # getName(): 返回线程名。</span><br><span class="line">  # setName(): 设置线程名。</span><br><span class="line"></span><br><span class="line">threading模块提供的一些方法：</span><br><span class="line">  # threading.currentThread(): 返回当前的线程变量。</span><br><span class="line">  # threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span><br><span class="line">  # threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</span><br></pre></td></tr></table></figure><blockquote><p>验证</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import threading</span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def work():</span><br><span class="line">    import time</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #在主进程下开启线程</span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    print(threading.current_thread().getName())</span><br><span class="line">    print(threading.current_thread()) #主线程</span><br><span class="line">    print(threading.enumerate()) #连同主线程在内有两个运行的线程</span><br><span class="line">    print(threading.active_count())</span><br><span class="line">    print(&apos;主线程/主进程&apos;)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MainThread</span><br><span class="line">&lt;_MainThread(MainThread, started 140735268892672)&gt;</span><br><span class="line">[&lt;_MainThread(MainThread, started 140735268892672)&gt;, &lt;Thread(Thread-1, started 123145307557888)&gt;]</span><br><span class="line">主线程/主进程</span><br><span class="line">Thread-1</span><br></pre></td></tr></table></figure><blockquote><p>主线程等待子线程结束</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import time</span><br><span class="line">def sayhi(name):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&apos;%s say hello&apos; %name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    t=Thread(target=sayhi,args=(&apos;egon&apos;,))</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(&apos;主线程&apos;)</span><br><span class="line">    print(t.is_alive())</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">egon say hello</span><br><span class="line">主线程</span><br><span class="line">False</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-10线程和进程的区别</title>
      <link href="/2018/10/10/Py004-01-10%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/10/10/Py004-01-10%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h3><h4 id="谁的开启速度快？"><a href="#谁的开启速度快？" class="headerlink" title="谁的开启速度快？"></a>谁的开启速度快？</h4><blockquote><p>1、在主进程下开启线程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line"></span><br><span class="line">def work():</span><br><span class="line">    print(&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    print(&apos;主线程/主进程&apos;)</span><br></pre></td></tr></table></figure><p>执行结果如下，几乎是t.start ()的同时就将线程开启了，然后先打印出了hello，证明线程的创建开销极小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">主线程/主进程</span><br></pre></td></tr></table></figure><blockquote><p>2、在主进程下开启子进程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line"></span><br><span class="line">def work():</span><br><span class="line">    print(&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #在主进程下开启子进程</span><br><span class="line">    p=Process(target=work)</span><br><span class="line">    p.start()</span><br><span class="line">    print(&apos;主线程/主进程&apos;)</span><br></pre></td></tr></table></figure><p>执行结果如下，p.start ()将开启进程的信号发给操作系统后，操作系统要申请内存空间，让好拷贝父进程地址空间到子进程，开销远大于线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主线程/主进程</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h4 id="瞅一瞅pid？"><a href="#瞅一瞅pid？" class="headerlink" title="瞅一瞅pid？"></a>瞅一瞅pid？</h4><blockquote><p>1、在主进程下开启多个线程,每个线程都跟主进程的pid一样</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def work():</span><br><span class="line">    print(&apos;hello&apos;,os.getpid())</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    t1=Thread(target=work)</span><br><span class="line">    t2=Thread(target=work)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    print(&apos;主线程/主进程pid&apos;,os.getpid())</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello 7939</span><br><span class="line">hello 7939</span><br><span class="line">主线程/主进程 7939</span><br></pre></td></tr></table></figure><blockquote><p>2、开多个进程,每个进程都有不同的pid</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def work():</span><br><span class="line">    print(&apos;hello&apos;,os.getpid())</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    p1=Process(target=work)</span><br><span class="line">    p2=Process(target=work)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    print(&apos;主线程/主进程&apos;,os.getpid())</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主线程/主进程 7951</span><br><span class="line">hello 7952</span><br><span class="line">hello 7953</span><br></pre></td></tr></table></figure><h4 id="同一进程内的线程共享该进程的数据？"><a href="#同一进程内的线程共享该进程的数据？" class="headerlink" title="同一进程内的线程共享该进程的数据？"></a>同一进程内的线程共享该进程的数据？</h4><blockquote><p>1、进程之间地址空间是隔离的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def work():</span><br><span class="line">    global n</span><br><span class="line">    n=0</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    n=100</span><br><span class="line">    p=Process(target=work)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&apos;主&apos;,n)</span><br></pre></td></tr></table></figure><p>执行结果如下，毫无疑问子进程p已经将自己的全局的n改成了0,但改的仅仅是它自己的,查看父进程的n仍然为100</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主 100</span><br></pre></td></tr></table></figure><blockquote><p>2、同一进程内开启的多个线程是共享该进程地址空间的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def work():</span><br><span class="line">    global n</span><br><span class="line">    n=0</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    n=100</span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(&apos;主&apos;,n)</span><br></pre></td></tr></table></figure><p>执行结果如下， 查看结果为0,因为同一进程内的线程之间共享进程内的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-09线程</title>
      <link href="/2018/10/10/Py004-01-09%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/10/10/Py004-01-09%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="threading模块介绍"><a href="#threading模块介绍" class="headerlink" title="threading模块介绍"></a>threading模块介绍</h3><p>multiprocess模块的完全模仿了threading模块的接口，二者在使用层面，有很大的相似性，因而不再详细介绍</p><p>方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&apos;%s say hi&apos;%name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        t = Thread(target=task, args=(&apos;aa%s&apos;%i,))</span><br><span class="line">        t.start()</span><br><span class="line">    print(&apos;主&apos;)</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class Sayhi(Thread):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line">    def run(self):</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(&apos;%s say hello&apos; % self.name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    t = Sayhi(&apos;egon&apos;)</span><br><span class="line">    t.start()</span><br><span class="line">    print(&apos;主线程&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-08生产者消费者模型</title>
      <link href="/2018/10/10/Py004-01-08%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/10/10/Py004-01-08%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="生产者消费者模型介绍"><a href="#生产者消费者模型介绍" class="headerlink" title="生产者消费者模型介绍"></a>生产者消费者模型介绍</h3><blockquote><p>为什么要使用生产者消费者模型</p></blockquote><p>生产者指的是生产数据的任务，消费者指的是处理数据的任务，在并发编程中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p><blockquote><p>什么是生产者和消费者模式</p></blockquote><p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p><p>这个阻塞队列就是用来给生产者和消费者解耦的</p><h3 id="生产者消费者模型实现"><a href="#生产者消费者模型实现" class="headerlink" title="生产者消费者模型实现"></a>生产者消费者模型实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import time,random,os</span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        res=q.get()</span><br><span class="line">        time.sleep(random.randint(1,3))</span><br><span class="line">        print(&apos;\033[43m%s 吃 %s\033[0m&apos; %(name,res))</span><br><span class="line"></span><br><span class="line">def producer(q,name,food):</span><br><span class="line">    for i in range(3):</span><br><span class="line">        time.sleep(random.randint(1,3))</span><br><span class="line">        res=&apos;%s%s&apos; %(food,i)</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(&apos;\033[45m%s 生产了 %s\033[0m&apos; %(name,res))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q=Queue()</span><br><span class="line">    #生产者们:即厨师们</span><br><span class="line">    p1=Process(target=producer,args=(q,&apos;egon&apos;,&apos;包子&apos;))</span><br><span class="line"></span><br><span class="line">    #消费者们:即吃货们</span><br><span class="line">    c1=Process(target=consumer,args=(q,&apos;alex&apos;))</span><br><span class="line"></span><br><span class="line">    #开始</span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    print(&apos;主&apos;)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主</span><br><span class="line">egon 生产了 包子0</span><br><span class="line">egon 生产了 包子1</span><br><span class="line">alex 吃 包子0</span><br><span class="line">alex 吃 包子1</span><br><span class="line">egon 生产了 包子2</span><br><span class="line">alex 吃 包子2</span><br></pre></td></tr></table></figure><p>此时的问题是主进程永远不会结束，原因是：生产者p在生产完后就结束了，但是消费者c在取空了q之后，则一直处于死循环中且卡在q.get()这一步。</p><p>解决方式无非是让生产者在生产完毕后，往队列中再发一个结束信号，这样消费者在接收到结束信号后就可以break出死循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import time,random,os</span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        res=q.get()</span><br><span class="line">        if res is None:break</span><br><span class="line">        time.sleep(random.randint(1,3))</span><br><span class="line">        print(&apos;\033[43m%s 吃 %s\033[0m&apos; %(name,res))</span><br><span class="line"></span><br><span class="line">def producer(q,name,food):</span><br><span class="line">    for i in range(3):</span><br><span class="line">        time.sleep(random.randint(1,3))</span><br><span class="line">        res=&apos;%s%s&apos; %(food,i)</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(&apos;\033[45m%s 生产了 %s\033[0m&apos; %(name,res))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q=Queue()</span><br><span class="line">    #生产者们:即厨师们</span><br><span class="line">    p1=Process(target=producer,args=(q,&apos;egon&apos;,&apos;包子&apos;))</span><br><span class="line"></span><br><span class="line">    #消费者们:即吃货们</span><br><span class="line">    c1=Process(target=consumer,args=(q,&apos;alex&apos;))</span><br><span class="line"></span><br><span class="line">    #开始</span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    q.put(None)</span><br><span class="line">    print(&apos;主&apos;)</span><br></pre></td></tr></table></figure><p>但上述解决方式，在有多个生产者和多个消费者时，我们则需要用一个很low的方式去解决,有几个消费者就需要发送几次结束信号：相当low,例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import time,random,os</span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        res=q.get()</span><br><span class="line">        if res is None:break</span><br><span class="line">        time.sleep(random.randint(1,3))</span><br><span class="line">        print(&apos;\033[43m%s 吃 %s\033[0m&apos; %(name,res))</span><br><span class="line"></span><br><span class="line">def producer(q,name,food):</span><br><span class="line">    for i in range(3):</span><br><span class="line">        time.sleep(random.randint(1,3))</span><br><span class="line">        res=&apos;%s%s&apos; %(food,i)</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(&apos;\033[45m%s 生产了 %s\033[0m&apos; %(name,res))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q=Queue()</span><br><span class="line">    #生产者们:即厨师们</span><br><span class="line">    p1=Process(target=producer,args=(q,&apos;egon1&apos;,&apos;包子&apos;))</span><br><span class="line">    p2=Process(target=producer,args=(q,&apos;egon2&apos;,&apos;骨头&apos;))</span><br><span class="line">    p3=Process(target=producer,args=(q,&apos;egon3&apos;,&apos;泔水&apos;))</span><br><span class="line"></span><br><span class="line">    #消费者们:即吃货们</span><br><span class="line">    c1=Process(target=consumer,args=(q,&apos;alex1&apos;))</span><br><span class="line">    c2=Process(target=consumer,args=(q,&apos;alex2&apos;))</span><br><span class="line"></span><br><span class="line">    #开始</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    q.put(None)</span><br><span class="line">    q.put(None)</span><br><span class="line">    q.put(None)</span><br><span class="line">    print(&apos;主&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>其实我们的思路无非是发送结束信号而已，有另外一种队列提供了这种机制</p></blockquote><ul><li>JoinableQueue([maxsize])</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就像是一个Queue对象，但队列允许项目的使用者通知生成者项目已经被成功处理。通知进程是使用共享的信号和条件变量来实现的。</span><br></pre></td></tr></table></figure><p>参数介绍</p><ul><li>maxsize是队列中允许最大项数，省略则无大小限制。</li></ul><p>方法介绍</p><p>JoinableQueue的实例p除了与Queue对象相同的方法之外还具：</p><ul><li><p>q.task_done()：使用者使用此方法发出信号，表示q.get()的返回项目已经被处理。如果调用此方法的次数大于从队列中删除项目的数量，将引发ValueError异常</p></li><li><p>q.join():生产者调用此方法进行阻塞，直到队列中所有的项目均被处理。阻塞将持续到队列中的每个项目均调用q.task_done（）方法为止</p></li></ul><h4 id="基于JoinableQueue实现生产者消费者模型"><a href="#基于JoinableQueue实现生产者消费者模型" class="headerlink" title="基于JoinableQueue实现生产者消费者模型"></a>基于JoinableQueue实现生产者消费者模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,JoinableQueue</span><br><span class="line">import time,random,os</span><br><span class="line">def consumer(q,name):</span><br><span class="line">    while True:</span><br><span class="line">        res=q.get()</span><br><span class="line">        time.sleep(random.randint(1,3))</span><br><span class="line">        print(&apos;\033[43m%s 吃 %s\033[0m&apos; %(name,res))</span><br><span class="line">        q.task_done() #发送信号给q.join()，说明已经从队列中取走一个数据并处理完毕了</span><br><span class="line"></span><br><span class="line">def producer(q,name,food):</span><br><span class="line">    for i in range(3):</span><br><span class="line">        time.sleep(random.randint(1,3))</span><br><span class="line">        res=&apos;%s%s&apos; %(food,i)</span><br><span class="line">        q.put(res)</span><br><span class="line">        print(&apos;\033[45m%s 生产了 %s\033[0m&apos; %(name,res))</span><br><span class="line">    q.join() #等到消费者把自己放入队列中的所有的数据都取走之后，生产者才结束</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q=JoinableQueue() #使用JoinableQueue()</span><br><span class="line"></span><br><span class="line">    #生产者们:即厨师们</span><br><span class="line">    p1=Process(target=producer,args=(q,&apos;egon1&apos;,&apos;包子&apos;))</span><br><span class="line">    p2=Process(target=producer,args=(q,&apos;egon2&apos;,&apos;骨头&apos;))</span><br><span class="line">    p3=Process(target=producer,args=(q,&apos;egon3&apos;,&apos;泔水&apos;))</span><br><span class="line"></span><br><span class="line">    #消费者们:即吃货们</span><br><span class="line">    c1=Process(target=consumer,args=(q,&apos;alex1&apos;))</span><br><span class="line">    c2=Process(target=consumer,args=(q,&apos;alex2&apos;))</span><br><span class="line">    c1.daemon=True</span><br><span class="line">    c2.daemon=True</span><br><span class="line"></span><br><span class="line">    #开始</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    #1、主进程等生产者p1、p2、p3结束</span><br><span class="line">    #2、而p1、p2、p3是在消费者把所有数据都取干净之后才会结束</span><br><span class="line">    #3、所以一旦p1、p2、p3结束了，证明消费者也没必要存在了，应该随着主进程一块死掉，因而需要将生产者们设置成守护进程</span><br><span class="line">    print(&apos;主&apos;)</span><br></pre></td></tr></table></figure><h3 id="生产者消费者模型总结"><a href="#生产者消费者模型总结" class="headerlink" title="生产者消费者模型总结"></a>生产者消费者模型总结</h3><ol><li>程序中有两类角色</li></ol><ul><li>一类负责生产数据（生产者）</li><li>一类负责处理数据（消费者）</li></ul><ol start="2"><li>引入生产者消费者模型为了解决的问题是</li></ol><ul><li>平衡生产者与消费者之间的速度差</li><li>程序解开耦合</li></ul><ol start="3"><li>如何实现生产者消费者模型</li></ol><ul><li>生产者<--->队列<--->消费者</---></---></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-07队列</title>
      <link href="/2018/10/09/Py004-01-07%E9%98%9F%E5%88%97/"/>
      <url>/2018/10/09/Py004-01-07%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>进程彼此之间互相隔离，要实现进程间通信（IPC），multiprocessing模块支持两种形式：队列和管道，这两种方式都是使用消息传递的</p><ul><li>队列操作的是内存空间</li></ul><blockquote><h3 id="队列就是管道加锁实现"><a href="#队列就是管道加锁实现" class="headerlink" title="队列就是管道加锁实现"></a>队列就是管道加锁实现</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue([maxsize]):创建共享的进程队列，Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递。</span><br></pre></td></tr></table></figure><h4 id="参数介绍："><a href="#参数介绍：" class="headerlink" title="参数介绍："></a>参数介绍：</h4><p>maxsize是队列中允许最大项数，省略则无大小限制。</p><blockquote><p>但需要明确：</p></blockquote><ul><li>队列内存放的是消息而非大数据</li><li>队列占用的是内存空间，因而maxsize即便是无大小限制也受限于内存大小</li></ul><h4 id="主要方法介绍："><a href="#主要方法介绍：" class="headerlink" title="主要方法介绍："></a>主要方法介绍：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q.put方法用以插入数据到队列中。</span><br><span class="line">q.get方法可以从队列读取并且删除一个元素。</span><br></pre></td></tr></table></figure><h4 id="队列的使用"><a href="#队列的使用" class="headerlink" title="队列的使用"></a>队列的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line"></span><br><span class="line">q=Queue(3) # 指定队列最大数量为3 就是能放三个数据进去</span><br><span class="line"></span><br><span class="line">#put ,get ,put_nowait,get_nowait,full,empty</span><br><span class="line">q.put(1)</span><br><span class="line">q.put(2)</span><br><span class="line">q.put(3)</span><br><span class="line">print(q.full()) #满了  (队列是否满了)</span><br><span class="line"># q.put(4) #再放就阻塞住了</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.empty()) #空了</span><br><span class="line"># print(q.get()) #再取就阻塞住了 队列已经没数据了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-06互斥锁</title>
      <link href="/2018/10/09/Py004-01-06%E4%BA%92%E6%96%A5%E9%94%81/"/>
      <url>/2018/10/09/Py004-01-06%E4%BA%92%E6%96%A5%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>多个进程直接虽然数据不共享，但是它们共享同一套文件系统(或者同一个打印终端)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(&apos;%s 1&apos;%name)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&apos;%s 2&apos;%name)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&apos;%s 3&apos; % name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    for i in range(3):</span><br><span class="line">        p = Process(target=task, args=(&apos;子进程%s&apos;%i,))</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;主进程。。。。&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">主进程。。。。</span><br><span class="line">子进程0 1</span><br><span class="line">子进程1 1</span><br><span class="line">子进程2 1</span><br><span class="line">子进程0 2</span><br><span class="line">子进程1 2</span><br><span class="line">子进程2 2</span><br><span class="line">子进程0 3</span><br><span class="line">子进程1 3</span><br><span class="line">子进程2 3</span><br><span class="line">此时数据发生错乱，三个进程都占据打印终端的输出，这样数据容易出现问题</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="互斥锁-来把锁"><a href="#互斥锁-来把锁" class="headerlink" title="互斥锁(来把锁)"></a>互斥锁(来把锁)</h4><ul><li>从multiprocessing引入Lock</li><li>初始化锁 mutex = Lock()</li><li>给子进程的触发函数传入锁对象mutex</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Lock</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def task(name,mutex):</span><br><span class="line">    mutex.acquire()</span><br><span class="line">    print(&apos;%s 1&apos;%name)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&apos;%s 2&apos;%name)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&apos;%s 3&apos; % name)</span><br><span class="line">    mutex.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    for i in range(3):</span><br><span class="line">        mutex=Lock()</span><br><span class="line">        p = Process(target=task, args=(&apos;子进程%s&apos;%i,mutex))</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;主进程。。。。&apos;)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">主进程。。。。</span><br><span class="line">子进程0 1</span><br><span class="line">子进程1 1</span><br><span class="line">子进程2 1</span><br><span class="line">子进程0 2</span><br><span class="line">子进程1 2</span><br><span class="line">子进程2 2</span><br><span class="line">子进程0 3</span><br><span class="line">子进程1 3</span><br><span class="line">子进程2 3</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="模拟抢票"><a href="#模拟抢票" class="headerlink" title="模拟抢票"></a>模拟抢票</h4><p>多个进程共享同一文件，我们可以把文件当数据库，用多个进程模拟多个人执行抢票任务</p><blockquote><h4 id="新建文件db-txt的内容为：-“count”-1"><a href="#新建文件db-txt的内容为：-“count”-1" class="headerlink" title="新建文件db.txt的内容为：{“count”:1}"></a>新建文件db.txt的内容为：{“count”:1}</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import  Process</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def search(name):</span><br><span class="line">    time.sleep(1) # 模拟网络延迟</span><br><span class="line">    dic = json.load(open(&apos;db.txt&apos;,encoding=&apos;utf-8&apos;))</span><br><span class="line">    print(&apos;&lt;%s&gt;查看剩余票数[%s]&apos;%(name,dic[&apos;count&apos;]))</span><br><span class="line"></span><br><span class="line">def get(name):</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    dic = json.load(open(&apos;db.txt&apos;, encoding=&apos;utf-8&apos;))</span><br><span class="line">    if dic[&apos;count&apos;]&gt;0:</span><br><span class="line">        dic[&apos;count&apos;]-=1</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        json.dump(dic,open(&apos;db.txt&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;))</span><br><span class="line">        print(&apos;&lt;%s 购票成功&gt;&apos;%name)</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    search(name)</span><br><span class="line">    get(name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        p = Process(target=task,args=(&apos;路人%s&apos;%i,))</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&lt;路人0&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人2&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人1&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人3&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人4&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人5&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人6&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人7&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人8&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人9&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人0 购票成功&gt;</span><br><span class="line">&lt;路人2 购票成功&gt;</span><br><span class="line">&lt;路人1 购票成功&gt;</span><br><span class="line">&lt;路人3 购票成功&gt;</span><br><span class="line">&lt;路人4 购票成功&gt;</span><br><span class="line">&lt;路人5 购票成功&gt;</span><br><span class="line">&lt;路人6 购票成功&gt;</span><br><span class="line">&lt;路人7 购票成功&gt;</span><br><span class="line">&lt;路人8 购票成功&gt;</span><br><span class="line">&lt;路人9 购票成功&gt;</span><br><span class="line"></span><br><span class="line">并发的执行查看同一个文件，于是都看到了剩余1张票，最后都购票成功于是 打起来了。。。。</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import  Process,Lock</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def search(name):</span><br><span class="line">    time.sleep(1) # 模拟网络延迟</span><br><span class="line">    dic = json.load(open(&apos;db.txt&apos;,encoding=&apos;utf-8&apos;))</span><br><span class="line">    print(&apos;&lt;%s&gt;查看剩余票数[%s]&apos;%(name,dic[&apos;count&apos;]))</span><br><span class="line"></span><br><span class="line">def get(name):</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    dic = json.load(open(&apos;db.txt&apos;, encoding=&apos;utf-8&apos;))</span><br><span class="line">    if dic[&apos;count&apos;]&gt;0:</span><br><span class="line">        dic[&apos;count&apos;]-=1</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        json.dump(dic,open(&apos;db.txt&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;))</span><br><span class="line"></span><br><span class="line">        print(&apos;&lt;%s 购票成功&gt;&apos;%name)</span><br><span class="line">def task(name,mutex):</span><br><span class="line">    mutex.acquire()</span><br><span class="line">    search(name)</span><br><span class="line">    get(name)</span><br><span class="line">    mutex.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    mutex = Lock()</span><br><span class="line">    for i in range(10):</span><br><span class="line">        p = Process(target=task,args=(&apos;路人%s&apos;%i,mutex))</span><br><span class="line">        p.start()</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&lt;路人0&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人0 购票成功&gt;</span><br><span class="line">&lt;路人2&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人1&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人3&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人4&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人5&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人6&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人7&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人8&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人9&gt;查看剩余票数[0]</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><h4 id="上述有一个问题必须等第一个人购票了其他人才能查票"><a href="#上述有一个问题必须等第一个人购票了其他人才能查票" class="headerlink" title="上述有一个问题必须等第一个人购票了其他人才能查票"></a>上述有一个问题必须等第一个人购票了其他人才能查票</h4></blockquote><p>做如下修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def task(name,mutex):</span><br><span class="line"></span><br><span class="line">    search(name)</span><br><span class="line"></span><br><span class="line">    mutex.acquire()</span><br><span class="line">    get(name)</span><br><span class="line">    mutex.release()</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&lt;路人0&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人1&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人2&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人3&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人4&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人5&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人6&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人7&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人8&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人9&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人0 购票成功&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="互斥锁和join的区别"><a href="#互斥锁和join的区别" class="headerlink" title="互斥锁和join的区别"></a>互斥锁和join的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import  Process,Lock</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def search(name):</span><br><span class="line">    time.sleep(1) # 模拟网络延迟</span><br><span class="line">    dic = json.load(open(&apos;db.txt&apos;,encoding=&apos;utf-8&apos;))</span><br><span class="line">    print(&apos;&lt;%s&gt;查看剩余票数[%s]&apos;%(name,dic[&apos;count&apos;]))</span><br><span class="line"></span><br><span class="line">def get(name):</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    dic = json.load(open(&apos;db.txt&apos;, encoding=&apos;utf-8&apos;))</span><br><span class="line">    if dic[&apos;count&apos;]&gt;0:</span><br><span class="line">        dic[&apos;count&apos;]-=1</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        json.dump(dic,open(&apos;db.txt&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;))</span><br><span class="line">        print(&apos;&lt;%s 购票成功&gt;&apos;%name)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;&lt;%s 购票失败&gt;&apos; % name)</span><br><span class="line">def task(name):</span><br><span class="line">    search(name)</span><br><span class="line">    get(name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        p = Process(target=task,args=(&apos;路人%s&apos;%i,))</span><br><span class="line">        p.start()</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">去掉锁后改用join虽然保证了串行，影响了整个的查询效率变慢了</span><br><span class="line">&lt;路人0&gt;查看剩余票数[1]</span><br><span class="line">&lt;路人0 购票成功&gt;</span><br><span class="line">&lt;路人1&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人1 购票失败&gt;</span><br><span class="line">&lt;路人2&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人2 购票失败&gt;</span><br><span class="line">&lt;路人3&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人3 购票失败&gt;</span><br><span class="line">&lt;路人4&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人4 购票失败&gt;</span><br><span class="line">&lt;路人5&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人5 购票失败&gt;</span><br><span class="line">&lt;路人6&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人6 购票失败&gt;</span><br><span class="line">&lt;路人7&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人7 购票失败&gt;</span><br><span class="line">&lt;路人8&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人8 购票失败&gt;</span><br><span class="line">&lt;路人9&gt;查看剩余票数[0]</span><br><span class="line">&lt;路人9 购票失败&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-05守护进程</title>
      <link href="/2018/10/09/Py004-01-05%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/10/09/Py004-01-05%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>主进程创建子进程，然后将该进程设置成守护自己的进程，守护进程就好比崇祯皇帝身边的老太监，崇祯皇帝已死老太监就跟着殉葬了。</p><p>关于守护进程需要强调两点：</p><ol><li><p>守护进程会在主进程代码执行结束后就终止</p></li><li><p>守护进程内无法再开启子进程,否则抛出异常：AssertionError: daemonic processes are not allowed to have children</p></li></ol><p>如果我们有两个任务需要并发执行，那么开一个主进程和一个子进程分别去执行就ok了，如果子进程的任务在主进程任务结束后就没有存在的必要了，那么该子进程应该在开启前就被设置成守护进程。主进程代码运行结束，守护进程随即终止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(&apos;%s is piaoing&apos; %name)</span><br><span class="line">    time.sleep(random.randrange(1,3))</span><br><span class="line">    print(&apos;%s is piao end&apos; %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    p=Process(target=task,args=(&apos;egon&apos;,))</span><br><span class="line">    p.daemon=True #一定要在p.start()前设置,设置p为守护进程,禁止p创建子进程,并且父进程代码执行结束,p即终止运行</span><br><span class="line">    p.start()</span><br><span class="line">    print(&apos;主&apos;) #只要终端打印出这一行内容，那么守护进程p也就跟着结束掉了</span><br></pre></td></tr></table></figure><p>守护进程要在start前设置daemon=True 否则报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#守护进程一定是等到主进程结束然后终止运行</span><br><span class="line">from multiprocessing import Process</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">def foo():</span><br><span class="line">    print(123)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&quot;end123&quot;)</span><br><span class="line"></span><br><span class="line">def bar():</span><br><span class="line">    print(456)</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(&quot;end456&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    p1=Process(target=foo)</span><br><span class="line">    p2=Process(target=bar)</span><br><span class="line"></span><br><span class="line">    p1.daemon=True</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    print(&quot;main-------&quot;)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">永远看不到  end123</span><br><span class="line">因为执行到  main------之后 主进程就结束了</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-04Process其他属性和方法</title>
      <link href="/2018/10/08/Py004-01-04Process%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2018/10/08/Py004-01-04Process%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Process其他属性和方法"><a href="#Process其他属性和方法" class="headerlink" title="Process其他属性和方法"></a>Process其他属性和方法</h3><h4 id="需求一-父进程等待子进程结束在运行"><a href="#需求一-父进程等待子进程结束在运行" class="headerlink" title="需求一(父进程等待子进程结束在运行)"></a>需求一(父进程等待子进程结束在运行)</h4><ul><li>join</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time,os</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(&apos;%s is running&apos;%name)</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(&apos;%s is done&apos;%name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    p = Process(target=task,args=(&apos;子进程&apos;,))</span><br><span class="line"></span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    p.join()</span><br><span class="line">    print(&apos;主进程。。。。1&apos;,os.getpid(),os.getppid())</span><br><span class="line">    print(p.pid) # 主进程进行完后，子进程pid并不会回收，但是如果主进程结束的时候所有的子进程就会结束</span><br></pre></td></tr></table></figure><h4 id="不要以代码先后看执行结果"><a href="#不要以代码先后看执行结果" class="headerlink" title="不要以代码先后看执行结果"></a>不要以代码先后看执行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time,os</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(&apos;%s is running&apos;%name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    p1 = Process(target=task,args=(&apos;子进程1&apos;,))</span><br><span class="line">    p2 = Process(target=task,args=(&apos;子进程2&apos;,))</span><br><span class="line">    p3 = Process(target=task,args=(&apos;子进程3&apos;,))</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;主进程开始了&apos;)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">代码执行结果：</span><br><span class="line">p1.start()只是给操作系统发信号不一定会先执行</span><br><span class="line">p2.start()只是给操作系统发信号不一定会先执行</span><br><span class="line">p3.start()只是给操作系统发信号不一定会先执行</span><br><span class="line">多执行几次就会看大顺序是不确定的</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>偏要顺序执行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time,os</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(&apos;%s is running&apos;%name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    p1 = Process(target=task,args=(&apos;子进程1&apos;,))</span><br><span class="line">    p2 = Process(target=task,args=(&apos;子进程2&apos;,))</span><br><span class="line">    p3 = Process(target=task,args=(&apos;子进程3&apos;,))</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    </span><br><span class="line">    print(&apos;主进程开始了&apos;)</span><br></pre></td></tr></table></figure><p>你已经踩坑了<br>你已经踩坑了<br>你已经踩坑了</p><blockquote><p>　假设p1运行1个小时，p2运行半个小时,p3运行10分钟，请问主进程等待多长时间？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p1.join() # 让主进程等待，并不会让兄弟进程(其他子进程)等待</span><br><span class="line"></span><br><span class="line">所以最后主进程会等待1小时</span><br></pre></td></tr></table></figure><h4 id="真正意义的串行执行"><a href="#真正意义的串行执行" class="headerlink" title="真正意义的串行执行"></a>真正意义的串行执行</h4><p>这样修改就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p1.start()</span><br><span class="line">p1.join()</span><br><span class="line">p2.start()</span><br><span class="line">p2.join()</span><br><span class="line">p3.start()</span><br><span class="line">p3.join()</span><br></pre></td></tr></table></figure><p>巧用for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr_p = [p1,p2,p3]</span><br><span class="line">for p in arr_p:</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h4 id="查看子进程是否活着"><a href="#查看子进程是否活着" class="headerlink" title="查看子进程是否活着"></a>查看子进程是否活着</h4><ul><li>is_alive()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time,os</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(&apos;%s is running&apos;%name)</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(&apos;%s is running&apos;%name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    p = Process(target=task,args=(&apos;子进程&apos;,))</span><br><span class="line"></span><br><span class="line">    p.start()</span><br><span class="line">    print(p.is_alive())</span><br><span class="line">    print(&apos;主进程&apos;)</span><br><span class="line">    print(p.pid)</span><br><span class="line">    print(p.is_alive())</span><br></pre></td></tr></table></figure><h4 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h4><ul><li>terminate()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time,os</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(&apos;%s is running&apos;%name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    p = Process(target=task,args=(&apos;子进程&apos;,))</span><br><span class="line"></span><br><span class="line">    p.start()</span><br><span class="line">    </span><br><span class="line">    p.terminate() # 只是给操作系统发信号让子进程终止，但不会立即执行 ，所以之后查看子进程is_alive还是True</span><br><span class="line">    print(p.is_alive())</span><br><span class="line">    </span><br><span class="line">    print(&apos;主进程&apos;)</span><br></pre></td></tr></table></figure><p>怎样真的死掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.start()</span><br><span class="line">    </span><br><span class="line">p.terminate() # 只是给操作系统发信号让子进程终止，但不会立即执行</span><br><span class="line">time.sleep(3) #</span><br><span class="line">print(p.is_alive())</span><br></pre></td></tr></table></figure><h4 id="给子进程起名字"><a href="#给子进程起名字" class="headerlink" title="给子进程起名字"></a>给子进程起名字</h4><ul><li>name</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 不指定name参数就有一个默认的</span><br><span class="line">p = Process(target=task,name=&apos;sub-Process&apos;)</span><br><span class="line">p.start()</span><br><span class="line">print(p.name)</span><br></pre></td></tr></table></figure><h4 id="父子进程是隔离的"><a href="#父子进程是隔离的" class="headerlink" title="父子进程是隔离的"></a>父子进程是隔离的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time,os</span><br><span class="line"></span><br><span class="line">def task():</span><br><span class="line">    global n</span><br><span class="line">    n = 0</span><br><span class="line">    print(&apos;子进程内%s&apos;%n)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    p = Process(target=task)</span><br><span class="line"></span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&apos;主进程&apos;,n)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-03僵尸进程和孤儿进程</title>
      <link href="/2018/10/08/Py004-01-03%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/10/08/Py004-01-03%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="了解的知识点"><a href="#了解的知识点" class="headerlink" title="了解的知识点"></a>了解的知识点</h3></blockquote><blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3></blockquote><p>一个父进程，在运行中开启了10个子进程，这10个子进程运行跟父进程就没关系了，相互独立</p><p>但是：父进程毕竟是子进程的爹，有这么一个需求——查看子进程的状态</p><ul><li>假设子进程运行完后就把子进程的所有状态信息清空掉？可能吗？</li></ul><p>此时作为父进程就看不到子进程的状态信息</p><h4 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h4><p>就算子进程死了，但是它相关的状态信息不能全部清除掉，要留着——尸体(方便父进程查看)</p><blockquote><h4 id="谁来给子进程收尸呢？"><a href="#谁来给子进程收尸呢？" class="headerlink" title="谁来给子进程收尸呢？"></a>谁来给子进程收尸呢？</h4></blockquote><p>父进程结束的时候，将子进程的信息清除掉</p><blockquote><h4 id="僵尸进程有害吗？"><a href="#僵尸进程有害吗？" class="headerlink" title="僵尸进程有害吗？"></a>僵尸进程有害吗？</h4></blockquote><p>如果父进程一直不死，子进程就一直无法释放。</p><p>有害，每个进程占据一个pid如果没有及时清除，积累过多的进程就会导致新进程无法开启。</p><h4 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h4><p>子进程没死，父进程先死了</p><blockquote><p>谁收留孤儿</p></blockquote><p>如果是linux系统，会有一个init进程(所有进程的爹)，如果子进程的父进程死了，就由init来接管。</p><p>由init进程发起系统调用回收子进程</p><blockquote><p>孤儿进程有害吗？</p></blockquote><p>无害，由init负责回收</p>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-02查看进程编号pid</title>
      <link href="/2018/09/27/Py004-01-02%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E7%BC%96%E5%8F%B7pid/"/>
      <url>/2018/09/27/Py004-01-02%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E7%BC%96%E5%8F%B7pid/</url>
      
        <content type="html"><![CDATA[<h3 id="进程编号pid和ppid"><a href="#进程编号pid和ppid" class="headerlink" title="进程编号pid和ppid"></a>进程编号pid和ppid</h3><blockquote><p>要引入os模块可以查看进程编号</p></blockquote><ul><li>pid 进程编号</li><li>ppid 父进程编号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time,os</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(&apos;%s is running 子进程编号为%s 父进程编号为%s&apos; % (name,os.getpid(),os.getppid()))</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(&apos;%s is running 子进程编号为%s 父进程编号为%s&apos; % (name, os.getpid(), os.getppid()))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    p = Process(target=task,args=(&apos;子进程&apos;,))</span><br><span class="line"></span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;主进程。。。。1   %s&apos; % os.getpid())</span><br><span class="line">    print(&apos;主进程。。。。2   %s&apos; % os.getpid())</span><br><span class="line">    print(&apos;主进程。。。。3   %s&apos; % os.getpid())</span><br></pre></td></tr></table></figure><p>查看运行的pycharm进程</p><blockquote><p>if windows</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开cmd</span><br><span class="line">tasklist | findstr pycharm</span><br></pre></td></tr></table></figure><blockquote><p>if mac</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aus|grep pycharm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py004-01-01进程的开启方式</title>
      <link href="/2018/09/27/Py004-01-01%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%BC%80%E5%90%AF%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/09/27/Py004-01-01%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%BC%80%E5%90%AF%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>要引入进程模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br></pre></td></tr></table></figure><h4 id="开启进程方式一"><a href="#开启进程方式一" class="headerlink" title="开启进程方式一"></a>开启进程方式一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"># 方式一</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print(&apos;%s is running&apos;%name)</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    print(&apos;%s is done&apos;%name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # args传递的参数必须是元组的形式</span><br><span class="line">    p = Process(target=task,args=(&apos;子进程&apos;,))</span><br><span class="line">    # 关键字参数方式</span><br><span class="line">    p2 = Process(target=task,kwargs=&#123;&apos;name&apos;:&apos;子进程2&apos;&#125;)</span><br><span class="line"></span><br><span class="line">    p.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;主进程。。。。1&apos;)</span><br><span class="line">    print(&apos;主进程。。。。2&apos;)</span><br><span class="line">    print(&apos;主进程。。。。3&apos;)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">执行结果</span><br><span class="line">主进程。。。。1</span><br><span class="line">主进程。。。。2</span><br><span class="line">主进程。。。。3</span><br><span class="line">子进程 is running</span><br><span class="line">子进程2 is running</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="开启进程方式二-自己定制"><a href="#开启进程方式二-自己定制" class="headerlink" title="开启进程方式二(自己定制)"></a>开启进程方式二(自己定制)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class MyProcess(Process):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">    # 自定制的进程  就不能叫task了  必须叫 run</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;%s is running&apos; % self.name)</span><br><span class="line">        time.sleep(3)</span><br><span class="line">        print(&apos;%s is done&apos; % self.name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    p = MyProcess(&apos;子进程1&apos;)</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;主进程。。。1&apos;)</span><br><span class="line">    print(&apos;主进程。。。2&apos;)</span><br><span class="line">    print(&apos;主进程。。。3&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M04 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-04-02struct模块</title>
      <link href="/2018/09/25/Py003-04-02struct%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/09/25/Py003-04-02struct%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="struct模块"><a href="#struct模块" class="headerlink" title="struct模块"></a>struct模块</h3><p>这里我们只用它的打包和解包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import struct</span><br><span class="line">str = &apos;0123456789&apos;</span><br><span class="line">str_size = len(str) # 10</span><br><span class="line"></span><br><span class="line"># 打包</span><br><span class="line">str_key = struct.pack(&apos;i&apos;, str_size)</span><br><span class="line">print(&apos;打包&apos;,str_key)</span><br><span class="line"></span><br><span class="line"># 解包</span><br><span class="line">data_size = struct.unpack(&apos;i&apos;, str_key)</span><br><span class="line">print(&apos;解包&apos;,data_size)</span><br><span class="line"></span><br><span class="line">‘’‘</span><br><span class="line">打包 b&apos;\n\x00\x00\x00&apos;</span><br><span class="line">解包 (10,)</span><br><span class="line">’‘’</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/leomei91/p/7602603.html" target="_blank" rel="noopener">他人博客链接</a></p><p><a href="https://www.cnblogs.com/volcao/p/8807507.html" target="_blank" rel="noopener">他人博客链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-04-01optparse模块</title>
      <link href="/2018/09/25/Py003-04-01optparse%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/09/25/Py003-04-01optparse%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="optparse模块"><a href="#optparse模块" class="headerlink" title="optparse模块"></a>optparse模块</h3><p>获取执行py文件时获取的参数</p><blockquote><p>如test.py文件如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import optparse</span><br><span class="line"></span><br><span class="line">parser = optparse.OptionParser()</span><br><span class="line">parser.add_option(&quot;-s&quot;,&quot;--server&quot;, dest=&quot;server&quot;, help=&quot;ftp server ip_addr&quot;)</span><br><span class="line">parser.add_option(&quot;-P&quot;,&quot;--port&quot;,type=&quot;int&quot;, dest=&quot;port&quot;, help=&quot;ftp server port&quot;)</span><br><span class="line"></span><br><span class="line">a,b = parser.parse_args()</span><br><span class="line"></span><br><span class="line">print(a,b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 如果执行时参数如下</span><br><span class="line"># python3 test.py a b c -s localhost -P 9999</span><br><span class="line"># 结果如下</span><br><span class="line"># &#123;&apos;server&apos;: &apos;localhost&apos;, &apos;port&apos;: 9999&#125; [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Geoserver，MapboxGL搭建离线地图</title>
      <link href="/2018/09/18/My-New-Post/"/>
      <url>/2018/09/18/My-New-Post/</url>
      
        <content type="html"><![CDATA[<p> 最近一直在开发基于mapboxgl的项目，由于某些众所周知的原因，导致最近mapboxgl的后端服务一直不稳定。</p><p>与此同时 mapbox中国版后端服务对于小型To B 项目来说又比较贵，同时有些项目需要离线部署。在这个背景下我调研了一些方案 比如 <a href="https://openmaptiles.com/server/" target="_blank" rel="noopener">tiles-serve</a>和<a href="http://blog.geoserver.org/" target="_blank" rel="noopener">geoserver</a> 因为懒得使用docker 就放弃了这个方案，直接使用 geoserver 来搭建。</p><p>乘着这个机会把自己最近的工作内容分享给大家，因为涉及到的技术栈，概念比较多，所以主要讲实践。</p><h2 id="1-GeoServer-环境搭建"><a href="#1-GeoServer-环境搭建" class="headerlink" title="1. GeoServer 环境搭建"></a>1. GeoServer 环境搭建</h2><p>GeoServer 是 OpenGIS Web 服务器规范的 J2EE 实现，使用它可以非常方便的发布地图数据。</p><p>简而言之使用它可以非常快速的搭建自己的地图后端服务器。然后只要你使用类似Openlayer，leaflet，mapboxgl等前端工具，你就可以非常迅速的搭建属于自己的离线地图应用。</p><p>因为我们的项目主要是可视化，所以本文的内容主要是搭建底图服务，展示地图，不涉及定位，导航，搜索等其他服务。</p><p>但是目前Geoserver 主要用来发布栅格瓦片也就是图片，所幸现在有矢量瓦片的插件，我们可以使用Geoserver 发布瓦片数据</p><ol><li><p>下载 安装 <a href="http://geoserver.org/release/2.12.4/" target="_blank" rel="noopener">Geoserver</a><br>Geoserver 支持Tomcat，windows，OSX，Platform Independent Binary安装。但是最新版本已经不能OSX了,鉴于为大家提供尽可能多的选择的原则，我们使用Geoserver 2.12.4 这个版本</p></li><li><p>安装 Geoserver<br>若是采用Tomcat这种方式的话，应该不要要说，毕竟没几个前端会安装这个玩意，方式的话，基本一路install 即可。出问题的地方可能就是JDK没有安装或者配置好吧。</p></li><li><p>下载矢量切片插件<a href="http://geoserver.org/release/2.12.4/" target="_blank" rel="noopener"> Vector Tiles</a><br>插件也在Geoserver  这个页面上</p></li></ol><h2 id="2-导入地图数据"><a href="#2-导入地图数据" class="headerlink" title="2. 导入地图数据"></a>2. 导入地图数据</h2><h2 id="3-mapboxgl配置"><a href="#3-mapboxgl配置" class="headerlink" title="3. mapboxgl配置"></a>3. mapboxgl配置</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mapboxgl,geoserver,gis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Geoserver，MapboxGL搭建离线地图</title>
      <link href="/2018/09/18/geoserver%E5%88%9B%E5%BB%BA%E7%A6%BB%E7%BA%BF%E5%9C%B0%E5%9B%BE%E5%B1%95%E7%A4%BA3D%E5%BB%BA%E7%AD%91/"/>
      <url>/2018/09/18/geoserver%E5%88%9B%E5%BB%BA%E7%A6%BB%E7%BA%BF%E5%9C%B0%E5%9B%BE%E5%B1%95%E7%A4%BA3D%E5%BB%BA%E7%AD%91/</url>
      
        <content type="html"><![CDATA[<p> 最近一直在开发基于mapboxgl的项目，由于某些众所周知的原因，导致最近mapboxgl的后端服务一直不稳定。</p><p>与此同时 mapbox中国版后端服务对于小型To B 项目来说又比较贵，同时有些项目需要离线部署。在这个背景下我调研了一些方案 比如 <a href="https://openmaptiles.com/server/" target="_blank" rel="noopener">tiles-serve</a>和<a href="http://blog.geoserver.org/" target="_blank" rel="noopener">geoserver</a> 因为懒得使用docker 就放弃了这个方案，直接使用 geoserver 来搭建。</p><p>乘着这个机会把自己最近的工作内容分享给大家，因为涉及到的技术栈，概念比较多，所以主要讲实践。</p><h2 id="1-GeoServer-环境搭建"><a href="#1-GeoServer-环境搭建" class="headerlink" title="1. GeoServer 环境搭建"></a>1. GeoServer 环境搭建</h2><p>GeoServer 是 OpenGIS Web 服务器规范的 J2EE 实现，使用它可以非常方便的发布地图数据。</p><p>简而言之使用它可以非常快速的搭建自己的地图后端服务器。然后只要你使用类似Openlayer，leaflet，mapboxgl等前端工具，你就可以非常迅速的搭建属于自己的离线地图应用。</p><p>因为我们的项目主要是可视化，所以本文的内容主要是搭建底图服务，展示地图，不涉及定位，导航，搜索等其他服务。</p><p>但是目前Geoserver 主要用来发布栅格瓦片也就是图片，所幸现在有矢量瓦片的插件，我们可以使用Geoserver 发布瓦片数据</p><ol><li><p>下载 安装 <a href="http://geoserver.org/release/2.12.4/" target="_blank" rel="noopener">Geoserver</a><br>Geoserver 支持Tomcat，windows，OSX，Platform Independent Binary安装。但是最新版本已经不能OSX了,鉴于为大家提供尽可能多的选择的原则，我们使用Geoserver 2.12.4 这个版本</p></li><li><p>安装 Geoserver<br>若是采用Tomcat这种方式的话，应该不需要我说，毕竟没几个前端会安装这个玩意，安装了Tomcat的多少会点java 不需要我教，其他方式的话，基本一路install 即可。出问题的地方可能就是JDK没有安装或者配置好吧。</p></li><li><p>下载矢量切片插件<a href="http://geoserver.org/release/2.12.4/" target="_blank" rel="noopener"> Vector Tiles</a><br>插件也在Geoserver  下载页面的Extensions里面 如图</p><!-- ![vectorTilesPlugin](vectorTilesPlugin.png =200x300) --><p><img src="/2018/09/18/geoserver创建离线地图展示3D建筑/./vectorTilesPlugin.png" style="width: 400px;height: 400px"></p></li></ol><h2 id="2-导入地图数据"><a href="#2-导入地图数据" class="headerlink" title="2. 导入地图数据"></a>2. 导入地图数据</h2><h2 id="3-mapboxgl配置"><a href="#3-mapboxgl配置" class="headerlink" title="3. mapboxgl配置"></a>3. mapboxgl配置</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mapboxgl,geoserver,gis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/18/hello-world/"/>
      <url>/2018/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Py003-02-03模拟ssh远程登录</title>
      <link href="/2018/09/09/Py003-02-03%E6%A8%A1%E6%8B%9Fssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
      <url>/2018/09/09/Py003-02-03%E6%A8%A1%E6%8B%9Fssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="模拟ssh远程登录"><a href="#模拟ssh远程登录" class="headerlink" title="模拟ssh远程登录"></a>模拟ssh远程登录</h3><blockquote><p>注意 window默认编码是gbk,linux默认是 utf-8</p></blockquote><p>服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">phone.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)</span><br><span class="line">phone.bind((&apos;127.0.0.1&apos;,8082)) # ip 加端口号</span><br><span class="line">phone.listen(5) # 5代表最大链接数</span><br><span class="line"></span><br><span class="line">print(&apos;starting....&apos;)</span><br><span class="line">while True: # 链接循环</span><br><span class="line">    conn,client_addr = phone.accept()</span><br><span class="line"></span><br><span class="line">    while True: # 通讯循环</span><br><span class="line">        try:</span><br><span class="line">            # 1 接受命令</span><br><span class="line">            cmd = conn.recv(1024)</span><br><span class="line">            # 针对客户端中断问题</span><br><span class="line">            if not cmd:break # 适用于linux　如果是windows就 try catch</span><br><span class="line">            # 2 执行命令，拿到结果</span><br><span class="line">            obj = subprocess.Popen(cmd.decode(&apos;gbk&apos;),shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)</span><br><span class="line">            stdout = obj.stdout.read().decode(&apos;gbk&apos;)</span><br><span class="line">            stderr = obj.stderr.read().decode(&apos;gbk&apos;)</span><br><span class="line">            # 3 把命令结果返回给客户端</span><br><span class="line">            data = stdout+stderr</span><br><span class="line">            print(len(data))</span><br><span class="line">            conn.send(data.encode(&apos;gbk&apos;))</span><br><span class="line">        except ConnectionResetError: # 适用于windows</span><br><span class="line">            break</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">phone.connect((&apos;127.0.0.1&apos;,8082)) # ip 加端口号</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    # 1 发命令</span><br><span class="line">    cmd = input(&apos;&gt;&gt;:&apos;).strip()</span><br><span class="line">    phone.send(cmd.encode(&apos;gbk&apos;))</span><br><span class="line">    # 2 拿到命令结果</span><br><span class="line">    data = phone.recv(1024) # 1024的坑</span><br><span class="line">    print(data.decode(&apos;gbk&apos;))</span><br><span class="line"></span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><h4 id="1024的坑"><a href="#1024的坑" class="headerlink" title="1024的坑"></a>1024的坑</h4><p>如果命令的返回结果超过1024的话，就会有问题了。即——粘包</p><p>我们知道结果保存在管道里，你内容超过1024的时候，多余的内容还在管道里</p><blockquote><p>所以当你输入 ipconfig 的时候假设结果为2024 那么还残留1000 在管道里，你再次输入其他命令如ls的时候会先把上次剩余的内容 返回。。。</p></blockquote><p>以上现象就是————————粘包</p><h4 id="粘包的原理"><a href="#粘包的原理" class="headerlink" title="粘包的原理"></a>粘包的原理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 不管是recv 和send都不是直接接受对方的数据，而是操作自己的操作系统内存---》不是一个send对应一个recv</span><br><span class="line">2.  recv:</span><br><span class="line">        wait data 耗时时间长</span><br><span class="line">        copy data</span><br><span class="line">    send:</span><br><span class="line">        copy data </span><br><span class="line">3.</span><br></pre></td></tr></table></figure><blockquote><h4 id="粘包的触发条件"><a href="#粘包的触发条件" class="headerlink" title="粘包的触发条件"></a>粘包的触发条件</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">客户端</span><br><span class="line">client.send(&apos;hello&apos;)</span><br><span class="line">client.send(&apos;world&apos;)</span><br><span class="line"></span><br><span class="line">服务端</span><br><span class="line">res1 = conn.recv(1024) # &apos;helloworld&apos;</span><br><span class="line">res2 = conn.recv(1024) # &apos;&apos;</span><br><span class="line">send间隔比较短,就会触发粘包，合并一次发送到服务端</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">客户端</span><br><span class="line">client.send(&apos;hello&apos;)</span><br><span class="line">time.sleep(5)</span><br><span class="line">client.send(&apos;world&apos;)</span><br><span class="line">服务端</span><br><span class="line">res1 = conn.recv(1024) # &apos;hello&apos;</span><br><span class="line">res2 = conn.recv(1024) # 5秒后 &apos;world&apos;</span><br><span class="line"></span><br><span class="line">send的间隔已经超过一次正常数据接受的时间。会分两次发送</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line">客户端</span><br><span class="line">client.send(&apos;hello&apos;)</span><br><span class="line">time.sleep(5)</span><br><span class="line">client.send(&apos;world&apos;)</span><br><span class="line">服务端</span><br><span class="line">res1 = conn.recv(1) # &apos;h&apos;</span><br><span class="line">res2 = conn.recv(1024) # 5秒后 &apos;ellowworld&apos;</span><br><span class="line"></span><br><span class="line">服务端粘包：第一次内容过多，会在下次接受多余的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-02-02socket</title>
      <link href="/2018/09/09/Py003-02-02socket/"/>
      <url>/2018/09/09/Py003-02-02socket/</url>
      
        <content type="html"><![CDATA[<h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><h4 id="简单例子-拨打电话"><a href="#简单例子-拨打电话" class="headerlink" title="简单例子 拨打电话"></a>简单例子 拨打电话</h4><p>服务端.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line"># 1 买手机</span><br><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"># 2 绑定手机卡</span><br><span class="line"></span><br><span class="line">phone.bind((&apos;127.0.0.1&apos;,8081)) # ip 加端口号</span><br><span class="line"># 3 开机</span><br><span class="line">phone.listen(5) # 5代表最大链接数</span><br><span class="line"></span><br><span class="line"># 4 等电话打入</span><br><span class="line">print(&apos;starting....&apos;)</span><br><span class="line">conn,client_addr = phone.accept()</span><br><span class="line"></span><br><span class="line"># 5 收发消息</span><br><span class="line"># 单位bytes 现在表示最大接受1024字节的数据</span><br><span class="line">data = conn.recv(1024) # 1024代表接受数据的最大数</span><br><span class="line">print(&apos;客户端的数据&apos;,data)</span><br><span class="line">conn.send(data.upper())</span><br><span class="line"></span><br><span class="line"># 6 挂电话</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"># 7 关机</span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><p>客户端.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line"># 1 买手机</span><br><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"># 2 拨号</span><br><span class="line">phone.connect((&apos;127.0.0.1&apos;,8081)) # ip 加端口号</span><br><span class="line"></span><br><span class="line"># 3 发/收消息</span><br><span class="line">phone.send(&apos;hello&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">data = phone.recv(1024)</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"># 4 关闭</span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><h4 id="通讯循环"><a href="#通讯循环" class="headerlink" title="通讯循环"></a>通讯循环</h4><p>服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">phone.bind((&apos;127.0.0.1&apos;,8081)) # ip 加端口号</span><br><span class="line">phone.listen(5) # 5代表最大链接数</span><br><span class="line"></span><br><span class="line">print(&apos;starting....&apos;)</span><br><span class="line">conn,client_addr = phone.accept()</span><br><span class="line"></span><br><span class="line">while True: # 通讯循环</span><br><span class="line">    data = conn.recv(1024)</span><br><span class="line">    print(&apos;客户端的数据&apos;,data)</span><br><span class="line">    conn.send(data.upper())</span><br><span class="line"></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">phone.connect((&apos;127.0.0.1&apos;,8081)) # ip 加端口号</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    msg = input(&apos;&gt;&gt;:&apos;).strip()</span><br><span class="line">    phone.send(msg.encode(&apos;utf-8&apos;))</span><br><span class="line">    data = phone.recv(1024)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><h4 id="重复启动服务端的bug"><a href="#重复启动服务端的bug" class="headerlink" title="重复启动服务端的bug"></a>重复启动服务端的bug</h4><p>因为端口重复占用，所以必须收到切换端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"># 添加这一行代表重用端口</span><br><span class="line">phone.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)</span><br><span class="line">phone.connect((&apos;127.0.0.1&apos;,8081)) # ip 加端口号</span><br></pre></td></tr></table></figure><h4 id="客户端直接敲回车发数据的bug"><a href="#客户端直接敲回车发数据的bug" class="headerlink" title="客户端直接敲回车发数据的bug"></a>客户端直接敲回车发数据的bug</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">phone.connect((&apos;127.0.0.1&apos;,8081)) # ip 加端口号</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    msg = input(&apos;&gt;&gt;:&apos;).strip()</span><br><span class="line">    # bug解决</span><br><span class="line">    if not msg:continue</span><br><span class="line">    phone.send(msg.encode(&apos;utf-8&apos;))</span><br><span class="line">    data = phone.recv(1024)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><h4 id="客户端意外中断，服务器端在linux里会造成死循环的bug"><a href="#客户端意外中断，服务器端在linux里会造成死循环的bug" class="headerlink" title="客户端意外中断，服务器端在linux里会造成死循环的bug"></a>客户端意外中断，服务器端在linux里会造成死循环的bug</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">phone.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)</span><br><span class="line">phone.bind((&apos;127.0.0.1&apos;,8081)) # ip 加端口号</span><br><span class="line">phone.listen(5) # 5代表最大链接数</span><br><span class="line"></span><br><span class="line">print(&apos;starting....&apos;)</span><br><span class="line">conn,client_addr = phone.accept()</span><br><span class="line"></span><br><span class="line">while True: # 通讯循环</span><br><span class="line">    try:</span><br><span class="line">        data = conn.recv(1024)</span><br><span class="line">        # 针对客户端中断问题</span><br><span class="line">        if not data:break # 适用于linux　如果是windows就 try catch</span><br><span class="line">        print(&apos;客户端的数据&apos;,data)</span><br><span class="line">        conn.send(data.upper())</span><br><span class="line">    except ConnectionResetError: # 适用于windows</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><h4 id="在不会并发的情况下——一个一个的服务用户"><a href="#在不会并发的情况下——一个一个的服务用户" class="headerlink" title="在不会并发的情况下——一个一个的服务用户"></a>在不会并发的情况下——一个一个的服务用户</h4><p>服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">phone.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)</span><br><span class="line">phone.bind((&apos;127.0.0.1&apos;,8081)) # ip 加端口号</span><br><span class="line">phone.listen(5) # 5代表最大链接数</span><br><span class="line"></span><br><span class="line">print(&apos;starting....&apos;)</span><br><span class="line">while True: # 链接循环</span><br><span class="line">    conn,client_addr = phone.accept()</span><br><span class="line"></span><br><span class="line">    while True: # 通讯循环</span><br><span class="line">        try:</span><br><span class="line">            data = conn.recv(1024)</span><br><span class="line">            # 针对客户端中断问题</span><br><span class="line">            if not data:break # 适用于linux　如果是windows就 try catch</span><br><span class="line">            print(&apos;客户端的数据&apos;,data)</span><br><span class="line">            conn.send(data.upper())</span><br><span class="line">        except ConnectionResetError: # 适用于windows</span><br><span class="line">            break</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">phone.close()</span><br></pre></td></tr></table></figure><p>服务一个客户就要把对应客户端终止才能服务下一个客户</p>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-02-01网络</title>
      <link href="/2018/09/09/Py003-02-01%E7%BD%91%E7%BB%9C/"/>
      <url>/2018/09/09/Py003-02-01%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><blockquote><p>os七层：</p></blockquote><ul><li>应——应用层</li><li>表——表示层</li><li>会——会话层</li><li>传——传输层</li><li>网——网络层</li><li>数——数据链路层</li><li>物——物理层</li></ul><blockquote><p>也叫五层协议</p></blockquote><p>把 应用层/表示层/会话层 统一表示为——应用层</p><h4 id="五层协议详解"><a href="#五层协议详解" class="headerlink" title="五层协议详解"></a>五层协议详解</h4><blockquote><p>数据报：有报头和报文   报头代表头信息 报文是实际的数据内容</p></blockquote><ul><li>物理层</li></ul><p>物理设备，负责发电信号——形如01010101的二进制内容通过网线</p><ul><li>数据链路层</li></ul><p>以太网协议：一组数据帧称为一个数据报，基于mac地址以广播的形式(只能在局域网里)</p><ul><li>网络层</li></ul><p>以太网通过mac只能表示同一局域网的一台机子</p><p>而ip地址可以标识一个子网的地址</p><p>IP协议：也是数据报的形式：形如 ip头+data</p><p>最后ip+mac就可以标识全世界独一无二的一台机器</p><ul><li>传输层</li></ul><p>tcp/udp</p><ul><li>应用层</li></ul><p>各种软件自己的协议  http/ftp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">客户端:                                                     服务端：</span><br><span class="line">应用层   http头 + data                                      应用层   http头 + data </span><br><span class="line">↓封包                                                       ↑解包</span><br><span class="line">传输层   tcp头 + (http头 + data)                            传输层   tcp头 + (http头 + data)</span><br><span class="line">↓封包                                                       ↑解包 </span><br><span class="line">网络层   ip头 + (tcp头 + (http头 + data))                    网络层   ip头 + (tcp头 + (http头 + data))</span><br><span class="line">↓封包                                                       ↑解包 </span><br><span class="line">数据链路层 以太网头 + (ip头 + (tcp头 + (http头 + data)))      数据链路层 以太网头 + (ip头 + (tcp头 + (http头 + data)))</span><br><span class="line">↓                                                           ↑</span><br><span class="line">物理层                                                      物理层 </span><br><span class="line">↓                                                           ↑</span><br><span class="line">    →→→→→→→→→→→→→→→→→→→→→→→→网络→→→→→→→→→→→→→→→→→→→→→→→→</span><br></pre></td></tr></table></figure><h4 id="tcp三次握手"><a href="#tcp三次握手" class="headerlink" title="tcp三次握手"></a>tcp三次握手</h4><ol><li>客户端：我能连接你吗？</li><li>服务端：我准备好了，你连接吧！</li><li>客户端：好！我连接你了</li></ol><h4 id="tcp协议-udp协议"><a href="#tcp协议-udp协议" class="headerlink" title="tcp协议/udp协议"></a>tcp协议/udp协议</h4><p>tcp协议</p><ul><li>可靠的：面向连接，双向通道</li><li>传输速度慢</li></ul><p>生活的实例：你往水里扔石头看见了浪花</p><p>udp协议</p><ul><li>不可靠：不面向连接</li><li>直接发送数据是否收到数据未知，数据可能丢</li><li>传输速度快</li></ul><p>生活的实例：你往草里扔石头没啥反应</p>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-15异常操作方式</title>
      <link href="/2018/09/09/Py003-01-15%E5%BC%82%E5%B8%B8%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/09/09/Py003-01-15%E5%BC%82%E5%B8%B8%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><h4 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h4><blockquote><p>被监测的代码块抛出的异常有多种可能性，并且我们需要针对每一种异常类型都定制专门的处理逻辑</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&apos;===&gt;1&apos;)</span><br><span class="line">    # name</span><br><span class="line">    print(&apos;===&gt;2&apos;)</span><br><span class="line">    l=[1,2,3]</span><br><span class="line">    # l[100]</span><br><span class="line">    print(&apos;===&gt;3&apos;)</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    d[&apos;name&apos;]</span><br><span class="line">    print(&apos;===&gt;4&apos;)</span><br><span class="line"></span><br><span class="line">except NameError as e:</span><br><span class="line">    print(&apos;---&gt;&apos;,e)</span><br><span class="line"></span><br><span class="line">except IndexError as e:</span><br><span class="line">    print(&apos;---&gt;&apos;,e)</span><br><span class="line"></span><br><span class="line">except KeyError as e:</span><br><span class="line">    print(&apos;---&gt;&apos;,e)</span><br><span class="line"></span><br><span class="line">print(&apos;====&gt;afer code&apos;)</span><br></pre></td></tr></table></figure><h4 id="万能异常：Exception"><a href="#万能异常：Exception" class="headerlink" title="万能异常：Exception"></a>万能异常：Exception</h4><ul><li>被监测的代码块抛出的异常有多种可能性，</li><li>并且我们针对所有的异常类型都只用一种处理逻辑就可以了，那就使用Exception</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&apos;===&gt;1&apos;)</span><br><span class="line">    # name</span><br><span class="line">    print(&apos;===&gt;2&apos;)</span><br><span class="line">    l=[1,2,3]</span><br><span class="line">    l[100]</span><br><span class="line">    print(&apos;===&gt;3&apos;)</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    d[&apos;name&apos;]</span><br><span class="line">    print(&apos;===&gt;4&apos;)</span><br><span class="line"></span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&apos;异常发生啦：&apos;,e)</span><br><span class="line"></span><br><span class="line">print(&apos;====&gt;afer code&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&apos;===&gt;1&apos;)</span><br><span class="line">    # name</span><br><span class="line">    print(&apos;===&gt;2&apos;)</span><br><span class="line">    l=[1,2,3]</span><br><span class="line">    # l[100]</span><br><span class="line">    print(&apos;===&gt;3&apos;)</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    d[&apos;name&apos;]</span><br><span class="line">    print(&apos;===&gt;4&apos;)</span><br><span class="line"></span><br><span class="line">except NameError as e:</span><br><span class="line">    print(&apos;---&gt;&apos;,e)</span><br><span class="line"></span><br><span class="line">except IndexError as e:</span><br><span class="line">    print(&apos;---&gt;&apos;,e)</span><br><span class="line"></span><br><span class="line">except KeyError as e:</span><br><span class="line">    print(&apos;---&gt;&apos;,e)</span><br><span class="line"></span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&apos;统一的处理方法&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&apos;====&gt;afer code&apos;)</span><br></pre></td></tr></table></figure><h4 id="其他结构"><a href="#其他结构" class="headerlink" title="其他结构"></a>其他结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&apos;===&gt;1&apos;)</span><br><span class="line">    # name</span><br><span class="line">    print(&apos;===&gt;2&apos;)</span><br><span class="line">    l=[1,2,3]</span><br><span class="line">    # l[100]</span><br><span class="line">    print(&apos;===&gt;3&apos;)</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    d[&apos;name&apos;]</span><br><span class="line">    print(&apos;===&gt;4&apos;)</span><br><span class="line"></span><br><span class="line">except NameError as e:</span><br><span class="line">    print(&apos;---&gt;&apos;,e)</span><br><span class="line"></span><br><span class="line">except IndexError as e:</span><br><span class="line">    print(&apos;---&gt;&apos;,e)</span><br><span class="line"></span><br><span class="line">except KeyError as e:</span><br><span class="line">    print(&apos;---&gt;&apos;,e)</span><br><span class="line"></span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&apos;统一的处理方法&apos;)</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">    print(&apos;在被检测的代码块没有发生异常时执行&apos;)</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    print(&apos;不管被检测的代码块有无发生异常都会执行&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&apos;====&gt;afer code&apos;)</span><br><span class="line"></span><br><span class="line"># 回收资源</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    f=open(&apos;a.txt&apos;,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">    print(next(f))</span><br><span class="line">    print(next(f))</span><br><span class="line">    print(next(f))</span><br><span class="line">    print(next(f))</span><br><span class="line"></span><br><span class="line">    print(next(f))</span><br><span class="line">    print(next(f))</span><br><span class="line">finally:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h4 id="主动触发异常：raise-异常类型-值"><a href="#主动触发异常：raise-异常类型-值" class="headerlink" title="主动触发异常：raise  异常类型(值)"></a>主动触发异常：raise  异常类型(值)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        if not isinstance(name,str):</span><br><span class="line">            raise TypeError(&apos;名字必须传入str类型&apos;)</span><br><span class="line">        if not isinstance(age,int):</span><br><span class="line">            raise TypeError(&apos;年龄必须传入int类型&apos;)</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">p=People(&apos;egon&apos;,18)</span><br></pre></td></tr></table></figure><h4 id="自定义异常类型"><a href="#自定义异常类型" class="headerlink" title="自定义异常类型"></a>自定义异常类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class MyException(BaseException):</span><br><span class="line">    def __init__(self,msg):</span><br><span class="line">        super(MyException,self).__init__()</span><br><span class="line">        self.msg=msg</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;&lt;%s&gt;&apos; %self.msg</span><br><span class="line"></span><br><span class="line">raise MyException(&apos;我自己的异常类型&apos;) #print(obj)</span><br></pre></td></tr></table></figure><h4 id="断言assert"><a href="#断言assert" class="headerlink" title="断言assert"></a>断言assert</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">info=&#123;&#125;</span><br><span class="line">info[&apos;name&apos;]=&apos;hjx&apos;</span><br><span class="line"># info[&apos;age&apos;]=18</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># if &apos;name&apos; not in info:</span><br><span class="line">#     raise KeyError(&apos;必须有name这个key&apos;)</span><br><span class="line">#</span><br><span class="line"># if &apos;age&apos; not in info:</span><br><span class="line">#     raise KeyError(&apos;必须有age这个key&apos;)</span><br><span class="line"></span><br><span class="line">assert (&apos;name&apos; in info) and (&apos;age&apos; in info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if info[&apos;name&apos;] == &apos;hjx&apos; and info[&apos;age&apos;] &gt; 10:</span><br><span class="line">    print(&apos;welcome&apos;)</span><br></pre></td></tr></table></figure><h4 id="万能异常-铁定不出错"><a href="#万能异常-铁定不出错" class="headerlink" title="万能异常(铁定不出错)"></a>万能异常(铁定不出错)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">except Exception:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-14异常处理</title>
      <link href="/2018/09/09/Py003-01-14%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2018/09/09/Py003-01-14%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><blockquote><p>异常是错误发生的信号，一旦程序出错，并且程序没有处理这个错误，那个就会抛出异常，并且程序的运行随之终止</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;1&apos;)</span><br><span class="line">print(&apos;2&apos;)</span><br><span class="line">print(&apos;3&apos;)</span><br><span class="line">int(&apos;aaaa&apos;)</span><br><span class="line">print(&apos;4&apos;)</span><br><span class="line">print(&apos;5&apos;)</span><br><span class="line">print(&apos;6&apos;)</span><br></pre></td></tr></table></figure><h4 id="错误分为两种："><a href="#错误分为两种：" class="headerlink" title="错误分为两种："></a>错误分为两种：</h4><ul><li>语法错误:在程序执行前就要立刻改正过来</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;xxxx&apos;</span><br><span class="line">if 1 &gt; 2</span><br></pre></td></tr></table></figure><ul><li>逻辑错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#ValueError</span><br><span class="line"># int(&apos;aaa&apos;)</span><br><span class="line"></span><br><span class="line">#NameError</span><br><span class="line"># name</span><br><span class="line"></span><br><span class="line">#IndexError</span><br><span class="line"># l=[1,2,3]</span><br><span class="line"># l[1000]</span><br><span class="line"></span><br><span class="line">#KeyError</span><br><span class="line"># d=&#123;&#125;</span><br><span class="line"># d[&apos;name&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#AttributeError</span><br><span class="line"># class Foo:</span><br><span class="line">#     pass</span><br><span class="line">#</span><br><span class="line"># Foo.xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ZeroDivisionError:</span><br><span class="line"># 1/0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#TypeError:int类型不可迭代</span><br><span class="line"># for i in 3:</span><br><span class="line">#     pass</span><br><span class="line"></span><br><span class="line"># import time</span><br><span class="line"># time.sleep(1000)</span><br></pre></td></tr></table></figure><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><blockquote><h5 id="强调一：错误发生的条件如果是可以预知的，此时应该用if判断去预防异常"><a href="#强调一：错误发生的条件如果是可以预知的，此时应该用if判断去预防异常" class="headerlink" title="强调一：错误发生的条件如果是可以预知的，此时应该用if判断去预防异常"></a>强调一：错误发生的条件如果是可以预知的，此时应该用if判断去预防异常</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AGE=10</span><br><span class="line">age=input(&apos;&gt;&gt;: &apos;).strip()</span><br><span class="line"></span><br><span class="line">if age.isdigit():</span><br><span class="line">    age=int(age)</span><br><span class="line">    if age &gt; AGE:</span><br><span class="line">        print(&apos;太大了&apos;)</span><br></pre></td></tr></table></figure><blockquote><h5 id="强调二：错误发生的条件如果是不可预知的，此时应该用异常处理机制，try…except"><a href="#强调二：错误发生的条件如果是不可预知的，此时应该用异常处理机制，try…except" class="headerlink" title="强调二：错误发生的条件如果是不可预知的，此时应该用异常处理机制，try…except"></a>强调二：错误发生的条件如果是不可预知的，此时应该用异常处理机制，try…except</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    f=open(&apos;a.txt&apos;,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">    print(next(f),end=&apos;&apos;)</span><br><span class="line">    print(next(f),end=&apos;&apos;)</span><br><span class="line">    print(next(f),end=&apos;&apos;)</span><br><span class="line">    print(next(f),end=&apos;&apos;)</span><br><span class="line"></span><br><span class="line">    print(next(f),end=&apos;&apos;)</span><br><span class="line">    print(next(f),end=&apos;&apos;)</span><br><span class="line">    print(next(f),end=&apos;&apos;)</span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">except StopIteration:</span><br><span class="line">    print(&apos;出错啦&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&apos;====&gt;1&apos;)</span><br><span class="line">print(&apos;====&gt;2&apos;)</span><br><span class="line">print(&apos;====&gt;3&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-13元类</title>
      <link href="/2018/09/09/Py003-01-13%E5%85%83%E7%B1%BB/"/>
      <url>/2018/09/09/Py003-01-13%E5%85%83%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="选学内容-基本用不到"><a href="#选学内容-基本用不到" class="headerlink" title="选学内容(基本用不到)"></a>选学内容(基本用不到)</h3></blockquote><h3 id="元类介绍"><a href="#元类介绍" class="headerlink" title="元类介绍"></a>元类介绍</h3><blockquote><p>储备知识 exec</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">参数1 ：字符串形式的命令</span><br><span class="line">参数2 ：全局作用域(字典形式)如果不指定默认是globals()</span><br><span class="line">参数3 ：局部作用域(字典形式)如果不指定默认是locals()</span><br><span class="line"></span><br><span class="line">g = &#123;</span><br><span class="line">    &quot;x&quot;:1,</span><br><span class="line">    &quot;y&quot;:2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l = &#123;&#125;</span><br><span class="line"></span><br><span class="line">exec(&apos;&apos;&apos;</span><br><span class="line">global x,m</span><br><span class="line">x = 10</span><br><span class="line">m = 100</span><br><span class="line"></span><br><span class="line">z = 3</span><br><span class="line">&apos;&apos;&apos;,g,l)</span><br><span class="line"></span><br><span class="line">print(g) # 全局作用域  x的值修改为 10  新增 m = 100</span><br><span class="line">print(l) # 局部作用域里  l 新增了 z:3</span><br></pre></td></tr></table></figure><h4 id="一切皆对象，对象可以怎么用？"><a href="#一切皆对象，对象可以怎么用？" class="headerlink" title="一切皆对象，对象可以怎么用？"></a>一切皆对象，对象可以怎么用？</h4><ol><li>都可以被引用，x=obj</li><li>都可以当作函数的参数传入</li><li>都可以当作函数的返回值</li><li>都可以当作容器类的元素，l=[func,time,obj,1]</li></ol><blockquote><p>类也是对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Foo():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">print(type(obj))</span><br><span class="line">print(type(Foo)) </span><br><span class="line"></span><br><span class="line"># &lt;class &apos;__main__.Foo&apos;&gt;</span><br><span class="line"># &lt;class &apos;type&apos;&gt;</span><br><span class="line"></span><br><span class="line">class Bar():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(type(Bar)) #  &lt;class &apos;type&apos;&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="产生类的类称之为元类，默认所有用class定义的类，它们的元类是type"><a href="#产生类的类称之为元类，默认所有用class定义的类，它们的元类是type" class="headerlink" title="产生类的类称之为元类，默认所有用class定义的类，它们的元类是type"></a>产生类的类称之为元类，默认所有用class定义的类，它们的元类是type</h3></blockquote><h4 id="定义类的两种方式"><a href="#定义类的两种方式" class="headerlink" title="定义类的两种方式"></a>定义类的两种方式</h4><ul><li>class关键字</li><li>type元类产生</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># class方式</span><br><span class="line">class Chinese: #Chinese=type(...)</span><br><span class="line">    country=&apos;China&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self,namem,age):</span><br><span class="line">        self.name=namem</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    def talk(self):</span><br><span class="line">        print(&apos;%s is talking&apos; %self.name)</span><br><span class="line"></span><br><span class="line"># type方式</span><br><span class="line"># 定义类的三要素:类名，类的基类们，类的名称空间</span><br><span class="line">class_name=&apos;Chinese&apos;</span><br><span class="line">class_bases=(object,)</span><br><span class="line"></span><br><span class="line">class_body=&quot;&quot;&quot;</span><br><span class="line">country=&apos;China&apos;</span><br><span class="line"></span><br><span class="line">def __init__(self,namem,age):</span><br><span class="line">    self.name=namem</span><br><span class="line">    self.age=age</span><br><span class="line"></span><br><span class="line">def talk(self):</span><br><span class="line">    print(&apos;%s is talking&apos; %self.name)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">class_dic=&#123;&#125;</span><br><span class="line">exec(class_body,globals(),class_dic)</span><br><span class="line"></span><br><span class="line"># 定义类的三要素:类名，类的基类们，类的名称空间</span><br><span class="line">Chinese1=type(class_name,class_bases,class_dic)</span><br></pre></td></tr></table></figure><h4 id="自定义元类控制类的创建"><a href="#自定义元类控制类的创建" class="headerlink" title="自定义元类控制类的创建"></a>自定义元类控制类的创建</h4><ul><li>类名必须大写</li><li>必须有文档注释</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Mymeta(type):</span><br><span class="line">    def __init__(self,class_name,class_bases,class_dic):</span><br><span class="line">        if not class_name.istitle():</span><br><span class="line">            raise TypeError(&apos;类名的首字母必须大写&apos;)</span><br><span class="line"></span><br><span class="line">        if &apos;__doc__&apos; not in class_dic or not class_dic[&apos;__doc__&apos;].strip():</span><br><span class="line">            raise TypeError(&apos;必须有注释，且注释不能为空&apos;)</span><br><span class="line"></span><br><span class="line">        super(Mymeta,self).__init__(class_name,class_bases,class_dic)</span><br><span class="line"></span><br><span class="line">class Chinese(object,metaclass=Mymeta):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    中文人的类</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    country=&apos;China&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self,namem,age):</span><br><span class="line">        self.name=namem</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    def talk(self):</span><br><span class="line">        print(&apos;%s is talking&apos; %self.name)</span><br></pre></td></tr></table></figure><h4 id="自定义元类控制类的实例化行为"><a href="#自定义元类控制类的实例化行为" class="headerlink" title="自定义元类控制类的实例化行为"></a>自定义元类控制类的实例化行为</h4><p>知识储备call方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Foo():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"># 请问obj能当作函数调用吗？</span><br><span class="line">obj(1,2,3) # 报错</span><br><span class="line"># --------------------------------------</span><br><span class="line"># 需要提供call方法</span><br><span class="line"># 再看</span><br><span class="line"></span><br><span class="line">class Foo2():</span><br><span class="line">    def __call__(self,*args,**kwargs):</span><br><span class="line">        print(&apos;===&gt;&apos;)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">obj2= Foo2()</span><br><span class="line">obj2(1,2,3) # 不报错</span><br></pre></td></tr></table></figure><blockquote><p>切入正题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class Mymeta(type):</span><br><span class="line">    def __init__(self,class_name,class_bases,class_dic):</span><br><span class="line">        if not class_name.istitle():</span><br><span class="line">            raise TypeError(&apos;类名的首字母必须大写&apos;)</span><br><span class="line"></span><br><span class="line">        if &apos;__doc__&apos; not in class_dic or not class_dic[&apos;__doc__&apos;].strip():</span><br><span class="line">            raise TypeError(&apos;必须有注释，且注释不能为空&apos;)</span><br><span class="line"></span><br><span class="line">        super(Mymeta,self).__init__(class_name,class_bases,class_dic)</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs): #obj=Chinese(&apos;hjx&apos;,age=18)</span><br><span class="line">        # print(self) #self=Chinese</span><br><span class="line">        # print(args) #args=(&apos;hjx&apos;,)</span><br><span class="line">        # print(kwargs) #kwargs=&#123;&apos;age&apos;: 18&#125;</span><br><span class="line"></span><br><span class="line">        #第一件事：先造一个空对象obj</span><br><span class="line">        obj=object.__new__(self)</span><br><span class="line">        #第二件事：初始化obj</span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        #第三件事：返回obj</span><br><span class="line">        return obj</span><br><span class="line"></span><br><span class="line">class Chinese(object,metaclass=Mymeta):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    中文人的类</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    country=&apos;China&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self,namem,age):</span><br><span class="line">        self.name=namem</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    def talk(self):</span><br><span class="line">        print(&apos;%s is talking&apos; %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Chinese(&apos;egon&apos;,age=18) #Chinese.__call__(Chinese,&apos;hjx&apos;,18)</span><br><span class="line"></span><br><span class="line">print(obj.__dict__)</span><br></pre></td></tr></table></figure><h4 id="元类控制类的实例化行为"><a href="#元类控制类的实例化行为" class="headerlink" title="元类控制类的实例化行为"></a>元类控制类的实例化行为</h4><p>单例模式</p><blockquote><h4 id="实现方式一："><a href="#实现方式一：" class="headerlink" title="实现方式一："></a>实现方式一：</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class MySQL:</span><br><span class="line">    __instance=None #__instance=obj1</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.host=&apos;127.0.0.1&apos;</span><br><span class="line">        self.port=3306</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def singleton(cls):</span><br><span class="line">        if not cls.__instance:</span><br><span class="line">            obj=cls()</span><br><span class="line">            cls.__instance=obj</span><br><span class="line">        return cls.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def conn(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def execute(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># obj1=MySQL()</span><br><span class="line"># obj2=MySQL()</span><br><span class="line"># obj3=MySQL()</span><br><span class="line">#</span><br><span class="line"># print(obj1)</span><br><span class="line"># print(obj2)</span><br><span class="line"># print(obj3)</span><br><span class="line"></span><br><span class="line">obj1=MySQL.singleton()</span><br><span class="line">obj2=MySQL.singleton()</span><br><span class="line">obj3=MySQL.singleton()</span><br><span class="line"></span><br><span class="line">print(obj1 is obj3)</span><br></pre></td></tr></table></figure><blockquote><h4 id="实现方式二：元类的方式"><a href="#实现方式二：元类的方式" class="headerlink" title="实现方式二：元类的方式"></a>实现方式二：元类的方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Mymeta(type):</span><br><span class="line">    def __init__(self,class_name,class_bases,class_dic):</span><br><span class="line">        if not class_name.istitle():</span><br><span class="line">            raise TypeError(&apos;类名的首字母必须大写&apos;)</span><br><span class="line"></span><br><span class="line">        if &apos;__doc__&apos; not in class_dic or not class_dic[&apos;__doc__&apos;].strip():</span><br><span class="line">            raise TypeError(&apos;必须有注释，且注释不能为空&apos;)</span><br><span class="line"></span><br><span class="line">        super(Mymeta,self).__init__(class_name,class_bases,class_dic)</span><br><span class="line">        self.__instance=None</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs): #obj=Chinese(&apos;egon&apos;,age=18)</span><br><span class="line">        if not self.__instance:</span><br><span class="line">            obj=object.__new__(self)</span><br><span class="line">            self.__init__(obj)</span><br><span class="line">            self.__instance=obj</span><br><span class="line"></span><br><span class="line">        return self.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Mysql(object,metaclass=Mymeta):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    mysql xxx</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.host=&apos;127.0.0.1&apos;</span><br><span class="line">        self.port=3306</span><br><span class="line"></span><br><span class="line">    def conn(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def execute(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1=Mysql()</span><br><span class="line">obj2=Mysql()</span><br><span class="line">obj3=Mysql()</span><br><span class="line"></span><br><span class="line">print(obj1 is obj2 is obj3)</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-12内置方法</title>
      <link href="/2018/09/09/Py003-01-12%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
      <url>/2018/09/09/Py003-01-12%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h3><ul><li>isinstance(对象,类名) 谁是谁的实例</li><li>issubclass(sub,super) 这个类是不是另一个类的子类</li></ul><h4 id="item系列"><a href="#item系列" class="headerlink" title="item系列"></a>item系列</h4><p>将类定制成像字典一样的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        print(&apos;get item&apos;)</span><br><span class="line">        self.__dict__</span><br><span class="line">        print(item)</span><br><span class="line">        return self.__dict__.get(item)</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key,value):</span><br><span class="line">        print(&apos;set item&apos;)</span><br><span class="line">        print(key,value)</span><br><span class="line">        self.__dict__[key] = value</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        print(&apos;del item&apos;)</span><br><span class="line">        print(key)</span><br><span class="line">        del self.__dict__[key]</span><br><span class="line"></span><br><span class="line">obj = Foo(&apos;hjx&apos;)</span><br><span class="line">print(obj.__dict__)</span><br><span class="line"># 属性名</span><br><span class="line">print(obj[&apos;name&apos;]) # obj.name</span><br><span class="line">print(obj[&apos;namexxx&apos;] ) # 不会报错</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj[&apos;sex&apos;] = &apos;man&apos;</span><br><span class="line">print(obj[&apos;sex&apos;])</span><br><span class="line"></span><br><span class="line">del obj[&apos;name&apos;]</span><br><span class="line">print(obj.__dict__)</span><br></pre></td></tr></table></figure><h4 id="双下str双下"><a href="#双下str双下" class="headerlink" title="双下str双下"></a>双下str双下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;&lt;name:%s,age:%s&gt;&apos;%(self.name,self.age)</span><br><span class="line"></span><br><span class="line">p = People(&apos;hjx&apos;,18)</span><br><span class="line"></span><br><span class="line">print(p) # &lt;name:hjx,age:18&gt;</span><br></pre></td></tr></table></figure><h4 id="双下del双下"><a href="#双下del双下" class="headerlink" title="双下del双下"></a>双下del双下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;aa.py&apos;,mode=&apos;w+&apos;)</span><br><span class="line">f.read()</span><br><span class="line">f.close() # 回收操作系统资源</span><br><span class="line"></span><br><span class="line"># 此时f还存在不存在——存在</span><br><span class="line">print(f) # &lt;_io.TextIOWrapper name=&apos;aa.py&apos; mode=&apos;w+&apos; encoding=&apos;cp936&apos;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>再看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Open:</span><br><span class="line">    def __init__(self,fileName):</span><br><span class="line">        print(&apos;open file...&apos;)</span><br><span class="line">        self.fileName = fileName</span><br><span class="line"></span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&apos;del_____&apos;)</span><br><span class="line"></span><br><span class="line">f2 = Open(&apos;aa.txt&apos;)</span><br><span class="line"># del f2</span><br><span class="line">print(&apos;-----main------&apos;)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">open file...</span><br><span class="line">-----main------</span><br><span class="line">del_____</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">---------------------</span><br><span class="line">f3 = Open(&apos;aa.txt&apos;)</span><br><span class="line">del f3</span><br><span class="line">print(&apos;-----main------&apos;)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">open file...</span><br><span class="line">del_____</span><br><span class="line">-----main------</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果：你不调用 del程序会在执行结束后自动帮你调用  ，如果你手动调用了，就不帮你调用了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-11反射</title>
      <link href="/2018/09/09/Py003-01-11%E5%8F%8D%E5%B0%84/"/>
      <url>/2018/09/09/Py003-01-11%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    def talk(self):</span><br><span class="line">        print(&apos;%s is talking &apos;%self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = People(&apos;hjx&apos;,18)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 判断是否含有属性和方法</span><br><span class="line">print(hasattr(obj,&apos;name&apos;))</span><br><span class="line">print(hasattr(obj,&apos;talk&apos;))</span><br><span class="line"></span><br><span class="line"># 拿到对象的属性或方法</span><br><span class="line"># print(getattr(obj,&apos;namexxxx&apos;)) 报错因为 没有该属性</span><br><span class="line"># 兜底写法</span><br><span class="line">print(getattr(obj,&apos;namexxxx&apos;,None))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改对象的属性</span><br><span class="line">setattr(obj,&apos;sex&apos;,&apos;man&apos;)</span><br><span class="line">print(obj.sex)</span><br><span class="line"></span><br><span class="line"># 删除对象的属性</span><br><span class="line">delattr(obj,&apos;age&apos;)</span><br><span class="line">print(obj.__dict__)</span><br><span class="line"></span><br><span class="line"># 类的属性也是可以获取的</span><br><span class="line">print(getattr(People,&apos;city&apos;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-10绑定方法与非绑定方法</title>
      <link href="/2018/09/09/Py003-01-10%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/"/>
      <url>/2018/09/09/Py003-01-10%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95%E4%B8%8E%E9%9D%9E%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="绑定方法与非绑定方法"><a href="#绑定方法与非绑定方法" class="headerlink" title="绑定方法与非绑定方法"></a>绑定方法与非绑定方法</h3><blockquote><p>在类内部定义的方法，分为两类</p></blockquote><ol><li><p>绑定方法:绑定给谁，就应该由谁来调用，谁来调用就会把调用者当作第一个参数自动传入</p><ul><li><p>绑定到对象的方法：在类内定义的没有被任何装饰器修饰的</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name = name</span><br><span class="line">    def tell(self):</span><br><span class="line">        print(&apos;名字是：%s&apos;%self.name)</span><br><span class="line"></span><br><span class="line">f = Foo(&apos;hjx&apos;)</span><br><span class="line">print(Foo.tell)  # &lt;function Foo.tell at 0x0000027D2DE7AEA0&gt;</span><br><span class="line">Foo.tell(f) # 类可以调用tell方法，需要传递实例对象</span><br><span class="line"></span><br><span class="line">print(f.tell) # &lt;bound method Foo.tell of &lt;__main__.Foo object at 0x00000197433C95C0&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>绑定到类的方法:在类内定义的同时被装饰器classmethod修饰的方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name = name</span><br><span class="line">  </span><br><span class="line">    @classmethod</span><br><span class="line">    def func(cls):</span><br><span class="line">        print(cls)</span><br><span class="line">f = Foo(&apos;hjx&apos;)</span><br><span class="line">       </span><br><span class="line">print(Foo.func) # &lt;bound method Foo.func of &lt;class &apos;__main__.Foo&apos;&gt;&gt;</span><br><span class="line">Foo.func() # &lt;class &apos;__main__.Foo&apos;&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>非绑定方法：没有自动传值那么一说</p><ul><li><p>非绑定方法：不与类和对象绑定</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    @staticmethod</span><br><span class="line">    def sum(x,y):</span><br><span class="line">        return x+y</span><br><span class="line"></span><br><span class="line">f = Foo(&apos;hjx&apos;)</span><br><span class="line"></span><br><span class="line">print(f.sum)</span><br><span class="line">print(Foo.sum)</span><br><span class="line">f.sum(1,2)</span><br><span class="line">Foo.sum(2,5)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&lt;function Foo.sum at 0x000002240B6A2378&gt;</span><br><span class="line">&lt;function Foo.sum at 0x000002240B6A2378&gt;</span><br><span class="line">3</span><br><span class="line">7</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">import time</span><br><span class="line">settings = &#123;</span><br><span class="line">    &quot;name&quot;:&quot;hjx2&quot;,</span><br><span class="line">    &quot;age&quot;:28,</span><br><span class="line">    &quot;sex&quot;:&apos;man&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class People:</span><br><span class="line">    def __init__(self,name,age,sex):</span><br><span class="line">        self.id = self.create_id()</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    def tellInfo(self): # 绑定到对象的方法</span><br><span class="line">        print(&apos;name is %s,age: %s,sex :%s&apos;%(self.name,self.age,self.sex))</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def from_conf(cls):</span><br><span class="line">        obj = cls(</span><br><span class="line">            settings[&quot;name&quot;],</span><br><span class="line">            settings[&quot;age&quot;],</span><br><span class="line">            settings[&quot;sex&quot;]</span><br><span class="line">        )</span><br><span class="line">        return obj</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def create_id():</span><br><span class="line">        m = hashlib.md5(str(time.time()).encode(&apos;utf-8&apos;))</span><br><span class="line">        return m.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = People(&apos;hjx&apos;,18,&apos;man&apos;)</span><br><span class="line"></span><br><span class="line"># 绑定给对象，就应该由对象调用，自动将对象本身当第一个参数传入</span><br><span class="line">p.tellInfo()</span><br><span class="line"></span><br><span class="line"># 绑定给类，就应该由类来调用，自动将类本身当作第一个参数传入</span><br><span class="line">p2 = People.from_conf()</span><br><span class="line">p2.tellInfo()</span><br><span class="line"></span><br><span class="line"># 非绑定方法，不与类和对象绑定，谁都可以调用，没有自动传值一说</span><br><span class="line">p3 = People.from_conf()</span><br><span class="line">print(p3.id)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-09proterty</title>
      <link href="/2018/09/09/Py003-01-09proterty/"/>
      <url>/2018/09/09/Py003-01-09proterty/</url>
      
        <content type="html"><![CDATA[<h3 id="property的使用"><a href="#property的使用" class="headerlink" title="property的使用"></a>property的使用</h3><p>房屋面积的需求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Room:</span><br><span class="line">    def __init__(self,long_val,width_val):</span><br><span class="line">        self.long_val = long_val</span><br><span class="line">        self.width_val = width_val</span><br><span class="line">    # 房屋的面积</span><br><span class="line">    def Area(self):</span><br><span class="line">        return self.long_val * self.width_val</span><br><span class="line"></span><br><span class="line">r = Room(100,100)</span><br><span class="line"></span><br><span class="line"># 我想要房屋的面积数据,但是要通过方法一样调用  不能像 r.long_val一样去获取</span><br><span class="line">print(r.Area())</span><br></pre></td></tr></table></figure><blockquote><h4 id="property的使用-1"><a href="#property的使用-1" class="headerlink" title="property的使用"></a>property的使用</h4></blockquote><ul><li>使使用者感知不到他在调用方法，它以为是在调用属性</li></ul><p>添加property装饰器后，像访问属性一样访问数据——本质依然是触发方法Area的执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Room:</span><br><span class="line">    def __init__(self,long_val,width_val):</span><br><span class="line">        self.long_val = long_val</span><br><span class="line">        self.width_val = width_val</span><br><span class="line">    @property</span><br><span class="line">    def Area(self):</span><br><span class="line">        return self.long_val * self.width_val</span><br><span class="line"></span><br><span class="line">r = Room(100,100)</span><br><span class="line">print(r.Area)</span><br><span class="line"></span><br><span class="line"># Area能像属性一样赋值吗？</span><br><span class="line"># r.Area = 2000 报错 AttributeError: can&apos;t set attribute</span><br></pre></td></tr></table></figure><h4 id="propety的补充-了解就行"><a href="#propety的补充-了解就行" class="headerlink" title="propety的补充(了解就行)"></a>propety的补充(了解就行)</h4><p>突然你就想像数据一样，给Area赋值呢？ 可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.__name = name</span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        return self.__name</span><br><span class="line">    @name.setter</span><br><span class="line">    def name(self,val):</span><br><span class="line">        if not isinstance(val,str):</span><br><span class="line">            print(&apos;名字必须是字符串&apos;)</span><br><span class="line">            return</span><br><span class="line">        self.__name = val</span><br><span class="line"></span><br><span class="line">    @name.deleter</span><br><span class="line">    def name(self):</span><br><span class="line">        print(&apos;delete 失败&apos;)</span><br><span class="line"></span><br><span class="line">p = People(&apos;hjx&apos;)</span><br><span class="line">print(p.name)</span><br><span class="line">p.name = &apos;李四&apos;</span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line">del p.name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-08封装的意义</title>
      <link href="/2018/09/08/Py003-01-08%E5%B0%81%E8%A3%85%E7%9A%84%E6%84%8F%E4%B9%89/"/>
      <url>/2018/09/08/Py003-01-08%E5%B0%81%E8%A3%85%E7%9A%84%E6%84%8F%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h3 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h3><ul><li>封装数据属性:明确的区分内外,控制外部对隐藏属性的操作行为</li></ul><p>将数据隐藏起来，外部无法直接访问，然后暴露接口访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    def tellInfo(self):</span><br><span class="line">        print(&quot;我是%s，今年%s岁&quot;%(self.__name,self.__age))</span><br><span class="line">    def setInfo(self,name,age):</span><br><span class="line">        if not isinstance(name,str):</span><br><span class="line">            print(&apos;名字必须是字符串&apos;)</span><br><span class="line">            return</span><br><span class="line">        if not isinstance(age, int):</span><br><span class="line">            print(&apos;age必须是数字&apos;)</span><br><span class="line">            return</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = People(&apos;hjx&apos;,18)</span><br><span class="line">p.tellInfo()</span><br><span class="line">p.setInfo(&apos;hjx2&apos;,&apos;aaa&apos;) # 设置年龄失败</span><br></pre></td></tr></table></figure><ul><li>封装方法：隔离复杂度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class ATM:</span><br><span class="line">    def __card(self):</span><br><span class="line">        print(&apos;插卡&apos;)</span><br><span class="line">    def __auth(self):</span><br><span class="line">        print(&apos;用户认证&apos;)</span><br><span class="line">    def __input(self):</span><br><span class="line">        print(&apos;输入取出金额&apos;)</span><br><span class="line">    def __print_bill(self):</span><br><span class="line">        print(&apos;打印出账单&apos;)</span><br><span class="line">    def __take_money(self):</span><br><span class="line">        print(&apos;取款&apos;)</span><br><span class="line"></span><br><span class="line">    def withdraw(self):</span><br><span class="line">        self.__card()</span><br><span class="line">        self.__auth()</span><br><span class="line">        self.__input()</span><br><span class="line">        self.__print_bill()</span><br><span class="line">        self.__take_money()</span><br></pre></td></tr></table></figure><p>支付宝，微信支付，qq支付，</p>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-07封装</title>
      <link href="/2018/09/08/Py003-01-07%E5%B0%81%E8%A3%85/"/>
      <url>/2018/09/08/Py003-01-07%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>属性和方法的隐藏,外部不能直接通过属性和方法名访问</p><ul><li>双下划线前缀的属性和方法,在类外部无法直接这样访问</li><li>但在类的内部可以访问这些“双下划线前缀的属性和方法”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class A:</span><br><span class="line">    __x = 1</span><br><span class="line"></span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    def __foo(self):</span><br><span class="line">        print(&apos;run foo&apos;)</span><br><span class="line">    </span><br><span class="line">    def bar(self):</span><br><span class="line">        self.__foo()</span><br><span class="line">        print(&apos;from bar&apos;)</span><br><span class="line"></span><br><span class="line"># print(A.__x)  报错</span><br><span class="line"># print(A.__foo())  报错</span><br><span class="line"># print(A.bar()) 不报错</span><br><span class="line"></span><br><span class="line"># 即使创建该类对象 也无法访问双下划线的属性和方法</span><br><span class="line">a = A(&apos;hjx&apos;)</span><br><span class="line"># print(a.__name)  报错</span><br><span class="line"># print(a.__foo())  报错</span><br><span class="line"></span><br><span class="line"># 可以通过 __dict__ 访问A类的相关属性信息</span><br><span class="line">print(A.__dict__)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&#123;</span><br><span class="line">    &apos;__module__&apos;: &apos;__main__&apos;,</span><br><span class="line">    &apos;_A__x&apos;: 1,</span><br><span class="line">    &apos;__init__&apos;: &lt;function A.__init__ at 0x00000187A059AF28&gt;, </span><br><span class="line">    &apos;_A__foo&apos;: &lt;function A.__foo at 0x00000187A059AEA0&gt;, </span><br><span class="line">    &apos;__dict__&apos;: &lt;attribute &apos;__dict__&apos; of &apos;A&apos; objects&gt;, </span><br><span class="line">    &apos;__weakref__&apos;: &lt;attribute &apos;__weakref__&apos; of &apos;A&apos; objects&gt;, </span><br><span class="line">    &apos;__doc__&apos;: None</span><br><span class="line">&#125;</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>我们发现 dict信息里属性通过一种方式——变形</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    __x = 1 # _A__x = 1</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.__name = name # _A__name = name</span><br><span class="line">    def __foo(self): # def _A__foo(self)</span><br><span class="line">        print(&apos;run foo&apos;)</span><br><span class="line"></span><br><span class="line">类中的 __x 会变为  _A__x</span><br><span class="line">类中的 __foo 会变为  _A__foo</span><br></pre></td></tr></table></figure><blockquote><h4 id="这种变形的特点"><a href="#这种变形的特点" class="headerlink" title="这种变形的特点"></a>这种变形的特点</h4></blockquote><ul><li>在类外部无法直接obj.__属性名</li><li>类内部可以通过:obj.__属性名</li><li><p>子类无法覆盖父类双下划线前缀的属性和方法<br>  (因为在类执行前 双下划线前缀的属性和方<br>  法会产生变形)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    __x = 1 # 变形为 _A__x</span><br><span class="line">    def __foo(self): # 变形为 def _A__foo(self):</span><br><span class="line">        print(&apos;from foo A&apos;)</span><br><span class="line"></span><br><span class="line">class B(A):</span><br><span class="line">    __x = 2 # 变形为 _B__x</span><br><span class="line">    def __foo(self): # 变形为 def _B__foo(self):</span><br><span class="line">        print(&apos;from foo B&apos;)</span><br></pre></td></tr></table></figure></li></ul><p>知道变形规则后你可以这样投机的访问这些双下划线前缀的属性和方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这样就不报错了</span><br><span class="line">a = A(&apos;hjx&apos;)</span><br><span class="line">print(a._A__x)</span><br><span class="line">a._A__foo()</span><br></pre></td></tr></table></figure><h4 id="这种变形需要注意的问题："><a href="#这种变形需要注意的问题：" class="headerlink" title="这种变形需要注意的问题："></a>这种变形需要注意的问题：</h4><ul><li>如果想隐藏属性和方法你就添加双下划线前缀，你知道了变形规则和访问方式还想直接访问那索性不如不加双下划线前缀</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class B:</span><br><span class="line">    __x = 1</span><br><span class="line">    y = 2</span><br><span class="line"></span><br><span class="line">print(B._B__x) # 你都隐藏了还这样访问？ 是不是傻？</span><br><span class="line">print(B.y) # 既然想访问就别费劲了 还加双下划线前缀</span><br></pre></td></tr></table></figure><ul><li>双下划线前缀的属性和方法只在类定义的时候变形，后续添加的双下划线前缀属性或方法不会进行——变形</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class B:</span><br><span class="line">    __x = 1</span><br><span class="line"></span><br><span class="line">B.__y = 2</span><br><span class="line">print(B.__dict__)</span><br><span class="line">print(B.__y) # 像普通属性一样访问</span><br><span class="line"># 自己看吧！</span><br></pre></td></tr></table></figure><p>所以说你要隐藏属性或方法，要在类定义的时候进行</p><ul><li>在继承中，父类如果不想让子类覆盖自己的方法，可以将方法定义为私有的</li></ul><p>先看我们之前的学习</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    def foo(self):</span><br><span class="line">        print(&apos;from a foo&apos;)</span><br><span class="line">    def bar(self):</span><br><span class="line">        print(&apos;from a bar&apos;)</span><br><span class="line">        self.foo()</span><br><span class="line">        </span><br><span class="line">class B(A):</span><br><span class="line">    def foo(self):</span><br><span class="line">        print(&apos;from b foo&apos;)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.bar()</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">执行结果： </span><br><span class="line">from a bar</span><br><span class="line">from b foo</span><br><span class="line">1. b本身没有bar方法</span><br><span class="line">2. 于是从父类A查找 bar方法 找到了</span><br><span class="line">3. 执行 bar的时候 调用 self.foo() 此时的self是 b对象 所以 self.foo() 相当于 b.foo()</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p>实现我们的需求 子类调用父类的同名方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    def __foo(self): # _A__foo</span><br><span class="line">        print(&apos;from a foo&apos;)</span><br><span class="line">    def bar(self):</span><br><span class="line">        print(&apos;from a bar&apos;)</span><br><span class="line">        self.__foo() # self._A_foo</span><br><span class="line"></span><br><span class="line">class B(A):</span><br><span class="line">    def __foo(self):</span><br><span class="line">        print(&apos;from b foo&apos;)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.bar()</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">执行结果</span><br><span class="line">from a bar</span><br><span class="line">from a foo</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-06多态与多态性</title>
      <link href="/2018/09/08/Py003-01-06%E5%A4%9A%E6%80%81%E4%B8%8E%E5%A4%9A%E6%80%81%E6%80%A7/"/>
      <url>/2018/09/08/Py003-01-06%E5%A4%9A%E6%80%81%E4%B8%8E%E5%A4%9A%E6%80%81%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>同类事物有多种形态</p></blockquote><ul><li>动物的几种形态，人狗猪三种形态</li><li>游戏里角色的几种形态，法师战士弓箭手</li></ul><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p>在不考虑实例类型的情况下，直接使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import abc</span><br><span class="line">class Animal(metaclass=abc.ABCMeta):</span><br><span class="line">    category = &apos;animal&apos;</span><br><span class="line">    @abc.abstractmethod</span><br><span class="line">    def run(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">class People(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;人   跑&apos;)</span><br><span class="line"></span><br><span class="line">class Pig(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;猪   跑&apos;)</span><br><span class="line"></span><br><span class="line">class Dog(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;狗   跑&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多态性：在不考虑实例类型的情况下，直接使用实例</span><br><span class="line">people = People()</span><br><span class="line">dog = Dog()</span><br><span class="line">pig = Pig()</span><br><span class="line"></span><br><span class="line"># 它们都能 调用对应的 run方法</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">people.run()</span><br><span class="line">dog.run()</span><br><span class="line">pig.run()</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"># 统一的形式去调用，增加程序的灵活性</span><br><span class="line">def commonRun(animal):</span><br><span class="line">    animal.run()</span><br><span class="line"></span><br><span class="line">commonRun(people)</span><br><span class="line">commonRun(pig)</span><br><span class="line">commonRun(dog)</span><br></pre></td></tr></table></figure><h4 id="为啥用多态性"><a href="#为啥用多态性" class="headerlink" title="为啥用多态性"></a>为啥用多态性</h4><p>1.增加了程序的灵活性</p><p>　　以不变应万变，不论对象千变万化，使用者都是同一种形式去调用，如commonRun(animal)</p><p>2.增加了程序额可扩展性</p><p>　通过继承animal类创建了一个新的类，使用者无需更改自己的代码，还是用commonRun(animal)去调用 　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Cat(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;猫   跑&apos;)</span><br></pre></td></tr></table></figure><h4 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h4><p>Python崇尚鸭子类型，即‘如果看起来像、叫声像而且走起路来像鸭子，那么它就是鸭子’</p><p>python程序员通常根据这种行为来编写程序。例如，如果想编写现有对象的自定义版本，可以继承该对象</p><p>也可以创建一个外观和行为像，但与它无任何关系的全新对象，后者通常用于保存程序组件的松耦合度。</p><blockquote><p>你所学的序列类型</p></blockquote><ul><li>列表list</li><li>元组tuple</li><li>字符串str</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">l = list([1,2,3])</span><br><span class="line">t = tuple((&apos;a&apos;,&apos;b&apos;))</span><br><span class="line">s = str(&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line"># 此时都有len方法  你需要考虑它是 list tuple str吗？</span><br><span class="line">print(l.__len__())</span><br><span class="line">print(t.__len__())</span><br><span class="line">print(s.__len__())</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def len(obj):</span><br><span class="line">    return obj.__len__()</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>所以说你看着像鸭子，没准你就真的是鸭子</p></blockquote><p>学习也是一样</p><blockquote><p>fake it until you make it</p></blockquote><p>如果你不是一个优秀的人，你就假装你是一个优秀的人(模仿优秀的人做的事),久而久之你也变成了一个优秀的人。</p>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-05抽象类与归一化</title>
      <link href="/2018/09/08/Py003-01-05%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E5%BD%92%E4%B8%80%E5%8C%96/"/>
      <url>/2018/09/08/Py003-01-05%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E5%BD%92%E4%B8%80%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="抽象类与归一化"><a href="#抽象类与归一化" class="headerlink" title="抽象类与归一化"></a>抽象类与归一化</h3><p>以下都属于动物，它们都有走的方法，只是形式不同</p><ul><li>人</li><li>猪</li><li>狗</li></ul><p>java中提供一种接口的方式来实现方法的统一，但是python中没有，以下为java代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">=================第一部分：Java 语言中的接口很好的展现了接口的含义: IAnimal.java</span><br><span class="line">/*</span><br><span class="line">* Java的Interface接口的特征:</span><br><span class="line">* 1)是一组功能的集合,而不是一个功能</span><br><span class="line">* 2)接口的功能用于交互,所有的功能都是public,即别的对象可操作</span><br><span class="line">* 3)接口只定义函数,但不涉及函数实现</span><br><span class="line">* 4)这些功能是相关的,都是动物相关的功能,但光合作用就不适宜放到IAnimal里面了 */</span><br><span class="line"></span><br><span class="line">package com.oo.demo;</span><br><span class="line">public interface IAnimal &#123;</span><br><span class="line">    public void eat();</span><br><span class="line">    public void run(); </span><br><span class="line">    public void sleep(); </span><br><span class="line">    public void speak();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=================第二部分：Pig.java：猪”的类设计,实现了IAnnimal接口 </span><br><span class="line">package com.oo.demo;</span><br><span class="line">public class Pig implements IAnimal&#123; //如下每个函数都需要详细实现</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;Pig like to eat grass&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;Pig run: front legs, back legs&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sleep()&#123;</span><br><span class="line">        System.out.println(&quot;Pig sleep 16 hours every day&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(&quot;Pig can not speak&quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=================第三部分：Person2.java</span><br><span class="line">/*</span><br><span class="line">*实现了IAnimal的“人”,有几点说明一下: </span><br><span class="line">* 1)同样都实现了IAnimal的接口,但“人”和“猪”的实现不一样,为了避免太多代码导致影响阅读,这里的代码简化成一行,但输出的内容不一样,实际项目中同一接口的同一功能点,不同的类实现完全不一样</span><br><span class="line">* 2)这里同样是“人”这个类,但和前面介绍类时给的类“Person”完全不一样,这是因为同样的逻辑概念,在不同的应用场景下,具备的属性和功能是完全不一样的 */</span><br><span class="line"></span><br><span class="line">package com.oo.demo;</span><br><span class="line">public class Person2 implements IAnimal &#123; </span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;Person like to eat meat&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;Person run: left leg, right leg&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sleep()&#123;</span><br><span class="line">        System.out.println(&quot;Person sleep 8 hours every dat&quot;); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(&quot;Hellow world, I am a person&quot;);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=================第四部分：Tester03.java</span><br><span class="line">package com.oo.demo;</span><br><span class="line"></span><br><span class="line">public class Tester03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;===This is a person===&quot;); </span><br><span class="line">        IAnimal person = new Person2();</span><br><span class="line">        person.eat();</span><br><span class="line">        person.run();</span><br><span class="line">        person.sleep();</span><br><span class="line">        person.speak();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n===This is a pig===&quot;);</span><br><span class="line">        IAnimal pig = new Pig();</span><br><span class="line">        pig.eat();</span><br><span class="line">        pig.run();</span><br><span class="line">        pig.sleep();</span><br><span class="line">        pig.speak();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">java中的interface</span><br></pre></td></tr></table></figure><blockquote><h4 id="如果你非要实现如上的接口一样的效果，你需要借助一个模块-abc模块"><a href="#如果你非要实现如上的接口一样的效果，你需要借助一个模块-abc模块" class="headerlink" title="如果你非要实现如上的接口一样的效果，你需要借助一个模块 abc模块"></a>如果你非要实现如上的接口一样的效果，你需要借助一个模块 abc模块</h4></blockquote><h4 id="抽象类概念"><a href="#抽象类概念" class="headerlink" title="抽象类概念"></a>抽象类概念</h4><ul><li>抽象类只能被继承,无法被实例化</li><li>抽象类定义的抽象方法子类必须实现否则报错</li><li>抽象类的属性子类可以查找到(前提是子类本身没有该属性)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import abc</span><br><span class="line"></span><br><span class="line"># 只进行接口的定义</span><br><span class="line">class Animal(metaclass=abc.ABCMeta):</span><br><span class="line">    category = &apos;animal&apos;</span><br><span class="line">    @abc.abstractmethod</span><br><span class="line">    def run(self):</span><br><span class="line">        pass</span><br><span class="line">    @abc.abstractmethod</span><br><span class="line">    def eat(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">class People(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;人   跑&apos;)</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;人   吃饭&apos;)</span><br><span class="line"></span><br><span class="line">class Pig(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;猪   跑&apos;)</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;猪   吃饭&apos;)</span><br><span class="line"></span><br><span class="line">class Dog(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;狗   跑&apos;)</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;狗   吃饭&apos;)</span><br><span class="line"></span><br><span class="line"># a = Animal() 报错   抽象类 只能被继承，无法实例化</span><br><span class="line"></span><br><span class="line">people = People()</span><br><span class="line">people.run()</span><br><span class="line">people.eat()</span><br><span class="line"></span><br><span class="line">pig = Pig()</span><br><span class="line">pig.run()</span><br><span class="line">pig.eat()</span><br><span class="line"></span><br><span class="line">dog = Dog()</span><br><span class="line">dog.run()</span><br><span class="line">dog.eat()</span><br></pre></td></tr></table></figure><blockquote><p>我们知道People继承了 Animal，如果注释了People内部的eat方法就会报错。因为抽象方法必须实现</p></blockquote><blockquote><p>这样就实现了接口的统一，归一化</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-04组合</title>
      <link href="/2018/09/06/Py003-01-04%E7%BB%84%E5%90%88/"/>
      <url>/2018/09/06/Py003-01-04%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>继承是类与类之间的关系</p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><blockquote><p>先看这样一段代码  老师和学生</p></blockquote><ul><li>有共用的属性 school</li><li>有重复的属性 name,age,sex</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Teacher:</span><br><span class="line">    school = &apos;中科院&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self,name,age,sex,level,salary):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        </span><br><span class="line">        self.level = level</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line">    def teach(self):</span><br><span class="line">        print(&apos;%s is teaching&apos;%self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student:</span><br><span class="line">    school = &apos;中科院&apos;</span><br><span class="line">    def __init__(self,name,age,sex,classname):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">        self.classname = classname</span><br><span class="line"></span><br><span class="line">    def learn(self):</span><br><span class="line">        print(&apos;%s is learning&apos;%self.name)</span><br></pre></td></tr></table></figure><blockquote><h4 id="提取公共"><a href="#提取公共" class="headerlink" title="提取公共"></a>提取公共</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    school = &apos;中科院&apos;</span><br><span class="line">    def __init__(self, name, age, sex):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Teacher(People):</span><br><span class="line">    def __init__(self,name,age,sex,level,salary):</span><br><span class="line">        super().__init__(name,age,sex)</span><br><span class="line">        self.level = level</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line">    def teach(self):</span><br><span class="line">        print(&apos;%s is teaching&apos;%self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student(People):</span><br><span class="line">    def __init__(self,name,age,sex,classname):</span><br><span class="line">        super().__init__(name, age, sex)</span><br><span class="line">        self.classname = classname</span><br><span class="line"></span><br><span class="line">    def learn(self):</span><br><span class="line">        print(&apos;%s is learning&apos;%self.name)</span><br></pre></td></tr></table></figure><blockquote><h4 id="老师有课程，如果都教-python呢？"><a href="#老师有课程，如果都教-python呢？" class="headerlink" title="老师有课程，如果都教 python呢？"></a>老师有课程，如果都教 python呢？</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Teacher(People):</span><br><span class="line">    def __init__(self,name,age,sex,level,salary,course_name,course_price,course_period):</span><br><span class="line">        super().__init__(name,age,sex)</span><br><span class="line">        self.level = level</span><br><span class="line">        self.salary = salary</span><br><span class="line">        self.course_name = course_name</span><br><span class="line">        self.course_price = course_price</span><br><span class="line">        self.course_period = course_period</span><br><span class="line"></span><br><span class="line"># 这样就又重复了 俩个老师都教 python</span><br><span class="line">t1 = Teacher(&apos;阮老师&apos;,49,&apos;man&apos;,10,3000,&apos;python&apos;,30000,&apos;半年&apos;)</span><br><span class="line">t2 = Teacher(&apos;廖雪峰&apos;,59,&apos;man&apos;,10,3000,&apos;python&apos;,30000,&apos;半年&apos;)</span><br></pre></td></tr></table></figure><blockquote><h4 id="继续提取课程-类"><a href="#继续提取课程-类" class="headerlink" title="继续提取课程 类"></a>继续提取课程 类</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Course:</span><br><span class="line">    def __init__(self,course_name,course_price,course_period):</span><br><span class="line">        self.course_name = course_name</span><br><span class="line">        self.course_price = course_price</span><br><span class="line">        self.course_period = course_period</span><br><span class="line"></span><br><span class="line">python = Course(&apos;python&apos;,30000,&apos;半年&apos;)</span><br><span class="line"></span><br><span class="line">此时老师和课程的关系？</span><br></pre></td></tr></table></figure><ul><li>继承的关系是？——什么是什么</li><li>组合呢？——什么有什么  如：老师有课程 学生有课程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">t1 = Teacher(&apos;阮老师&apos;,49,&apos;man&apos;,10,3000)</span><br><span class="line">t2 = Teacher(&apos;廖雪峰&apos;,59,&apos;man&apos;,10,3000)   </span><br><span class="line"></span><br><span class="line">t1.course = python</span><br><span class="line">t2.course = python</span><br><span class="line"></span><br><span class="line"># 访问t1/t2老师的课程名称</span><br><span class="line">t1.course.course_name</span><br><span class="line">t2.course.course_name</span><br><span class="line"></span><br><span class="line">这种方式不是继承而是组合</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-03子类使用父类属性和方法</title>
      <link href="/2018/09/06/Py003-01-03%E5%AD%90%E7%B1%BB%E4%BD%BF%E7%94%A8%E7%88%B6%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2018/09/06/Py003-01-03%E5%AD%90%E7%B1%BB%E4%BD%BF%E7%94%A8%E7%88%B6%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="子类使用父类属性和方法"><a href="#子类使用父类属性和方法" class="headerlink" title="子类使用父类属性和方法"></a>子类使用父类属性和方法</h3><blockquote><h4 id="指名道姓方式-不依赖继承"><a href="#指名道姓方式-不依赖继承" class="headerlink" title="指名道姓方式(不依赖继承)"></a>指名道姓方式(不依赖继承)</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Hero:</span><br><span class="line">    def __init__(self, nickname, life_value, aggresivity):</span><br><span class="line">        self.nickname = nickname</span><br><span class="line">        self.life_value = life_value</span><br><span class="line">        self.aggresivity = aggresivity</span><br><span class="line"></span><br><span class="line">    def attack(self, enemy):</span><br><span class="line">        enemy.life_value = self.aggresivity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AX(Hero):</span><br><span class="line">    camp = &apos;斧王&apos;</span><br><span class="line"></span><br><span class="line">    def attack(self, enemy):</span><br><span class="line">        Hero.attack(self,enemy)</span><br><span class="line">        print(&apos;from Garen Class&apos;)</span><br><span class="line"></span><br><span class="line">ax = AX(&apos;axe&apos;,100,50)</span><br><span class="line">enemy = Hero(&apos;xxx&apos;,100,40)</span><br><span class="line">ax.attack(enemy) # 50</span><br></pre></td></tr></table></figure><blockquote><h4 id="子类想要个武器"><a href="#子类想要个武器" class="headerlink" title="子类想要个武器"></a>子类想要个武器</h4></blockquote><p>很重复的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class AX(Hero):</span><br><span class="line">    camp = &apos;斧王&apos;</span><br><span class="line">    def __init__(self, nickname, life_value, aggresivity,weapon):</span><br><span class="line">        self.nickname = nickname</span><br><span class="line">        self.life_value = life_value</span><br><span class="line">        self.aggresivity = aggresivity</span><br><span class="line">        self.weapon = weapon</span><br><span class="line">    def attack(self, enemy):</span><br><span class="line">        Hero.attack(self,enemy)</span><br><span class="line">        print(&apos;from Garen Class&apos;)</span><br><span class="line"></span><br><span class="line">ax = AX(&apos;axe&apos;,100,50,&apos;金箍棒&apos;)</span><br></pre></td></tr></table></figure><p>继续指名道姓</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 子类有武器 指名道姓</span><br><span class="line">class AX(Hero):</span><br><span class="line">    camp = &apos;斧王&apos;</span><br><span class="line">    def __init__(self, nickname, life_value, aggresivity,weapon):</span><br><span class="line">        Hero.__init__(self, nickname, life_value, aggresivity)</span><br><span class="line">        self.weapon = weapon</span><br><span class="line">    def attack(self, enemy):</span><br><span class="line">        Hero.attack(self,enemy)</span><br><span class="line">        print(&apos;from Garen Class&apos;)</span><br><span class="line"></span><br><span class="line">ax = AX(&apos;axe&apos;,100,50,&apos;金箍棒&apos;)</span><br><span class="line">print(ax.__dict__)</span><br></pre></td></tr></table></figure><h4 id="在子类派生出的新的方法中重用父类的方法，有两种方式"><a href="#在子类派生出的新的方法中重用父类的方法，有两种方式" class="headerlink" title="在子类派生出的新的方法中重用父类的方法，有两种方式"></a>在子类派生出的新的方法中重用父类的方法，有两种方式</h4><ul><li>指名道姓(不依赖继承)</li><li>super() (依赖继承)</li></ul><blockquote><p>调用方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class AX(Hero):</span><br><span class="line">    camp = &apos;斧王&apos;</span><br><span class="line">    def attack(self, enemy):</span><br><span class="line">        # Hero.attack(self,enemy)</span><br><span class="line">        super(AX,self).attack(enemy)</span><br><span class="line">        print(&apos;from Garen Class&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>使用父类的初始化方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># super</span><br><span class="line">class AX(Hero):</span><br><span class="line">    camp = &apos;斧王&apos;</span><br><span class="line">    def __init__(self, nickname, life_value, aggresivity,weapon):</span><br><span class="line">        # 指名道姓</span><br><span class="line">        # Hero.__init__(self, nickname, life_value, aggresivity)</span><br><span class="line">        # python2中</span><br><span class="line">        super(AX,self).__init__(nickname, life_value, aggresivity) </span><br><span class="line">        # python3</span><br><span class="line">        super().__init__(nickname, life_value, aggresivity) </span><br><span class="line">        self.weapon = weapon</span><br><span class="line">    def attack(self, enemy):</span><br><span class="line">        Hero.attack(self,enemy)</span><br><span class="line">        print(&apos;from Garen Class&apos;)</span><br><span class="line"></span><br><span class="line">ax = AX(&apos;axe&apos;,100,50,&apos;金箍棒&apos;)</span><br><span class="line"># print(ax.__dict__)</span><br></pre></td></tr></table></figure><h4 id="依赖继承的一道恶心的题"><a href="#依赖继承的一道恶心的题" class="headerlink" title="依赖继承的一道恶心的题"></a>依赖继承的一道恶心的题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    def f1(self):</span><br><span class="line">        print(&apos;from a&apos;)</span><br><span class="line"></span><br><span class="line">class B:</span><br><span class="line">    def f1(self):</span><br><span class="line">        print(&apos;from b&apos;)</span><br><span class="line"></span><br><span class="line">class C(A,B):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(C.mro()) # C A B Object</span><br></pre></td></tr></table></figure><blockquote><p>再看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    def f1(self):</span><br><span class="line">        print(&apos;from a&apos;)</span><br><span class="line">        super().f1()</span><br><span class="line"></span><br><span class="line">class B:</span><br><span class="line">    def f1(self):</span><br><span class="line">        print(&apos;from b&apos;)</span><br><span class="line"></span><br><span class="line">class C(A,B):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.f1() </span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">from a</span><br><span class="line">from b</span><br><span class="line"></span><br><span class="line">C是依赖于继承的 所以会参照 C的mro列表查找 属性和方法</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-02继承</title>
      <link href="/2018/09/03/Py003-01-02%E7%BB%A7%E6%89%BF/"/>
      <url>/2018/09/03/Py003-01-02%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Parent1:</span><br><span class="line">    pass</span><br><span class="line">class Parent2:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Sub1(Parent1): # 单继承</span><br><span class="line">    pass</span><br><span class="line">    </span><br><span class="line">class Sub2(Parent1,Parent2): # 多继承</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 查看继承关系</span><br><span class="line">print(Sub1.__bases__)</span><br><span class="line">print(Sub2.__bases__)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">(&lt;class &apos;__main__.Parent1&apos;&gt;,)</span><br><span class="line">(&lt;class &apos;__main__.Parent1&apos;&gt;, &lt;class &apos;__main__.Parent2&apos;&gt;)</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>再看英雄类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Hero:</span><br><span class="line">    def __init__(self,name,life_value,aggresivity):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.life_value = life_value</span><br><span class="line">        self.aggresivity = aggresivity</span><br><span class="line"></span><br><span class="line">    def attack(self,enemy):</span><br><span class="line">        enemy.life_value -= self.aggresivity</span><br><span class="line"></span><br><span class="line">class AX(Hero):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = AX(&apos;斧王&apos;,30,40)</span><br><span class="line">print(ax.__dict__) # &#123;&apos;name&apos;: &apos;斧王&apos;, &apos;life_value&apos;: 30, &apos;aggresivity&apos;: 40&#125;</span><br></pre></td></tr></table></figure><blockquote><p>属性查找顺序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Hero:</span><br><span class="line">    x = 1</span><br><span class="line">    y = 3</span><br><span class="line">    def __init__(self,name,life_value,aggresivity):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.life_value = life_value</span><br><span class="line">        self.aggresivity = aggresivity</span><br><span class="line"></span><br><span class="line">    def attack(self,enemy):</span><br><span class="line">        enemy.life_value -= self.aggresivity</span><br><span class="line"></span><br><span class="line">class AX(Hero):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Sevn(Hexo):</span><br><span class="line">    y = 4</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">ax = AX(&apos;斧王&apos;,30,40)</span><br><span class="line">ax.x # 1 自己本身没有去父类查找  如果父类没有报错</span><br><span class="line"></span><br><span class="line">sevn = Sevn(&apos;斯温&apos;,50,60)</span><br><span class="line"></span><br><span class="line">sevn.y # 4 子类有就不去父级查找</span><br></pre></td></tr></table></figure><p>高深的属性查找，看你晕不晕</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Foo:</span><br><span class="line">    def f1(self):</span><br><span class="line">        print(&apos;from Foo.f1&apos;)</span><br><span class="line">    def f2(self):</span><br><span class="line">        print(&apos;from Foo.f2&apos;)</span><br><span class="line"></span><br><span class="line">class Bar(Foo):</span><br><span class="line">    def f2(self):</span><br><span class="line">        print(&apos;from Bar.f2&apos;)</span><br><span class="line"></span><br><span class="line">b = Bar()</span><br><span class="line">b.f2() # from Bar.f2</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">再看</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">class Foo:</span><br><span class="line">    def f1(self):</span><br><span class="line">        print(&apos;from Foo.f1&apos;)</span><br><span class="line">    def f2(self):</span><br><span class="line">        print(&apos;from Foo.f2&apos;)</span><br><span class="line">        self.f1()</span><br><span class="line"></span><br><span class="line">class Bar(Foo):</span><br><span class="line">    def f1(self):</span><br><span class="line">        print(&apos;from Bar.f1&apos;)</span><br><span class="line"></span><br><span class="line">b = Bar()</span><br><span class="line">b.f2()</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from Foo.f2</span><br><span class="line">from Bar.f1 为啥是这个？不是就近吗？ 要看self是谁  self一直是b   </span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Hero:</span><br><span class="line">    def __init__(self,name,life_value,aggresivity):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.life_value = life_value</span><br><span class="line">        self.aggresivity = aggresivity</span><br><span class="line"></span><br><span class="line">    def attack(self,enemy):</span><br><span class="line">        enemy.life_value -= self.aggresivity</span><br><span class="line"></span><br><span class="line">class AX(Hero):</span><br><span class="line">    camp = &apos;斧子&apos;</span><br><span class="line">    def attack(self,enemy):</span><br><span class="line">        print(&apos;反刺螺旋&apos;)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Sevn(Hexo):</span><br><span class="line">    camp = &apos;真男人&apos;</span><br><span class="line">    def attack(self,enemy):</span><br><span class="line">        print(&apos;锤子&apos;)</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h4 id="继承实现原理"><a href="#继承实现原理" class="headerlink" title="继承实现原理"></a>继承实现原理</h4><ul><li>子类会先于父类被检查</li><li>多个父类会根据它们在列表中的顺序被检查</li><li>如果对下一个类存在两个合法的选择,选择第一个父类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Foo(a1,a2,a3,a4....an):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><ul><li>仅在python2中有 新式类和经典类 </li><li>python3中没有经典类  统一新式类</li></ul><p>什么是新式类？</p><blockquote><p>继承object的类，以及它的子类都叫 新式类</p></blockquote><p>什么是经典类？</p><blockquote><p>没有继承object的类，以及它的子类都称之为经典类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 经典类:没有继承object的类，以及它的子类都称之为经典类</span><br><span class="line"># py2</span><br><span class="line">class Foo:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Bar(Foo):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># py2  继承object的类，以及它的子类都叫 新式类</span><br><span class="line">class Foo(object):</span><br><span class="line">    pass</span><br><span class="line">class Bar(Foo):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># py3中  统一是新式类 (默认继承object)</span><br><span class="line">class Foo:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h3 id="属性查找之——MRO列表"><a href="#属性查找之——MRO列表" class="headerlink" title="属性查找之——MRO列表"></a>属性查找之——MRO列表</h3><p>属性查找方式有</p><ul><li>深度优先</li><li>广度优先</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当类是经典类时：在要查找的属性不存在时，会按照深度优先的方式查找下去</span><br><span class="line"></span><br><span class="line">当类是新式类时：在要查找的属性不存在时，会按照广度优先的方式查找下去</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class A(object):</span><br><span class="line">    def test(self):</span><br><span class="line">        print(&apos;from A&apos;)</span><br><span class="line"></span><br><span class="line">class B(A):</span><br><span class="line">    def test(self):</span><br><span class="line">        print(&apos;from B&apos;)</span><br><span class="line"></span><br><span class="line">class C(A):</span><br><span class="line">    def test(self):</span><br><span class="line">        print(&apos;from C&apos;)</span><br><span class="line"></span><br><span class="line">class D(B):</span><br><span class="line">    def test(self):</span><br><span class="line">        print(&apos;from D&apos;)</span><br><span class="line"></span><br><span class="line">class E(C):</span><br><span class="line">    def test(self):</span><br><span class="line">        print(&apos;from E&apos;)</span><br><span class="line"></span><br><span class="line">class F(D,E):</span><br><span class="line">    # def test(self):</span><br><span class="line">    #     print(&apos;from F&apos;)</span><br><span class="line">    pass</span><br><span class="line">f1=F()</span><br><span class="line">f1.test()</span><br><span class="line">print(F.__mro__) #只有新式才有这个属性可以查看线性列表，经典类没有这个属性</span><br><span class="line"></span><br><span class="line">#新式类继承顺序:F-&gt;D-&gt;B-&gt;E-&gt;C-&gt;A</span><br><span class="line">#经典类继承顺序:F-&gt;D-&gt;B-&gt;A-&gt;E-&gt;C</span><br><span class="line">#python3中统一都是新式类</span><br><span class="line">#pyhon2中才分新式类与经典类</span><br></pre></td></tr></table></figure><blockquote><h4 id="新式类的内置mro方法-广度优先"><a href="#新式类的内置mro方法-广度优先" class="headerlink" title="新式类的内置mro方法(广度优先)"></a>新式类的内置mro方法(广度优先)</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F.mro() # 查看属性查找的顺序</span><br></pre></td></tr></table></figure><blockquote><h4 id="经典类没有提供属性深度优先的查找方法"><a href="#经典类没有提供属性深度优先的查找方法" class="headerlink" title="经典类没有提供属性深度优先的查找方法"></a>经典类没有提供属性深度优先的查找方法</h4></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py003-01-01面向对象</title>
      <link href="/2018/08/31/Py003-01-01%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/08/31/Py003-01-01%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h3><ul><li>面向过程(国民党的路线,一直在一次一次的解决问题,氪金,高级装备,最后败走台湾)</li><li>面向对象(我党的路线,一直在建立统一思想,思想就是种信仰,为信仰而奋斗,从军人员的壮大,7月建党8月建军10月建国。你懂的)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生活实例： 从北京到上海</span><br><span class="line">面向过程: 学驾照,买车,摇号,冲油,油门,百度地图,上海(你必须考证，买车，挂牌，会看地图)</span><br><span class="line"></span><br><span class="line">面向对象: 找大巴车,火车,高铁,飞机 (你需要会开车吗？)</span><br></pre></td></tr></table></figure><h3 id="提到面向对象就不得不说的——类"><a href="#提到面向对象就不得不说的——类" class="headerlink" title="提到面向对象就不得不说的——类"></a>提到面向对象就不得不说的——类</h3><ul><li>同类事物的抽象描述——类</li></ul><h4 id="类的定义和实例化对象"><a href="#类的定义和实例化对象" class="headerlink" title="类的定义和实例化对象"></a>类的定义和实例化对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 学生对象</span><br><span class="line"># 001先定义类</span><br><span class="line">class Student:</span><br><span class="line">    school = &apos;清华&apos;</span><br><span class="line"></span><br><span class="line">    def learn(self):</span><br><span class="line">        print(&apos;学习啦&apos;)</span><br><span class="line"></span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;吃饭啦&apos;)</span><br><span class="line"></span><br><span class="line">    def sleep(self):</span><br><span class="line">        print(&apos;睡觉啦&apos;)</span><br><span class="line"></span><br><span class="line"># 最后产生对象</span><br><span class="line">student_a = Student()</span><br></pre></td></tr></table></figure><h4 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h4><p>相关属性的增删改查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 在类定义后 内部的代码就会执行 生成对应的名字空间(dict)</span><br><span class="line">class Student:</span><br><span class="line">    # 数据属性</span><br><span class="line">    school = &apos;xx大学&apos;</span><br><span class="line">    # 函数属性</span><br><span class="line">    def learn(self):</span><br><span class="line">        print(&apos;is learning&apos;)</span><br><span class="line">    </span><br><span class="line">    print(&apos;=====running=====&apos;) # 会被执行  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看类的名字空间</span><br><span class="line">print(Student.__dict__)</span><br><span class="line">print(Student.__dict__[&apos;school&apos;])</span><br><span class="line">print(Student.__dict__[&apos;learn&apos;])</span><br><span class="line"></span><br><span class="line"># 查</span><br><span class="line">print(Student.school)</span><br><span class="line">print(Student.learn)</span><br><span class="line"></span><br><span class="line"># 增 可以动态添加(如下);也可以在定义的时候添加属性如 school属性</span><br><span class="line">Student.county = &apos;China&apos;</span><br><span class="line">print(Student.__dict__)</span><br><span class="line">print(Student.county)</span><br><span class="line"></span><br><span class="line"># 删</span><br><span class="line">del Student.county</span><br><span class="line"></span><br><span class="line"># 改</span><br><span class="line">Student.school = &apos;清华池&apos;</span><br></pre></td></tr></table></figure><h4 id="如何使用对象"><a href="#如何使用对象" class="headerlink" title="如何使用对象"></a>如何使用对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># __init__方法用来为对象定制自己独有的特征</span><br><span class="line"></span><br><span class="line">class Student:</span><br><span class="line">    # 数据属性</span><br><span class="line">    school = &apos;xx大学&apos;</span><br><span class="line"></span><br><span class="line">    # __init__</span><br><span class="line">    def __init__(self,name,sex,age):</span><br><span class="line">        self.Name = name</span><br><span class="line">        self.Sex = sex</span><br><span class="line">        self.Age = age</span><br><span class="line"></span><br><span class="line">    # 函数属性</span><br><span class="line">    def learn(self):</span><br><span class="line">        print(&apos;is learning&apos;)</span><br><span class="line"></span><br><span class="line"># 此时创建对象的时候  就不能直接 Student()了而是如下：</span><br><span class="line">stu = Student(&apos;张三&apos;,&apos;男&apos;,18)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">__init__是你实例化的时候调用</span><br><span class="line">1. 产生一个空对象 tmp</span><br><span class="line">2. Student.__init__(tmp,&apos;张三&apos;,&apos;男&apos;,18)</span><br><span class="line">  tmp.Name = &apos;张三&apos;</span><br><span class="line">  tmp.Sex = &apos;男&apos;</span><br><span class="line">  tmp.Age = 18</span><br><span class="line">3. 返回tmp的地址给 stu</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p> 对象属性的CRUD</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 查</span><br><span class="line">stu = Student(&apos;张三&apos;,&apos;男&apos;,18)</span><br><span class="line">print(stu.__dict__)</span><br><span class="line">print(stu.Name)</span><br><span class="line">print(stu.Age)</span><br><span class="line"></span><br><span class="line"># 改</span><br><span class="line">stu.Name = &apos;李四&apos; </span><br><span class="line"></span><br><span class="line"># 删</span><br><span class="line">del stu.Name</span><br><span class="line"></span><br><span class="line"># 增</span><br><span class="line">stu.className = &apos;前端部&apos;</span><br></pre></td></tr></table></figure><h4 id="属性查找和绑定方法"><a href="#属性查找和绑定方法" class="headerlink" title="属性查找和绑定方法"></a>属性查找和绑定方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">class Student:</span><br><span class="line">    school = &apos;xx大学&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self,name,sex,age):</span><br><span class="line">        self.Name = name</span><br><span class="line">        self.Sex = sex</span><br><span class="line">        self.Age = age</span><br><span class="line"></span><br><span class="line">    def learn(self):</span><br><span class="line">        print(&apos;%sis learning&apos;%self.Name)</span><br><span class="line"></span><br><span class="line"># 后产生对象</span><br><span class="line">stu1 = Student(&apos;张三&apos;,&apos;男&apos;,11)</span><br><span class="line">stu2 = Student(&apos;李四&apos;,&apos;男&apos;,22)</span><br><span class="line">stu3 = Student(&apos;王五&apos;,&apos;男&apos;,33)</span><br><span class="line"></span><br><span class="line"># 对象：特征和技能的结合体</span><br><span class="line"># 类一系列对象相似的特征和相似的技能的结合体</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 类中的数据属性：是所有对象共有的</span><br><span class="line">print(Student.school,id(Student.school))</span><br><span class="line">print(stu1.school,id(stu1.school))</span><br><span class="line">print(stu2.school,id(stu2.school))</span><br><span class="line">print(stu3.school,id(stu3.school))</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"># 它们的id值都一样</span><br><span class="line">xx大学 2644686064016</span><br><span class="line">xx大学 2644686064016</span><br><span class="line">xx大学 2644686064016</span><br><span class="line">xx大学 2644686064016</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">#----------------------------------------------------------</span><br><span class="line"># 类中的函数属性：是绑定给对象使用的，绑定到不同的对象是不同的绑定方法,对象调用绑定方法时,把对象本身当作第一个参数传入也就是self</span><br><span class="line">print(Student.learn)</span><br><span class="line">print(stu1.learn)</span><br><span class="line">print(stu2.learn)</span><br><span class="line">print(stu3.learn)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"># 它们的learn方法 地址都不一样</span><br><span class="line">&lt;function Student.learn at 0x00000271C5AFAEA0&gt;</span><br><span class="line">&lt;bound method Student.learn of &lt;__main__.Student object at 0x00000271C5B045C0&gt;&gt;</span><br><span class="line">&lt;bound method Student.learn of &lt;__main__.Student object at 0x00000271C5B04710&gt;&gt;</span><br><span class="line">&lt;bound method Student.learn of &lt;__main__.Student object at 0x00000271C5B04748&gt;&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"># Student.learn() 报错  因为默认有个self参数 没有传递 learn() missing 1 required positional argument: &apos;self&apos;</span><br><span class="line">Student.learn(123)  # 继续报错</span><br><span class="line">Student.learn(stu1) # 张三is learning</span><br><span class="line">Student.learn(stu2) # 李四is learning</span><br><span class="line">Student.learn(stu3) # 王五is learning</span><br><span class="line"></span><br><span class="line"># 起始你可以这样调用</span><br><span class="line">stu1.learn() # 张三is learning</span><br><span class="line">stu2.learn() # 李四is learning</span><br><span class="line">stu3.learn() # 王五is learning</span><br></pre></td></tr></table></figure><blockquote><p>类中的数据属性：</p></blockquote><ul><li>是所有对象共有的</li></ul><blockquote><p> 类中的函数属性：</p></blockquote><ul><li>是绑定给对象使用的</li><li>绑定到不同的对象是不同的绑定方法</li><li>对象调用绑定方法时,把对象本身当作第一个参数传入也就是self</li></ul><blockquote><p>属性查找</p></blockquote><ul><li>先从实例对象上找，没有去类找，在没有就报错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stu1.x = &apos;from stu1&apos;</span><br><span class="line">Student.x = &apos;from Student class&apos;</span><br><span class="line">print(stu1.x) # 从自身找   &apos;from stu1&apos;</span><br><span class="line"></span><br><span class="line"># 如果对象stu1自身没有y属性 则从Student找</span><br><span class="line"># stu1.y = &apos;from stu1&apos;</span><br><span class="line">Student.y = &apos;from Student class&apos;</span><br><span class="line">print(stu1.y) # 从Student找  &apos;from Student class&apos;</span><br><span class="line"></span><br><span class="line"># 如果Student也没有  报错</span><br></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">编写学生类，产生一堆学生对象</span><br><span class="line">要求：</span><br><span class="line">有一个计数器(属性)，统计共实例了多少个对象</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">class Student:</span><br><span class="line">    school = &apos;xx大学&apos;</span><br><span class="line">    count = 0</span><br><span class="line">    def __init__(self,name,sex,age):</span><br><span class="line">        self.Name = name</span><br><span class="line">        self.Sex = sex</span><br><span class="line">        self.Age = age</span><br><span class="line">        Student.count+=1</span><br><span class="line"></span><br><span class="line">    def learn(self):</span><br><span class="line">        print(&apos;%sis learning&apos;%self.Name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Student(&apos;a1&apos;,&apos;nan&apos;,11)</span><br><span class="line">s2 = Student(&apos;a2&apos;,&apos;nan&apos;,11)</span><br><span class="line">s3 = Student(&apos;a3&apos;,&apos;nan&apos;,11)</span><br><span class="line">print(Student.count)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">模拟王者荣耀定义两个英雄</span><br><span class="line">要求：</span><br><span class="line">英雄要有攻击力，生命，名字</span><br><span class="line">实例化两个英雄对象</span><br><span class="line">英雄之间可以互相殴打，被殴打一方掉血，血量少于0则判断死亡</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">class Hero:</span><br><span class="line">    def __init__(self,name,life_value,aggresivity):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.life_value = life_value</span><br><span class="line">        self.aggresivity = aggresivity</span><br><span class="line"></span><br><span class="line">    def attack(self,enemy):</span><br><span class="line">        enemy.life_value -= self.aggresivity</span><br><span class="line"></span><br><span class="line">a = Hero(&apos;亚瑟&apos;,100,50)</span><br><span class="line">b = Hero(&apos;小乔&apos;,100,60)</span><br><span class="line"></span><br><span class="line">a.attack(b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M03 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue_222_vue路由实现原理</title>
      <link href="/2018/08/28/Vue_222_vue%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2018/08/28/Vue_222_vue%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="vue路由实现原理"><a href="#vue路由实现原理" class="headerlink" title="vue路由实现原理"></a>vue路由实现原理</h3><h4 id="第一步——前端必会之选项卡"><a href="#第一步——前端必会之选项卡" class="headerlink" title="第一步——前端必会之选项卡"></a>第一步——前端必会之选项卡</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        x-tab&#123;display: block;&#125;</span><br><span class="line">        x-tab&gt;.nav&gt;li.active&#123;background: red;&#125;</span><br><span class="line">        x-tab&gt;.content&gt;li&#123;display: none;&#125;</span><br><span class="line">        x-tab&gt;.content&gt;li.active&#123;display: block;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;x-tab&gt;</span><br><span class="line">        &lt;ol class=&quot;nav&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;active&quot;&gt;tab1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;tab2&lt;/li&gt;</span><br><span class="line">        &lt;/ol&gt;</span><br><span class="line">        &lt;ul class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;active&quot;&gt;content1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;content2&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/x-tab&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 路由第一步   选项卡</span><br><span class="line">        $(&apos;x-tab&apos;).on(&apos;click&apos;,&apos;.nav&gt;li&apos;,(e)=&gt;&#123;</span><br><span class="line">            let $li = $(e.currentTarget)</span><br><span class="line">            $li.addClass(&apos;active&apos;)</span><br><span class="line">                .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">            let index = $li.index()</span><br><span class="line">            $(&apos;.content&gt;li&apos;).eq(index)</span><br><span class="line">                .addClass(&apos;active&apos;)</span><br><span class="line">                .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>传说没有那个入行的前端15分钟写不出一个选项卡，而且还是用jq。</p></blockquote><h4 id="第二步——你早就知道的锚点"><a href="#第二步——你早就知道的锚点" class="headerlink" title="第二步——你早就知道的锚点"></a>第二步——你早就知道的锚点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        x-tab&#123;display: block;&#125;</span><br><span class="line">        x-tab&gt;.nav&gt;li.active&#123;background: red;&#125;</span><br><span class="line">        x-tab&gt;.content&gt;li&#123;display: none;&#125;</span><br><span class="line">        x-tab&gt;.content&gt;li.active&#123;display: block;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;x-tab&gt;</span><br><span class="line">        &lt;ol class=&quot;nav&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;active&quot;&gt;tab1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;tab2&lt;/li&gt;</span><br><span class="line">        &lt;/ol&gt;</span><br><span class="line">        &lt;ul class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;active&quot;&gt;content1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;content2&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/x-tab&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 路由第二步  通过锚点</span><br><span class="line">        let index = location.hash|| &apos;#0&apos;</span><br><span class="line">        index = index.substring(1)</span><br><span class="line">        $(&apos;.nav&gt;li&apos;).eq(index)</span><br><span class="line">            .addClass(&apos;active&apos;)</span><br><span class="line">            .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">        $(&apos;.content&gt;li&apos;).eq(index)</span><br><span class="line">            .addClass(&apos;active&apos;)</span><br><span class="line">            .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">        $(&apos;x-tab&apos;).on(&apos;click&apos;,&apos;.nav&gt;li&apos;,(e)=&gt;&#123;</span><br><span class="line">            let $li = $(e.currentTarget)</span><br><span class="line">            $li.addClass(&apos;active&apos;)</span><br><span class="line">                .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">            let index = $li.index()</span><br><span class="line">            location.hash = index</span><br><span class="line">            $(&apos;.content&gt;li&apos;).eq(index)</span><br><span class="line">                .addClass(&apos;active&apos;)</span><br><span class="line">                .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>代码很重复是不是，往下看吧！</p></blockquote><h4 id="第三步——使用锚点的优化"><a href="#第三步——使用锚点的优化" class="headerlink" title="第三步——使用锚点的优化"></a>第三步——使用锚点的优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        x-tab&#123;display: block;&#125;</span><br><span class="line">        x-tab&gt;.nav&gt;li.active&#123;background: red;&#125;</span><br><span class="line">        x-tab&gt;.content&gt;li&#123;display: none;&#125;</span><br><span class="line">        x-tab&gt;.content&gt;li.active&#123;display: block;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;x-tab&gt;</span><br><span class="line">        &lt;ol class=&quot;nav&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;active&quot;&gt;</span><br><span class="line">                &lt;a href=&quot;#0&quot;&gt;tab1&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;  &lt;a href=&quot;#1&quot;&gt;tab2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ol&gt;</span><br><span class="line">        &lt;ul class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;active&quot;&gt;content1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;content2&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/x-tab&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 路由第二步  通过锚点</span><br><span class="line">        function selectTab()&#123;</span><br><span class="line">            let index = location.hash|| &apos;#0&apos;</span><br><span class="line">            index = index.substring(1)</span><br><span class="line">            $(&apos;.nav&gt;li&apos;).eq(index)</span><br><span class="line">                .addClass(&apos;active&apos;)</span><br><span class="line">                .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">            $(&apos;.content&gt;li&apos;).eq(index)</span><br><span class="line">                .addClass(&apos;active&apos;)</span><br><span class="line">                .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">        selectTab()</span><br><span class="line">        // 路由第三步 监听锚点改变的事件</span><br><span class="line">        window.onhashchange = (e)=&gt;&#123;</span><br><span class="line">            selectTab()</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>hash的缺陷就是很容易被篡改和影响    如一个回到顶部的锚点 #top 路由状态就改了 不是你之前的index了</p></blockquote><h4 id="第四步——H5新的api——history"><a href="#第四步——H5新的api——history" class="headerlink" title="第四步——H5新的api——history"></a>第四步——H5新的api——history</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        x-tab&#123;display: block;&#125;</span><br><span class="line">        x-tab&gt;.nav&gt;li.active&#123;background: red;&#125;</span><br><span class="line">        x-tab&gt;.content&gt;li&#123;display: none;&#125;</span><br><span class="line">        x-tab&gt;.content&gt;li.active&#123;display: block;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;x-tab&gt;</span><br><span class="line">        &lt;ol class=&quot;nav&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;active&quot;&gt;</span><br><span class="line">                &lt;a href=./tab1&gt;tab1&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;  &lt;a href=&quot;./tab2&quot;&gt;tab2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ol&gt;</span><br><span class="line">        &lt;ul class=&quot;content&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;active&quot;&gt;content1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;content2&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/x-tab&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        selectTab()</span><br><span class="line">        // 路由第四步  不用锚点  用a标签的href跳转  但是我们不想跳转页面，所以就把事件阻止掉</span><br><span class="line">        // 目标就是a标签点击之后不跳转</span><br><span class="line">        $(&apos;x-tab&apos;).on(&apos;click&apos;,&apos;.nav &gt; li &gt; a&apos;,(e)=&gt;&#123;</span><br><span class="line">            e.preventDefault()</span><br><span class="line">            let a = e.currentTarget</span><br><span class="line">            let aHref = a.getAttribute(&apos;href&apos;)</span><br><span class="line">            console.log(aHref)</span><br><span class="line">            // 最重要一步使用 History的新api pushState</span><br><span class="line">            window.history.pushState(&#123;&#125;,&apos;xxx&apos;,aHref)</span><br><span class="line">            selectTab()</span><br><span class="line">        &#125;)</span><br><span class="line">        // 监听</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        function selectTab()&#123;</span><br><span class="line">            let index = location.pathname.substring(1)|| tab1</span><br><span class="line">            index = index.substring(3) - 1||0</span><br><span class="line">            console.log(index)</span><br><span class="line">            $(&apos;.nav&gt;li&apos;).eq(index)</span><br><span class="line">                .addClass(&apos;active&apos;)</span><br><span class="line">                .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">            $(&apos;.content&gt;li&apos;).eq(index)</span><br><span class="line">                .addClass(&apos;active&apos;)</span><br><span class="line">                .siblings().removeClass(&apos;active&apos;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这样的方式你把外链分享出去是无法访问的必须服务器进行路径匹配。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 后端代码</span><br><span class="line">if(path===&apos;/&apos;||path===&apos;/tab1&apos;||path===&apos;/tab2)&#123;</span><br><span class="line">    // 这里返回同一页面就ok</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-11正则re</title>
      <link href="/2018/08/22/Py002-02-11%E6%AD%A3%E5%88%99re/"/>
      <url>/2018/08/22/Py002-02-11%E6%AD%A3%E5%88%99re/</url>
      
        <content type="html"><![CDATA[<h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">str = &apos;&apos;&apos;</span><br><span class="line">张三  20  广州  173  50  13613133344</span><br><span class="line">张四  30  深州  173  50  13813133344</span><br><span class="line">张五  25  天津  173  50  15613133366</span><br><span class="line">张六  13  北京  173  50  13613133388</span><br><span class="line">张七  44  宁波  173  50  18213133377</span><br><span class="line">张八  33  浙江  173  50  13013133341</span><br><span class="line">张九  90  杭州  173  50  13813133312</span><br><span class="line">张二  10  山西  173  50  13913133315</span><br><span class="line">张一  22  大同  173  50  05713133344</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"># 查找手机号</span><br><span class="line"></span><br><span class="line"># 只找到第一个</span><br><span class="line">print(re.search(&quot;[0-9]&#123;11&#125;&quot;,str))</span><br><span class="line"></span><br><span class="line"># 查找所有匹配的手机号</span><br><span class="line">print(re.findall(&quot;1[1-9]&#123;10&#125;&quot;,str))</span><br></pre></td></tr></table></figure><h4 id="常用正则规则"><a href="#常用正则规则" class="headerlink" title="常用正则规则"></a>常用正则规则</h4><p>正则表达式就是字符串的匹配规则，在多数编程语言里都有相应的支持，python里对应的模块是re</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&apos;.&apos;     默认匹配除\n之外的任意一个字符，若指定flag DOTALL,则匹配任意字符，包括换行</span><br><span class="line">&apos;^&apos;     匹配字符开头，若指定flags MULTILINE,这种也可以匹配上(r&quot;^a&quot;,&quot;\nabc\neee&quot;,flags=re.MULTILINE)</span><br><span class="line">&apos;$&apos;     匹配字符结尾， 若指定flags MULTILINE ,re.search(&apos;foo.$&apos;,&apos;foo1\nfoo2\n&apos;,re.MULTILINE).group() 会匹配到foo1</span><br><span class="line">&apos;*&apos;     匹配*号前的字符0次或多次， re.search(&apos;a*&apos;,&apos;aaaabac&apos;)  结果&apos;aaaa&apos;</span><br><span class="line">&apos;+&apos;     匹配前一个字符1次或多次，re.findall(&quot;ab+&quot;,&quot;ab+cd+abb+bba&quot;) 结果[&apos;ab&apos;, &apos;abb&apos;]</span><br><span class="line">&apos;?&apos;     匹配前一个字符1次或0次 ,re.search(&apos;b?&apos;,&apos;alex&apos;).group() 匹配b 0次</span><br><span class="line">&apos;&#123;m&#125;&apos;   匹配前一个字符m次 ,re.search(&apos;b&#123;3&#125;&apos;,&apos;alexbbbs&apos;).group()  匹配到&apos;bbb&apos;</span><br><span class="line">&apos;&#123;n,m&#125;&apos; 匹配前一个字符n到m次，re.findall(&quot;ab&#123;1,3&#125;&quot;,&quot;abb abc abbcbbb&quot;) 结果&apos;abb&apos;, &apos;ab&apos;, &apos;abb&apos;]</span><br><span class="line">&apos;|&apos;     匹配|左或|右的字符，re.search(&quot;abc|ABC&quot;,&quot;ABCBabcCD&quot;).group() 结果&apos;ABC&apos;</span><br><span class="line">&apos;(...)&apos; 分组匹配， re.search(&quot;(abc)&#123;2&#125;a(123|45)&quot;, &quot;abcabca456c&quot;).group() 结果为&apos;abcabca45&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;\A&apos;    只从字符开头匹配同(^)，re.search(&quot;\Aabc&quot;,&quot;alexabc&quot;) 是匹配不到的，相当于re.match(&apos;abc&apos;,&quot;alexabc&quot;) 或^</span><br><span class="line">&apos;\Z&apos;    匹配字符结尾，同$ </span><br><span class="line">&apos;\d&apos;    匹配数字0-9</span><br><span class="line">&apos;\D&apos;    匹配非数字</span><br><span class="line">&apos;\w&apos;    匹配[A-Za-z0-9]</span><br><span class="line">&apos;\W&apos;    匹配非[A-Za-z0-9]</span><br><span class="line">&apos;\s&apos;     匹配空白字符、\t、\n、\r , re.search(&quot;\s+&quot;,&quot;ab\tc1\n3&quot;).group() 结果 &apos;\t&apos;</span><br><span class="line"></span><br><span class="line">&apos;(?P&lt;name&gt;...)&apos; 分组匹配 re.search(&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;)(?P&lt;birthday&gt;[0-9]&#123;4&#125;)&quot;,&quot;371481199306143242&quot;).groupdict(&quot;city&quot;) 结果&#123;&apos;province&apos;: &apos;3714&apos;, &apos;city&apos;: &apos;81&apos;, &apos;birthday&apos;: &apos;1993&apos;&#125;</span><br></pre></td></tr></table></figure><h4 id="re的匹配语法有以下几种"><a href="#re的匹配语法有以下几种" class="headerlink" title="re的匹配语法有以下几种"></a>re的匹配语法有以下几种</h4><ul><li>re.match 从头开始匹配</li><li>re.search 匹配包含</li><li>re.findall 把所有匹配到的字符放到以列表中的元素返回</li><li>re.split 以匹配到的字符当做列表分隔符</li><li>re.sub 匹配字符并替换</li><li>re.fullmatch 全部匹配</li></ul><blockquote><p>match</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 从头匹配</span><br><span class="line">a = re.match(&apos;[0-9]&apos;,&apos;abcde2&apos;) # None</span><br><span class="line">b = re.match(&apos;[0-9]&apos;,&apos;1abcd2&apos;) # &lt;_sre.SRE_Match object; span=(0, 1), match=&apos;1&apos;&gt;</span><br><span class="line">c = re.match(&apos;[0-9]&apos;,&apos;ab3cd2&apos;) # None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 如何取到匹配返回的值呢？</span><br><span class="line"># 因为返回值可能是None 所以要做判断</span><br><span class="line">if b:</span><br><span class="line">    print(b.group())</span><br></pre></td></tr></table></figure><blockquote><p>search</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 全局匹配</span><br><span class="line">a = re.search(&apos;[0-9]&apos;,&apos;abcdef&apos;) # [] [&apos;1&apos;] [&apos;3&apos;]</span><br><span class="line">b = re.search(&apos;[0-9]&apos;,&apos;1abcd2&apos;) # &lt;_sre.SRE_Match object; span=(0, 1), match=&apos;1&apos;&gt; </span><br><span class="line">c = re.search(&apos;[0-9]&apos;,&apos;ab3cd2&apos;) # &lt;_sre.SRE_Match object; span=(2, 3), match=&apos;3&apos;&gt;</span><br><span class="line"></span><br><span class="line"># 如何取到匹配返回的值呢？</span><br><span class="line"># 因为返回值可能是None 所以要做判断</span><br><span class="line">if b:</span><br><span class="line">    print(b.group())</span><br></pre></td></tr></table></figure><blockquote><p>findall</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># </span><br><span class="line">a = re.findall(&apos;[0-9]&apos;,&apos;abcde2&apos;) # [&apos;2&apos;]</span><br><span class="line">b = re.findall(&apos;[0-9]&apos;,&apos;1abcd2&apos;) # [&apos;1&apos;, &apos;2&apos;]</span><br><span class="line">c= re.findall(&apos;[0-9]&apos;,&apos;ab3cd2&apos;) # [&apos;3&apos;, &apos;2&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>使用实例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 这俩效果一样  从头匹配</span><br><span class="line">re.search(&apos;^ab&apos;,&apos;abc&apos;) </span><br><span class="line"></span><br><span class="line">re.match(&apos;ab&apos;,&apos;abc&apos;)</span><br><span class="line"></span><br><span class="line"># 从尾匹配</span><br><span class="line">re.search(&apos;b$&apos;,&apos;ab&apos;)</span><br><span class="line"></span><br><span class="line"># 注意 $ 不要跟match一起用</span><br><span class="line">re.match(&apos;b$&apos;,&apos;b&apos;) # 能匹配</span><br><span class="line">re.match(&apos;b.b$&apos;,&apos;bob&apos;) # 能匹配</span><br><span class="line">re.match(&apos;b$&apos;,&apos;ab&apos;) # 不匹配</span><br></pre></td></tr></table></figure><blockquote><p>分组匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 匹配 单词 和数字</span><br><span class="line">re.search(&apos;[a-z]+[0-9]+&apos;,&apos;hjx123&apos;).group() # &apos;hjx123&apos;</span><br><span class="line"></span><br><span class="line"># 把 单词 和 数字分开</span><br><span class="line">re.search(&apos;([a-z]+)([0-9]+)&apos;,&apos;hjx123&apos;).group() # &apos;hjx123&apos;</span><br><span class="line"></span><br><span class="line"># 再看</span><br><span class="line">re.search(&apos;([a-z]+)([0-9]+)&apos;,&apos;hjx123&apos;).groups() # (&apos;hjx&apos;,&apos;123&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>非常炫酷的例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 模拟身份证号</span><br><span class="line">s = &apos;130704200005020613&apos; </span><br><span class="line">res = re.search(&apos;(?P&lt;province&gt;\d&#123;3&#125;)(?P&lt;city&gt;\d+&#123;3&#125;)(?P&lt;born_year&gt;\d&#123;4&#125;)&apos;,s)</span><br><span class="line"># 只要涉及分组就 groups</span><br><span class="line">res.groups() # (&apos;130&apos;,&apos;704&apos;,&apos;2000&apos;)</span><br><span class="line"></span><br><span class="line"># 还能更NB</span><br><span class="line">res.groupdict()</span><br><span class="line">&#123;&quot;province&quot;:&quot;130&quot;,&quot;city&quot;:&quot;704&quot;,&quot;born_year&quot;:&quot;2000&quot;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>splitall 和 split</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 按数字分割</span><br><span class="line">s = &apos;hjx22jack23rain31jin50&apos;</span><br><span class="line">re.split(&apos;\d&apos;,s) # [&apos;hjx&apos;,&apos;&apos;,&apos;jack&apos;,&apos;&apos;,&apos;rain&apos;,&apos;&apos;,&apos;jin&apos;,&apos;&apos;]</span><br><span class="line"></span><br><span class="line">re.split(&apos;\d+&apos;,s) # [&apos;hjx&apos;,&apos;jack&apos;,&apos;rain&apos;,&apos;jin&apos;,&apos;&apos;] 最后一个50后边又被分割出了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数字 或者 # 或者 - 分割  </span><br><span class="line">s2 = &apos;hjx22jack23rain31jin50#mock-Oldboy&apos;</span><br><span class="line">re.split(&apos;\d+|#|-&apos;,s2) # [&apos;hjx&apos;, &apos;jack&apos;, &apos;rain&apos;, &apos;jin&apos;, &apos;&apos;, &apos;mock&apos;, &apos;Oldboy&apos;]]</span><br><span class="line"></span><br><span class="line"># 如果是 |分割的呢？ 就 \|转义</span><br><span class="line"></span><br><span class="line"># 如果字符是  \分割 在系统里会变成\\ 所以转义的时候要 \\\\</span><br><span class="line">s3 = &apos;hjx22jack23ra\in31jin50#mock-Oldboy&apos;</span><br><span class="line">res3 = re.split(&apos;\d+|#|-|\\\\&apos;,s3)</span><br></pre></td></tr></table></figure><p>split更强大的用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s=&apos;9-2*5/3+7/3*99/4*2998+10*568/14&apos;</span><br><span class="line">re.split(&apos;[\*\-\/\+]&apos;,s) </span><br><span class="line"># [&apos;9&apos;, &apos;2&apos;, &apos;5&apos;, &apos;3&apos;, &apos;7&apos;, &apos;3&apos;, &apos;99&apos;, &apos;4&apos;, &apos;2998&apos;, &apos;10&apos;, &apos;568&apos;, &apos;14&apos;]</span><br><span class="line"></span><br><span class="line">re.split(&apos;[\*\-\/\+]&apos;,s,3)</span><br><span class="line"># [&apos;9&apos;, &apos;2&apos;, &apos;5&apos;, &apos;3+7/3*99/4*2998+10*568/14&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>sub</p></blockquote><p>用于替换匹配的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;hjx22jack23ra\in31jin50#mock-Oldboy&apos;</span><br><span class="line">res = re.sub(&apos;\d&apos;,&apos;_&apos;,s) # hjx__jack__ra\in__jin__#mock-Oldboy</span><br><span class="line"></span><br><span class="line">res2 = re.sub(&apos;\d&apos;,&apos;_&apos;,s,count=2) # hjx__jack23ra\in31jin50#mock-Oldboy</span><br></pre></td></tr></table></figure><blockquote><p>re.fullmatch(pattern, string, flags=0)</p></blockquote><p>整个字符串匹配成功就返回re object, 否则返回None</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.fullmatch(&apos;\w+@\w+\.(com|cn|edu)&apos;,&quot;alex@oldboyedu.cn&quot;)</span><br></pre></td></tr></table></figure><h4 id="最后一个"><a href="#最后一个" class="headerlink" title="最后一个"></a>最后一个</h4><blockquote><p>re.compile(pattern, flags=0)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prog = re.compile(正则) # 相当于把 正则 转换为代码规则 </span><br><span class="line">result = prog.match(string) # 这样可以省略 正则规则转换的过程</span><br><span class="line"></span><br><span class="line">以上俩行等价于</span><br><span class="line">result = re.match(正则, string)</span><br></pre></td></tr></table></figure><h4 id="Flags标志符"><a href="#Flags标志符" class="headerlink" title="Flags标志符"></a>Flags标志符</h4><ul><li>re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）</li><li>M(MULTILINE): 多行模式，改变’^’和’$’的行为</li><li>S(DOTALL): 改变’.’的行为,make the ‘.’ special character match any character at all, including a newline; without this flag, ‘.’ will match anything except a newline.</li><li>X(re.VERBOSE) 可以给你的表达式写注释，使其更可读，下面这2个意思一样</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re.search(&apos;a&apos;,&apos;alex&apos;,re.I) # 忽略大小写</span><br><span class="line"></span><br><span class="line">re.search(&apos;.&apos;,&apos;\n&apos;,re.S) # 匹配任意字符  . 是除了换行符  re.S代表任何字符</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-10常用模块九(logging)</title>
      <link href="/2018/08/22/Py002-02-10%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B9%9D(logging)/"/>
      <url>/2018/08/22/Py002-02-10%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B9%9D(logging)/</url>
      
        <content type="html"><![CDATA[<h3 id="logging-日志模块"><a href="#logging-日志模块" class="headerlink" title="logging (日志模块)"></a>logging (日志模块)</h3><p>logging的日志可以分为5个级别</p><ul><li>debug()</li><li>info()</li><li>warning()</li><li>error()</li><li>critical()</li></ul><h4 id="最简单用法"><a href="#最简单用法" class="headerlink" title="最简单用法"></a>最简单用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.warning(&quot;user [alex] attempted wrong password more than 3 times&quot;)</span><br><span class="line">logging.critical(&quot;server is down&quot;)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">WARNING:root:user [alex] attempted wrong password more than 3 times</span><br><span class="line">CRITICAL:root:server is down</span><br><span class="line"></span><br><span class="line"># 默认以root执行的，就是你没指定用户的情况下</span><br></pre></td></tr></table></figure><p>其中下面这句中的level=loggin.INFO意思是，把日志纪录级别设置为INFO，也就是说，只有比日志是INFO或比INFO级别更高的日志才会被纪录到文件里，在这个例子， 第一条日志是不会被纪录的，如果希望纪录debug的日志，那把日志级别改成DEBUG就行了。</p><h4 id="如果想把日志写到文件里，也很简单"><a href="#如果想把日志写到文件里，也很简单" class="headerlink" title="如果想把日志写到文件里，也很简单"></a>如果想把日志写到文件里，也很简单</h4><ul><li>filename 日志写入的文件</li><li>level 输入指定的级别以及以上级别的信息</li></ul><p>当你再次运行的时候，日志会追加而不是覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(filename=&apos;example.log&apos;,level=logging.INFO)</span><br><span class="line">logging.debug(&apos;This message should go to the log file&apos;)</span><br><span class="line">logging.info(&apos;So should this&apos;)</span><br><span class="line">logging.warning(&apos;And this, too&apos;)</span><br><span class="line"></span><br><span class="line"># example.log内容如下</span><br><span class="line">INFO:root:So should this</span><br><span class="line">WARNING:root:And this, too</span><br></pre></td></tr></table></figure><h4 id="自定义日志格式"><a href="#自定义日志格式" class="headerlink" title="自定义日志格式"></a>自定义日志格式</h4><p>日志起码要有时间吧！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(format=&apos;%(asctime)s %(message)s&apos;, datefmt=&apos;%m/%d/%Y %I:%M:%S %p&apos;)</span><br><span class="line">logging.warning(&apos;is when this event was logged.&apos;)</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">12/12/2010 11:46:36 AM is when this event was logged.</span><br></pre></td></tr></table></figure><p>除了加时间，还可以自定义一大堆格式，下表就是所有支持的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%(name)sLogger的名字</span><br><span class="line">%(levelno)s数字形式的日志级别</span><br><span class="line">%(levelname)s文本形式的日志级别</span><br><span class="line">%(pathname)s调用日志输出函数的模块的完整路径名，可能没有</span><br><span class="line">%(filename)s调用日志输出函数的模块的文件名</span><br><span class="line">%(module)s调用日志输出函数的模块名</span><br><span class="line">%(funcName)s调用日志输出函数的函数名</span><br><span class="line">%(lineno)d调用日志输出函数的语句所在的代码行</span><br><span class="line">%(created)f当前时间，用UNIX标准的表示时间的浮 点数表示</span><br><span class="line">%(relativeCreated)d输出日志信息时的，自Logger创建以 来的毫秒数</span><br><span class="line">%(asctime)s字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</span><br><span class="line">%(thread)d线程ID。可能没有</span><br><span class="line">%(threadName)s线程名。可能没有</span><br><span class="line">%(process)d进程ID。可能没有</span><br><span class="line">%(message)s用户输出的消息</span><br></pre></td></tr></table></figure><h4 id="日志同时输出到屏幕和文件"><a href="#日志同时输出到屏幕和文件" class="headerlink" title="日志同时输出到屏幕和文件"></a>日志同时输出到屏幕和文件</h4><p>如果想同时把log打印在屏幕和文件日志里，就需要了解一点复杂的知识 了</p><p>Python 使用logging模块记录日志涉及四个主要类，使用官方文档中的概括最为合适：</p><ul><li>logger提供了应用程序可以直接使用的接口；</li><li>handler将(logger创建的)日志记录发送到合适的目的输出；</li><li>filter提供了细度设备来决定输出哪条日志记录；</li><li>formatter决定日志记录的最终输出格式。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-09常用模块八(subprocess)</title>
      <link href="/2018/08/22/Py002-02-09%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%85%AB(subprocess)/"/>
      <url>/2018/08/22/Py002-02-09%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%85%AB(subprocess)/</url>
      
        <content type="html"><![CDATA[<h3 id="subprocess-模块"><a href="#subprocess-模块" class="headerlink" title="subprocess 模块"></a>subprocess 模块</h3><p>跟操作系统打交道的模块</p><ul><li>run</li><li>call</li><li>Popen 前两种的底层实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">a = subprocess.run([&apos;df&apos;,&apos;-h&apos;])</span><br><span class="line">print(a.args) # 命令的参数</span><br><span class="line">print(a.returncode) # 命令行的返回结果 0代表成功</span><br><span class="line">a.stderr</span><br><span class="line">a.stdout</span><br><span class="line">a.check_returncode() 非 0 报错</span><br></pre></td></tr></table></figure><blockquote><p>进程   word无法访问 qq的内存数据 不然就会把qq搞崩了， 所以每个应用的内存数据是相互独立的</p></blockquote><p>疑问?  qq里 别人一段消息  你ctrl + c之后 在word里 ctrl + v 数据就过去了？ 因为这是操作系统帮你做的</p><blockquote><h4 id="subprocess-执行时会开启一个进程，那返回的结果-如何获取呢？-答案是通过操作系统的桥梁"><a href="#subprocess-执行时会开启一个进程，那返回的结果-如何获取呢？-答案是通过操作系统的桥梁" class="headerlink" title="subprocess 执行时会开启一个进程，那返回的结果  如何获取呢？ 答案是通过操作系统的桥梁"></a>subprocess 执行时会开启一个进程，那返回的结果  如何获取呢？ 答案是通过操作系统的桥梁</h4></blockquote><ul><li>subprocess.PIPE 就是管道</li><li>check=True 如果不加 执行命令出错了 整个程序没有出错  加了会有报错信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = subprocess.run([&apos;df&apos;,&apos;-h&apos;],stderr=subprocess.PIPE,stdout=subprocess.PIPE,check=True)</span><br><span class="line"></span><br><span class="line">print(s.stdout)</span><br></pre></td></tr></table></figure><blockquote><h4 id="如果我想执行-带管道的命令呢？-答案是报错-因为subprocess本身就带管道里-如果命令还带就报错"><a href="#如果我想执行-带管道的命令呢？-答案是报错-因为subprocess本身就带管道里-如果命令还带就报错" class="headerlink" title="如果我想执行 带管道的命令呢？  答案是报错  因为subprocess本身就带管道里  如果命令还带就报错"></a>如果我想执行 带管道的命令呢？  答案是报错  因为subprocess本身就带管道里  如果命令还带就报错</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># s = subprocess.run([&apos;df&apos;,&apos;-h&apos;,&apos;|&apos;,&apos;grep&apos;,&apos;disk1&apos;],stderr=subprocess.PIPE,stdout=subprocess.PIPE,check=True)</span><br><span class="line"></span><br><span class="line"># 发现还是报错</span><br><span class="line"># s = subprocess.run(&apos;df -h |grep disk1&apos;,stderr=subprocess.PIPE,stdout=subprocess.PIPE,check=True)</span><br><span class="line"></span><br><span class="line"># 添加shell参数 意思是之前是列表里 拼参数  现在你别管了 把整条命令传给 shell执行</span><br><span class="line">s = subprocess.run(&apos;df -h |grep disk1&apos;, stderr = subprocess.PIPE, stdout = subprocess.PIPE, shell=True)</span><br></pre></td></tr></table></figure><h4 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#执行命令，返回命令执行状态 ， 0 or 非0</span><br><span class="line">&gt;&gt;&gt; retcode = subprocess.call([&quot;ls&quot;, &quot;-l&quot;])</span><br><span class="line"></span><br><span class="line">#执行命令，如果命令结果为0，就正常返回，否则抛异常</span><br><span class="line">&gt;&gt;&gt; subprocess.check_call([&quot;ls&quot;, &quot;-l&quot;])</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">#接收字符串格式命令，返回元组形式，第1个元素是执行状态，第2个是命令结果 </span><br><span class="line">&gt;&gt;&gt; subprocess.getstatusoutput(&apos;ls /bin/ls&apos;)</span><br><span class="line">(0, &apos;/bin/ls&apos;)</span><br><span class="line"></span><br><span class="line">#接收字符串格式命令，并返回结果</span><br><span class="line">&gt;&gt;&gt; subprocess.getoutput(&apos;ls /bin/ls&apos;)</span><br><span class="line">&apos;/bin/ls&apos;</span><br><span class="line"></span><br><span class="line">#执行命令，并返回结果，注意是返回结果，不是打印，下例结果返回给res</span><br><span class="line">&gt;&gt;&gt; res=subprocess.check_output([&apos;ls&apos;,&apos;-l&apos;])</span><br><span class="line">&gt;&gt;&gt; res</span><br><span class="line">b&apos;total 0\ndrwxr-xr-x 12 alex staff 408 Nov 2 11:05 OldBoyCRM\n&apos;</span><br></pre></td></tr></table></figure><h4 id="Popen-方法"><a href="#Popen-方法" class="headerlink" title="Popen()方法"></a>Popen()方法</h4><ul><li>args：shell命令，可以是字符串或者序列类型（如：list，元组）</li><li>stdin, stdout, stderr：分别表示程序的标准输入、输出、错误句柄</li><li>preexec_fn：只在Unix平台下有效，用于指定一个可执行对象（callable object），它将在子进程运行之前被调用</li><li>shell：同上</li><li>cwd：用于设置子进程的当前目录</li><li>env：用于指定子进程的环境变量。如果env = None，子进程的环境变量将从父进程中继承。</li></ul><blockquote><p>下面这2条语句执行会有什么区别？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=subprocess.run(&apos;sleep 10&apos;,shell=True,stdout=subprocess.PIPE)</span><br><span class="line">a=subprocess.Popen(&apos;sleep 10&apos;,shell=True,stdout=subprocess.PIPE)</span><br></pre></td></tr></table></figure><p>区别是Popen会在发起命令后立刻返回，而不等命令执行结果。这样的好处是什么呢？</p><p>如果你调用的命令或脚本 需要执行10分钟，你的主程序不需卡在这里等10分钟，可以继续往下走，干别的事情，每过一会，通过一个什么方法来检测一下命令是否执行完成就好了。</p><p>Popen调用后会返回一个对象，可以通过这个对象拿到命令执行结果或状态等，该对象有以下方法</p><ul><li>poll()</li></ul><p>结论：run方法同步，Popen会新开一个进程不影响主程序，可以通过poll方法获取命令的返回结果</p><blockquote><p>preexex_fn是什么鬼？代表执行命令前先执行的方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">def sayHi():</span><br><span class="line">    print(&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line">a = subprocess.Popen(&apos;sleep 10&apos;,stdout=subprocess.PIPE,shell=True,preexec_fn=sayHi)</span><br><span class="line">a.stdout</span><br><span class="line">s = a.stdout.read()</span><br><span class="line"></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><blockquote><p>cwd 用于设置子进程的当前目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = subprocess.Popen(&apos;echo $PWD&apos;,cwd=&apos;/Users/almost/Desktop/pycode&apos;,stdout=subprocess.PIPE,shell=True)</span><br><span class="line">a.stdout</span><br><span class="line">s = a.stdout.read()</span><br><span class="line"></span><br><span class="line">print(s) # b&apos;/Users/almost/Desktop/pycode\n&apos;</span><br></pre></td></tr></table></figure><blockquote><p>wait() 等待子进程的结果</p></blockquote><blockquote><p>terminate()终止所启动的进程Terminate the process with SIGTERM</p></blockquote><blockquote><p>kill() 杀死所启动的进程 Kill the process with SIGKILL</p></blockquote><blockquote><p>communicate()与启动的进程交互，发送数据到stdin,并从stdout接收输出，然后等待任务结束</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = subprocess.Popen(&apos;python3 guess_age.py&apos;,stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE,shell=True)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a.communicate(b&apos;22&apos;)</span><br><span class="line">(b&apos;your guess:try bigger\n&apos;, b&apos;&apos;)</span><br></pre></td></tr></table></figure><p>send_signal(signal.xxx)发送系统信号</p><p>pid 拿到所启动进程的进程号</p>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-08常用模块七(hashlib)</title>
      <link href="/2018/08/22/Py002-02-08%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%83(hashlib)/"/>
      <url>/2018/08/22/Py002-02-08%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%83(hashlib)/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="加密算法介绍"><a href="#加密算法介绍" class="headerlink" title="加密算法介绍"></a>加密算法介绍</h3></blockquote><h3 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h3><p>一种将任意长度的消息压缩到某一固定长度的消息摘要的函数</p><p>不可逆，也就是无法通过hash值反推原数据信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一次运行</span><br><span class="line">hash(&apos;hjx&apos;) # 4843833162619343159</span><br><span class="line"># 第二次运行</span><br><span class="line">hash(&apos;hjx&apos;) # 3179283320655676208</span><br><span class="line"># 第三次运行</span><br><span class="line">hash(&apos;hjx&apos;) # -1078172669992245685</span><br></pre></td></tr></table></figure><p>结论：每次对同一内容进行hash后  值是不同的(大多数情况下)</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>基于hash的，一种加密算法。</p><h4 id="MD5功能"><a href="#MD5功能" class="headerlink" title="MD5功能"></a>MD5功能</h4><blockquote><p>输入任意长度的信息，经过处理，输出为128位的信息（数字指纹）；<br>不同的输入得到的不同的结果（唯一性）；</p></blockquote><p>也就是16位字符的信息</p><h4 id="MD5算法的特点"><a href="#MD5算法的特点" class="headerlink" title="MD5算法的特点"></a>MD5算法的特点</h4><ul><li>压缩性：任意长度的数据，算出的MD5值的长度都是固定的</li><li>容易计算：从原数据计算出MD5值很容易</li><li>抗修改性：对原数据进行任何改动，修改一个字节生成的MD5值区别也会很大</li><li>强抗碰撞：已知原数据和MD5，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</li></ul><h4 id="MD5算法是否可逆？"><a href="#MD5算法是否可逆？" class="headerlink" title="MD5算法是否可逆？"></a>MD5算法是否可逆？</h4><p>MD5不可逆的原因是其是一种散列函数，使用的是hash算法，在计算过程中原文的部分信息是丢失了的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">m = hashlib.md5()</span><br><span class="line"></span><br><span class="line">m.update(b&apos;hjx&apos;)</span><br><span class="line">a = m.hexdigest()</span><br><span class="line"></span><br><span class="line">print(a) # ffd529f6b20aff2291bf876c68433e78 </span><br><span class="line"></span><br><span class="line"># 长度32的16进制字符 我们知道两个16进制数代表一个字节 所以就是32/2 = 16字节  </span><br><span class="line"># 一字节8位 所以 正好是16*8 = 128位</span><br><span class="line"></span><br><span class="line"># 而且这个md5值 不管在任何语言任何平台生成的值都是一样的，不变的</span><br></pre></td></tr></table></figure><blockquote><p>生活实例：支付宝密码如  if123456</p></blockquote><p>你肯定会担心，支付宝的后台维护人员知道我的密码，到时候他跑路了，盗取账号咋办？</p><ol><li>你的密码在支付宝数据库里存的不是明文 if123456</li><li>存的是类似 md5 的形式。[ffd529f6b20aff2291bf876c68433e78]</li><li>支付宝维护人员看到这个 md5 值也没有用,因为他拿这个 密码的md5值 [ffd529f6b20aff2291bf876c68433e78] 登录你的支付宝就会又进行一次md5 加密 生成新的值[87a28ad32d3dc1747c2c65c4dcc99e64]</li><li>肯定不是  if123456加密的值<br>[ffd529f6b20aff2291bf876c68433e78] != [87a28ad32d3dc1747c2c65c4dcc99e64] </li></ol><h4 id="MD5用途"><a href="#MD5用途" class="headerlink" title="MD5用途"></a>MD5用途</h4><blockquote><p>防止被篡改：</p></blockquote><ul><li><p>比如发送一个电子文档，发送前，我先得到MD5的输出结果a。然后在对方收到电子文档后，对方也得到一个MD5的输出结果b。如果a与b一样就代表中途未被篡改。</p></li><li><p>比如我提供文件下载，为了防止不法分子在安装程序中添加木马，我可以在网站上公布由安装文件得到的MD5输出结果。</p></li><li><p>SVN在检测文件是否在CheckOut后被修改过，也是用到了MD5.</p></li></ul><blockquote><p>防止直接看到明文：</p></blockquote><ul><li>现在很多网站在数据库存储用户的密码的时候都是存储用户密码的MD5值。这样就算不法分子得到数据库的用户密码的MD5值，也无法知道用户的密码。（比如在UNIX系统中用户的密码就是以MD5（或其它类似的算法）经加密后存储在文件系统中。当用户登录的时候，系统把用户输入的密码计算成MD5值，然后再去和保存在文件系统中的MD5值进行比较，进而确定输入的密码是否正确。通过这样的步骤，系统在并不知道用户密码的明码的情况下就可以确定用户登录系统的合法性。这不但可以避免用户的密码被具有系统管理员权限的用户知道，而且还在一定程度上增加了密码被破解的难度。）</li></ul><blockquote><p>防止抵赖（数字签名）：</p></blockquote><ul><li>这需要一个第三方认证机构。例如A写了一个文件，认证机构对此文件用MD5算法产生摘要信息并做好记录。若以后A说这文件不是他写的，权威机构只需对此文件重新产生摘要信息，然后跟记录在册的摘要信息进行比对，相同的话，就证明是A写的了。这就是所谓的“数字签名”。</li></ul><h4 id="网上的破解md5密码原理"><a href="#网上的破解md5密码原理" class="headerlink" title="网上的破解md5密码原理"></a>网上的破解md5密码原理</h4><p>实际上是撞库,它自己的数据库收集了常用密码生成的md5值，如果匹配上了就代表成功了，反之就破解不了</p>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-07常用模块六(configparser)</title>
      <link href="/2018/08/21/Py002-02-07%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%85%AD(configparser)/"/>
      <url>/2018/08/21/Py002-02-07%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%85%AD(configparser)/</url>
      
        <content type="html"><![CDATA[<h3 id="configparser-配置解析模块"><a href="#configparser-配置解析模块" class="headerlink" title="configparser 配置解析模块"></a>configparser 配置解析模块</h3><p>此模块用于生成和修改常见配置文档，当前模块的名称在 python 3.x 版本中变更为 configparser。</p><p>来看一个好多软件的常见配置文件格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">ServerAliveInterval = 45   </span><br><span class="line">Compression = yes</span><br><span class="line">CompressionLevel = 9</span><br><span class="line">ForwardX11 = yes</span><br><span class="line"></span><br><span class="line">[bitbucket.org]</span><br><span class="line">User = hg</span><br><span class="line"></span><br><span class="line">[topsecret.server.com]</span><br><span class="line">Port = 50022</span><br><span class="line">ForwardX11 = no</span><br></pre></td></tr></table></figure><blockquote><p>解析配置文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">conf = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line">conf.read(&apos;conf.ini&apos;)</span><br><span class="line"></span><br><span class="line">print(conf.sections()) # 打印每个section 但是不打印 default里的</span><br><span class="line">print(conf.default_section)</span><br><span class="line"></span><br><span class="line">print(conf[&apos;bitbucket.ort&apos;][&apos;User&apos;]) # hg</span><br><span class="line"></span><br><span class="line">print(list(conf[&apos;bitbucket.ort&apos;].keys()))</span><br></pre></td></tr></table></figure><blockquote><p>其它增删改查语法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[group1] # 支持的两种分隔符“=”, “:”</span><br><span class="line">k1 = v1</span><br><span class="line">k2:v2</span><br><span class="line"></span><br><span class="line">[group2]</span><br><span class="line">k1 = v1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config.read(&apos;i.cfg&apos;)</span><br><span class="line"></span><br><span class="line"># ########## 读 ##########</span><br><span class="line">#secs = config.sections()</span><br><span class="line">#print(secs)</span><br><span class="line">#options = config.options(&apos;group2&apos;) # 获取指定section的keys</span><br><span class="line">#print(options)</span><br><span class="line"></span><br><span class="line">#item_list = config.items(&apos;group2&apos;) # 获取指定 section 的 keys &amp; values ,key value 以元组的形式</span><br><span class="line">#print(item_list)</span><br><span class="line"></span><br><span class="line">#val = config.get(&apos;group1&apos;,&apos;key&apos;) # 获取指定的key 的value</span><br><span class="line">#val = config.getint(&apos;group1&apos;,&apos;key&apos;)</span><br><span class="line"></span><br><span class="line"># ########## 改写 ##########</span><br><span class="line">#sec = config.remove_section(&apos;group1&apos;) # 删除section 并返回状态(true, false)</span><br><span class="line">#config.write(open(&apos;i.cfg&apos;, &quot;w&quot;)) # 对应的删除操作要写入文件才会生效</span><br><span class="line"></span><br><span class="line">#sec = config.has_section(&apos;wupeiqi&apos;)</span><br><span class="line">#sec = config.add_section(&apos;wupeiqi&apos;)</span><br><span class="line">#config.write(open(&apos;i.cfg&apos;, &quot;w&quot;)) # </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#config.set(&apos;group2&apos;,&apos;k1&apos;,11111)</span><br><span class="line">#config.write(open(&apos;i.cfg&apos;, &quot;w&quot;))</span><br><span class="line"></span><br><span class="line">#config.remove_option(&apos;group2&apos;,&apos;age&apos;)</span><br><span class="line">#config.write(open(&apos;i.cfg&apos;, &quot;w&quot;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-06常用模块五(xml)</title>
      <link href="/2018/08/21/Py002-02-06%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%BA%94(xml)/"/>
      <url>/2018/08/21/Py002-02-06%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%BA%94(xml)/</url>
      
        <content type="html"><![CDATA[<h3 id="xml模块"><a href="#xml模块" class="headerlink" title="xml模块"></a>xml模块</h3><p>你肯定见过如下文件 1.xml的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;country name=&quot;Liechtenstein&quot;&gt;</span><br><span class="line">        &lt;rank updated=&quot;yes&quot;&gt;2&lt;/rank&gt;</span><br><span class="line">        &lt;year attr_test=&quot;yes&quot;&gt;2009&lt;/year&gt;</span><br><span class="line">        &lt;gdppc&gt;141100&lt;/gdppc&gt;</span><br><span class="line">        &lt;neighbor direction=&quot;E&quot; name=&quot;Austria&quot; /&gt;</span><br><span class="line">        &lt;neighbor direction=&quot;W&quot; name=&quot;Switzerland&quot; /&gt;</span><br><span class="line">    &lt;/country&gt;</span><br><span class="line">    &lt;country name=&quot;Singapore&quot;&gt;</span><br><span class="line">        &lt;rank updated=&quot;yes&quot;&gt;5&lt;/rank&gt;</span><br><span class="line">        &lt;year attr_test=&quot;yes&quot;&gt;2012&lt;/year&gt;</span><br><span class="line">        &lt;gdppc&gt;59900&lt;/gdppc&gt;</span><br><span class="line">        &lt;neighbor direction=&quot;N&quot; name=&quot;Malaysia&quot; /&gt;</span><br><span class="line">    &lt;/country&gt;</span><br><span class="line">    &lt;country name=&quot;Panama&quot;&gt;</span><br><span class="line">        &lt;rank updated=&quot;yes&quot;&gt;69&lt;/rank&gt;</span><br><span class="line">        &lt;year attr_test=&quot;yes&quot;&gt;2012&lt;/year&gt;</span><br><span class="line">        &lt;gdppc&gt;13600&lt;/gdppc&gt;</span><br><span class="line">        &lt;neighbor direction=&quot;W&quot; name=&quot;Costa Rica&quot; /&gt;</span><br><span class="line">        &lt;neighbor direction=&quot;E&quot; name=&quot;Colombia&quot; /&gt;</span><br><span class="line">    &lt;/country&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure><blockquote><p>通过xml模块,获取data节点</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line"></span><br><span class="line">tree = ET.parse(&quot;1.xml&quot;)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"></span><br><span class="line"># 第一步 获取 根节点</span><br><span class="line">print(root.tag) # data</span><br><span class="line"></span><br><span class="line"># 第二步 遍历子节点</span><br><span class="line">for child in root:</span><br><span class="line">    # tag 节点名称 attrib 节点属性(字典形式)</span><br><span class="line">    print(child.tag,child.attrib)</span><br><span class="line">    for i in child:</span><br><span class="line">        # text 节点文本内容</span><br><span class="line">        print(i.tag,i.text)</span><br><span class="line"></span><br><span class="line"># 只遍历指定节点 如只筛选 year节点</span><br><span class="line">for node in root.iter(&apos;year&apos;):</span><br><span class="line">    print(node.tag,node.text)</span><br></pre></td></tr></table></figure><h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><ul><li>修改</li></ul><p>还是刚才那个xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line"></span><br><span class="line">tree = ET.parse(&quot;1.xml&quot;)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"></span><br><span class="line"># 第一步 获取 根节点</span><br><span class="line">print(root.tag) # data</span><br><span class="line"></span><br><span class="line"># 第二步 把year里的 文本内容递增 并设置属性 xxx=&quot;aaa&quot;</span><br><span class="line">for node in root.iter(&apos;year&apos;):</span><br><span class="line">    new_year = int(node.text) + 1</span><br><span class="line">    node.text = str(new_year)</span><br><span class="line">    node.set(&apos;xxx&apos;,&apos;aaa&apos;)</span><br><span class="line"># 第三步 写入文件(保存)</span><br><span class="line">tree.write(&quot;1bak.xml&quot;)</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line"></span><br><span class="line">tree = ET.parse(&quot;1.xml&quot;)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"># findall 代表筛选所有的 xxx节点</span><br><span class="line">for country in root.findall(&apos;country&apos;):</span><br><span class="line">    rank = int(country.find(&apos;rank&apos;).text)</span><br><span class="line">    if rank &gt; 50:</span><br><span class="line">        root.remove(country)</span><br><span class="line">tree.write(&apos;1bak2.xml&apos;)</span><br></pre></td></tr></table></figure><ul><li>创建一个xml文档形如以下格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;</span><br><span class="line">&lt;namelist&gt;</span><br><span class="line">    &lt;userInfo info=&quot;3&quot;&gt;</span><br><span class="line">        &lt;name&gt;hjx&lt;/name&gt;</span><br><span class="line">        &lt;age ageMax=&quot;1000&quot; /&gt;</span><br><span class="line">        &lt;sex&gt;男&lt;/sex&gt;</span><br><span class="line">    &lt;/userInfo&gt;</span><br><span class="line">&lt;/namelist&gt;</span><br></pre></td></tr></table></figure><p>创建一个xml的实现代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import xml.etree.ElementTree as ET</span><br><span class="line"></span><br><span class="line"># 根节点</span><br><span class="line">root_node = ET.Element(&apos;namelist&apos;)</span><br><span class="line"></span><br><span class="line">info = ET.SubElement(root_node,&quot;userInfo&quot;,attrib=&#123;&quot;info&quot;:&quot;3&quot;&#125;)</span><br><span class="line">name = ET.SubElement(info,&quot;name&quot;)</span><br><span class="line">name.text = &quot;hjx&quot;</span><br><span class="line">age = ET.SubElement(info,&quot;age&quot;,attrib=&#123;&quot;ageMax&quot;:&quot;1000&quot;&#125;)</span><br><span class="line">sex = ET.SubElement(info,&quot;sex&quot;)</span><br><span class="line">sex.text = &apos;男&apos;</span><br><span class="line"></span><br><span class="line"># 生成文档对象</span><br><span class="line">et = ET.ElementTree(root_node)</span><br><span class="line">et.write(&quot;userInfo.xml&quot;,encoding=&quot;utf-8&quot;,xml_declaration=True)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-05常用模块四(序列化相关)</title>
      <link href="/2018/08/21/Py002-02-05%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%9B%9B(%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3)/"/>
      <url>/2018/08/21/Py002-02-05%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%9B%9B(%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3)/</url>
      
        <content type="html"><![CDATA[<h3 id="序列化模块"><a href="#序列化模块" class="headerlink" title="序列化模块"></a>序列化模块</h3><ul><li>序列化——将内存数据转换为字符串</li><li>反序列化——将字符串转换为内存数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 序列化</span><br><span class="line">data = &#123;</span><br><span class="line">    &quot;infos&quot;:[</span><br><span class="line">        &#123;&quot;name&quot;:&quot;张飞&quot;,&quot;life&quot;:100,&quot;arm&quot;:&quot;丈八蛇矛&quot;&#125;,</span><br><span class="line">        &#123;&quot;name&quot;:&quot;关羽&quot;,&quot;life&quot;:110,&quot;arm&quot;:&quot;青龙偃月刀&quot;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = open(&quot;info.txt&quot;,mode=&quot;w&quot;,encoding=&quot;utf-8&quot;)</span><br><span class="line">f.write(str(data))</span><br><span class="line"></span><br><span class="line"># ----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 反序列化</span><br><span class="line">f = open(&quot;info.txt&quot;,mode=&quot;r&quot;,encoding=&quot;utf-8&quot;)</span><br><span class="line">strinfo = f.read()</span><br><span class="line">info = eval(strinfo)</span><br><span class="line">print(info)</span><br></pre></td></tr></table></figure><blockquote><p>常用模块</p></blockquote><ul><li>pickle</li><li>json</li></ul><p><a href="https://sltrust.github.io/2018/07/29/P020_01_python%E5%BA%8F%E5%88%97%E5%8C%96%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">序列化模块知识点总结</a></p><h3 id="json-模块"><a href="#json-模块" class="headerlink" title="json 模块"></a>json 模块</h3><ul><li>json.dumps(序列化对象：如字典)</li><li>json.loads(字符串)</li><li>json.dump(数据类型,文件)</li><li>json.load(文件)</li></ul><blockquote><p>注意点</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;fff&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">res = json.load(f)</span><br><span class="line">res = json.load(f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"># 不要尝试多次 dump或者 多次load</span><br></pre></td></tr></table></figure><ul><li>python2中多次dump文件里会帮你自动换行</li><li>python3里直接禁止了你多次调用dump/load这些方法</li></ul><p>结论：无论何时都不要多次调用在一个文件句柄里多次调用 dump和load</p><h3 id="pickle-模块"><a href="#pickle-模块" class="headerlink" title="pickle 模块"></a>pickle 模块</h3><ul><li>pickle.dumps(序列化对象：如字典)</li><li>pickle.loads(字符串)</li><li>pickle.dump(数据类型,文件)</li><li>pickle.load(文件)</li></ul><p>它与json方法差不多，唯一区别就是序列化的内容是bytes你看不懂的内容(二进制的)</p><h4 id="json-模块和-pickle-模块区别"><a href="#json-模块和-pickle-模块区别" class="headerlink" title="json 模块和 pickle 模块区别"></a>json 模块和 pickle 模块区别</h4><ul><li>json 仅支持序列化 str / int / tuple / list / dict</li><li>pickle 支持python里所有数据类型(只能在python里)</li><li>load dump 都仅能用一次</li></ul><h3 id="shelve-模块"><a href="#shelve-模块" class="headerlink" title="shelve 模块"></a>shelve 模块</h3><p>跟前俩模块的区别就是：json、pickle只能load /dump 一次，但是shelve支持多次</p><ul><li>原理是对pickle进行了封装，python里独有的，并且顺序不会出错</li><li>核心就是key/value</li></ul><blockquote><p>序列化到文件里</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import shelve</span><br><span class="line">f = shelve.open(&apos;shelve_file&apos;)</span><br><span class="line">f[&apos;key&apos;] = &#123;&apos;int&apos;:10, &apos;float&apos;:9.5, &apos;string&apos;:&apos;Sample data&apos;&#125;  #直接对文件句柄操作，就可以存入数据</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>反序列化</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import shelve</span><br><span class="line">f1 = shelve.open(&apos;shelve_file&apos;)</span><br><span class="line">existing = f1[&apos;key&apos;]  #取出数据的时候也只需要直接用key获取即可，但是如果key不存在会报错</span><br><span class="line"># 推荐使用 get()获取字段 这样如果key不存在返回 None</span><br><span class="line">xx = f1[&apos;xxx&apos;]</span><br><span class="line">print(xx) # None</span><br><span class="line"></span><br><span class="line">f1.close()</span><br><span class="line">print(existing)</span><br></pre></td></tr></table></figure><blockquote><p>关于修改你肯定会这样遇到问题？为啥修改不了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import shelve</span><br><span class="line">f1 = shelve.open(&apos;shelve_file&apos;)</span><br><span class="line">f1[&apos;names&apos;] = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]</span><br><span class="line">f1[&apos;names&apos;][2] = &quot;ccc&quot;</span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line">f2 = shelve.open(&apos;shelve_file&apos;)</span><br><span class="line">print(f2[&quot;names&quot;])</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line">正确答案是 整体修改</span><br><span class="line">--------------------------</span><br><span class="line"></span><br><span class="line">f1[&apos;names&apos;] = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]</span><br><span class="line"># f1[&apos;names&apos;][2] = &quot;ccc&quot;</span><br><span class="line">f1[&apos;names&apos;] = [&quot;a&quot;,&quot;b&quot;,&quot;ccc&quot;,&quot;d&quot;,&quot;e&quot;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-04常用模块三(shutil)</title>
      <link href="/2018/08/21/Py002-02-04%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%89(shutil)/"/>
      <url>/2018/08/21/Py002-02-04%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%89(shutil)/</url>
      
        <content type="html"><![CDATA[<h3 id="shutil-模块"><a href="#shutil-模块" class="headerlink" title="shutil 模块"></a>shutil 模块</h3><p>复制压缩文件的模块</p><p><a href="https://www.cnblogs.com/wupeiqi/articles/4963027.html" target="_blank" rel="noopener">详细操作参考</a></p><blockquote><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># shutil.copyfileobj(fsrc, fdst[, length])</span><br><span class="line"></span><br><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">f1 = open(&apos;1.txt&apos;,mode=&quot;r&quot;)</span><br><span class="line">f2 = open(&apos;2.txt&apos;,mode=&quot;w&quot;)</span><br><span class="line"></span><br><span class="line">shutil.copyfileobj(f1,f2)</span><br></pre></td></tr></table></figure><blockquote><p>递归的操作目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 递归复制目录及文件</span><br><span class="line">shutil.copytree(&apos;aa&apos;,&apos;cc&apos;)</span><br><span class="line"></span><br><span class="line"># 递归的删除目录</span><br><span class="line">shutil.rmtree(&apos;cc&apos;)</span><br><span class="line"></span><br><span class="line"># 递归的移动文件 剪切功能</span><br><span class="line">shutil.move(&apos;aa&apos;,&apos;bb&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>压缩打包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.make_archive(base_name, format,...)</span><br></pre></td></tr></table></figure><ul><li>base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径，<br>如：www                        =&gt;保存至当前路径<br>如：/Users/wupeiqi/www =&gt;保存至/Users/wupeiqi/</li><li>format：    压缩包种类，“zip”, “tar”, “bztar”，“gztar”</li><li>root_dir：    要压缩的文件夹路径（默认当前目录）</li><li>owner：    用户，默认当前用户</li><li>group：    组，默认当前组</li><li>logger：    用于记录日志，通常是logging.Logger对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 将 bb 下的文件打包放置当前程序目录</span><br><span class="line"> </span><br><span class="line">import shutil</span><br><span class="line">ret = shutil.make_archive(&quot;bbgz&quot;, &apos;gztar&apos;, root_dir=&apos;aa&apos;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 将 bb 下的文件打包放置 aa/aagz 目录</span><br><span class="line">import shutil</span><br><span class="line">ret = shutil.make_archive(&quot;aa/aagz&quot;, &apos;gztar&apos;, root_dir=&apos;aa&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-03常用模块二(random,str,sys,os)</title>
      <link href="/2018/08/21/Py002-02-03%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%BA%8C(random,str,sys,os)/"/>
      <url>/2018/08/21/Py002-02-03%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%BA%8C(random,str,sys,os)/</url>
      
        <content type="html"><![CDATA[<h3 id="random-模块"><a href="#random-模块" class="headerlink" title="random 模块"></a>random 模块</h3><ul><li>randint(1-100) 左闭右开</li><li>randrange(1-100) 左闭右闭 </li><li>random() 随机浮点数</li><li>choise() 从字符串和列表里随机选取一个</li><li>sample(‘随机内容’,个数) 从字符串里 随机取几位 返回列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 从 1-100直接取随机数</span><br><span class="line">random.randint(1,100) # 不包含100</span><br><span class="line"></span><br><span class="line">random.randrange(1,100) # 包含100</span><br><span class="line"></span><br><span class="line"># 随机浮点数</span><br><span class="line">random.random()</span><br><span class="line"></span><br><span class="line"># 从 字符串里返回随机的字符 也可以是列表</span><br><span class="line">random.choise(&apos;fdsa342423&apos;)</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">random.sample(&apos;afsd25afa321sf&apos;,3) # [&apos;f&apos;,&apos;a&apos;,&apos;5&apos;]</span><br></pre></td></tr></table></figure><h3 id="string-模块"><a href="#string-模块" class="headerlink" title="string 模块"></a>string 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import string </span><br><span class="line"></span><br><span class="line">string.digits # 返回数字</span><br><span class="line">string.hexdigits # 十六进制的  0123456789ABCDEF</span><br><span class="line">string.ascii_letters # 大小写字母返回</span><br><span class="line">string.ascii_lowercase # 小写字母</span><br></pre></td></tr></table></figure><blockquote><p>通常用来生成验证码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = string.ascii_lowercase + string.digits</span><br><span class="line">&apos;&apos;.join(random.sample(s),5)</span><br></pre></td></tr></table></figure><blockquote><p>洗牌模式</p></blockquote><p>将有序的内容打乱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = list(range(100))</span><br><span class="line">random.shuffle(d) # 这样 d 就乱序了</span><br></pre></td></tr></table></figure><h3 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h3><p><a href="https://www.cnblogs.com/sunyang945/p/7900957.html" target="_blank" rel="noopener">常用api</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line">#os模块就是对操作系统进行操作，使用该模块必须先导入模块：</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">#getcwd() 获取当前工作目录(当前工作目录默认都是当前文件所在的文件夹)</span><br><span class="line">result = os.getcwd()</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#chdir()改变当前工作目录</span><br><span class="line">os.chdir(&apos;/home/sy&apos;)</span><br><span class="line">result = os.getcwd()</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">open(&apos;02.txt&apos;,&apos;w&apos;)</span><br><span class="line"></span><br><span class="line">#操作时如果书写完整的路径则不需要考虑默认工作目录的问题,按照实际书写路径操作</span><br><span class="line">open(&apos;/home/sy/下载/02.txt&apos;,&apos;w&apos;)</span><br><span class="line"></span><br><span class="line">#listdir() 获取指定文件夹中所有内容的名称列表</span><br><span class="line">result = os.listdir(&apos;/home/sy&apos;)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#mkdir()  创建文件夹</span><br><span class="line">#os.mkdir(&apos;girls&apos;)</span><br><span class="line">#os.mkdir(&apos;boys&apos;,0o777)</span><br><span class="line"></span><br><span class="line">#makedirs()  递归创建文件夹</span><br><span class="line">#os.makedirs(&apos;/home/sy/a/b/c/d&apos;)</span><br><span class="line"></span><br><span class="line">#rmdir() 删除空目录</span><br><span class="line">#os.rmdir(&apos;girls&apos;)</span><br><span class="line"></span><br><span class="line">#removedirs 递归删除文件夹  必须都是空目录</span><br><span class="line">#os.removedirs(&apos;/home/sy/a/b/c/d&apos;)</span><br><span class="line"></span><br><span class="line">#rename() 文件或文件夹重命名</span><br><span class="line">#os.rename(&apos;/home/sy/a&apos;,&apos;/home/sy/alibaba&apos;</span><br><span class="line">#os.rename(&apos;02.txt&apos;,&apos;002.txt&apos;)</span><br><span class="line"></span><br><span class="line">#stat() 获取文件或者文件夹的信息</span><br><span class="line">#result = os.stat(&apos;/home/sy/PycharmProject/Python3/10.27/01.py)</span><br><span class="line">#print(result)</span><br><span class="line"></span><br><span class="line">#system() 执行系统命令(危险函数)</span><br><span class="line">#result = os.system(&apos;ls -al&apos;)  #获取隐藏文件</span><br><span class="line">#print(result)</span><br><span class="line"></span><br><span class="line">#环境变量</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">环境变量就是一些命令的集合</span><br><span class="line">操作系统的环境变量就是操作系统在执行系统命令时搜索命令的目录的集合</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">#getenv() 获取系统的环境变量</span><br><span class="line">result = os.getenv(&apos;PATH&apos;)</span><br><span class="line">print(result.split(&apos;:&apos;))</span><br><span class="line"></span><br><span class="line">#putenv() 将一个目录添加到环境变量中(临时增加仅对当前脚本有效)</span><br><span class="line">#os.putenv(&apos;PATH&apos;,&apos;/home/sy/下载&apos;)</span><br><span class="line">#os.system(&apos;syls&apos;)</span><br><span class="line"></span><br><span class="line">#exit() 退出终端的命令</span><br><span class="line"></span><br><span class="line">#os模块中的常用值</span><br><span class="line">#curdir  表示当前文件夹   .表示当前文件夹  一般情况下可以省略</span><br><span class="line">print(os.curdir)</span><br><span class="line"></span><br><span class="line">#pardir  表示上一层文件夹   ..表示上一层文件夹  不可省略!</span><br><span class="line">print(os.pardir)</span><br><span class="line"></span><br><span class="line">#os.mkdir(&apos;../../../man&apos;)#相对路径  从当前目录开始查找</span><br><span class="line">#os.mkdir(&apos;/home/sy/man1&apos;)#绝对路径  从根目录开始查找</span><br><span class="line"></span><br><span class="line">#name 获取代表操作系统的名称字符串</span><br><span class="line">print(os.name) #posix -&gt; linux或者unix系统  nt -&gt; window系统</span><br><span class="line"></span><br><span class="line">#sep 获取系统路径间隔符号  window -&gt;\    linux -&gt;/</span><br><span class="line">print(os.sep)</span><br><span class="line"></span><br><span class="line">#extsep 获取文件名称和后缀之间的间隔符号  window &amp; linux -&gt; .</span><br><span class="line">print(os.extsep)</span><br><span class="line"></span><br><span class="line">#linesep  获取操作系统的换行符号  window -&gt; \r\n  linux/unix -&gt; \n</span><br><span class="line">print(repr(os.linesep))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#导入os模块</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">#以下内容都是os.path子模块中的内容</span><br><span class="line"></span><br><span class="line">#abspath()  将相对路径转化为绝对路径</span><br><span class="line">path = &apos;./boys&apos;#相对</span><br><span class="line">result = os.path.abspath(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#dirname()  获取完整路径当中的目录部分  &amp;  basename()获取完整路径当中的主体部分</span><br><span class="line">path = &apos;/home/sy/boys&apos;</span><br><span class="line">result = os.path.dirname(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result = os.path.basename(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#split() 将一个完整的路径切割成目录部分和主体部分</span><br><span class="line">path = &apos;/home/sy/boys&apos;</span><br><span class="line">result = os.path.split(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#join() 将2个路径合并成一个</span><br><span class="line">var1 = &apos;/home/sy&apos;</span><br><span class="line">var2 = &apos;000.py&apos;</span><br><span class="line">result = os.path.join(var1,var2)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#splitext() 将一个路径切割成文件后缀和其他两个部分,主要用于获取文件的后缀</span><br><span class="line">path = &apos;/home/sy/000.py&apos;</span><br><span class="line">result = os.path.splitext(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#getsize()  获取文件的大小</span><br><span class="line">#path = &apos;/home/sy/000.py&apos;</span><br><span class="line">#result = os.path.getsize(path)</span><br><span class="line">#print(result)</span><br><span class="line"></span><br><span class="line">#isfile() 检测是否是文件</span><br><span class="line">path = &apos;/home/sy/000.py&apos;</span><br><span class="line">result = os.path.isfile(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#isdir()  检测是否是文件夹</span><br><span class="line">result = os.path.isdir(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#islink() 检测是否是链接</span><br><span class="line">path = &apos;/initrd.img.old&apos;</span><br><span class="line">result = os.path.islink(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#getctime() 获取文件的创建时间 get create time</span><br><span class="line">#getmtime() 获取文件的修改时间 get modify time</span><br><span class="line">#getatime() 获取文件的访问时间 get active time</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">filepath = &apos;/home/sy/下载/chls&apos;</span><br><span class="line"></span><br><span class="line">result = os.path.getctime(filepath)</span><br><span class="line">print(time.ctime(result))</span><br><span class="line"></span><br><span class="line">result = os.path.getmtime(filepath)</span><br><span class="line">print(time.ctime(result))</span><br><span class="line"></span><br><span class="line">result = os.path.getatime(filepath)</span><br><span class="line">print(time.ctime(result))</span><br><span class="line"></span><br><span class="line">#exists() 检测某个路径是否真实存在</span><br><span class="line">filepath = &apos;/home/sy/下载/chls&apos;</span><br><span class="line">result = os.path.exists(filepath)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#isabs() 检测一个路径是否是绝对路径</span><br><span class="line">path = &apos;/boys&apos;</span><br><span class="line">result = os.path.isabs(path)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#samefile() 检测2个路径是否是同一个文件</span><br><span class="line">path1 = &apos;/home/sy/下载/001&apos;</span><br><span class="line">path2 = &apos;../../../下载/001&apos;</span><br><span class="line">result = os.path.samefile(path1,path2)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#os.environ 用于获取和设置系统环境变量的内置值</span><br><span class="line">import os</span><br><span class="line">#获取系统环境变量  getenv() 效果</span><br><span class="line">print(os.environ[&apos;PATH&apos;])</span><br><span class="line"></span><br><span class="line">#设置系统环境变量 putenv()</span><br><span class="line">os.environ[&apos;PATH&apos;] += &apos;:/home/sy/下载&apos;</span><br><span class="line">os.system(&apos;chls&apos;)</span><br><span class="line"></span><br><span class="line"># 获取当前终端大小</span><br><span class="line">os.get_terminal_size()</span><br><span class="line"></span><br><span class="line"># 杀死进程</span><br><span class="line">import signal # 信号模块</span><br><span class="line">os.kill(10884,signal.SIGKILL)</span><br></pre></td></tr></table></figure><blockquote><p>判断文件是否存在</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.path.exists(test_file.txt)</span><br></pre></td></tr></table></figure><h3 id="sys-模块"><a href="#sys-模块" class="headerlink" title="sys 模块"></a>sys 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sys.argv  # 命令行参数，第一个元素就是程序本身</span><br><span class="line">sys.exit(n) # 退出程序，正常退出时exit(0)</span><br><span class="line">sys.version # python解释器版本信息</span><br><span class="line">sys.maxint # 最大int值</span><br><span class="line">sys.path # 返回模块搜索路径</span><br><span class="line">sys.platform # 操作系统平台名称</span><br><span class="line">sys.stdout.wtite(&apos;please&apos;) # 标准输出，</span><br><span class="line">val = sys.stdin.readline()[:-1] # 标准输入</span><br><span class="line">sys.getrecursionlimit # 递归最大层数</span><br><span class="line">sys.setrecursionlimit(1200) # 设置递归层数</span><br><span class="line">sys.getdefaultencoding # 解释器编码</span><br><span class="line">sys.getfilesstemencoding # 获取内存数据到文件的默认编码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-02-02常用模块一(时间相关)</title>
      <link href="/2018/08/20/Py002-02-02%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%80(%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3)/"/>
      <url>/2018/08/20/Py002-02-02%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%80(%E6%97%B6%E9%97%B4%E7%9B%B8%E5%85%B3)/</url>
      
        <content type="html"><![CDATA[<h3 id="time-模块"><a href="#time-模块" class="headerlink" title="time 模块"></a>time 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">time.time() # 从1970年1月1日0时0分0秒  到现在的秒 </span><br><span class="line"></span><br><span class="line">time.localtime() </span><br><span class="line"># 本地系统时间</span><br><span class="line"># time.struct_time(tm_year=2018, tm_mon=8, tm_mday=20, tm_hour=23, tm_min=1, tm_sec=6, tm_wday=0, tm_yday=232, tm_isdst=0)</span><br><span class="line"></span><br><span class="line">你可以自定义格式的时间：</span><br><span class="line">a = time.localtime() </span><br><span class="line">&apos;%s-%s-%s&apos;%(a.tm_year,a.tm_mon,a.tm_mday)</span><br><span class="line"></span><br><span class="line">time.gmtime() # 格林时间 UTC时间</span><br><span class="line"></span><br><span class="line"># localtime还可以传递时间戳「 秒 」来生成时间</span><br><span class="line">time.localtime(1403232424)</span><br><span class="line"></span><br><span class="line"># mktime() 将时间对象反转为 时间戳</span><br><span class="line">a = time.localtime()</span><br><span class="line">b = time.mktime(a) # 1403232424</span><br><span class="line"></span><br><span class="line"># sleep() 线程挂起</span><br><span class="line">time.sleep(3) # 线程挂起3秒</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># asctime() 老外看见的那种格式 带英文的</span><br><span class="line">time.asctime() # 我们很少用</span><br><span class="line"></span><br><span class="line"># ctime() 将时间戳转为 asctime格式 </span><br><span class="line"></span><br><span class="line"># striftime() 格式化时间字符串</span><br><span class="line">time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;) # 2018-08-21 10:11:42</span><br><span class="line"></span><br><span class="line">time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;,结构化时间对象) </span><br><span class="line"></span><br><span class="line"># 将一个日期字符串 转换为 结构化时间对象</span><br><span class="line">a = &apos;2018-08-21 10:11:42&apos;</span><br><span class="line">time.strptime(a,&apos;%Y-%m-%d %H:%M:%S&apos;) # 结构化时间对象</span><br></pre></td></tr></table></figure><h4 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">a = datetime.now() # 时间对象</span><br><span class="line">a.year</span><br><span class="line">a.month</span><br><span class="line"></span><br><span class="line"># 将时间戳转换为时间对象 立刻获取年月日</span><br><span class="line">d = datetime.date.fromtimestamp(time.time())  # 这样会丢失  时分秒的信息</span><br></pre></td></tr></table></figure><h4 id="时间运算"><a href="#时间运算" class="headerlink" title="时间运算"></a>时间运算</h4><p>加/减 一小时/分钟/天/。。。。</p><ul><li>datetime.timedelta()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">datetime.datetime.now() - datetime.timedelta(days=1)</span><br><span class="line"></span><br><span class="line">datetime.datetime.now() + datetime.timedelta(days=4)</span><br><span class="line"></span><br><span class="line">datetime.datetime.now() - datetime.timedelta(months=1)</span><br><span class="line"></span><br><span class="line">datetime.datetime.now() - datetime.timedelta(hours=3)</span><br><span class="line"></span><br><span class="line">datetime.datetime.now() - datetime.timedelta(minutes=45)</span><br><span class="line"></span><br><span class="line">datetime.datetime.now() - datetime.timedelta(secs=12)</span><br></pre></td></tr></table></figure><h4 id="时间替换"><a href="#时间替换" class="headerlink" title="时间替换"></a>时间替换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = datetime.datetime.now()</span><br><span class="line">d.replace(year=2016,month=8) # 有很多参数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002_02_01模块和包</title>
      <link href="/2018/08/20/Py002-02-01%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
      <url>/2018/08/20/Py002-02-01%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>一个python文件就是一个模块</p><p>随着程序代码越来越多，在一个文件里代码越来越多，越来越难以维护。于是就把代码进行拆分。每个功能进行独立。–模块的诞生</p><p>这样，每个文件包含的代码就变少了。维护成本就低了</p><blockquote><p>是不是很像树的结构那样。如某个功能修改仅仅需要修改对应节点的代码。</p></blockquote><h4 id="模块的好处"><a href="#模块的好处" class="headerlink" title="模块的好处"></a>模块的好处</h4><ul><li>提高可维护性</li><li>可重用</li><li>避免函数名和变量名冲突</li></ul><h4 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h4><ul><li>内置模块，执行help(‘modules’) 查看所有python自带模块</li><li>第三方模块，通过pip install 的模块</li><li>自定义模块</li></ul><h4 id="导入一个模块"><a href="#导入一个模块" class="headerlink" title="导入一个模块"></a>导入一个模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import mod</span><br><span class="line">from mod import xx</span><br><span class="line">from mod.xx.xx import xx as yy</span><br><span class="line">from mod.xx.xx import *</span><br></pre></td></tr></table></figure><p><a href="https://sltrust.github.io/2018/07/29/P020_02_python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AF%BC%E5%85%A5/" target="_blank" rel="noopener">详情链接</a></p><p>通过sys可以查看模块的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(sys.path) # 打印一个列表，列表代表导入模块的路径，会从左到右查找，默认先从当前目录找</span><br><span class="line"></span><br><span class="line">如果全没找到就报错</span><br></pre></td></tr></table></figure><blockquote><h4 id="sys-path里的目录我们只关心-site-packages目录这是所有的标准库和第三方库位置"><a href="#sys-path里的目录我们只关心-site-packages目录这是所有的标准库和第三方库位置" class="headerlink" title="sys.path里的目录我们只关心 site-packages目录这是所有的标准库和第三方库位置"></a>sys.path里的目录我们只关心 site-packages目录这是所有的标准库和第三方库位置</h4></blockquote><h4 id="开源模块使用"><a href="#开源模块使用" class="headerlink" title="开源模块使用"></a>开源模块使用</h4><p><a href="https://pypi.org/" target="_blank" rel="noopener">开源模块网址</a></p><blockquote><p>下载文件(人肉安装)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 下载第三方包</span><br><span class="line">2. 解压</span><br><span class="line">3. 打开命令行输入  python setup.py build </span><br><span class="line">    会帮你创建一个build目录</span><br><span class="line">4. python setup.py install 会提示你安装成功</span><br></pre></td></tr></table></figure><blockquote><p>命令行安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">pip3 install 包名</span><br><span class="line"></span><br><span class="line"># 卸载</span><br><span class="line">pip3 uninstall 包名</span><br></pre></td></tr></table></figure><blockquote><p>pip安装的一个问题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由于网站是外国网站所以pip安装比较慢</span><br><span class="line"></span><br><span class="line">于是类似于js的npm淘宝源的东西出现了，就是国内镜像</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/testcs_dn/article/details/54374849" target="_blank" rel="noopener">一些国内镜像源</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -i http://pypi.douban.com/simple/ 模块名</span><br><span class="line"></span><br><span class="line">但是mac上会报安全问题</span><br><span class="line"></span><br><span class="line">可以这样：</span><br><span class="line">pip3 install -i http://pypi.douban.com/simple/ 模块名 --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><h3 id="包-package"><a href="#包-package" class="headerlink" title="包 package"></a>包 package</h3><p>现有如下目录结构</p><ul><li>第一步</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-|my_pro  根路径</span><br><span class="line">---|mod1</span><br><span class="line">------|a.py</span><br><span class="line">------|b.py</span><br><span class="line">------|c.py</span><br><span class="line">---|mod2</span><br><span class="line">------|d.py</span><br><span class="line">------|e.py</span><br><span class="line">------|f.py</span><br><span class="line">---|index.py</span><br></pre></td></tr></table></figure><ul><li>第二步</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># a.py中有如下内容 </span><br><span class="line">def sayHi():</span><br><span class="line">    print(&apos;hello&apos;)</span><br></pre></td></tr></table></figure><ul><li>第三步</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># index.py 中引入a.py功能</span><br><span class="line"></span><br><span class="line">from mod1 import a</span><br><span class="line"></span><br><span class="line">a.sayHi()</span><br></pre></td></tr></table></figure><ul><li>以上在python3中能正常运行，但是在 python2 中会报错找不到这个模块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">实际上 mod1 / mod2 虽然可以导入，但它并不是一个包</span><br><span class="line"></span><br><span class="line">你需要这样：</span><br><span class="line"></span><br><span class="line">在mod1、和mod2文件夹下分别创建 __init__.py文件(内容什么也没有)</span><br><span class="line"></span><br><span class="line">这样在 python2 中就是一个包了</span><br><span class="line">在 python3 中加不加都一样(默认帮你优化了)</span><br></pre></td></tr></table></figure><ul><li>模块间相互使用嵌套特别多的时候</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|——root</span><br><span class="line">|——|——t1</span><br><span class="line">|——|——|——__init__.py</span><br><span class="line">|——|——|——aaa.py</span><br><span class="line">|——|——|——t3</span><br><span class="line">|——|——|——|——__init__.py</span><br><span class="line">|——|——|——|——ccc.py</span><br><span class="line">|——|——t2</span><br><span class="line">|——|——|——__init__.py</span><br><span class="line">|——|——|——bbb.py</span><br><span class="line">|——|——|——t4</span><br><span class="line">|——|——|——|——__init__.py</span><br><span class="line">|——|——|——|——ddd.py</span><br></pre></td></tr></table></figure><p>这样的目录结构需要把 root路径引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如在 t1包下的 aaa为入口时就要 将根目录root加入到sys.path中 这样该目录下的所有包之间都可以引用了</span><br><span class="line">import os ,sys</span><br><span class="line"># os.path.dirname() 获取当前路径的目录名</span><br><span class="line"># print(os.path.abspath(__file__)) # 获取当前目录绝对路径</span><br><span class="line"></span><br><span class="line"># 获取根路径</span><br><span class="line">baseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"># 添加到sys.path 这个里面是个列表  就是调用方法或模块的查找路径</span><br><span class="line">sys.path.append(baseDir)</span><br></pre></td></tr></table></figure><blockquote><p>结论：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 文件夹中必须有 __init__.py 文件，该文件可以为空，但必须存在</span><br><span class="line">2. 在任意一个py文件里 往sys.path里添加 项目的根路径就可以任意的使用模块了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-01-06内置方法</title>
      <link href="/2018/08/16/Py002-01-06%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/16/Py002-01-06%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p>请参考之前的总结</p><p><a href="https://sltrust.github.io/2018/07/26/P015_01_python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">内置函数</a></p><p><a href="https://sltrust.github.io/2018/07/26/P015_02_python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E4%BA%8C/" target="_blank" rel="noopener">内置函数二</a></p><p><a href="https://sltrust.github.io/2018/07/26/P016_01_python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E6%94%B6%E5%B0%BE/" target="_blank" rel="noopener">内置函数三</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-01-05递归</title>
      <link href="/2018/08/16/Py002-01-05%E9%80%92%E5%BD%92/"/>
      <url>/2018/08/16/Py002-01-05%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>原理就是自己调用自己</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def xx(n):</span><br><span class="line">    print(n)</span><br><span class="line">    xx(n+1)</span><br><span class="line"></span><br><span class="line">xx(1)</span><br><span class="line"></span><br><span class="line"># 报错  maximum recursion depth exceeded while calling a Python object</span><br><span class="line"># 大概打印不到1000次 就报错了</span><br></pre></td></tr></table></figure><blockquote><h4 id="每次调用函数都会将其压入栈中-栈有一定的限制，超过就会溢出了"><a href="#每次调用函数都会将其压入栈中-栈有一定的限制，超过就会溢出了" class="headerlink" title="每次调用函数都会将其压入栈中,栈有一定的限制，超过就会溢出了"></a>每次调用函数都会将其压入栈中,栈有一定的限制，超过就会溢出了</h4></blockquote><p>就像步枪的「弹匣」是由容量限制的</p><blockquote><p>阶乘 1 <em> 2 </em> 3 <em> 4 … </em> n</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def xxx(n):</span><br><span class="line">    if n ==1:</span><br><span class="line">        return 1</span><br><span class="line">    return xxx(n-1)*n</span><br><span class="line"></span><br><span class="line">print(xxx(4)) #　24</span><br></pre></td></tr></table></figure><blockquote><h4 id="正确使用递归"><a href="#正确使用递归" class="headerlink" title="正确使用递归"></a>正确使用递归</h4></blockquote><ul><li>要有结束条件，否则就死循环了</li><li>每次进入更深一层递归时，问题规模要比上一次有所减少</li><li>递归效率不高</li></ul><p>适用场景</p><ul><li>兔子数列—-&gt;斐波那契</li><li>汉诺塔</li></ul><blockquote><h4 id="递归的优化-尾递归"><a href="#递归的优化-尾递归" class="headerlink" title="递归的优化(尾递归)"></a>递归的优化(尾递归)</h4></blockquote><ul><li>递归之所以效率低就是因为每执行一步就会压栈</li><li>每次压栈的执行结果要保存 如 4的阶乘 需要知道 3阶乘的结果 。。。。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 注意这个代码在python是不支持的会报错， 这样的代码实际就是尾递归。</span><br><span class="line">def cal(n):</span><br><span class="line">    print(n)</span><br><span class="line">    return cal(n+1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002-01-04函数</title>
      <link href="/2018/08/16/Py002-01-04%E5%87%BD%E6%95%B0/"/>
      <url>/2018/08/16/Py002-01-04%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>解决代码重复问题（给一坨代码起个名字法）</li><li>方便程序扩展</li><li>使程序变得易维护</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def 发邮件(内容):</span><br><span class="line">    连接邮箱服务器</span><br><span class="line">    发送邮件</span><br><span class="line">    关闭连接</span><br><span class="line"></span><br><span class="line">def sayHi(): # 定义函数</span><br><span class="line">    print(&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line">sayHi() # 执行代码</span><br><span class="line"></span><br><span class="line">传参数------------------------</span><br><span class="line">def sayHi(name): # 定义函数</span><br><span class="line">    print(&apos;hello&apos;,name)</span><br></pre></td></tr></table></figure><p>形参实参的问题不写了。写的实在太多了</p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>就记住一个规则：默认参数必须在位置参数后面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def userInfo(name,age,gender,city=&apos;USA&apos;):</span><br><span class="line">    print(name,age,gender,city)</span><br><span class="line"></span><br><span class="line">如果默认参数提前了呢？---------------------------</span><br><span class="line">ide会爆红，因为 那样就会影响后面的位置参数</span><br><span class="line"></span><br><span class="line">def userInfo(name,age,city=&apos;USA&apos;,gender):</span><br><span class="line"></span><br><span class="line">此时你就写三个参数</span><br><span class="line">userInfo(&apos;a&apos;,&apos;2&apos;,&apos;man&apos;)</span><br><span class="line">然后报错</span><br><span class="line">non-default argument follows default argument</span><br></pre></td></tr></table></figure><h4 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h4><p>铁律：位置参数不能放在关键字参数后面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def userInfo(name,age,gender=&apos;man&apos;,city=&apos;USA&apos;):</span><br><span class="line">    print(name,age,gender,city)</span><br><span class="line"></span><br><span class="line">调用可以这样</span><br><span class="line">userInfo(&quot;山炮&quot;,gender=&quot;woman&quot;,age=22,city=&apos;china&apos;)</span><br><span class="line"></span><br><span class="line">绝不可以这样</span><br><span class="line">userInfo(&quot;山炮&quot;,gender=&quot;woman&quot;,22,city=&apos;china&apos;)</span><br><span class="line">这样也不行</span><br><span class="line">userInfo(&quot;山炮&quot;,22,age=22,city=&apos;china&apos;)</span><br></pre></td></tr></table></figure><h4 id="非固定参数"><a href="#非固定参数" class="headerlink" title="非固定参数"></a>非固定参数</h4><blockquote><h4 id="场景：以前小公司只有一个维护人员-功能出现问题就给维护人员报警提示"><a href="#场景：以前小公司只有一个维护人员-功能出现问题就给维护人员报警提示" class="headerlink" title="场景：以前小公司只有一个维护人员,功能出现问题就给维护人员报警提示"></a>场景：以前小公司只有一个维护人员,功能出现问题就给维护人员报警提示</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def send_msg(msg,user):</span><br><span class="line">    print(msg,user)</span><br></pre></td></tr></table></figure><p>后来公司壮大了，10个运维人员，如何发给10个人呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 多个人你肯定不能这样</span><br><span class="line"># send_msg(&apos;别浪了&apos;,&apos;a1&apos;)</span><br><span class="line"># send_msg(&apos;别浪了&apos;,&apos;a2&apos;)</span><br><span class="line"># send_msg(&apos;别浪了&apos;,&apos;a3&apos;)</span><br><span class="line"># send_msg(&apos;别浪了&apos;,&apos;a4&apos;)</span><br><span class="line"># send_msg(&apos;别浪了&apos;,&apos;a5&apos;)</span><br><span class="line"># ....</span><br><span class="line"></span><br><span class="line">#----------------------------</span><br><span class="line"># 报警：10个运维人员咋办？ 修改如下 在users前加上「*」</span><br><span class="line">def send_msg(msg,*users):</span><br><span class="line">    for u in users:</span><br><span class="line">        print(msg,u)</span><br><span class="line"></span><br><span class="line">send_msg(&apos;别浪了&apos;,&apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos;,&apos;a4&apos;) # 将第一个参数后面的参数打包给 users</span><br><span class="line">此时 users就变为一个元组 </span><br><span class="line"></span><br><span class="line"># 如果参数中出现 *users参数的就可以不再固定个数，传过来的所有数据打包为一个元祖</span><br><span class="line"></span><br><span class="line"># *users 实际有种专业写法就是 ---------&gt; *args</span><br></pre></td></tr></table></figure><blockquote><h4 id="传参的两种方式"><a href="#传参的两种方式" class="headerlink" title="传参的两种方式"></a>传参的两种方式</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def send_msg(msg,*users):</span><br><span class="line">    for u in users:</span><br><span class="line">        print(msg,u)</span><br><span class="line"># 方式一</span><br><span class="line">send_msg(&apos;别浪了&apos;,&apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos;,&apos;a4&apos;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 如果向传一个列表呢？</span><br><span class="line">send_msg(&apos;别狼了&apos;,[&apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos;,&apos;a4&apos;]) # 这样实际上是 ([&apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos;,&apos;a4&apos;])</span><br><span class="line"># 方式二</span><br><span class="line"></span><br><span class="line">该咋办呢？ 在传递的列表前加上一个 * 就可以了</span><br><span class="line">send_msg(&apos;别狼了&apos;,*[&apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos;,&apos;a4&apos;]) </span><br><span class="line">这样就会这样</span><br><span class="line">*[&apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos;,&apos;a4&apos;] ===&gt; &apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos;,&apos;a4&apos;</span><br></pre></td></tr></table></figure><blockquote><p>如果有奇葩队友这样写参数咋办？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def send_msg(msg,*users,age):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># send_msg(&apos;别狼了&apos;,&apos;alex&apos;,22) # 这样就会报错 因为 这种参数传递 都会把 alex 22 给 users 到 age的时候就没有参数了</span><br><span class="line"></span><br><span class="line"># 有木有解决办法 使用关键字参数</span><br><span class="line">send_msg(&apos;别狼了&apos;,&apos;alex&apos;,&apos;xxx&apos;,age=22)</span><br></pre></td></tr></table></figure><h4 id="非固定参数二"><a href="#非固定参数二" class="headerlink" title="非固定参数二"></a>非固定参数二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def func(name,*args,**kwargs):</span><br><span class="line">    print(name,args,kwargs)</span><br><span class="line"></span><br><span class="line">func(&apos;alex&apos;,22,&apos;qq&apos;,&apos;500w&apos;) # alex (22, &apos;qq&apos;, &apos;500w&apos;) &#123;&#125;</span><br><span class="line"># 最后一个字典代表关键字参数</span><br><span class="line"></span><br><span class="line">func(&apos;alex&apos;,22,&apos;qq&apos;,&apos;500w&apos;,phone=&apos;1323123123&apos;,addr=&apos;北京&apos;)</span><br><span class="line"># alex (22, &apos;qq&apos;, &apos;500w&apos;) &#123;&apos;phone&apos;: &apos;1323123123&apos;, &apos;addr&apos;: &apos;北京&apos;&#125;</span><br></pre></td></tr></table></figure><p>你觉得写每个关键字参数太麻烦，于是改进了下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&quot;phone&quot;:&quot;1323123123&quot;,&quot;add&quot;:&quot;北京&quot;&#125;</span><br><span class="line">func(&apos;alex&apos;,d) # 为啥参数跑 元组里去了,因为被当作非固定参数</span><br><span class="line"># alex (&#123;&apos;phone&apos;: &apos;1323123123&apos;, &apos;addr&apos;: &apos;北京&apos;&#125;,) &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 对于字典， 应该这样</span><br><span class="line">func(&apos;alex&apos;,**d)</span><br><span class="line"># alex () &#123;&apos;phone&apos;: &apos;1323123123&apos;, &apos;addr&apos;: &apos;北京&apos;&#125;</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def fn():</span><br><span class="line">    return 1</span><br><span class="line"></span><br><span class="line">print(fn()) # 1 返回1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fn2():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(fn2()) #  返回 None</span><br><span class="line"># 没写return 返回None</span><br></pre></td></tr></table></figure><ul><li>能不能返回多个值？ 不能 肯定是被包裹在一个容器里</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def fn():</span><br><span class="line">    return 1,2</span><br><span class="line">print(fn()) # [1,2]</span><br><span class="line"></span><br><span class="line">def fn2():</span><br><span class="line">    return [1,2]</span><br><span class="line">print(fn2()) # [1,2]</span><br></pre></td></tr></table></figure><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><ul><li>定义在函数外部的一级代码的变量叫全局变量</li><li>在函数内定义的变量就是局部变量</li><li>函数内部可以引用全局变量，如果函数内外都有一个name变量，函数查找是由内而外的</li><li>局部可以引用全局变量，但不能修改 如name = ‘xx’实际是函数内部声明了一个局部变量name</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">name = &apos;aaa&apos;</span><br><span class="line">def xxx():</span><br><span class="line">    # 局部</span><br><span class="line">    name = &apos;bbb&apos; </span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xxx() # &apos;bbb&apos;</span><br><span class="line">print(name) # &apos;aaa&apos;</span><br></pre></td></tr></table></figure><blockquote><p>如果内部没有定义name 能直接打印吗？ 可以</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">name = &apos;aaa&apos;</span><br><span class="line">def xxx():</span><br><span class="line">    print(name) # 它会向父级作用域查找 有就打印，没有报错</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xxx() # &apos;aaa&apos; </span><br><span class="line">print(name) # &apos;aaa&apos;</span><br></pre></td></tr></table></figure><h4 id="我就是要修改全局变量"><a href="#我就是要修改全局变量" class="headerlink" title="我就是要修改全局变量"></a>我就是要修改全局变量</h4><ul><li>global声明一下你就可以改了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">name = &apos;aaa&apos;</span><br><span class="line">def xxx():</span><br><span class="line">    global name</span><br><span class="line">    name = &apos;bbb&apos; </span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">xxx() # &apos;bbb&apos; </span><br><span class="line">print(name) # &apos;bbb&apos;</span><br></pre></td></tr></table></figure><h4 id="让你诧异的问题"><a href="#让你诧异的问题" class="headerlink" title="让你诧异的问题"></a>让你诧异的问题</h4><blockquote><p>如果全局变量是个列表呢！而且也不进行global声明可以修改吗？ </p></blockquote><p>可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">names = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</span><br><span class="line"></span><br><span class="line">def xxx2():</span><br><span class="line">    del names[2]</span><br><span class="line">    names[1] = &apos;boss&apos;</span><br><span class="line">    print(names)</span><br><span class="line"></span><br><span class="line">xxx2() #　[&apos;a&apos;,&apos;boss&apos;,&apos;d&apos;]</span><br><span class="line">print(names)　#　[&apos;a&apos;,&apos;boss&apos;,&apos;d&apos;]</span><br><span class="line"></span><br><span class="line"># 实际names整体是一个内存地址  它内部元素又是单独的地址可以修改</span><br><span class="line"></span><br><span class="line"># 如果我就要整体换names里的东西呢？ global声明呗</span><br></pre></td></tr></table></figure><h4 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">age = 19</span><br><span class="line">def wrapper():</span><br><span class="line">    age = 73</span><br><span class="line">    print(age)</span><br><span class="line">    def inner():</span><br><span class="line">        age = 84</span><br><span class="line">        print(age)</span><br><span class="line">    inner()</span><br><span class="line"></span><br><span class="line">wrapper()</span><br><span class="line"># 73</span><br><span class="line"># 84 </span><br><span class="line"></span><br><span class="line"># 原理就是作用域从内到外，逐级向上查找</span><br></pre></td></tr></table></figure><p>来看各种恶心的调用版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">age = 19</span><br><span class="line">def wrapper():</span><br><span class="line">    age = 73</span><br><span class="line">    def inner():</span><br><span class="line">        print(age)</span><br><span class="line">    inner()</span><br><span class="line"></span><br><span class="line">wrapper() # 73</span><br><span class="line">再看-----------------------------</span><br><span class="line">age = 19</span><br><span class="line">def wrapper():</span><br><span class="line">    def inner():</span><br><span class="line">        print(age)</span><br><span class="line">    age = 73 # 声明在 函数后</span><br><span class="line">    inner()</span><br><span class="line"></span><br><span class="line">wrapper() # 73</span><br><span class="line">再看-----------------------------</span><br><span class="line">age = 19</span><br><span class="line">def wrapper():</span><br><span class="line">    def inner():</span><br><span class="line">        print(age)</span><br><span class="line">    inner()</span><br><span class="line">    age = 73 # 声明在 函数调用后</span><br><span class="line"></span><br><span class="line">wrapper() # 报错</span><br><span class="line"># 调用inner()的时候会找age  它会向全局找，但是函数调用的下面又声明了一个age所以就不知道找谁了，于是报错</span><br><span class="line"></span><br><span class="line"># 如何解决</span><br><span class="line">1. 要么声明在inner()之前</span><br><span class="line">2. 要么在调用前声明global age</span><br></pre></td></tr></table></figure><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def wrapper():</span><br><span class="line">    aa = 1</span><br><span class="line">    def inner():</span><br><span class="line">        print(aa)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"># 内部函数访问外部函数的变量就叫闭包</span><br><span class="line">numAdd = wrapper()</span><br><span class="line">numAdd()</span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>声明一个匿名函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 传统方式</span><br><span class="line">def fn(x,y):</span><br><span class="line">    return x**y</span><br><span class="line"></span><br><span class="line"># 匿名函数</span><br><span class="line">func = lambda x,y:x**y</span><br><span class="line"></span><br><span class="line">func(2,5) # 32</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4></blockquote><p>lambda返回值不支持复杂的条件判断，只支持三元运算,不像js的箭头函数可以用{}包含起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func = lambda x,y:x*y if x&lt;y else x/y</span><br></pre></td></tr></table></figure><blockquote><h4 id="匿名函数的用途"><a href="#匿名函数的用途" class="headerlink" title="匿名函数的用途"></a>匿名函数的用途</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def fn(n):</span><br><span class="line">    return n*n</span><br><span class="line"></span><br><span class="line">data = list(range(10))</span><br><span class="line">map(fn,data)</span><br><span class="line">--------------------------------</span><br><span class="line">map(lambda x:x*x,data)</span><br></pre></td></tr></table></figure><p>匿名函数总结：</p><ul><li>节省代码量</li><li>看着高大上</li></ul><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>只要满足以下任意条件就是高阶函数</p><ul><li>把函数当作参数</li><li>return 返回另一个函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def xx(a):</span><br><span class="line">    return a + 1</span><br><span class="line"></span><br><span class="line">def yy(fn,n):</span><br><span class="line">    return fn(n) # 返回 给参数函数fn 传递参数n并返回执行结果</span><br><span class="line"></span><br><span class="line">res = yy(xx,2) # 传递 xx 函数</span><br><span class="line">print(res) # 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002_01_03文件操作</title>
      <link href="/2018/08/15/Py002-01-03%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/08/15/Py002-01-03%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="python文件处理"><a href="#python文件处理" class="headerlink" title="python文件处理"></a>python文件处理</h3><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=&apos;xxx.txt&apos;,mode=&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">data = f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li>file 是目标文件</li><li>mode 代表文件操作模式  r意思是只读</li><li>encoding 是以xx编码读取文件</li></ul><blockquote><p>注意：</p></blockquote><ul><li>读取文件的编码方式和文件存储时的编码要一致</li><li>如果不传递encoding，在python3里默认utf-8</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果文件是gbk的形式存储的，那么读取时如果encoding=&apos;utf-8&apos;就会报错</span><br></pre></td></tr></table></figure><h3 id="二进制模式"><a href="#二进制模式" class="headerlink" title="二进制模式"></a>二进制模式</h3><blockquote><p>如果我不知道文件的编码也想把内容读取进来，你可以使用二进制模式</p></blockquote><p>把这段内容直接以二进制的形式读取进来，不进行按照它的编码方式编码</p><ul><li>mode=rb</li></ul><blockquote><p>主要用来视频/图片/文件传输</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=&apos;xxx.txt&apos;,mode=&apos;rb&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">data = f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="智能检测编码的工具"><a href="#智能检测编码的工具" class="headerlink" title="智能检测编码的工具"></a>智能检测编码的工具</h3><blockquote><p>需要手动安装工具包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install chardet</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=&apos;xxx.txt&apos;,mode=&apos;rb&apos;)</span><br><span class="line">data = f.read()</span><br><span class="line">f.close()</span><br><span class="line">print(chardet.detect(data))</span><br><span class="line"># 输出一个字典显示 改二进制对应的编码</span><br><span class="line">&#123;&apos;encoding&apos;: &apos;gb2312&apos;, &apos;confidence&apos;: 0,8321312312, &apos;language&apos;: &apos;chinese&apos;&#125;</span><br></pre></td></tr></table></figure><h4 id="read-的缺陷"><a href="#read-的缺陷" class="headerlink" title="read()的缺陷"></a>read()的缺陷</h4><p>一次性把文件读取到内存，如果文件3G呢？</p><blockquote><h4 id="循环文件（一次读一部分）"><a href="#循环文件（一次读一部分）" class="headerlink" title="循环文件（一次读一部分）"></a>循环文件（一次读一部分）</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=&apos;xxx.txt&apos;,mode=&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">for line in f:</span><br><span class="line">    print(line)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><blockquote><p>普通写入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=&apos;xxx.txt&apos;,mode=&apos;w&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line">f.write(&quot;你好！！！&quot;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>二进制模式写入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=&apos;xxx.txt&apos;,mode=&apos;wb&apos;)</span><br><span class="line">f.write(&quot;你好！！！&quot;.encode()) # encode默认utf-8</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>mode=’w’每次都会创建一个新文件，如果已经存在就覆盖了</p></blockquote><blockquote><p>同一文件不想每次都覆盖==&gt;追加模式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=&apos;xxx.txt&apos;,mode=&apos;ab&apos;)</span><br><span class="line">f.write(&quot;你好！！！&quot;.encode()) # encode默认utf-8</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="混合操作文件"><a href="#混合操作文件" class="headerlink" title="混合操作文件"></a>混合操作文件</h4><p>既能写又能读的模式</p><ul><li>r+ 读写模式—&gt;先读后写</li><li>w+ 写读模式—&gt;先创建然后读取(先把文件覆盖，然后读取新写入的内容)(几乎用不到)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">假设文件里有内容</span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;r+&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line">print(f.read())</span><br><span class="line">f.write(&apos;\n何大宝   哈哈  11111111111&apos;)</span><br><span class="line">f.write(&apos;\n何大宝   哈哈  11111111111&apos;)</span><br><span class="line">f.write(&apos;\n何大宝   哈哈  11111111111&apos;)</span><br><span class="line">f.write(&apos;\n何大宝   哈哈  11111111111&apos;)</span><br><span class="line">print(&apos;````````````````&apos;)</span><br><span class="line">print(f.read()) # 为什么这次的内容是空的</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">详解：</span><br><span class="line">文件读取的时候会有一个光标</span><br><span class="line">1. 第一次read()的时候全部读出来  光标移动到读取内容末尾</span><br><span class="line">2. write的时候  光标移动到写入内容的后面</span><br><span class="line">3. 第二次read()的时候 由于光标后面没有任何东西，所以为空</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">假设文件里有内容</span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;w+&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line">print(f.read()) # 为什么这次的内容是空的</span><br><span class="line">f.write(&apos;\n何大宝   哈哈  11111111111&apos;)</span><br><span class="line">f.write(&apos;\n何大宝   哈哈  11111111111&apos;)</span><br><span class="line">f.write(&apos;\n何大宝   哈哈  11111111111&apos;)</span><br><span class="line">f.write(&apos;\n何大宝   哈哈  11111111111&apos;)</span><br><span class="line">print(&apos;````````````````&apos;)</span><br><span class="line">print(f.read()) # 为什么这次的内容也是空的</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">详解：</span><br><span class="line">0. 写读模式打开--》创建这个文件如果已经存在就覆盖了</span><br><span class="line">1. 第一次read() 文件是新建的本来就是空的</span><br><span class="line">2. write的时候  光标移动到写入内容的后面</span><br><span class="line">3. 第二次read()的时候 由于光标后面没有任何东西，所以为空</span><br><span class="line"></span><br><span class="line">最没用模式---------几乎用不到</span><br></pre></td></tr></table></figure><h4 id="文件操作其他方法"><a href="#文件操作其他方法" class="headerlink" title="文件操作其他方法"></a>文件操作其他方法</h4><ul><li>fileno() 网络编程会用，返回一个数字</li><li>flush() 强制把文件buffer里(内存里)的内容写入到文件里</li><li>readable() 是否可读</li><li>readline() 每次读一行</li><li>seek() 设置光标的位置 (下次读的时候从这个位置开始)</li><li>tell() 返回光标的位置</li><li>seekable() 判断文件是否可以seek操作 比如终端命令行也是一个文件就不允许seek</li><li>writeable() 判断是否可写</li><li>truncate() 从指定位置(光标)截断文件</li></ul><blockquote><p>flush功能</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;info.txt&apos;,&apos;w&apos;)</span><br><span class="line">f.write(&apos;aa&apos;)</span><br><span class="line">f.write(&apos;aa&apos;)</span><br><span class="line">f.write(&apos;aa&apos;)</span><br><span class="line"></span><br><span class="line"># ....只要你不 f.close()   写入的内容就在 内存里也就是缓存里</span><br><span class="line"># 因为频繁写入文件的话很耗性能</span><br><span class="line"># flush是什么鬼呢？</span><br><span class="line"># 如果你写的内容非常重要 必须确保每次都write的时候写入到文件里,就用flush</span><br><span class="line">f.flush() # 此时就算你不f.close()也可以在存盘</span><br></pre></td></tr></table></figure><h5 id="tell和seek的坑"><a href="#tell和seek的坑" class="headerlink" title="tell和seek的坑"></a>tell和seek的坑</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 假设文件内容是 &apos;hello world&apos;</span><br><span class="line"></span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;r&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line">f.tell() # 0</span><br><span class="line">f.seek(3) </span><br><span class="line">f.readline() # lo world</span><br><span class="line">------------------------------------------------</span><br><span class="line"># 假设文件内容是 &apos;路飞学城&apos;</span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;r&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line">f.seek(3)</span><br><span class="line">f.readline() # 报错 decode error</span><br><span class="line">-----------------------------------------------</span><br><span class="line"># 验证为什么报错</span><br><span class="line"># 假设文件内容是 &apos;路飞学城&apos;</span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;r&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line">f.seek(0)</span><br><span class="line">f.readline() # &apos;路飞学城&apos; 没问题啊？？？</span><br><span class="line">-----------------------------------------------</span><br><span class="line"># 验证为什么报错</span><br><span class="line"># 假设文件内容是 &apos;路飞学城&apos;</span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;r&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line">f.seek(2)</span><br><span class="line">f.readline() # 报错 decode error 为啥还报错！！！</span><br><span class="line">-----------------------------------------------</span><br><span class="line"># 验证为什么报错</span><br><span class="line"># 假设文件内容是 &apos;路飞学城&apos;</span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;r&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line">f.read(1) # 路</span><br><span class="line">f.tell() # 2 读了一个汉字  为什么走俩,我猜可能是因为gbk里汉字占俩字节</span><br><span class="line">f.read() # 飞学城</span><br><span class="line">-----------------------------------------------</span><br><span class="line"># 验证utf-8汉字是否会 移动三个光标？</span><br><span class="line"># 假设文件内容是 &apos;路飞学城&apos;</span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">f.read(1) # 路</span><br><span class="line">f.tell() # 3 事实证明，结论是对的</span><br><span class="line">f.read() # 飞学城</span><br></pre></td></tr></table></figure><blockquote><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4></blockquote><ul><li>无论seek 还是 tell 它们找的都是字节</li><li>read(1) 是读一个字符</li></ul><blockquote><p>truncate</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 假设文件内容是 &apos;路飞学城&apos;</span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">f.truncate() </span><br><span class="line">f.flush() # 此时文件是空的</span><br><span class="line">----------------------------------</span><br><span class="line"># 假设文件内容是 &apos;路飞学城&apos;</span><br><span class="line">f = open(&apos;info.txt&apos;,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">f.truncate(6) </span><br><span class="line">f.flush() # 此时文件是  &apos;路飞&apos; 代表从头开始截取6个字节</span><br></pre></td></tr></table></figure><h3 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h3><p>实际是不能直接像word那样修改文件内容的，因为word是把所有内容读到内存里。</p><p>用光标也不靠谱：因为  比如seek的时候  张三 变成 哈尔滨 这样张三后面的内容不会让出位置，而是覆盖。</p><blockquote><p>变通方式</p></blockquote><ul><li>写道磁盘上</li><li>写道内存里</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">f_name = &quot;info.txt&quot;</span><br><span class="line">f_new_name = &quot;%s.new&quot;%f_name</span><br><span class="line"></span><br><span class="line">old_str = &apos;张三&apos;</span><br><span class="line">new_str = &apos;哈尔滨&apos;</span><br><span class="line"></span><br><span class="line">f = open(f_name,&quot;r&quot;,encoding=&apos;utf-8&apos;)</span><br><span class="line">f_new = open(f_new_name,&quot;w&quot;,encoding=&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">for line in f:</span><br><span class="line">    if old_str in line:</span><br><span class="line">        line = line.replace(old_str,new_str)</span><br><span class="line"></span><br><span class="line">    f_new.write(line)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line">f_new.close()</span><br><span class="line"></span><br><span class="line">os.rename(f_new_name,f_name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002_01_02三元运算</title>
      <link href="/2018/08/15/Py002-01-02%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97/"/>
      <url>/2018/08/15/Py002-01-02%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件成立:</span><br><span class="line">    val = 1</span><br><span class="line">else:</span><br><span class="line">    val = 2</span><br></pre></td></tr></table></figure><blockquote><p>三元运算</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val = 1 if 条件成立 else 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py002_01_01人丑就该多读书</title>
      <link href="/2018/08/15/Py002_01_01%E4%BA%BA%E4%B8%91%E5%B0%B1%E8%AF%A5%E5%A4%9A%E8%AF%BB%E4%B9%A6/"/>
      <url>/2018/08/15/Py002_01_01%E4%BA%BA%E4%B8%91%E5%B0%B1%E8%AF%A5%E5%A4%9A%E8%AF%BB%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="据国家统计"><a href="#据国家统计" class="headerlink" title="据国家统计"></a>据国家统计</h3><blockquote><p>一年中读书统计</p></blockquote><ul><li>中国人均阅读量4.35本；</li><li>日本40本</li><li>韩国11本</li><li>法国20本</li><li>以色列60本</li></ul><h3 id="如果你迷茫了"><a href="#如果你迷茫了" class="headerlink" title="如果你迷茫了"></a>如果你迷茫了</h3><blockquote><p>想法太多，读书太少</p></blockquote><h3 id="如果你想升华"><a href="#如果你想升华" class="headerlink" title="如果你想升华"></a>如果你想升华</h3><ul><li>多读书</li></ul><h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><ul><li>追风筝的人</li><li>白鹿原</li></ul><blockquote><p>金句：肾虚就该少看片，人丑就该多读书</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> M02 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_02_06Python进制拾遗和编码问题</title>
      <link href="/2018/08/14/Py001_02_06Python%E8%BF%9B%E5%88%B6%E6%8B%BE%E9%81%97/"/>
      <url>/2018/08/14/Py001_02_06Python%E8%BF%9B%E5%88%B6%E6%8B%BE%E9%81%97/</url>
      
        <content type="html"><![CDATA[<h3 id="进制拾遗"><a href="#进制拾遗" class="headerlink" title="进制拾遗"></a>进制拾遗</h3><ul><li>oct 八进制</li><li>hex 十六进制</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">oct(1) # &apos;0o1&apos;</span><br><span class="line">oct(7) # &apos;0o7&apos;</span><br><span class="line">oct(8) # &apos;0o10&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hex(9) # &apos;0x9&apos;</span><br><span class="line">hex(10) # &apos;0xa&apos;</span><br><span class="line">hex(11) # &apos;0xb&apos;</span><br><span class="line">hex(12) # &apos;0xc&apos;</span><br><span class="line">hex(13) # &apos;0xd&apos;</span><br><span class="line">hex(14) # &apos;0xe&apos;</span><br><span class="line">hex(15) # &apos;0xf&apos;</span><br><span class="line">hex(16) # &apos;0x10&apos;</span><br></pre></td></tr></table></figure><h3 id="为何使用十六进制"><a href="#为何使用十六进制" class="headerlink" title="为何使用十六进制"></a>为何使用十六进制</h3><ul><li>短</li><li>方便阅读</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chr(97) # &apos;a&apos;</span><br><span class="line">bin(97) # &apos;0b1100001&apos;</span><br><span class="line">hex(97) # &apos;0x61&apos;</span><br></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>我们知道最早计算机使用的ascⅡ编码，因为是外国人发明的，没有考虑到中国的强大</p><p>后来随着祖国的强大陆续出现GB2312，GBK等编码</p><p>但是为了实现多个国家的统一ISO组织创建了Unicode字符集（万国码）</p><p>我们知道Unicode导致什么字符占用2-4个字节 这样很浪费空间</p><p>于是出现了UTF 编码(变长存储)</p><blockquote><h3 id="总结：UTF-是-unicode的编码设计的一种在存储和传输时节省空间的编码方案"><a href="#总结：UTF-是-unicode的编码设计的一种在存储和传输时节省空间的编码方案" class="headerlink" title="总结：UTF 是 unicode的编码设计的一种在存储和传输时节省空间的编码方案"></a>总结：UTF 是 unicode的编码设计的一种在存储和传输时节省空间的编码方案</h3></blockquote><p>可以参考我之前写的文章 <a href="https://sltrust.github.io/2017/09/22/N002_%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84/" target="_blank" rel="noopener">计算机是如何存数据的</a></p><blockquote><h4 id="所有电脑现在都默认是unicode字符集，方便你以后的软件出口，或者10年前的项目不用改写"><a href="#所有电脑现在都默认是unicode字符集，方便你以后的软件出口，或者10年前的项目不用改写" class="headerlink" title="所有电脑现在都默认是unicode字符集，方便你以后的软件出口，或者10年前的项目不用改写"></a>所有电脑现在都默认是unicode字符集，方便你以后的软件出口，或者10年前的项目不用改写</h4></blockquote><h3 id="python3代码执行流程"><a href="#python3代码执行流程" class="headerlink" title="python3代码执行流程"></a>python3代码执行流程</h3><p><a href="https://www.cnblogs.com/alex3714/articles/7550940.html" target="_blank" rel="noopener">参考链接</a></p><ul><li>在python3里内存里全是unicode编码</li><li>python3里默认是utf-8编码</li></ul><ol><li>解释器找到代码文件，把代码字符串按文件头定义的编码(#-<em>- encoding:utf-8 -</em>-)加载到内存，转成unicode</li><li>把代码字符串按照语法规则进行解释，</li><li>所有的变量字符都会以unicode编码声明</li></ol><p>结论就是：python3在内存里把你的编码转成unicode，即使你的输出环境是gbk也能正常显示</p><h4 id="深坑-Python2并不会自动的把文件编码转为unicode存在内存里"><a href="#深坑-Python2并不会自动的把文件编码转为unicode存在内存里" class="headerlink" title="深坑 Python2并不会自动的把文件编码转为unicode存在内存里"></a>深坑 Python2并不会自动的把文件编码转为unicode存在内存里</h4><p>如果你是utf-8编码，windows系统是gbk就会显示乱码</p><blockquote><p>怎么办？人肉转</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UTF-8 --&gt; decode 解码 --&gt; Unicode</span><br><span class="line">Unicode --&gt; encode 编码 --&gt; GBK / UTF-8...</span><br></pre></td></tr></table></figure><h3 id="python只要出现各种编码问题，无非是哪里的编码设置出错了"><a href="#python只要出现各种编码问题，无非是哪里的编码设置出错了" class="headerlink" title="python只要出现各种编码问题，无非是哪里的编码设置出错了"></a>python只要出现各种编码问题，无非是哪里的编码设置出错了</h3><blockquote><p>常见编码错误的原因有：</p></blockquote><ul><li>Python解释器的默认编码</li><li>Python源文件文件编码（千万不要轻易改文件的编码不可逆，一旦失败就白玩了）</li><li>Terminal使用的编码</li><li>操作系统的语言设置</li></ul><p>结论：</p><blockquote><p>py3 </p></blockquote><ul><li>文件默认编码是 utf-8</li><li>字符串编码是 unicode</li></ul><blockquote><p>py2</p></blockquote><ul><li>文件默认编码是 ascⅡ</li><li>字符串编码是 ascⅡ</li><li>如果文件头声明了gbk,那字符串的编码就是gbk</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> M01 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_02_05Python哈希和字典</title>
      <link href="/2018/08/14/Py001_02_05Python%E5%93%88%E5%B8%8C%E5%92%8C%E5%AD%97%E5%85%B8/"/>
      <url>/2018/08/14/Py001_02_05Python%E5%93%88%E5%B8%8C%E5%92%8C%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash值计算过程中依据这个值一些特征计算的，这就要求hash值必须固定，因此被hash的值必须是不可变的</p><blockquote><p>不可变数据类型</p></blockquote><ul><li>数字</li><li>字符串</li><li>元组</li></ul><blockquote><p>可变数据类型</p></blockquote><ul><li>列表</li></ul><blockquote><h4 id="hash函数"><a href="#hash函数" class="headerlink" title="hash函数"></a>hash函数</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hash(&apos;aaa&apos;) </span><br><span class="line">hash(1)</span><br><span class="line">hash((1,2,3))</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>键值对 k/v</p><blockquote><p>特性</p></blockquote><ul><li>k/v</li><li>key必须放可hash ，且必须为不可变数据类型，必须唯一</li><li>value可存放任意多个值，可修改，可以不唯一</li><li>无序</li><li>查找速度快</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">infos = &#123;</span><br><span class="line">    &quot;name&quot;:&apos;alex&apos;,</span><br><span class="line">    &quot;age&quot;:22</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>crud</p></blockquote><blockquote><p>增加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;&#125;</span><br><span class="line">info[&apos;a&apos;] = 2</span><br></pre></td></tr></table></figure><blockquote><p>修改</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;&quot;a&quot;:2&#125;</span><br><span class="line">info[&apos;a&apos;] = 3</span><br></pre></td></tr></table></figure><blockquote><p>查找</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    &quot;a&quot;:1,</span><br><span class="line">    &quot;b&quot;:2,</span><br><span class="line">    &quot;c&quot;:3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;aa&quot; in info  # 判断key在不在info里</span><br><span class="line">info.get(&apos;a&apos;) # 1</span><br><span class="line">info.get(&apos;aaa&apos;) # None</span><br><span class="line"></span><br><span class="line">如果直接 info[&apos;aaa&apos;] 会报错</span><br></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><ul><li>pop(删除的key)</li><li>popitem() 随机删</li><li>del  info[key]删除某个key</li><li>clear() 清空字典</li></ul><blockquote><p>其他方法</p></blockquote><ul><li>keys() 获取key的列表</li><li>values() 获取值的列表</li><li>items() 将key和value放入到元组里，返回一个列表</li><li>setdefault() 查看字典是否有这个key没有则设置默认值，有没有都返回这个key对应的值</li><li>fromkeys() 批量生成字典，并设置默认值</li></ul><h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><p>如何找出既买了iphone7和8的人</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i7 = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br><span class="line">i8 = [&quot;a&quot;,&quot;b&quot;,&quot;d&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>什么是集合</p></blockquote><p>无序的，不重复的数据集合</p><ul><li>去重，把一个列表变成集合就自动去重了</li><li>关系测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;&#125;</span><br><span class="line">type(s) # dict 集合是空的时候被认为是字典</span><br><span class="line"></span><br><span class="line">s = &#123;1&#125;</span><br><span class="line">type(s) # set</span><br><span class="line"></span><br><span class="line">s = set([1,2,2,3,4]) # &#123;1,2,3,4&#125;</span><br><span class="line"></span><br><span class="line">s = &#123;1,2,3,4,5,6,2,3,4&#125; #  &#123;1,2,3,4,5,6&#125;</span><br></pre></td></tr></table></figure><h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;1,2,3,4,5&#125;</span><br><span class="line">s.add(2) # &#123;1,2,3,4,5&#125;</span><br><span class="line">s.add(6) # &#123;1,2,3,4,5,6&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.discard(6) # 删除指定元素 &#123;1,2,3,4,5&#125;</span><br><span class="line"></span><br><span class="line">s.discard(6) # 如果元素不存在不报错 &#123;1,2,3,4,5&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.remove(5) # &#123;1,2,3,4&#125;</span><br><span class="line">s.remove(5) # 不存在报错</span><br><span class="line"></span><br><span class="line">s.pop() # 随机删</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s2 = &#123;1,2,3&#125;</span><br><span class="line">s2.update([3,4,5,6])</span><br><span class="line"># &#123;1,2,3,4,5,6&#125;</span><br></pre></td></tr></table></figure><h4 id="集合的关系测试"><a href="#集合的关系测试" class="headerlink" title="集合的关系测试"></a>集合的关系测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i7 = &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;&#125;</span><br><span class="line">i8 = &#123;&quot;a&quot;,&quot;b&quot;,&quot;e&quot;,&quot;f&quot;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>交集 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一种</span><br><span class="line">i7.intersection(i8) # &#123;&quot;a&quot;,&quot;b&quot;&#125;</span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">i7 &amp; i8 # &#123;&quot;a&quot;,&quot;b&quot;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>差集</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 买了i7没买i8的人</span><br><span class="line">i7.difference(i8) # &#123;&quot;c&quot;,&quot;d&quot;&#125;</span><br><span class="line">i7-i8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 买了i8没买i7的人</span><br><span class="line">i8.difference(i7) # &#123;&quot;e&quot;,&quot;f&quot;&#125;</span><br><span class="line">i8-i7</span><br></pre></td></tr></table></figure><blockquote><p>并集</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i7.union(i8) # &#123;&apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;&#125;</span><br><span class="line"></span><br><span class="line">i7|i8</span><br></pre></td></tr></table></figure><blockquote><p>对称差集</p></blockquote><p>并集取反</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i7.symmetric_difference(i8) # &#123;&apos;f&apos;, &apos;e&apos;, &apos;c&apos;, &apos;d&apos;&#125;</span><br><span class="line"></span><br><span class="line">i7 ^ i8</span><br></pre></td></tr></table></figure><ul><li>difference_update 将差集的结果赋值给集合</li></ul><blockquote><p>关系</p></blockquote><ul><li>isdisjoint 判断两个集合是不是不相交</li><li>issuperset 是否包含</li><li>issubset 是否被其他集合包含</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;1,2,3,4&#125;</span><br><span class="line">b = &#123;1,2,3&#125;</span><br><span class="line">print(b.issubset(a)) # False</span><br><span class="line">print(b.issubset(a)) # True</span><br><span class="line"></span><br><span class="line">print(b.issuperset(a)) # False</span><br><span class="line">print(a.issuperset(b)) # True</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M01 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_02_04Python再看字符串</title>
      <link href="/2018/08/13/Py001_02_04Python%E5%86%8D%E7%9C%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/08/13/Py001_02_04Python%E5%86%8D%E7%9C%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>有序的字符集合</p><blockquote><p>特性</p></blockquote><ul><li>有序</li><li>不可变(一旦声明不可修改)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;alex&apos;</span><br><span class="line">id(a) # 1435111012</span><br><span class="line"></span><br><span class="line">a = &apos;bbb&apos;</span><br><span class="line">id(a) 3 3254554354 </span><br><span class="line">内存地址变了</span><br><span class="line"></span><br><span class="line">a修改后并不是在原地址上修改，而是新开辟一片内存空间。</span><br><span class="line">那之前的alex去哪里了？ 答案是python解释器会定时的帮你把无用的地址清空掉</span><br></pre></td></tr></table></figure><ul><li>swapcase()大小写翻转</li><li>capitalize() 返回首字母大写其他全部小写的字符串</li><li>casefold() 去掉大小写 全变成小写</li><li>center() 返回字符填充 </li><li>count() 统计字符个数</li><li>endswith() 是否以什么结尾</li><li>expandtabs() 设置制表符\t 的空格长度</li><li>find() 查找字符串 从左往右返回索引，未找到返回-1</li><li>format() </li><li>index() 返回查找字符串的索引，没有报错</li><li>isalnum() 是否是阿拉伯的数字和字符(同时包含字母和数字)</li><li>isdecimal() 是否是整数</li><li>isidentifier() 是否是合法的变量(包含字母数字下划线，但不能是数字开头)</li><li>islower() 是否是小写</li><li>isnumeric() 是否有数字在里面</li><li>isprintable() 这个值是否可以打印</li><li>istitle() 是否是标题，每个单词首字母大写</li><li>isupper()</li><li>join() 列表拼接</li><li>ljust() 字符串填充 s.ljust(50,’-‘)</li><li>strip() 去除左右两边空格和换行</li><li>lstrip()</li><li>rstrip()</li><li>maketrans()/translate() 通过字符生成某种映射关系，类似加密解密</li><li>partition() 以输入字符将字符分成两段</li><li>rpartition() </li><li>replace()</li><li>rfind()</li><li>rindex()</li><li>split() 按指定字符来分</li><li>splitlines() 按行来分</li><li>startstwith()</li><li>endswith()</li><li>zfill() </li></ul><blockquote><p>format()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;my name is &#123;0&#125;, i am &#123;1&#125; years old&apos;</span><br><span class="line">s.format(&apos;alex&apos;,22)</span><br><span class="line"></span><br><span class="line">s2 = &apos;my name is &#123;name&#125;, i am &#123;age&#125; years old&apos;</span><br><span class="line">s.format(name=&apos;alex&apos;,age=22)</span><br></pre></td></tr></table></figure><blockquote><p>index()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;hello world&apos;</span><br><span class="line">s.index(&apos;o&apos;) # 4</span><br><span class="line"></span><br><span class="line">s.index(&apos;o&apos;,5,6) # 报错</span><br></pre></td></tr></table></figure><blockquote><p>如果你是pycharm在这些函数上按住ctrl可以查看源码(但是只有解释没有实际的代码因为是c语言实现的)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> M01 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_02_03Python深浅拷贝</title>
      <link href="/2018/08/13/Py001_02_03Python%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2018/08/13/Py001_02_03Python%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> M01 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_02_02Python列表</title>
      <link href="/2018/08/13/Py001_02_02Python%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/"/>
      <url>/2018/08/13/Py001_02_02Python%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>一个数据的集合,集合里可以放置任何数据类型,可对集合方便的进行增删改查操作</p><ul><li>创建</li><li>查询</li><li>切片</li><li>增加</li><li>修改</li><li>删除</li><li>循环</li><li>排序</li></ul><blockquote><p>创建</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 方法一</span><br><span class="line">a1 = [] # 定义空列表</span><br><span class="line">a2 = [1,2,3,4] # 存4个值 索引0-3</span><br><span class="line">a3 = [1,[2,3,4]] # 嵌套列表</span><br><span class="line"></span><br><span class="line"># 方法二(不推荐)</span><br><span class="line">b1 = list() # 空列表</span><br></pre></td></tr></table></figure><blockquote><p>查询</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;a&apos;,&apos;a&apos;,1,2]</span><br><span class="line"></span><br><span class="line">a[2] # 通过索引 &apos;c&apos;</span><br><span class="line">a[-1] # 通过索引从右开始取值 2</span><br><span class="line">a.index(&apos;b&apos;) # 查找元素(从左往右)对应的索引 1</span><br><span class="line">a.count(&apos;a&apos;) # 返回元素的个数 3</span><br></pre></td></tr></table></figure><blockquote><p>切片</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;,&apos;aa&apos;,&apos;bb&apos;,&apos;cc&apos;]</span><br><span class="line"></span><br><span class="line"># 取前三个</span><br><span class="line">a[0:3] # 包头不包尾</span><br><span class="line"></span><br><span class="line"># 取最后四个</span><br><span class="line">a[-1:-4] # []</span><br><span class="line">a[-4:] # [&apos;f&apos;,&apos;aa&apos;,&apos;bb&apos;,&apos;cc&apos;]</span><br><span class="line"></span><br><span class="line"># 取前三</span><br><span class="line">a[:3]</span><br><span class="line"></span><br><span class="line"># 取所有</span><br><span class="line">a[:]</span><br><span class="line"></span><br><span class="line"># 跳指定步子取值</span><br><span class="line">a[::2]</span><br></pre></td></tr></table></figure><blockquote><p>增加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4,5]</span><br><span class="line">a.append(&apos;peiqi&apos;)</span><br><span class="line">print(a) # [1,2,3,4,5,&apos;peiqi&apos;]</span><br><span class="line"></span><br><span class="line"># 指定位置插入</span><br><span class="line">a.insert(0,&apos;a&apos;) </span><br><span class="line">print(a) # [&apos;a&apos;,1,2,3,4,5,&apos;peiqi&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>修改</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4,5]</span><br><span class="line">a[2] = &apos;a&apos;</span><br><span class="line">print(a) # [1,2,&apos;a&apos;,4,5]</span><br></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><ul><li>pop</li><li>remove</li><li>del</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">a.pop() # 删除最后一个</span><br><span class="line">print(a) # [1,2,3,4,5,6,7,8,9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = [1,2,3,4,&apos;a&apos;,4,&apos;b&apos;]</span><br><span class="line">b.remove(4) # 删除指定元素  从左往右匹配的第一个</span><br><span class="line">print(b) # [1,2,3,&apos;a&apos;,4,&apos;b&apos;]</span><br><span class="line"></span><br><span class="line">c = [1,2,3,4,5,6,7,8,9]</span><br><span class="line">del c[2]</span><br><span class="line">print(c) # [1,2,4,5,6,7,8,9]</span><br><span class="line"></span><br><span class="line">del c[0:3] # 切片删</span><br><span class="line"></span><br><span class="line">del c # 删除整个数组</span><br><span class="line">print(c) # 报错</span><br></pre></td></tr></table></figure><blockquote><p>循环</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4,5,5]</span><br><span class="line">for i in a:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><blockquote><p>排序</p></blockquote><ul><li>sort</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">n = [&apos;a&apos;,&apos;e&apos;,&apos;b&apos;,&apos;c&apos;,34,23]</span><br><span class="line">n.sort() # 报错 不支持 int和 str一起排</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = [&apos;a&apos;,&apos;e&apos;,&apos;A&apos;,&apos;b&apos;,&apos;c&apos;,&apos;z&apos;,&apos;h&apos;]</span><br><span class="line">m.sort() # [&apos;A&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;e&apos;,&apos;h&apos;,&apos;z&apos;]</span><br><span class="line">m.insert(3,&apos;#&apos;)</span><br><span class="line">m.insert(3,&apos;*&apos;)</span><br><span class="line">m.insert(1,&apos;!&apos;)</span><br><span class="line">m.sort() # [&apos;!&apos;,&apos;#&apos;,&apos;*&apos;,&apos;A&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;e&apos;,&apos;h&apos;,&apos;z&apos;]</span><br><span class="line"># 字符按ascⅡ排序</span><br><span class="line"></span><br><span class="line">m.reverse() # 翻转</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 列表拼接</span><br><span class="line">[1,2,3] + [4,5,6] ==&gt; [1,2,3,4,5,6]</span><br><span class="line"></span><br><span class="line"># n.extent(n2)</span><br><span class="line"></span><br><span class="line">a = [1,2,3]</span><br><span class="line">a.clear() # []</span><br><span class="line"></span><br><span class="line">b = [1,2,3]</span><br><span class="line">c = b.copy() # b 和 c是完全独立的</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>将一个列表的索引打印出来</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line"></span><br><span class="line">count = 0;</span><br><span class="line">for i in a:</span><br><span class="line">    print(i,count)</span><br><span class="line">    count += 1</span><br><span class="line"></span><br><span class="line">方法二 enumerate 枚举</span><br><span class="line"></span><br><span class="line">for i in enumerate(a):</span><br><span class="line">    print(i) </span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&#123;0:&apos;a&apos;&#125;</span><br><span class="line">&#123;1:&apos;b&apos;&#125;</span><br><span class="line">&#123;2:&apos;c&apos;&#125;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">for index,value in enumerate(a):</span><br><span class="line">    print(index,value)</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>特性</p><ul><li>不可变</li><li>元组本身不可变，如果元组里还包含其他可变元素(嵌套列表)，这些元素可以变</li></ul><p>功能</p><ul><li>index</li><li>count</li><li>切片</li></ul><p>使用场景</p><ul><li>显示的告诉别人，数据不可改变</li><li>数据库连接配置信息</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> M01 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_02_01Python进制转换和字符编码and浮点数</title>
      <link href="/2018/08/13/Py001_02_01Python%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81and%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
      <url>/2018/08/13/Py001_02_01Python%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81and%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="计算机基础（进制转换）"><a href="#计算机基础（进制转换）" class="headerlink" title="计算机基础（进制转换）"></a>计算机基础（进制转换）</h3><blockquote><p>我觉得这个只要你会开机关机就差不多了，如果不方便理解给你举个例子：</p></blockquote><ol><li>计算机主要就是二进制，二进制就是0/1 逢二进一<br>(实在不好理解你就想现实中的电线插头 左零右火)</li><li>计算机通过电信号来判断是0还是1 比如电压低于50%就代表0 高于50%代表 1</li><li>于是这些 01组成的东西就被机器所认识也叫 机器语言<br>但是这很反人类啊！多么复杂的大脑才能识别这个啊！<br>于是出现了汇编，还是不够好，于是 C / C++ /JAVA等高级语言横空出世</li><li>8位 0、1组成的序列代表1字节  <ul><li>1B(byte) = 8位(bit)</li><li>1KB = 1024B</li><li>1MB = 1024KB</li><li>1GB = 1024MB</li><li>1T  = 1024GB</li></ul></li></ol><blockquote><p>买手机可千万注意别被那些卖家忽悠了，老说啥机身内存大运行速度快啥的！大错特错  如果你买手机建议运行内存买高点</p></blockquote><ul><li>电脑和手机这些设备分为  内存(RAM随机存储) 和 外存(ROM只读存储)</li><li>内存就是 01这堆组成的电信号 没电了只要你编辑的word文档没保存就丢了</li><li>外存就是 电脑上存的小说啊 mp3 短视频等 只要你不手动删除怎么开关机都在</li></ul><p>如下是一些进制转换:</p><blockquote><p>口诀：逢二进一 逢八进一 逢十进一 逢十六进一</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">如:</span><br><span class="line">二进制       十进制     八进制     十六进制</span><br><span class="line">0000 0000    0          0         0</span><br><span class="line">0000 0001    1          1         1</span><br><span class="line">0000 0010    2          2         2</span><br><span class="line">0000 0011    3          3         3</span><br><span class="line">0000 0100    4          4         4</span><br><span class="line">0000 0101    5          5         5</span><br><span class="line">0000 0110    6          6         6</span><br><span class="line">0000 0111    7          7         7</span><br><span class="line">0000 1000    8         10         8</span><br><span class="line">0000 1001    9         11         9</span><br><span class="line">0000 1010   10         12         a</span><br><span class="line">0000 1011   11         13         b</span><br><span class="line">0000 1100   12         14         c</span><br><span class="line">0000 1101   13         15         d</span><br><span class="line">0000 1110   14         16         e</span><br><span class="line">0000 1111   15         17         f</span><br></pre></td></tr></table></figure><h3 id="计算机表示数字到汉字的过程"><a href="#计算机表示数字到汉字的过程" class="headerlink" title="计算机表示数字到汉字的过程"></a>计算机表示数字到汉字的过程</h3><ol><li>内存里如何存0和1</li><li>如何存数字</li><li>存字符</li><li>存中文 GB2312 GBK GB18030 </li><li>存所有字符(所有国家的字符Unicode万国码)</li><li>将Unicode存到计算机里(utf-8编码变长存储)</li></ol><p>可以参考我之前写的文章 <a href="https://sltrust.github.io/2017/09/22/N002_%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84/" target="_blank" rel="noopener">计算机是如何存数据的</a></p><blockquote><p>windows系统中文版默认是gbk</p></blockquote><blockquote><p>mac\linux系统默认编码是utf-8</p></blockquote><h3 id="python里使用字符编码"><a href="#python里使用字符编码" class="headerlink" title="python里使用字符编码"></a>python里使用字符编码</h3><p>python3和 python2最大的区别就是字符编码改了</p><ul><li>python2 默认编码ascⅡ(默认不支持中文)</li><li>python3 默认编码utf-8</li></ul><blockquote><p>如果python2想支持中文呢？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.py文件程序首行声明编码</span><br><span class="line"></span><br><span class="line">第一种 官方推荐的</span><br><span class="line">#! -*-coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">#!encoding:utf-8</span><br><span class="line"></span><br><span class="line">python3里默认支持中文</span><br></pre></td></tr></table></figure><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><blockquote><p>科学记数法：以10为基数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(1.399e3) # 1399.0</span><br></pre></td></tr></table></figure><blockquote><p>复数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以用来做量子力学(编程基本用不到)</span><br><span class="line">print(-5+4j)</span><br></pre></td></tr></table></figure><blockquote><h4 id="精确度"><a href="#精确度" class="headerlink" title="精确度"></a>精确度</h4></blockquote><ul><li>浮点数占据的存储空间远大于整数的</li><li>python里能精确的存储17位超过就不准了可能有四舍五入的误差</li></ul><p>如果你就想计算高精度的浮点数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">借助 decimal 模块的 getcontext 和 Decimal方法(自行百度吧！)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M01 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_01_04Python逻辑运算和分支语句和循环</title>
      <link href="/2018/08/13/Py001_01_04Python%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%92%8C%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
      <url>/2018/08/13/Py001_01_04Python%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E5%92%8C%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><ul><li>算数运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+</span><br><span class="line">- </span><br><span class="line">*</span><br><span class="line">/</span><br><span class="line">%  取余</span><br><span class="line">** 幂运算   2的三次方    ==&gt; 2**3</span><br><span class="line">// 整除     11//2 ==&gt;5</span><br></pre></td></tr></table></figure><ul><li>比较运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">== 等于</span><br><span class="line">!= 不等于</span><br><span class="line">&lt;&gt; 不等于 类似 !=  在python3里废除了</span><br><span class="line">&gt; </span><br><span class="line">&lt;</span><br><span class="line">&gt;=</span><br><span class="line">&lt;=</span><br></pre></td></tr></table></figure><ul><li>赋值运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=</span><br><span class="line">+=</span><br><span class="line">-=</span><br><span class="line">*=</span><br><span class="line">/=</span><br><span class="line">%=</span><br><span class="line">**=</span><br><span class="line">//=</span><br></pre></td></tr></table></figure><ul><li>逻辑运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and 且</span><br><span class="line">or  或</span><br><span class="line">not 非</span><br></pre></td></tr></table></figure><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><blockquote><p>单分支</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if 条件 :</span><br><span class="line">    满足条件后执行的代码</span><br><span class="line"></span><br><span class="line">age = 56</span><br><span class="line">if age &gt; 50:</span><br><span class="line">    print(&apos;岁数太大不要&apos;)</span><br><span class="line">print(&apos;haha&apos;)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">&apos;岁数太大不要&apos;</span><br><span class="line">&apos;haha&apos;</span><br></pre></td></tr></table></figure><blockquote><p>双分支</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件 :</span><br><span class="line">    满足条件后执行的代码</span><br><span class="line">else:</span><br><span class="line">    不满足条件执行的代码</span><br></pre></td></tr></table></figure><blockquote><p>多分支</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if 条件1 :</span><br><span class="line">    print(&apos;条件1合适&apos;)</span><br><span class="line">elif 条件2 :</span><br><span class="line">    print(&apos;条件2合适&apos;)</span><br><span class="line">elif 条件3 :</span><br><span class="line">    print(&apos;条件3合适&apos;)</span><br><span class="line">elif 条件4 :</span><br><span class="line">    print(&apos;条件4合适&apos;)</span><br><span class="line">else :</span><br><span class="line">    print(&apos;都不合适&apos;)</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>while</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 条件:</span><br><span class="line">    执行代码</span><br></pre></td></tr></table></figure><blockquote><p>打印0-100的数字</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count&lt;=100:</span><br><span class="line">    print(count)</span><br><span class="line">    count += 1</span><br><span class="line">print(&apos;loop is end&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>打印0-100的偶数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count&lt;=100:</span><br><span class="line">    if count % 2 == 0:</span><br><span class="line">        print(&quot;loop&quot;,count)</span><br><span class="line">    count += 1</span><br></pre></td></tr></table></figure><blockquote><p>打印0-100，第50次不打印，第60-80打印对应平方</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count&lt;=100:</span><br><span class="line">    if count == 50:</span><br><span class="line">        pass # 代表过</span><br><span class="line">    elif count&gt;=60 and count&lt;=80:</span><br><span class="line">        print(count*count)</span><br><span class="line">    else:</span><br><span class="line">        print(count)</span><br><span class="line">    count += 1</span><br></pre></td></tr></table></figure><h4 id="deal-loop-死循环"><a href="#deal-loop-死循环" class="headerlink" title="deal loop(死循环)"></a>deal loop(死循环)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 就是条件永远都满足，就会触发死循环</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    print(&apos;xxx&apos;)</span><br></pre></td></tr></table></figure><h4 id="continue-和-break"><a href="#continue-和-break" class="headerlink" title="continue 和 break"></a>continue 和 break</h4><ul><li>break 用于完全结束一个循环，跳出循环体执行后面的语句</li><li>continue 终止本次循环，接着还执行后面的循环</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt; 100:</span><br><span class="line">    print(count)</span><br><span class="line">    if count == 5:</span><br><span class="line">        break</span><br><span class="line">    count += 1</span><br><span class="line"></span><br><span class="line">count = 5的时候结束循环</span><br><span class="line"></span><br><span class="line">但是如果把break 换成continue就会造成死循环</span><br><span class="line"></span><br><span class="line">因为 count +=1 得不到执行 count一直等于5</span><br></pre></td></tr></table></figure><h4 id="你没见过的while-…-else-…"><a href="#你没见过的while-…-else-…" class="headerlink" title="你没见过的while … else …"></a>你没见过的while … else …</h4><blockquote><p>while后面还有个else</p></blockquote><p>意思是：当while没有被break终止的话，就会执行else里的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt; 100:</span><br><span class="line">    count += 1</span><br><span class="line">    print(count)</span><br><span class="line">    if count == 5:</span><br><span class="line">        break</span><br><span class="line">else:</span><br><span class="line">    print(&apos;程序被break中断过&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M01 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_01_03Python基本数据类型</title>
      <link href="/2018/08/13/Py001_01_03Python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/08/13/Py001_01_03Python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>与其他语言一样python也有一些数据类型，但是它不会像java那样强制你声明好数据的类型</p></blockquote><p>python解释器会自己识别你的数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//java</span><br><span class="line">int age = 12</span><br><span class="line">char x = &apos;a&apos;</span><br><span class="line"></span><br><span class="line"># python</span><br><span class="line">age = 12</span><br></pre></td></tr></table></figure><h3 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h3><ul><li>type函数输出变量的数据类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">b = &apos;aa&apos;</span><br><span class="line"></span><br><span class="line">type(a) # int</span><br><span class="line">type(b) # str</span><br></pre></td></tr></table></figure><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>数字</li><li>字符串</li><li>布尔</li></ul><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><blockquote><p>int(整型)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在32位机器上，整数的位数为32，取值范围为-2**31至2**31-1</span><br><span class="line">在64位机器上，整数的位数为64，取值范围为-2**63至2**63-1</span><br></pre></td></tr></table></figure><blockquote><p>long(长整型)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">跟C语言不同，python没有指定长整型的位宽，即没有限制长整型数值的大小，但实际上由于机器内存有限，我们使用的长整型也不可能无限大。</span><br></pre></td></tr></table></figure><blockquote><p>从python2.2起，如果整数溢出，python会自动将整数数据转换为长整数。所以现在在长整数后面加不加L也不会导致严重后果了</p></blockquote><blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></blockquote><ul><li>在python3里不再有long类型了，全是int</li><li>除了int,long还有float浮点数，复数，但今天先不涉及</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>加引号的就被认为是字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;hjx&apos;</span><br><span class="line">name2 = &quot;alex&quot;</span><br><span class="line">msg = &apos;&apos;&apos;My name is Alex,I am 22 years old &apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p>如果想使用单引号作为字符呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msg = &quot;My name is Alex,I&apos;am 22 years old&quot;</span><br></pre></td></tr></table></figure><blockquote><p>多引号的作用：就是多行的时候必须使用它</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msg = &apos;&apos;&apos;</span><br><span class="line">一二三四五</span><br><span class="line">上山打老虎</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>字符串拼接</p></blockquote><p>python不仅支持「+」 还支持 「*」</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;alex&apos;</span><br><span class="line">age = &apos;22&apos;</span><br><span class="line">print(name+age) # alex22</span><br><span class="line"></span><br><span class="line">print(name*3) # alexalexalex</span><br></pre></td></tr></table></figure><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>主要用来逻辑判断。</p><ul><li>True</li><li>False</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 12</span><br><span class="line">b = 5</span><br><span class="line">print( a &gt; b ) # True</span><br></pre></td></tr></table></figure><blockquote><p>几个falsy值</p></blockquote><ul><li>‘’</li><li>0</li><li>[]</li><li>()</li><li>{}</li><li>None</li><li>False</li></ul><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name = input(&apos;name&apos;)</span><br><span class="line">age = input(&apos;age&apos;)</span><br><span class="line">job = input(&apos;job&apos;)</span><br><span class="line">city = input(&apos;city&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info = &apos;&apos;&apos;</span><br><span class="line">----------info of %s</span><br><span class="line">Name:       %s</span><br><span class="line">Age :       %s</span><br><span class="line">Job :       %s</span><br><span class="line">City:       %s</span><br><span class="line">&apos;&apos;&apos; % (name,age,job,city)</span><br><span class="line"></span><br><span class="line">print(info)</span><br></pre></td></tr></table></figure><p>占位符</p><ul><li>%s 就是string</li><li>%d 就是数字</li><li>%f 就是float</li></ul><p>修改Age的占位符为 %d</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">程序报错</span><br><span class="line"></span><br><span class="line">因为input方法接收的任何输入都是字符串</span><br><span class="line"></span><br><span class="line">你应该这样,将输入的结果转换为数字</span><br><span class="line"></span><br><span class="line">age = int(input(&apos;age&apos;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M01 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_01_02Python变量_用户交互_注释</title>
      <link href="/2018/08/13/Py001_01_02Python%E5%8F%98%E9%87%8F_%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92_%E6%B3%A8%E9%87%8A/"/>
      <url>/2018/08/13/Py001_01_02Python%E5%8F%98%E9%87%8F_%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92_%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;hello world&apos;)</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>存储数据的中间结果,以备程序后续调用。</p><h4 id="定义规范"><a href="#定义规范" class="headerlink" title="定义规范"></a>定义规范</h4><ul><li>字母数字下划线的任意组合</li><li>第一个字符不能是数字</li><li>不能使用python的关键字做变量名(print,pass,or,not,and…)</li></ul><h4 id="命名习惯"><a href="#命名习惯" class="headerlink" title="命名习惯"></a>命名习惯</h4><blockquote><p>驼峰</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CattleId</span><br><span class="line">FarmId</span><br></pre></td></tr></table></figure><blockquote><p>下划线</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cattle_id</span><br><span class="line">farm_id</span><br></pre></td></tr></table></figure><blockquote><p>特别low的方式</p></blockquote><ul><li>变量名为中文、拼音    张三的年龄 = 22</li><li>变量名过长 the_name_of_oldboy_girlfriend = ‘Lisa’</li><li>变量名词不达意  name = ‘hjx’</li></ul><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>在你的程序运行中不变的量就是常量</p><blockquote><p>很可惜在python中没有常量的定义。所以程序员约定俗成的把全部大写声明的变量定义为常量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CATTLE_AGE = 10</span><br></pre></td></tr></table></figure><h3 id="与用户交互"><a href="#与用户交互" class="headerlink" title="与用户交互"></a>与用户交互</h3><ul><li>input</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = input(&quot;请输入你的名字&quot;)</span><br><span class="line">print(&quot;hello&quot; , name)</span><br><span class="line"># 也可以这样，效果一样</span><br><span class="line">print(&quot;hello&quot; + name)</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote><p>python里注释使用 “#”</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 本行是注释</span><br><span class="line">print(&quot;hello&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> M01 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Py001_01_01编程语言介绍</title>
      <link href="/2018/08/13/Py001_01_01%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/08/13/Py001_01_01%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><p>就是机器能看懂的语言，形如010101010010101010101010010101。</p><ul><li>优点：最底层，速度最快</li><li>缺点：复杂，开发效率最低</li></ul><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><ul><li>优点：比较底层，速度低于机器语言</li><li>缺点：复杂，开发效率仅仅高于机器语言</li></ul><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><blockquote><h4 id="编译型"><a href="#编译型" class="headerlink" title="编译型"></a>编译型</h4></blockquote><p>C，C++</p><ul><li>优点：如C++等语言在运行前必须经过编译后才能运行，编译后是机器可直接运行的二进制的代码。</li><li>缺点：每次改动必须经过重新编译，跨平台性差</li></ul><blockquote><h4 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h4></blockquote><p>Python，JavaScript，Php</p><p>类似日常生活中的“同声翻译”，边翻译边运行，因此运行效率低.而且不能生成二进制文件,应用程序不能脱离解释器。</p><p>但是mac或linux上默认有python解释器。</p><ul><li>优点：跨平台开发，开发效率高</li><li>缺点：运行效率低，依赖解释器(为什么效率低还如此火爆，因为现在的硬件水平上去了。)<br>比如C语言执行一段程序0.001秒 如果python比它慢10倍那就是0.01秒(人类的最快反应时间是0.3s所以几乎感受不到)</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MJ_001_01前端面经</title>
      <link href="/2018/08/10/MJ_001_01%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
      <url>/2018/08/10/MJ_001_01%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="由于公司宣布倒闭"><a href="#由于公司宣布倒闭" class="headerlink" title="由于公司宣布倒闭"></a>由于公司宣布倒闭</h3></blockquote><p>所以不得不开始找工作，下面开始每场的面试经验分享，自我介绍略过。</p><p>面试是可以从中来感受企业的文化。有的令人怒不可遏，有的让人感受到礼仪。如果你被面的怒不可遏我建议直接走人。这样的公司就算你去了，你也迟早被同化。</p><h3 id="注：如果写的有问题，请及时发邮件怼我trustfor-sina-cn"><a href="#注：如果写的有问题，请及时发邮件怼我trustfor-sina-cn" class="headerlink" title="注：如果写的有问题，请及时发邮件怼我trustfor@sina.cn"></a>注：如果写的有问题，请及时发邮件怼我<a href="mailto:trustfor@sina.cn" target="_blank" rel="noopener">trustfor@sina.cn</a></h3><h4 id="180807第一天-电面一家，约面2家"><a href="#180807第一天-电面一家，约面2家" class="headerlink" title="180807第一天(电面一家，约面2家)"></a>180807第一天(电面一家，约面2家)</h4><blockquote><h4 id="1-先说电面的那家"><a href="#1-先说电面的那家" class="headerlink" title="1.先说电面的那家"></a>1.先说电面的那家</h4></blockquote><ol><li>什么是jsonp,什么是ajax</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">jsonp就是</span><br><span class="line">1请求方创建一个script标签src指向响应方，并传递callback =回调函数名xxx</span><br><span class="line">2响应方根据callback查询参数构造一个 xxx.call(undefined,传递的内容)</span><br><span class="line">3浏览器接到响应，就会执行 xxx.call(undefined,传递的内容)</span><br><span class="line">4请求方得到他想要的数据</span><br><span class="line"></span><br><span class="line">ajax</span><br><span class="line">实现原理就是使用XMLHttpRequest对象通过它来发请求</span><br><span class="line">let request = new XMLHttpRequest();</span><br><span class="line">request.open(&apos;get&apos;,&apos;/xxx&apos;);</span><br><span class="line">request.send();</span><br><span class="line">request.onreadystatechange = function()&#123;</span><br><span class="line">    if(request.readyState === 4)&#123;</span><br><span class="line">        if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">            console.log(request.responseText);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(request.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>promise用了吗？用来干啥的 async/await用过吗？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">promise就是解决 回调地域问题的，比如一些操作的校验 必须逐步成功才能往下走提交</span><br><span class="line">window.ajax = function(&#123;url,method,body,headers&#125;)&#123;</span><br><span class="line">    return new Promise(function(resolve,reject)&#123;</span><br><span class="line">        //ES6解构赋值</span><br><span class="line">        let request = new XMLHttpRequest();</span><br><span class="line">        request.open(method,url);</span><br><span class="line">        for(let key in headers)&#123;</span><br><span class="line">            let value = headers[key];</span><br><span class="line">            request.setRequestHeader(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        request.send(body);</span><br><span class="line">        request.onreadystatechange = function()&#123;</span><br><span class="line">            if(request.readyState === 4)&#123;</span><br><span class="line">                if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">                    resolve.call(undefined,request.responseText)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    reject.call(undefined,request.status)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async和await用法：简单说来就是 异步代码同步执行</span><br><span class="line">function xxx(x) &#123; </span><br><span class="line">  return new Promise(resolve =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      resolve(x);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function f1() &#123;</span><br><span class="line">  var x = await xxx(10);</span><br><span class="line">  console.log(x); // 10</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><ol start="3"><li>js继承是什么？es6的继承了解吗</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">其实我认为js是没有继承的，它是用function模拟的，继承的原理是基于原型链的。</span><br><span class="line"></span><br><span class="line">1.我们知道大部分编程语言应该都有Object类型,一般都称为所有类型的基类(也就是类型的顶端)</span><br><span class="line">2.每种类型都有一个共有属性 prototype也就是浏览器里的双下proto 这个属性里放置了一些属性或方法。它被称为原型</span><br><span class="line">3.每个类型都有自己的原型(共有属性)prototype 比如Number有 toFixed</span><br><span class="line">4.此时如果你构造一个类型他就会天生有toString() valueOf()</span><br><span class="line">5.这就是原型链继承，它会逐级向上查找，如果自己本身有这个方法则使用，没有则继续查找，如果顶端Object的prototype上都没有，是属性就undefined调用方法就报错</span><br><span class="line"></span><br><span class="line">es6的继承：虽然它有关键字 class让你看起来像java的继承</span><br><span class="line">但是依然是假的，不信你可以查看浏览器里打印 依然是基于prototype的</span><br><span class="line">此时就有一个问题如果我想要一个 共有属性 class怎么办？</span><br><span class="line">如果是prototype 可以很方便的</span><br><span class="line">// ES5</span><br><span class="line">Human.prototype.s = &apos;人类&apos;</span><br><span class="line"></span><br><span class="line">// ES6 对不起,不支持,有一种变通的写法</span><br><span class="line">class Human&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    //麻烦不？？？？</span><br><span class="line">    //麻烦不？？？？</span><br><span class="line">    //麻烦不？？？？</span><br><span class="line">    get s()&#123;</span><br><span class="line">        return &apos;人类&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>vue用过吗？能简单说下双向绑定的原理吗？</li></ol><p><a href="https://github.com/coderzzp/vue-come-true" target="_blank" rel="noopener">原文参考没有比这个更简单的了,如果只是为了面试请看第一章节，如果深入了解看后面我是没看。。。</a></p><ol start="5"><li>vue-router用过吗？原理是什么</li></ol><p>就是前端路由，通过#分割前后端,详情请看文档比我全多了<a href="https://router.vuejs.org/" target="_blank" rel="noopener">文档</a></p><p>原理是H5的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noopener">History</a></p><ol start="6"><li>vue组件间通信?</li></ol><p><a href="https://sltrust.github.io/2018/04/12/N058_vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/" target="_blank" rel="noopener">我之前的总结</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">父--&gt;子  props</span><br><span class="line">子--&gt;父  子组件emit触发事件xx  父组件 监听xx事件</span><br><span class="line"></span><br><span class="line">如果是祖孙三代，孙子给爷爷发消息</span><br><span class="line">就是两个父子关系 emit 非常麻烦所以有了vuex</span><br></pre></td></tr></table></figure><ol start="7"><li>vuex用过吗？原理是什么</li></ol><p><a href="https://vuex.vuejs.org/" target="_blank" rel="noopener">vuex</a></p><p>原理就是一个全局变量，反正就一份，你怎么改都是改的一份</p><ol start="8"><li>vue的v-if和v-show的区别</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v-if 是决定html结构里是否有这个元素</span><br><span class="line">v-show是切换元素的display属性</span><br><span class="line"></span><br><span class="line">有性能问题</span><br><span class="line">频繁切换用v-show</span><br><span class="line">如果仅初始化一次的用v-if</span><br></pre></td></tr></table></figure><ol start="9"><li>vue生命周期方法？</li></ol><p>看官网吧！<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p><ol start="10"><li>vue angular react区别</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vue和angular都是双向绑定的</span><br><span class="line">react是单项数据流</span><br><span class="line"></span><br><span class="line">angular 从语法书写上可以明显看出MVC思想，它大而全，关键的是官方宣布半年进行一次版本迭代，需要持续跟进学习，适合于大型项目，但是学习成本高</span><br><span class="line"></span><br><span class="line">vue 简单快速上手，小而美，渐进式的更新各个功能，对初学者友好，因为作者是中国的，而且据统计 外国用react的多，中国用vue的多。</span><br><span class="line"></span><br><span class="line">react facebook的自己造的轮子，单项的数据流，vue也慢慢转向单项数据流，支持jsx语法。可以用class的方式定义组件。通过render渲染，学习路径陡峭</span><br></pre></td></tr></table></figure><ol start="11"><li>什么是闭包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function wrapper()&#123;</span><br><span class="line">    var a = 1</span><br><span class="line">    function inner()&#123;</span><br><span class="line">        a+=1</span><br><span class="line">    &#125;</span><br><span class="line">    return inner</span><br><span class="line">&#125;</span><br><span class="line">这就是闭包</span><br></pre></td></tr></table></figure><blockquote><h4 id="2-直面的一个外派性质的公司"><a href="#2-直面的一个外派性质的公司" class="headerlink" title="2.直面的一个外派性质的公司"></a>2.直面的一个外派性质的公司</h4></blockquote><ol><li>邮箱验证</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;trustfor@sina.cn&apos;</span><br><span class="line">var reg = /^\w+@[a-z0-9]+\.[a-z]+$/i;</span><br><span class="line">if(reg.test(str))&#123;</span><br><span class="line">    //合法</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    //你丫写错了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://sltrust.github.io/2018/04/18/REG_001_1_%E9%9A%BE%E4%BB%A5%E5%90%AF%E9%BD%BF%E7%9A%84%E6%AD%A3%E5%88%99/" target="_blank" rel="noopener">如果你想了解正则</a></p><ol start="2"><li>移动端页面怎么做适配</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>cookie是啥？前端数据存储了解吗？localStorage是啥？sessionStorage是啥区别呢？</li></ol><p><a href="https://sltrust.github.io/2018/02/09/N043_Cookie/" target="_blank" rel="noopener">cookie去看吧</a></p><p><a href="https://sltrust.github.io/2018/02/10/N044__01_Session/" target="_blank" rel="noopener">session和持久化</a></p><ol start="4"><li>了解数据解构吗？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">队列(先进先出，请参考电影票是不是先买票的先走) 映射到数组就是 push() shift()</span><br><span class="line"></span><br><span class="line">栈：后进先出，汉诺塔上面的盘子移走才能移动下面的盘子。映射到数组就是 push() pop()</span><br><span class="line"></span><br><span class="line">树(二叉树/满二叉树/完全二叉树)</span><br><span class="line"></span><br><span class="line">堆(最大堆/最小堆)</span><br></pre></td></tr></table></figure><ol start="5"><li>性能优化手段？</li></ol><ul><li>后台设置gzip压缩</li><li>后台设置cache-control 头指定过期时间<a href="https://sltrust.github.io/2018/02/10/N044_02_Cache_Control/" target="_blank" rel="noopener">(更详尽可以看)</a></li><li>图片压缩合并(精灵图这是很久以前的了)</li><li>js压缩打包，css压缩打包，html压缩打包(webpack解决了这个问题)</li><li><a href="https://sltrust.github.io/2018/05/17/WEB_001_%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96_DNS%E9%A2%84%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">dns预解析，减少同一域名解析时间</a></li><li>图片懒加载，根据滚动距离高度来判断是否进行加载图片</li><li>指定img的宽高，避免网速波动造成页面重排(腾地)</li><li>异步加载组件vue</li></ul><blockquote><p>重复问题</p></blockquote><ul><li>什么是闭包？</li><li>手写ajax</li><li>promise</li><li>async/await</li><li>vue v-if和v-show区别</li><li>vue-router</li><li>vue组件传参</li><li>vue有哪些生命周期方法</li></ul><blockquote><h4 id="3-直面的一个影视动漫相关的公司"><a href="#3-直面的一个影视动漫相关的公司" class="headerlink" title="3.直面的一个影视动漫相关的公司"></a>3.直面的一个影视动漫相关的公司</h4></blockquote><ol><li>css import和link的区别</li></ol><p><a href="https://www.jb51.net/css/484905.html" target="_blank" rel="noopener">看去吧</a></p><ol start="2"><li>css隐藏元素的三种方式</li></ol><ul><li>你可以将 opacity 设为 0</li><li>将 visibility 设为 hidden</li><li>将 display 设为 none </li><li>将 position 设为 absolute 然后将位置设到不可见区域。</li></ul><ol start="3"><li>vue适用于什么项目</li></ol><p>单页面。开发周期短,项目成员少。看公司需求了。我觉得用啥都行</p><blockquote><p>套用大志哥的送外卖例子：</p></blockquote><p>在古代，你会选择飞毛腿<br>在有自行车的时候，你会选择骑车最快的<br>在现在买卖小哥都有了摩托，你会选择评论好的</p><p>结论就是：天下武功，唯快不破。你足够快就行</p><ol start="4"><li>less和sass的语法。写出你用的一些语法</li></ol><ul><li><a href="https://www.sass.hk/guide/" target="_blank" rel="noopener">sass</a></li><li><a href="http://lesscss.cn/#getting-started" target="_blank" rel="noopener">less</a></li></ul><ol start="5"><li>移动页面1s加载的方案</li></ol><p>看看别人的总结，肯定比我好</p><p><a href="https://juejin.im/entry/599646856fb9a02484490c13" target="_blank" rel="noopener">首屏优化</a></p><ol start="6"><li>视频处理相关js了解吗？ 太冷门了。。。</li></ol><ul><li>放弃治疗</li></ul><blockquote><p>重复问题总结</p></blockquote><ul><li>jsonp</li><li>手写ajax</li><li>v-if和v-show区别</li><li>前端三大框架的区别</li><li>cookie和 持久化存储</li><li>前端性能优化</li><li>什么是闭包</li></ul><h4 id="180808第二天-约面2家"><a href="#180808第二天-约面2家" class="headerlink" title="180808第二天(约面2家)"></a>180808第二天(约面2家)</h4><blockquote><h4 id="1-一个大数据-小程序方向"><a href="#1-一个大数据-小程序方向" class="headerlink" title="1.一个大数据 小程序方向"></a>1.一个大数据 小程序方向</h4></blockquote><ol><li>主要问项目经验。实现原理，这个看具体项目</li></ol><p>这个看你的项目了。用到啥就说啥</p><ol start="2"><li>小程序生命周期</li></ol><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/" target="_blank" rel="noopener">照着文档找呗！</a></p><blockquote><p>重复问题总结</p></blockquote><ul><li>闭包</li><li>vue基础知识点，组件传参 v-if v-show区别</li><li>ajax</li><li>promise</li><li>前端性能优化</li></ul><blockquote><h4 id="2-一个中厂sina你懂的"><a href="#2-一个中厂sina你懂的" class="headerlink" title="2.一个中厂sina你懂的"></a>2.一个中厂sina你懂的</h4></blockquote><ol><li>display有哪些值</li></ol><ul><li>block</li><li>inline</li><li>inline-block</li><li>flex</li><li>table</li><li>none</li></ul><ol start="2"><li>定位相关</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果一个div有position:absolute是相对谁定位？</span><br><span class="line"></span><br><span class="line">逐级向上的父元素</span><br><span class="line">如果有position:absolute就相对它</span><br><span class="line">如果有position:relative就相对它</span><br><span class="line">都没有就相对顶级元素 body</span><br></pre></td></tr></table></figure><ol start="3"><li>左端固定右边自适应的布局</li></ol><p><a href="http://js.jirengu.com/yifunusogi/1/edit" target="_blank" rel="noopener">实现链接</a></p><ol start="4"><li>各种居中方式  水平，垂直，水平垂直居中</li></ol><p><a href="https://sltrust.github.io/2017/10/24/N012_02_CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E5%92%8C%E5%B1%85%E4%B8%AD/" target="_blank" rel="noopener">各种布局</a></p><ol start="5"><li>css3动画有哪些属性</li></ol><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation" target="_blank" rel="noopener">看文档。。。</a></p><ol start="6"><li>es6你都指定哪些新特性</li></ol><p><a href="https://sltrust.github.io/tags/ES6%E9%80%9F%E5%AD%A6/" target="_blank" rel="noopener">请参考我总结的es6速学</a></p><blockquote><p>重复问题总结</p></blockquote><ul><li>闭包</li><li>ajax</li><li>promise</li><li>async/await</li><li>vue组件传参</li><li>三大框架区别</li><li>cookie和持久化相关</li><li>前端性能优化</li></ul><h4 id="180809第三天-约面3家"><a href="#180809第三天-约面3家" class="headerlink" title="180809第三天(约面3家)"></a>180809第三天(约面3家)</h4><blockquote><h4 id="1-一个中厂58你懂的"><a href="#1-一个中厂58你懂的" class="headerlink" title="1.一个中厂58你懂的"></a>1.一个中厂58你懂的</h4></blockquote><ol><li>css3 改变一个div的样子 transform有哪些方法</li></ol><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform" target="_blank" rel="noopener">还是mdn全啊</a></p><ol start="2"><li>左面图片右边汉字你有几种做法？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 一个div实现：背景图定位到左边加  padding-left</span><br><span class="line">2. flex布局:最外层容器</span><br><span class="line">    display:flex;</span><br><span class="line">    justify-content:flex-start; </span><br><span class="line">    左面图片设置宽高，</span><br><span class="line">    右边flex-grow:1</span><br><span class="line">3. 两个标签都左浮</span><br><span class="line">4. position定位</span><br><span class="line">5. table</span><br></pre></td></tr></table></figure><ol start="3"><li>正则过滤字符串里的 [“ ‘ 空格]</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = &quot;aabbcc&quot;</span><br><span class="line">str = &quot;\&quot;\&apos; aabbcc \&apos;\&quot;&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>给定一个字符串 aabcccddddcc 已知正则的实现请用replace输出为 2a1b3c4d2c的字符串</p></li><li><p>vue子组件内有一个滚轮事件如何销毁</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在生命周期的destroy里移除事件</span><br></pre></td></tr></table></figure><ol start="6"><li>less/sass用过吗？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由于sass各种报错。我也不想死嗑在这种工具问题上。我用less，基于talkdata的iview就是用的less</span><br><span class="line"></span><br><span class="line">答案是 sass通过配置是可以用的  需要装一个ruby的东西</span><br></pre></td></tr></table></figure><ol start="7"><li>webpack了解吗?有哪些属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry 入口</span><br><span class="line">output 输入路径</span><br><span class="line">loads 加载器</span><br><span class="line">plugs 插件</span><br><span class="line"></span><br><span class="line">又问 用过什么！看你水平了。 当然是说你用的</span><br></pre></td></tr></table></figure><blockquote><p>重复问题总结</p></blockquote><ul><li>双飞翼布局</li><li>水平居中/垂直居中</li><li>vue组件通信</li><li>vuex</li><li>vue-router</li><li>v-if v-show</li><li>双向绑定原理</li><li>promise</li><li>async/await </li><li>es6新特性有哪些</li></ul><blockquote><h4 id="2-一个傲的像全球第一的不到30人的公司-好脉-果然是好卖"><a href="#2-一个傲的像全球第一的不到30人的公司-好脉-果然是好卖" class="headerlink" title="2.一个傲的像全球第一的不到30人的公司[好脉]果然是好卖"></a>2.一个傲的像全球第一的不到30人的公司[好脉]果然是好卖</h4></blockquote><p>非常差的面试体验[中厂的新浪58人家也没像贵公司(不到30人的创业公司)这样]</p><ol><li>开始「各种装」模式。垃圾回收的方式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可能真不会。我说把变量置空，移除事件。尽量用委托。事件里不要保存其他变量的引用。</span><br><span class="line"></span><br><span class="line">还有呢？</span><br><span class="line">又装了，这个一定是可以调的。(你可以回去看看。好吧！继续看你表演)</span><br></pre></td></tr></table></figure><ol start="2"><li>代码题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)</span><br><span class="line">var a = 1</span><br><span class="line">答案 undefined 变量提升</span><br></pre></td></tr></table></figure><ol start="3"><li>代码题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)</span><br><span class="line">console.log(b)</span><br><span class="line">&#123;</span><br><span class="line">var a = 1</span><br><span class="line">let b = 2</span><br><span class="line">&#125;</span><br><span class="line">答案 </span><br><span class="line">第一行undefined</span><br><span class="line">第二行报错</span><br></pre></td></tr></table></figure><ol start="4"><li>代码题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">var a = 1</span><br><span class="line">let b = 2</span><br><span class="line">&#125;</span><br><span class="line">console.log(a)</span><br><span class="line">console.log(b)</span><br><span class="line">答案 </span><br><span class="line">第一行 1</span><br><span class="line">第二行报错</span><br></pre></td></tr></table></figure><ol start="5"><li>考察function传参。。。。无语了您是错的好吗？还让我自己浏览器试试。自己去试试再来面好吗？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function A(A)&#123; console.log(1)&#125;</span><br><span class="line">function A(A,B,C)&#123; console.log(2)&#125;</span><br><span class="line"></span><br><span class="line">A(1)</span><br><span class="line">A(1,2,3)</span><br><span class="line">A()</span><br><span class="line">答案 </span><br><span class="line">2 同名函数会发生覆盖。 </span><br><span class="line"></span><br><span class="line">你传递多少个参数你不使用有意义？我真不知道啥区别！别逗我行吗？</span><br><span class="line">无论先后调用A函数  都会执行第二个。您居然跟我说执行第一个？厉害</span><br><span class="line"></span><br><span class="line">又开始嘲讽啦！ 这个vue react angular变来变去都很简单。无外乎那么点东西。</span><br><span class="line">(从没见过造轮子特别傲的人,但今天看见一个用别人轮子还那么傲的。vue作者都没那么狂。果然全球第一。)</span><br></pre></td></tr></table></figure><ol start="6"><li>函数传参的方式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function a(x,y,z)&#123;&#125;</span><br><span class="line"></span><br><span class="line">a(x,y,z)</span><br><span class="line">a.call(undefined,x,y,z)</span><br><span class="line">a.apply(undefined,[x,y,z])</span><br><span class="line"></span><br><span class="line">沉默了一小下，问call、apply区别</span><br><span class="line">区别</span><br><span class="line">call第一参数是this,第二个之后才是你实际传的参数</span><br><span class="line">apply第一参数是this,第二个是你实际传的参数数组</span><br><span class="line"></span><br><span class="line">他：嘲讽开始，还有其他方式吗？</span><br><span class="line">我：不清楚。我就想看你说啥！</span><br><span class="line">他：回去自己查查。</span><br><span class="line">我：(我估计你自己都不知道)</span><br></pre></td></tr></table></figure><ol start="7"><li>如何实现css加载是怎样的</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">各浏览器表现不一致 </span><br><span class="line">google是小姐姐 化了妆出门</span><br><span class="line">ie是女汉子 出门在化妆</span><br><span class="line"></span><br><span class="line">我就要加载了css在显示页面呢？</span><br><span class="line"></span><br><span class="line">非要实现都一直你就隐藏呗。加载完了在display:block</span><br><span class="line">又开始嘲讽啦 说这有5/6种呢  你自己回去查查。</span><br></pre></td></tr></table></figure><ol start="8"><li>又开始装啦！ 问性能优化。怎么达到页面加载速度特快</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我按之前的思路回答了，答的不好就不好呗！</span><br><span class="line"></span><br><span class="line">又开始了，你回答的很范范。你可以去看看淘宝啊京东啊看他的页面结构抄他们的代码。</span><br></pre></td></tr></table></figure><ol start="9"><li>终于夸人了，我就觉得你这个问题回答的好(我醉了)</li></ol><p>问埋点做过吗？如果细化到button级别怎么办。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事件委托呗。监听document 判断target.tagName是不是button</span><br></pre></td></tr></table></figure><blockquote><p>终于换了一个知书达理的面试官了，好的体验</p></blockquote><ol><li>vue生命周期有几种(8种)</li><li>v-if和 v-show区别</li><li>js有几种数据类型(7)</li><li>如果实现vue的路由鉴权、菜单鉴权</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一种就是每次都发请求设置个cookie头</span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">1. 登录的一瞬间后台返回 authList 存到sessionStorage里(加密一下，引个库肯定没问题)</span><br><span class="line"> authList = [&quot;if0001&quot;,&quot;if0002&quot;,&quot;if0003&quot;] 对应路由的name属性</span><br><span class="line">2. 路由守卫里判断 to.name 是否在authList里 </span><br><span class="line">3. 分支处理</span><br></pre></td></tr></table></figure><ol start="5"><li>如何实现不用用户的不同菜单权限组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一、要么后天登录的时候给你生成</span><br><span class="line"></span><br><span class="line">二、</span><br><span class="line">1.在router定义的时候  自己定义个属性建议形如[if_authmenu] 公司前缀+权限名称 表示为这个路由是菜单</span><br><span class="line">判断</span><br><span class="line">2.生成路由菜单的时候说明已经登录了 权限数组在你这里 v-for的时候判断</span><br></pre></td></tr></table></figure><ol start="6"><li>路由有几种方式?什么是动态路由</li></ol><p>看官网吧。</p><ol start="7"><li>H5有哪些新特性</li></ol><ul><li>worker 多线程的一个api</li><li>history 前端路由的实现</li><li>localStorage</li><li>sessionStorage</li></ul><ol start="8"><li>有没有对axios进行封装。也就是做统一的异常处理</li></ol><p>然后面试着一半。就被需求会中断了。产品经理进来就占地。深刻的感受到啥叫野！</p><ol start="9"><li>axios发请求时为什么是两次</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一次是option方法  意思是询问 支持不支持我下面发送的方法</span><br><span class="line">第二次是实际的get/put/post/delete等请求</span><br></pre></td></tr></table></figure><blockquote><p>重复问题总结</p></blockquote><ul><li>promise</li><li>async/await</li><li>v-router了解吗？有哪些方式</li><li>vuex原理</li><li>less/sass语法</li><li>webpack是否自己配置过？问我半天，咱公司自己配置的？我们也是vue-cli 厉害！</li></ul><blockquote><h4 id="3-一个做区块链的挺厉害的公司包了三层办公。"><a href="#3-一个做区块链的挺厉害的公司包了三层办公。" class="headerlink" title="3.一个做区块链的挺厉害的公司包了三层办公。"></a>3.一个做区块链的挺厉害的公司包了三层办公。</h4></blockquote><p>也是非常好的体验！要求5-10年的，但我不够却说不在乎年限只要够优秀。</p><p>约的6点而且再三盛情邀请我去试试。cto面我先给我介绍公司现状。然后让我介绍。没有对比就没有伤害。 不知道比上家强多少倍</p><ol><li>上来就算法。。。一紧张想错了整到快排了 50万个随机数的数组要求时间复杂度为O(n)求第三个最大的数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">其实就是三次循环每次找最大值然后移除</span><br><span class="line">第一次500,000 找到最大的 然后移除元素</span><br><span class="line">第二次499,999 找到第二个最大的 然后移除元素</span><br><span class="line">第三次499,998 找到第三个最大的 然后结束</span><br><span class="line"></span><br><span class="line">时间复杂度 3n</span><br></pre></td></tr></table></figure><ol start="2"><li>找到匹配的右括号 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str = &apos;((()()(()(()()))((()))))&apos;</span><br><span class="line">起点为 index = 1 的左括号 找到对应的右括号索引</span><br><span class="line"></span><br><span class="line">答案是利用堆栈知识</span><br><span class="line">左括号代表进栈 x++</span><br><span class="line">右括号代表出栈 x--</span><br><span class="line"></span><br><span class="line">所以 x = 0 时 就是匹配的那个右括号对应的索引</span><br></pre></td></tr></table></figure><ol start="3"><li>隔行变色。同时变色的行是45度 斑马线的条纹</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.xx:nth-child(2n)&#123;</span><br><span class="line">    线性渐变的代码。。。 我也不会</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>如何把表格里的数据给后台。数组形式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">双重循环遍历成二维数组</span><br></pre></td></tr></table></figure><ol start="5"><li>如何添加参数发送一个请求</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.post(url,param).then(</span><br><span class="line">    ()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">).catch(</span><br><span class="line">    ()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="6"><li>如何实现一个树形组件，通过后台传递的格式如下内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">id      pid   cname</span><br><span class="line">0100    null   北京</span><br><span class="line">0101    0100   朝阳</span><br><span class="line">0102    0100   海淀</span><br><span class="line">0103    0100   昌平</span><br><span class="line">0200    null   天津</span><br><span class="line">0201    0200   和平</span><br><span class="line">0202    0200   红桥</span><br><span class="line">0203    0200   南开</span><br><span class="line">又卡住了我。。。。</span><br></pre></td></tr></table></figure><ol start="7"><li>如何实现上下两部分。拖拽就可以改变上下两个div高度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">又挂了。  iview-admin里有一个那么的组件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web面经 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P020_02_python模块的导入</title>
      <link href="/2018/07/29/P020_02_python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AF%BC%E5%85%A5/"/>
      <url>/2018/07/29/P020_02_python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AF%BC%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><blockquote><p>很多时候，你发现你写的代码有很多重复内容这个时候你就要使用模块了</p></blockquote><h4 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h4><p>在同一目录下我们这样操作</p><ol><li>新建模块文件 demo.py</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">内容如下：</span><br><span class="line">print(&apos;in demo.py&apos;)</span><br><span class="line"></span><br><span class="line">a = &apos;hello&apos;</span><br><span class="line"></span><br><span class="line">def read():</span><br><span class="line">    print(&apos;haha&apos;+a)</span><br></pre></td></tr></table></figure><ol start="2"><li>新建调用模块的文件aa.py</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import demo.py</span><br><span class="line"></span><br><span class="line">#执行aa.py你会发现打印了 in demo.py </span><br><span class="line"></span><br><span class="line">如果你多次导入demo模块呢？</span><br><span class="line">import demo.py</span><br><span class="line">import demo.py</span><br><span class="line">import demo.py</span><br><span class="line">import demo.py</span><br><span class="line"></span><br><span class="line"># 依然只打印一次  in demo.py</span><br></pre></td></tr></table></figure><ol start="3"><li>如果调用demo.py里的方法</li></ol><ul><li>找到模块</li><li>创建这个模块的命名空间</li><li>把文件中的内容放到命名空间里</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import demo # 这句话的时候就是把demo.py的内容加载到内存里，同时demo里所有的内容只能通过demo这个命名空间来调用</span><br><span class="line">demo.read() # </span><br><span class="line">demo.a</span><br></pre></td></tr></table></figure><blockquote><p>为什么一个模块不会被重复导入</p></blockquote><ul><li>当你导入一个模块的时候，会先去sys.modules里查看是否已经导入了这个模块</li><li>如果没被导入，就依据sys.path路径去寻找模块找到了正常运行，没找到报错</li><li>找到了就导入</li><li>创建这个模块的命名空间</li><li>把文件中的内容放到命名空间里</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">print(sys.modules.keys()) # 查看导入的模块</span><br></pre></td></tr></table></figure><h4 id="给模块其一个别名"><a href="#给模块其一个别名" class="headerlink" title="给模块其一个别名"></a>给模块其一个别名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import time as t</span><br><span class="line">t.time()</span><br></pre></td></tr></table></figure><h4 id="导入多个模块"><a href="#导入多个模块" class="headerlink" title="导入多个模块"></a>导入多个模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import sys,time,random,os</span><br></pre></td></tr></table></figure><h4 id="模块引入的一些编码规则"><a href="#模块引入的一些编码规则" class="headerlink" title="模块引入的一些编码规则"></a>模块引入的一些编码规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 先引入内置的</span><br><span class="line">2. 扩展的如django</span><br><span class="line">3. 自己实现的</span><br></pre></td></tr></table></figure><h4 id="from-import的使用方式"><a href="#from-import的使用方式" class="headerlink" title="from import的使用方式"></a>from import的使用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">之前是</span><br><span class="line">import time</span><br><span class="line">time.sleep()</span><br><span class="line"></span><br><span class="line">你可以这样</span><br><span class="line">from time import sleep</span><br><span class="line">sleep()</span><br></pre></td></tr></table></figure><blockquote><p>回归之前的demo.py</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from demo import read</span><br><span class="line"># 此时无法访问demo.py里的 a变量 因为你单独导入了read方法</span><br><span class="line"># 但是read方法里访问了 a变量 ，说明引入模块的时候会把a保存在内存里只是本模块访问不到 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 如果你在引入的地方定义同名read方法,那么导入的read方法就被覆盖</span><br><span class="line">def read():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><blockquote><h4 id="另一种-from-import"><a href="#另一种-from-import" class="headerlink" title="另一种 from import *"></a>另一种 from import *</h4></blockquote><p>但是这种非常不安全，不建议使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import demo from *</span><br><span class="line"># 相当于把里面的东西全部引入进来,可以不带命名空间之间使用</span><br><span class="line">read()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><blockquote><h4 id="最后一种方式导入模块"><a href="#最后一种方式导入模块" class="headerlink" title="最后一种方式导入模块"></a>最后一种方式导入模块</h4></blockquote><ol><li>我们又新建一个模块demo2.py</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [&apos;a&apos;]</span><br><span class="line">print(&apos;in demo2.py&apos;)</span><br><span class="line"></span><br><span class="line">a = &apos;hello&apos;</span><br><span class="line"></span><br><span class="line">def read():</span><br><span class="line">    print(&apos;haha&apos;+a)</span><br></pre></td></tr></table></figure><ol start="2"><li>引入新建的模块demo2</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import demo2 from *</span><br><span class="line">read() # 报错 </span><br><span class="line"></span><br><span class="line"># 因为在模块内部设置了 __all__</span><br><span class="line">__all__是一个列表代表 import demo2 from *的形式导出的内容</span><br><span class="line"></span><br><span class="line">因为刚刚只设置了 __all__ = [&apos;a&apos;] </span><br><span class="line">因此只有 a可用</span><br></pre></td></tr></table></figure><p>双下all变量只跟 *关联</p><blockquote><h4 id="最后一个需求知识点"><a href="#最后一个需求知识点" class="headerlink" title="最后一个需求知识点"></a>最后一个需求知识点</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.因为demo2.py里有一句 print(&apos;in demo2.py&apos;) </span><br><span class="line">2.所以在你导入demo2模块的时候 程序会打印 in demo2.py</span><br><span class="line">3.需求就是 只在demo2.py里打印不在 被导入的文件里 打印这句话</span><br></pre></td></tr></table></figure><ul><li>双下name</li></ul><p>demo2.py里添加如下内容,并执行,发现打印 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;hello&apos;</span><br><span class="line">def read():</span><br><span class="line">    print(&apos;haha&apos;+a)</span><br><span class="line"></span><br><span class="line">print(__name__) # __main__</span><br></pre></td></tr></table></figure><p>如果在别的地方导入demo2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import demo2</span><br><span class="line"></span><br><span class="line"># 打印 demo2</span><br></pre></td></tr></table></figure><blockquote><p>完成需求只在本模块执行相关代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;hello&apos;</span><br><span class="line">def read():</span><br><span class="line">    print(&apos;haha&apos;+a)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print(&apos;in demo2.py&apos;)</span><br></pre></td></tr></table></figure><p>小结：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在模块xxx内部有一个变量 __name__</span><br><span class="line">当我们直接运行这个模块xxx的时候 __name__ == &apos;__main__&apos;</span><br><span class="line">当我们在其他文件内,引入这个模块xxx的时候,这个模块中的 __name__ ==&apos;模块的名字&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P020_01_python序列化模块</title>
      <link href="/2018/07/29/P020_01_python%E5%BA%8F%E5%88%97%E5%8C%96%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/07/29/P020_01_python%E5%BA%8F%E5%88%97%E5%8C%96%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="序列化模块"><a href="#序列化模块" class="headerlink" title="序列化模块"></a>序列化模块</h3><ul><li>序列化——转向一个字符串的数据类型</li><li>序列——字符串</li></ul><p>数据存储<br>网络上传输的时候</p><blockquote><h4 id="序列化：从数据类型-gt-字符串的过程"><a href="#序列化：从数据类型-gt-字符串的过程" class="headerlink" title="序列化：从数据类型==&gt; 字符串的过程"></a>序列化：从数据类型==&gt; 字符串的过程</h4></blockquote><blockquote><h4 id="反序列化：从字符串-gt-数据类型"><a href="#反序列化：从字符串-gt-数据类型" class="headerlink" title="反序列化：从字符串==&gt;数据类型"></a>反序列化：从字符串==&gt;数据类型</h4></blockquote><h4 id="重要的几个知识点-「-」代表重要程度"><a href="#重要的几个知识点-「-」代表重要程度" class="headerlink" title="重要的几个知识点 「*」代表重要程度"></a>重要的几个知识点 「*」代表重要程度</h4><ul><li>json <strong>*</strong></li><li>pickle <em>**</em></li><li>shelve ***</li></ul><h5 id="json通用序列化格式"><a href="#json通用序列化格式" class="headerlink" title="json通用序列化格式"></a>json通用序列化格式</h5><ul><li>只有很少的一部分数据类型能够通过json转化成字符串</li></ul><h5 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h5><ul><li>所有python里的数据类型都可以转化成字符串格式</li><li>pickle序列化的内容只有python能理解</li><li>且部分反序列化依赖代码</li></ul><p>例如网游 魔兽世界你退出游戏了 但是下次登录你还会在原来的数据基础上。这些信息如血量蓝量背包的物品经验值都是对应一些数据类型并依赖一些模块存在服务器或者你本地</p><h5 id="shelve"><a href="#shelve" class="headerlink" title="shelve"></a>shelve</h5><ul><li>序列化句柄</li><li>使用句柄直接操作非常方便</li></ul><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><blockquote><p>内存相关</p></blockquote><ul><li>dumps 序列化方法</li><li>loads 反序列化方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">dic = &#123;&quot;k1&quot;:&quot;v1&quot;&#125;</span><br><span class="line"></span><br><span class="line">print(type(dic),dic)</span><br><span class="line"># &lt;class &apos;dict&apos;&gt; &#123;&apos;k1&apos;: &apos;v1&apos;&#125;</span><br><span class="line"></span><br><span class="line"># 序列化</span><br><span class="line">str_d = json.dumps(dic)</span><br><span class="line">print(type(str_d),str_d) </span><br><span class="line"># &lt;class &apos;str&apos;&gt; &#123;&quot;k1&quot;: &quot;v1&quot;&#125;</span><br><span class="line"></span><br><span class="line"># 反序列化</span><br><span class="line">dic_d = json.loads(str_d)</span><br><span class="line">print(type(dic_d),dic_d)</span><br><span class="line"># &lt;class &apos;dict&apos;&gt; &#123;&apos;k1&apos;: &apos;v1&apos;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>元组:序列化之后是列表,把元组序列号的内容反序列化后也是列表</p></blockquote><blockquote><p>set不能进行序列化：报错</p></blockquote><blockquote><p>文件相关：传递要序列话的内容，和文件句柄</p></blockquote><ul><li>dump</li><li>load</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">dic = &#123;&quot;k1&quot;:&quot;v1&quot;&#125;</span><br><span class="line">f = open(&apos;fff&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">json.dump(dic,f) # 序列化后的字符串写入到文件里</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&apos;fff&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">res = json.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(res) # &#123;&apos;k1&apos;: &apos;v1&apos;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>序列化的时候有中文咋办？</p></blockquote><p>读取能正常但是你去看fff文件发现中文已经被转换了 {“k1”: “\u4e2d\u56fd”}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">dic = &#123;&quot;k1&quot;:&quot;中国&quot;&#125;</span><br><span class="line">f = open(&apos;fff&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">json.dump(dic,f) # 序列化后的字符串写入到文件里</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&apos;fff&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">res = json.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(res) # &#123;&apos;k1&apos;: &apos;中国&apos;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解决dump时 中文会转换为byte编码的问题</p></blockquote><ul><li>ensure_ascii=False以指定的编码写入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">dic = &#123;&quot;k1&quot;:&quot;中国&quot;&#125;</span><br><span class="line">f = open(&apos;fff&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">json.dump(dic,f,ensure_ascii=False) # 序列化后的字符串写入到文件里</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&apos;fff&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">res = json.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意如果你用json的demp和load只能一次性写入和读取"><a href="#注意如果你用json的demp和load只能一次性写入和读取" class="headerlink" title="注意如果你用json的demp和load只能一次性写入和读取"></a>注意如果你用json的demp和load只能一次性写入和读取</h4></blockquote><p>如果想要分次写入和读取就不能用dump和load</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 分次写入</span><br><span class="line">import json</span><br><span class="line">a = [&#123;&quot;k1&quot;:1&#125;,&#123;&quot;k2&quot;:22&#125;,&#123;&quot;k3&quot;:33&#125;]</span><br><span class="line">f = open(&apos;file&apos;,&apos;w&apos;)</span><br><span class="line">for dic in a:</span><br><span class="line">    str_dic = json.dumps(dic)</span><br><span class="line">    f.write(str_dic+&apos;\n&apos;)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"># 分次读取</span><br><span class="line">b = []</span><br><span class="line">f = open(&apos;file&apos;)</span><br><span class="line">for line in f:</span><br><span class="line">    dic = json.loads(line.strip())</span><br><span class="line">    b.append(dic)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="pickle-1"><a href="#pickle-1" class="headerlink" title="pickle"></a>pickle</h3><ul><li>pickle也有json模块里的 dump/dumps ,load/loads方法</li><li>pickle在dumps/dump的时候你是看不出来的(二进制内容)</li><li>在调用dump/load 读写文件的时候要使用rb和wb模式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">dic = &#123;&quot;k1&quot;:&quot;中国&quot;&#125;</span><br><span class="line">str = pickle.dumps(dic)</span><br><span class="line">print(str) # 一串二进制内容</span><br><span class="line"># b&apos;\x80\x03&#125;q\x00X\x02\x00\x00\x00k1q\x01X\x06\x00\x00\x00\xe4\xb8\xad\xe5\x9b\xbdq\x02s.&apos;</span><br><span class="line">res = pickle.loads(str)</span><br><span class="line">print(res)</span><br><span class="line"># &#123;&apos;k1&apos;: &apos;中国&apos;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于pickle序列化之后是二进制内容所以读写的时候要rb和wb模式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">dic = &#123;&quot;k1&quot;:&quot;中国&quot;&#125;</span><br><span class="line">f = open(&apos;fff3&apos;,&apos;wb&apos;)</span><br><span class="line">pickle.dump(dic,f) # 序列化后的字符串写入到文件里</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&apos;fff3&apos;,&apos;rb&apos;)</span><br><span class="line">res = pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><blockquote><h4 id="pickle的dump和load可以分步序列化写入和读取-json不行"><a href="#pickle的dump和load可以分步序列化写入和读取-json不行" class="headerlink" title="pickle的dump和load可以分步序列化写入和读取 (json不行)"></a>pickle的dump和load可以分步序列化写入和读取 (json不行)</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">dic = &#123;&quot;k1&quot;:&quot;中国&quot;&#125;</span><br><span class="line">dic2 = &#123;&quot;k2&quot;:&quot;中国2&quot;&#125;</span><br><span class="line">f = open(&apos;fff3&apos;,&apos;wb&apos;)</span><br><span class="line">pickle.dump(dic,f) #</span><br><span class="line">pickle.dump(dic2,f) #</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&apos;fff3&apos;,&apos;rb&apos;)</span><br><span class="line">res = pickle.load(f)</span><br><span class="line">res2 = pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(res)</span><br><span class="line">print(res2)</span><br></pre></td></tr></table></figure><h3 id="shelve-1"><a href="#shelve-1" class="headerlink" title="shelve"></a>shelve</h3><blockquote><p>shelve也是python提供给我们的序列化工具，比pickle用起来更简单一些。</p></blockquote><blockquote><p>shelve只提供给我们一个open方法，是用key来访问的，使用起来和字典类似。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import shelve</span><br><span class="line">f = shelve.open(&apos;shelve_file&apos;)</span><br><span class="line">f[&apos;key&apos;] = &#123;&apos;int&apos;:10, &apos;float&apos;:9.5, &apos;string&apos;:&apos;Sample data&apos;&#125;  #直接对文件句柄操作，就可以存入数据</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">import shelve</span><br><span class="line">f1 = shelve.open(&apos;shelve_file&apos;)</span><br><span class="line">existing = f1[&apos;key&apos;]  #取出数据的时候也只需要直接用key获取即可，但是如果key不存在会报错</span><br><span class="line">f1.close()</span><br><span class="line">print(existing)</span><br></pre></td></tr></table></figure><blockquote><p>这个模块有个限制，它不支持多个应用同一时间往同一个DB进行写操作。所以当我们知道我们的应用如果只进行读操作，我们可以让shelve通过只读方式打开DB</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import shelve</span><br><span class="line">f = shelve.open(&apos;shelve_file&apos;, flag=&apos;r&apos;)</span><br><span class="line">existing = f[&apos;key&apos;]</span><br><span class="line">f.close()</span><br><span class="line">print(existing)</span><br></pre></td></tr></table></figure><blockquote><p>由于shelve在默认情况下是不会记录待持久化对象的任何修改的，所以我们在shelve.open()时候需要修改默认参数，否则对象的修改不会保存。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import shelve</span><br><span class="line">f1 = shelve.open(&apos;shelve_file&apos;)</span><br><span class="line">print(f1[&apos;key&apos;])</span><br><span class="line">f1[&apos;key&apos;][&apos;new_value&apos;] = &apos;this was not here before&apos;</span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line">f2 = shelve.open(&apos;shelve_file&apos;, writeback=True)</span><br><span class="line">print(f2[&apos;key&apos;])</span><br><span class="line">f2[&apos;key&apos;][&apos;new_value&apos;] = &apos;this was not here before&apos;</span><br><span class="line">f2.close()</span><br></pre></td></tr></table></figure><p>writeback方式有优点也有缺点。优点是减少了我们出错的概率，并且让对象的持久化对用户更加的透明了；但这种方式并不是所有的情况下都需要，首先，使用writeback以后，shelf在open()的时候会增加额外的内存消耗，并且当DB在close()的时候会将缓存中的每一个对象都写入到DB，这也会带来额外的等待时间。因为shelve没有办法知道缓存中哪些对象修改了，哪些对象没有修改，因此所有的对象都会被写入。</p><blockquote><h4 id="json补充知识-格式化输出"><a href="#json补充知识-格式化输出" class="headerlink" title="json补充知识 格式化输出"></a>json补充知识 格式化输出</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">data = &#123;&apos;username&apos;:[&apos;李华&apos;,&apos;二愣子&apos;],&apos;sex&apos;:&apos;male&apos;,&apos;age&apos;:16&#125;</span><br><span class="line">json_dic2 = json.dumps(data,sort_keys=True,indent=2,separators=(&apos;,&apos;,&apos;:&apos;),ensure_ascii=False)</span><br><span class="line">print(json_dic2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P019_03_python常用模块三</title>
      <link href="/2018/07/29/P019_03_python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%89/"/>
      <url>/2018/07/29/P019_03_python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h3 id="os模块-不用背，用的时候查"><a href="#os模块-不用背，用的时候查" class="headerlink" title="os模块(不用背，用的时候查)"></a>os模块(不用背，用的时候查)</h3><blockquote><p>os模块是与操作系统交互的一个接口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径</span><br><span class="line">os.chdir(&quot;dirname&quot;)  改变当前脚本工作目录；相当于shell下cd</span><br><span class="line">os.curdir  返回当前目录: (&apos;.&apos;)</span><br><span class="line">os.pardir  获取当前目录的父目录字符串名：(&apos;..&apos;)</span><br><span class="line">os.makedirs(&apos;dirname1/dirname2&apos;)    可生成多层递归目录</span><br><span class="line">os.removedirs(&apos;dirname1&apos;)    若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</span><br><span class="line">os.mkdir(&apos;dirname&apos;)    生成单级目录；相当于shell中mkdir dirname</span><br><span class="line">os.rmdir(&apos;dirname&apos;)    删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</span><br><span class="line">os.listdir(&apos;dirname&apos;)    列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</span><br><span class="line">os.remove()  删除一个文件</span><br><span class="line">os.rename(&quot;oldname&quot;,&quot;newname&quot;)  重命名文件/目录</span><br><span class="line">os.stat(&apos;path/filename&apos;)  获取文件/目录信息</span><br><span class="line">os.sep    输出操作系统特定的路径分隔符，win下为&quot;\\&quot;,Linux下为&quot;/&quot;</span><br><span class="line">os.linesep    输出当前平台使用的行终止符，win下为&quot;\t\n&quot;,Linux下为&quot;\n&quot;</span><br><span class="line">os.pathsep    输出用于分割文件路径的字符串 win下为;,Linux下为:</span><br><span class="line">os.name    输出字符串指示当前使用平台。win-&gt;&apos;nt&apos;; Linux-&gt;&apos;posix&apos;</span><br><span class="line">os.system(&quot;bash command&quot;)  运行shell命令，直接显示</span><br><span class="line">os.popen(&quot;bash command).read()  运行shell命令，获取执行结果</span><br><span class="line">os.environ  获取系统环境变量</span><br><span class="line"></span><br><span class="line">os.path</span><br><span class="line">os.path.abspath(path) 返回path规范化的绝对路径 os.path.split(path) 将path分割成目录和文件名二元组返回 os.path.dirname(path) 返回path的目录。其实就是os.path.split(path)的第一个元素 os.path.basename(path) 返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。</span><br><span class="line">                        即os.path.split(path)的第二个元素</span><br><span class="line">os.path.exists(path)  如果path存在，返回True；如果path不存在，返回False</span><br><span class="line">os.path.isabs(path)  如果path是绝对路径，返回True</span><br><span class="line">os.path.isfile(path)  如果path是一个存在的文件，返回True。否则返回False</span><br><span class="line">os.path.isdir(path)  如果path是一个存在的目录，则返回True。否则返回False</span><br><span class="line">os.path.join(path1[, path2[, ...]])  将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span><br><span class="line">os.path.getatime(path)  返回path所指向的文件或者目录的最后访问时间</span><br><span class="line">os.path.getmtime(path)  返回path所指向的文件或者目录的最后修改时间</span><br><span class="line">os.path.getsize(path) 返回path的大小</span><br></pre></td></tr></table></figure><blockquote><p>注意：os.stat(‘path/filename’)  获取文件/目录信息 的结构说明</p></blockquote><h4 id="stat-结构"><a href="#stat-结构" class="headerlink" title="stat 结构:"></a>stat 结构:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">st_mode: inode 保护模式</span><br><span class="line">st_ino: inode 节点号。</span><br><span class="line">st_dev: inode 驻留的设备。</span><br><span class="line">st_nlink: inode 的链接数。</span><br><span class="line">st_uid: 所有者的用户ID。</span><br><span class="line">st_gid: 所有者的组ID。</span><br><span class="line">st_size: 普通文件以字节为单位的大小；包含等待某些特殊文件的数据。</span><br><span class="line">st_atime: 上次访问的时间。</span><br><span class="line">st_mtime: 最后一次修改的时间。</span><br><span class="line">st_ctime: 由操作系统报告的&quot;ctime&quot;。在某些系统上（如Unix）是最新的元数据更改的时间，在其它系统上（如Windows）是创建时间（详细信息参见平台的文档）。</span><br></pre></td></tr></table></figure><h3 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h3><blockquote><p>sys模块是与python解释器交互的一个接口</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sys.argv           命令行参数List，第一个元素是程序本身路径(只能在命令行里执行，在ide里报错)</span><br><span class="line">sys.exit(n)        退出程序，正常退出时exit(0),错误退出sys.exit(1)</span><br><span class="line">sys.version        获取Python解释程序的版本信息</span><br><span class="line">sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span><br><span class="line">sys.platform       返回操作系统平台名称</span><br></pre></td></tr></table></figure><blockquote><p>异常处理和status</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">try:</span><br><span class="line">    sys.exit(1)</span><br><span class="line">except SystemExit as e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P019_02_python常用模块二</title>
      <link href="/2018/07/29/P019_02_python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%BA%8C/"/>
      <url>/2018/07/29/P019_02_python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="时间模块"><a href="#时间模块" class="headerlink" title="时间模块"></a>时间模块</h3><ul><li>字符串：给人看的 2018-07-29</li><li>时间戳时间：float时间：计算机看的</li><li>结构化时间：元组，计算用的</li></ul><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>time.sleep(secs) (线程)推迟指定的时间运行。单位为秒。</li><li>time.time() 获取当前时间戳</li></ol><h4 id="strftime-格式化时间"><a href="#strftime-格式化时间" class="headerlink" title="strftime 格式化时间"></a>strftime 格式化时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)) # year month day hour minute second</span><br><span class="line"></span><br><span class="line"># 2018-07-29 12:01:20</span><br></pre></td></tr></table></figure><blockquote><p>时间格式化规则</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">%y 两位数的年份表示（00-99）</span><br><span class="line">%Y 四位数的年份表示（000-9999）</span><br><span class="line">%m 月份（01-12）</span><br><span class="line">%d 月内中的一天（0-31）</span><br><span class="line">%H 24小时制小时数（0-23）</span><br><span class="line">%I 12小时制小时数（01-12）</span><br><span class="line">%M 分钟数（00=59）</span><br><span class="line">%S 秒（00-59）</span><br><span class="line">%a 本地简化星期名称</span><br><span class="line">%A 本地完整星期名称</span><br><span class="line">%b 本地简化的月份名称</span><br><span class="line">%B 本地完整的月份名称</span><br><span class="line">%c 本地相应的日期表示和时间表示</span><br><span class="line">%j 年内的一天（001-366）</span><br><span class="line">%p 本地A.M.或P.M.的等价符</span><br><span class="line">%U 一年中的星期数（00-53）星期天为星期的开始</span><br><span class="line">%w 星期（0-6），星期天为星期的开始</span><br><span class="line">%W 一年中的星期数（00-53）星期一为星期的开始</span><br><span class="line">%x 本地相应的日期表示</span><br><span class="line">%X 本地相应的时间表示</span><br><span class="line">%Z 当前时区的名称</span><br><span class="line">%% %号本身</span><br></pre></td></tr></table></figure><h4 id="结构化时间"><a href="#结构化时间" class="headerlink" title="结构化时间"></a>结构化时间</h4><blockquote><p>时间元组:localtime将一个时间戳转换为当前时区的struct_time<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time.localtime()</span><br><span class="line"># time.struct_time(tm_year=2018, tm_mon=7, tm_mday=29, tm_hour=12, tm_min=5, tm_sec=42, tm_wday=6, tm_yday=210, tm_isdst=0)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="不同时间格式的转换"><a href="#不同时间格式的转换" class="headerlink" title="不同时间格式的转换"></a>不同时间格式的转换</h4><p><img src="https://images2015.cnblogs.com/blog/827651/201707/827651-20170724144151992-1508626640.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#时间戳--&gt;结构化时间</span><br><span class="line">#time.gmtime(时间戳)    #UTC时间，与英国伦敦当地时间一致</span><br><span class="line">#time.localtime(时间戳) #当地时间。例如我们现在在北京执行这个方法：与UTC时间相差8小时，UTC时间+8小时 = 北京时间 </span><br><span class="line">&gt;&gt;&gt;time.gmtime(1500000000)</span><br><span class="line">time.struct_time(tm_year=2017, tm_mon=7, tm_mday=14, tm_hour=2, tm_min=40, tm_sec=0, tm_wday=4, tm_yday=195, tm_isdst=0)</span><br><span class="line">&gt;&gt;&gt;time.localtime(1500000000)</span><br><span class="line">time.struct_time(tm_year=2017, tm_mon=7, tm_mday=14, tm_hour=10, tm_min=40, tm_sec=0, tm_wday=4, tm_yday=195, tm_isdst=0)</span><br><span class="line"></span><br><span class="line">#结构化时间--&gt;时间戳　</span><br><span class="line">#time.mktime(结构化时间)</span><br><span class="line">&gt;&gt;&gt;time_tuple = time.localtime(1500000000)</span><br><span class="line">&gt;&gt;&gt;time.mktime(time_tuple)</span><br><span class="line">1500000000.0</span><br><span class="line"></span><br><span class="line">#结构化时间--&gt;字符串时间</span><br><span class="line">#time.strftime(&quot;格式定义&quot;,&quot;结构化时间&quot;)  结构化时间参数若不传，则现实当前时间</span><br><span class="line">&gt;&gt;&gt;time.strftime(&quot;%Y-%m-%d %X&quot;)</span><br><span class="line">&apos;2017-07-24 14:55:36&apos;</span><br><span class="line">&gt;&gt;&gt;time.strftime(&quot;%Y-%m-%d&quot;,time.localtime(1500000000))</span><br><span class="line">&apos;2017-07-14&apos;</span><br><span class="line"></span><br><span class="line">#字符串时间--&gt;结构化时间</span><br><span class="line">#time.strptime(时间字符串,字符串对应格式)</span><br><span class="line">&gt;&gt;&gt;time.strptime(&quot;2017-03-16&quot;,&quot;%Y-%m-%d&quot;)</span><br><span class="line">time.struct_time(tm_year=2017, tm_mon=3, tm_mday=16, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=75, tm_isdst=-1)</span><br><span class="line">&gt;&gt;&gt;time.strptime(&quot;07/24/2017&quot;,&quot;%m/%d/%Y&quot;)</span><br><span class="line">time.struct_time(tm_year=2017, tm_mon=7, tm_mday=24, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=205, tm_isdst=-1)</span><br></pre></td></tr></table></figure><blockquote><p>asctime </p></blockquote><p><img src="https://images2015.cnblogs.com/blog/827651/201707/827651-20170724144235883-1963884021.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#结构化时间 --&gt; %a %b %d %H:%M:%S %Y串</span><br><span class="line">#time.asctime(结构化时间) 如果不传参数，直接返回当前时间的格式化串</span><br><span class="line">&gt;&gt;&gt;time.asctime(time.localtime(1500000000))</span><br><span class="line">&apos;Fri Jul 14 10:40:00 2017&apos;</span><br><span class="line">&gt;&gt;&gt;time.asctime()</span><br><span class="line">&apos;Mon Jul 24 15:18:33 2017&apos;</span><br><span class="line"></span><br><span class="line">#时间戳 --&gt; %a %d %d %H:%M:%S %Y串</span><br><span class="line">#time.ctime(时间戳)  如果不传参数，直接返回当前时间的格式化串</span><br><span class="line">&gt;&gt;&gt;time.ctime()</span><br><span class="line">&apos;Mon Jul 24 15:19:07 2017&apos;</span><br><span class="line">&gt;&gt;&gt;time.ctime(1500000000)</span><br><span class="line">&apos;Fri Jul 14 10:40:00 2017&apos;</span><br></pre></td></tr></table></figure><blockquote><h3 id="计算时间差"><a href="#计算时间差" class="headerlink" title="计算时间差"></a>计算时间差</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">true_time=time.mktime(time.strptime(&apos;2017-09-11 08:30:00&apos;,&apos;%Y-%m-%d %H:%M:%S&apos;))</span><br><span class="line">time_now=time.mktime(time.strptime(&apos;2017-09-12 11:00:00&apos;,&apos;%Y-%m-%d %H:%M:%S&apos;))</span><br><span class="line">dif_time=time_now-true_time</span><br><span class="line">struct_time=time.gmtime(dif_time)</span><br><span class="line">print(&apos;过去了%d年%d月%d天%d小时%d分钟%d秒&apos;%(struct_time.tm_year-1970,struct_time.tm_mon-1,</span><br><span class="line">                                       struct_time.tm_mday-1,struct_time.tm_hour,</span><br><span class="line">                                       struct_time.tm_min,struct_time.tm_sec))</span><br></pre></td></tr></table></figure><h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">#随机小数</span><br><span class="line">random.random()     </span><br><span class="line"> # 大于0且小于1之间的小数 0.7664338663654585</span><br><span class="line">random.uniform(1,3)</span><br><span class="line">#大于1小于3的小数 1.6270147180533838</span><br><span class="line"></span><br><span class="line">#随机整数</span><br><span class="line">random.randint(1,5)  # 大于等于1且小于等于5之间的整数</span><br><span class="line">random.randrange(1,10,2) # 大于等于1且小于10之间的奇数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#随机选择一个返回</span><br><span class="line">random.choice([1,&apos;23&apos;,[4,5]])  </span><br><span class="line"># #1或者23或者[4,5]</span><br><span class="line"></span><br><span class="line">#随机选择多个返回，返回的个数为函数的第二个参数</span><br><span class="line">random.sample([1,&apos;23&apos;,[4,5]],2)</span><br><span class="line"># #列表元素任意2个组合 [[4, 5], &apos;23&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#打乱列表顺序</span><br><span class="line">item=[1,3,5,7,9]</span><br><span class="line">random.shuffle(item) </span><br><span class="line"># 打乱次序</span><br><span class="line">item # [5, 1, 3, 7, 9]</span><br><span class="line"></span><br><span class="line">random.shuffle(item)</span><br><span class="line"># item [5, 9, 7, 1, 3]</span><br></pre></td></tr></table></figure><blockquote><p>生成随机验证码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">def v_code():</span><br><span class="line"></span><br><span class="line">    code = &apos;&apos;</span><br><span class="line">    for i in range(5):</span><br><span class="line"></span><br><span class="line">        num=random.randint(0,9)</span><br><span class="line">        alf=chr(random.randint(65,90))</span><br><span class="line">        add=random.choice([num,alf])</span><br><span class="line">        code=&quot;&quot;.join([code,str(add)])</span><br><span class="line"></span><br><span class="line">    return code</span><br><span class="line"></span><br><span class="line">print(v_code())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P019_01_python常用模块一</title>
      <link href="/2018/07/28/P019_01_python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%80/"/>
      <url>/2018/07/28/P019_01_python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h3><ul><li>collections(不太重要)</li><li>时间模块</li><li>random(随机相关)</li><li>os模块(和操作系统打交道的)</li><li>sys模块(和python解释器打交道的)</li><li>序列化模块(非常重要的)</li><li>re模块(前面已经用了)</li></ul><h3 id="collections模块"><a href="#collections模块" class="headerlink" title="collections模块"></a>collections模块</h3><ol><li>namedtuple: 生成可以使用名字来访问元素内容的tuple</li><li>deque: 双端队列，可以快速的从另外一侧追加和推出对象</li><li>Counter: 计数器，主要用来计数</li><li>OrderedDict: 有序字典</li><li>defaultdict: 带有默认值的字典</li></ol><h4 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h4><p>我们知道tuple可以表示不变集合，例如，一个点的二维坐标就可以表示成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = (1, 2)</span><br></pre></td></tr></table></figure><p>但是，看到(1, 2)，很难看出这个tuple是用来表示一个坐标的。</p><p>这时，namedtuple就派上了用场：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from collections import namedtuple</span><br><span class="line">Point = namedtuple(&apos;Point&apos;, [&apos;x&apos;, &apos;y&apos;])</span><br><span class="line">p = Point(1, 2)</span><br><span class="line">p.x # 1</span><br><span class="line">p.y # 2</span><br></pre></td></tr></table></figure><blockquote><h3 id="万能公式：-namedtuple-‘名称’-属性list"><a href="#万能公式：-namedtuple-‘名称’-属性list" class="headerlink" title="万能公式： namedtuple(‘名称’, [属性list]):"></a>万能公式： namedtuple(‘名称’, [属性list]):</h3></blockquote><p>类似的，如果要用坐标和半径表示一个圆，也可以用namedtuple定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Circle = namedtuple(&apos;Circle&apos;, [&apos;x&apos;, &apos;y&apos;, &apos;r&apos;])</span><br></pre></td></tr></table></figure><blockquote><p>扑克牌功能</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from collections import namedtuple</span><br><span class="line"># namedtuple(&apos;扑克牌&apos;, [&apos;花色&apos;, &apos;数字&apos;])</span><br><span class="line">Card = namedtuple(&apos;Card&apos;, [&apos;color&apos;, &apos;num&apos;])</span><br><span class="line">c = Card(&apos;红桃&apos;,&apos;2&apos;)</span><br></pre></td></tr></table></figure><h4 id="queue-队列-FIFO"><a href="#queue-队列-FIFO" class="headerlink" title="queue 队列 FIFO"></a>queue 队列 FIFO</h4><blockquote><p>first in first out</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line">q.put(10)</span><br><span class="line">q.put(1)</span><br><span class="line">q.put(12)</span><br><span class="line"></span><br><span class="line">print(q.get()) # 10</span><br><span class="line">print(q.get()) # 1</span><br><span class="line">print(q.get()) # 12</span><br><span class="line">print(q.get()) # 阻塞 队列里只有3个元素 再次进行取值就会阻塞在这里</span><br><span class="line">print(q.get()) # 阻塞 队列里只有3个元素 再次进行取值就会阻塞在这里</span><br><span class="line"></span><br><span class="line">print(q.qsize()) # 查看队列里元素个数 取一个少一个</span><br></pre></td></tr></table></figure><p>例如电影票200张但是500个人买，前200人顺利买了票，后面的只能停在哪里等待票</p><h4 id="deque-双端队列"><a href="#deque-双端队列" class="headerlink" title="deque 双端队列"></a>deque 双端队列</h4><p>使用list存储数据时，按索引访问元素很快，但是插入和删除元素就很慢了，因为list是线性存储，数据量大的时候，插入和删除效率很低。</p><blockquote><p>deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line"></span><br><span class="line">dq = deque([1,2])</span><br><span class="line">dq.append(&apos;a&apos;) # 从后面放数据 [1,2,&apos;a&apos;]</span><br><span class="line">dq.appendleft(&apos;b&apos;) # 从前面放数据 [&apos;b&apos;,1,2,&apos;a&apos;]</span><br><span class="line">dq.insert(2,3)  # 根据索引放数据 [&apos;b&apos;,&apos;1&apos;,&apos;3&apos;,&apos;2&apos;,&apos;a&apos;]</span><br><span class="line">print(dq.pop()) # 从后面取数据 a</span><br><span class="line">print(dq.pop()) # 从后面取数据 2</span><br><span class="line">print(dq.popleft()) # 从前面取数据 b</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><h4 id="deque除了实现list的append-和pop-外，还支持appendleft-和popleft-，这样就可以非常高效地往头部添加或删除元素。"><a href="#deque除了实现list的append-和pop-外，还支持appendleft-和popleft-，这样就可以非常高效地往头部添加或删除元素。" class="headerlink" title="deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素。"></a>deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素。</h4></blockquote><h4 id="OrderedDict-有序字典"><a href="#OrderedDict-有序字典" class="headerlink" title="OrderedDict 有序字典"></a>OrderedDict 有序字典</h4><blockquote><p>使用dict时，Key是无序的。在对dict做迭代时，我们无法确定Key的顺序。</p></blockquote><blockquote><p>如果要保持Key的顺序，可以用OrderedDict：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line">d = dict([(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)])</span><br><span class="line"># dict的Key是无序的 &#123;&apos;a&apos;: 1, &apos;c&apos;: 3, &apos;b&apos;: 2&#125;</span><br><span class="line"></span><br><span class="line">od = OrderedDict([(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)])</span><br><span class="line">od</span><br><span class="line"># OrderedDict的Key是有序的 OrderedDict([(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)])</span><br></pre></td></tr></table></figure><blockquote><p>注意，OrderedDict的Key会按照插入的顺序排列，不是Key本身排序：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">od = OrderedDict()</span><br><span class="line">od[&apos;z&apos;] = 1</span><br><span class="line">od[&apos;y&apos;] = 2</span><br><span class="line">od[&apos;x&apos;] = 3</span><br><span class="line">od.keys() # 按照插入的Key的顺序返回 [&apos;z&apos;, &apos;y&apos;, &apos;x&apos;]</span><br></pre></td></tr></table></figure><h4 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h4><blockquote><p>有如下值集合 [11,22,33,44,55,66,77,88,99,90…]，将所有大于 66 的值保存至字典的第一个key中，将小于 66 的值保存至第二个key的值中。</p></blockquote><blockquote><p>即： {‘k1’: 大于66 , ‘k2’: 小于66}</p></blockquote><p>原生字典解决方法:很麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">values = [11, 22, 33,44,55,66,77,88,99,90]</span><br><span class="line"></span><br><span class="line">my_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">for value in  values:</span><br><span class="line">    if value&gt;66:</span><br><span class="line">        if my_dict.has_key(&apos;k1&apos;):</span><br><span class="line">            my_dict[&apos;k1&apos;].append(value)</span><br><span class="line">        else:</span><br><span class="line">            my_dict[&apos;k1&apos;] = [value]</span><br><span class="line">    else:</span><br><span class="line">        if my_dict.has_key(&apos;k2&apos;):</span><br><span class="line">            my_dict[&apos;k2&apos;].append(value)</span><br><span class="line">        else:</span><br><span class="line">            my_dict[&apos;k2&apos;] = [value]</span><br></pre></td></tr></table></figure><p>defaultdict字典解决方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line"></span><br><span class="line">values = [11, 22, 33,44,55,66,77,88,99,90]</span><br><span class="line"></span><br><span class="line">my_dict = defaultdict(list) # key的默认值为列表</span><br><span class="line"></span><br><span class="line">for value in  values:</span><br><span class="line">    if value&gt;66:</span><br><span class="line">        my_dict[&apos;k1&apos;].append(value)</span><br><span class="line">    else:</span><br><span class="line">        my_dict[&apos;k2&apos;].append(value)</span><br></pre></td></tr></table></figure><blockquote><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3></blockquote><ul><li>defaultdict()的参数必须是callable()的 </li><li>如果默认值为数字5就不能写defaultdict(5)</li><li>你可以使用lambda表达式来实现</li></ul><blockquote><p>使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line">dd = defaultdict(lambda: &apos;N/A&apos;)</span><br><span class="line">dd[&apos;key1&apos;] = &apos;abc&apos;</span><br><span class="line">dd[&apos;key1&apos;] # key1存在 &apos;abc&apos;</span><br><span class="line">dd[&apos;key2&apos;] # key2不存在，返回默认值 &apos;N/A&apos;</span><br></pre></td></tr></table></figure><h4 id="Counter-计数用的最没用的一个知识点"><a href="#Counter-计数用的最没用的一个知识点" class="headerlink" title="Counter(计数用的最没用的一个知识点)"></a>Counter(计数用的最没用的一个知识点)</h4><blockquote><p>Counter类的目的是用来跟踪值出现的次数。它是一个无序的容器类型，以字典的键值对形式存储，其中元素作为key，其计数作为value。计数值可以是任意的Interger（包括0和负数）。Counter类和其他语言的bags或multisets很相似。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = Counter(&apos;abcdeabcdabcaba&apos;)</span><br><span class="line">print c</span><br><span class="line">输出：Counter(&#123;&apos;a&apos;: 5, &apos;b&apos;: 4, &apos;c&apos;: 3, &apos;d&apos;: 2, &apos;e&apos;: 1&#125;)</span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/Eva-J/articles/7291842.html" target="_blank" rel="noopener">其他详细内容</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P018_01_python认识正则表达式</title>
      <link href="/2018/07/28/P018_01_python%E8%AE%A4%E8%AF%86%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/07/28/P018_01_python%E8%AE%A4%E8%AF%86%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><blockquote><p>正则是通用的(几乎所有编程语言都适用的一个规则)</p></blockquote><p>python里想使用正则只能引入re模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br></pre></td></tr></table></figure><p>一个推荐的工具网站</p><p><a href="http://tool.chinaz.com/regex" target="_blank" rel="noopener">正则工具网站</a></p><p>具体要记住的规则请参考我之前写的<br>[难以启齿的正则]文章</p><p>知识点总结的博客</p><p><a href="http://www.cnblogs.com/Eva-J/articles/7228075.html" target="_blank" rel="noopener">Eva_J</a></p><blockquote><p>匹配手机号的例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import  re</span><br><span class="line">phone_num = input(&apos;请输入手机号&apos;)</span><br><span class="line">if re.match(&apos;^(13|14|15|18)[0-9]&#123;9&#125;$&apos;,phone_num):</span><br><span class="line">    print(&apos;合法&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;非法&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>字符串中r的应用</p></blockquote><p>原样匹配(取消「\」的转义)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正则 \\n 匹配 换行\n</span><br></pre></td></tr></table></figure><blockquote><p>贪婪匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;.*&gt;  正则</span><br><span class="line"></span><br><span class="line">&lt;script&gt;....&lt;/script&gt;</span><br><span class="line"># 匹配结果</span><br><span class="line">&lt;script&gt;....&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>惰性匹配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;.*?&gt;  正则</span><br><span class="line">&lt;script&gt;....&lt;/script&gt;</span><br><span class="line"># 匹配结果</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="几个常用的贪婪匹配"><a href="#几个常用的贪婪匹配" class="headerlink" title="几个常用的贪婪匹配"></a>几个常用的贪婪匹配</h4><ul><li>*?重复任意次，但尽可能少的重复</li><li>+?重复1次或更多次，但尽可能少的重复</li><li>??重复0次或1次，但尽可能少的重复</li><li>{n,m}?重复n-m次，但尽可能少的重复</li><li>{n,}?重复n次以上，但尽可能少的重复</li></ul><h4 id="的用法"><a href="#的用法" class="headerlink" title=".*?的用法"></a>.*?的用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. 任意字符</span><br><span class="line">* 取0至无限长度</span><br><span class="line">? 非贪婪模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例： .*?x</span><br><span class="line">取前面任意的长度但是碰见x就结束了</span><br></pre></td></tr></table></figure><h3 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h3><p>相关重要方法:都是从一个字符串中匹配你要的规则</p><ul><li>findall</li><li>search</li><li>match</li></ul><blockquote><p>findall 返回所有匹配规则的元素放入到列表里</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"># 匹配所有a</span><br><span class="line">res = re.findall(&apos;a&apos;,&apos;eva egon yuan&apos;)</span><br><span class="line">print(res) # [&apos;a&apos;,&apos;a&apos;]</span><br><span class="line"></span><br><span class="line">res = re.findall(&apos;[a-z]+&apos;,&apos;eva egon yuan&apos;)</span><br><span class="line">print(res) # [&apos;eva&apos;,&apos;egon&apos;,&apos;yuan&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>search </p></blockquote><ul><li>从前往后找,匹配到一个就返回</li><li>而且需要你调用group()才能返回结果</li><li>但如果没有找到结果，那么返回的是None,调用group会爆错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">res = re.search(&apos;a&apos;,&apos;eva egon yuan&apos;)</span><br><span class="line">print(res.group()) #  &apos;a&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = re.search(&apos;j&apos;,&apos;eva egon yuan&apos;)</span><br><span class="line">print(res) # None</span><br><span class="line">print(res.group()) #  None.group() 报错 报错  </span><br><span class="line"></span><br><span class="line">正确的写法</span><br><span class="line"></span><br><span class="line">res = re.search(&apos;j&apos;,&apos;eva egon yuan&apos;)</span><br><span class="line">if res:</span><br><span class="line">    print(res.group())</span><br></pre></td></tr></table></figure><blockquote><p>match 用法和search是一样的</p></blockquote><ul><li>match是从头开始匹配，如果正则从头开始匹配上，就返回一个变量</li><li>匹配的内容调用group才能显示</li><li>如果没匹配上，就返回None,调用group报错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">res = re.match(&apos;e&apos;,&apos;eva egon yuan&apos;)</span><br><span class="line">if res:</span><br><span class="line">    print(res.group()) </span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">&apos;e&apos;</span><br><span class="line"></span><br><span class="line">res = re.match(&apos;a&apos;,&apos;eva egon yuan&apos;)</span><br><span class="line">if res:</span><br><span class="line">    print(res.group()) </span><br><span class="line"></span><br><span class="line">结果： 什么也不打印</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = re.match(&apos;[a-z]&apos;,&apos;eva egon yuan&apos;)</span><br><span class="line">if res:</span><br><span class="line">    print(res.group()) </span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">&apos;eva&apos;</span><br></pre></td></tr></table></figure><blockquote><p>split</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res = re.split(&apos;[ab]&apos;,&apos;abcd&apos;)</span><br><span class="line"># 先按a分割得到 &apos;&apos;和&apos;bcd&apos; 再按b分割 &apos;&apos;,&apos;&apos;,&apos;cd&apos;</span><br><span class="line">print(res)</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">[&apos;&apos;,&apos;&apos;,&apos;cd&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>sub</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res = re.sub(&apos;\d&apos;, &apos;H&apos;, &apos;eva3egon4yuan4&apos;, 1)</span><br><span class="line">#将数字替换成&apos;H&apos;，参数1表示只替换1个</span><br><span class="line">print(res) #evaHegon4yuan4</span><br><span class="line"></span><br><span class="line">res = re.sub(&apos;\d&apos;, &apos;H&apos;, &apos;eva3egon4yuan4&apos;)</span><br><span class="line">print(res) #evaHegonHyuanH</span><br></pre></td></tr></table></figure><blockquote><p>subn</p></blockquote><p>返回元组(替换的结果,替换了多少次)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = re.subn(&apos;\d&apos;, &apos;H&apos;, &apos;eva3egon4yuan4&apos;)</span><br><span class="line"># 将数字替换成&apos;H&apos;，返回元组(替换的结果,替换了多少次)</span><br><span class="line">print(res) # (&apos;evaHegonHyuanH&apos;, 3)</span><br></pre></td></tr></table></figure><blockquote><p>compile</p></blockquote><ul><li>将正则表达式编译成为一个 正则表达式对象</li><li>正则表达式对象调用正则方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = re.compile(&apos;\d&#123;3&#125;&apos;)  #将正则表达式编译成为一个 正则表达式对象，规则要匹配的是3个数字</span><br><span class="line">res = obj.search(&apos;abc123eeee&apos;) #正则表达式对象调用search，参数为待匹配的字符串</span><br><span class="line">print(res.group())  </span><br><span class="line">#结果 ： 123</span><br></pre></td></tr></table></figure><blockquote><p>finditer</p></blockquote><ul><li>返回的是一个迭代器</li><li>迭代元素要调用group才能查看</li></ul><p>使用它就是为了节省内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ret = re.finditer(&apos;\d&apos;, &apos;ds3sy4784a&apos;)   #finditer返回一个存放匹配结果的迭代器</span><br><span class="line">print(ret)  # &lt;callable_iterator object at 0x10195f940&gt;</span><br><span class="line">print(next(ret).group())  #查看第一个结果</span><br><span class="line">print(next(ret).group())  #查看第二个结果</span><br><span class="line">print([i.group() for i in ret])  #查看剩余的左右结果</span><br></pre></td></tr></table></figure><h4 id="为什么search-match要通过group才可以获取结果"><a href="#为什么search-match要通过group才可以获取结果" class="headerlink" title="为什么search match要通过group才可以获取结果"></a>为什么search match要通过group才可以获取结果</h4><p>分组的概念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = re.search(&apos;^[1-9](\d&#123;14&#125;)(\d&#123;2&#125;[0-9x]?$&apos;,&apos;110105199912122277&apos;)</span><br><span class="line"></span><br><span class="line">print(res.group())</span><br><span class="line">print(res.group(1))</span><br><span class="line">print(res.group(2))</span><br></pre></td></tr></table></figure><h4 id="注意点「-」的第三种用法"><a href="#注意点「-」的第三种用法" class="headerlink" title="注意点「?」的第三种用法"></a>注意点「?」的第三种用法</h4><ol><li>在量词的地方表示匹配0次或一次</li><li>在量词后面表示惰性匹配的标志</li><li>放到分组的第一个代表取消分组优先</li></ol><blockquote><p>引入findall没有 group的概念所有它就优先匹配「()」组里的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">ret = re.findall(&apos;www.(baidu|oldboy).com&apos;, &apos;www.oldboy.com&apos;)</span><br><span class="line">print(ret)  # [&apos;oldboy&apos;]     这是因为findall会优先把匹配结果组里内容返回,如果想要匹配结果,取消权限即可</span><br><span class="line"></span><br><span class="line">ret = re.findall(&apos;www.(?:baidu|oldboy).com&apos;, &apos;www.oldboy.com&apos;)</span><br><span class="line">print(ret)  # [&apos;www.oldboy.com&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>split的优先级查询</p></blockquote><ul><li>split也没有分组的机制，所以如果有分组就分组优先</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ret=re.split(&quot;\d+&quot;,&quot;eva3egon4yuan&quot;)</span><br><span class="line">print(ret) #结果 ： [&apos;eva&apos;, &apos;egon&apos;, &apos;yuan&apos;]</span><br><span class="line"></span><br><span class="line">ret=re.split(&quot;(\d+)&quot;,&quot;eva3egon4yuan&quot;)</span><br><span class="line">print(ret) #结果 ： [&apos;eva&apos;, &apos;3&apos;, &apos;egon&apos;, &apos;4&apos;, &apos;yuan&apos;]</span><br><span class="line"></span><br><span class="line">#在匹配部分加上（）之后所切出的结果是不同的，</span><br><span class="line">#没有（）的没有保留所匹配的项，但是有（）的却能够保留了匹配的项，</span><br><span class="line">#这个在某些需要保留匹配部分的使用过程是非常重要的。</span><br></pre></td></tr></table></figure><h4 id="其他规则"><a href="#其他规则" class="headerlink" title="其他规则"></a>其他规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">re.I(IGNORECASE)忽略大小写，括号内是完整的写法</span><br><span class="line">re.M(MULTILINE)多行模式，改变^和$的行为</span><br><span class="line">re.S(DOTALL)点可以匹配任意字符，包括换行符</span><br><span class="line">re.L(LOCALE)做本地化识别的匹配，表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境，不推荐使用</span><br><span class="line">re.U(UNICODE) 使用\w \W \s \S \d \D使用取决于unicode定义的字符属性。在python3中默认使用该flag</span><br><span class="line">re.X(VERBOSE)冗长模式，该模式下pattern字符串可以是多行的，忽略空白字符，并可以添加注释</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P017_02_python算法初识</title>
      <link href="/2018/07/28/P017_02_python%E7%AE%97%E6%B3%95%E5%88%9D%E8%AF%86/"/>
      <url>/2018/07/28/P017_02_python%E7%AE%97%E6%B3%95%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>先看案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">99*13 =?   (100-1)*13</span><br><span class="line">17*13 =?   (13+4)*13 </span><br><span class="line">[1,5,2,66,22,33,21,110] </span><br><span class="line">查找</span><br><span class="line">排序</span><br><span class="line">最短路径</span><br></pre></td></tr></table></figure><h4 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h4><blockquote><p>要点：</p></blockquote><ul><li>必须处理有序的列表</li><li></li></ul><p>用最快方式找到66的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [2,3,4,10,13,21,24,32,44,51,66,70,80,91,102,188]</span><br></pre></td></tr></table></figure><blockquote><p>以后更新</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P017_01_python递归</title>
      <link href="/2018/07/28/P017_01_python%E9%80%92%E5%BD%92/"/>
      <url>/2018/07/28/P017_01_python%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>什么是递归：在函数中调用自身函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 死循环</span><br><span class="line">while 1:</span><br><span class="line">    print(0)</span><br><span class="line"></span><br><span class="line"># 如果用函数呢？</span><br><span class="line">def aa():</span><br><span class="line">    print(&apos;从前有座山&apos;)</span><br><span class="line">    aa()</span><br><span class="line"></span><br><span class="line">aa() #执行一部分后会报错</span><br><span class="line">RecursionError: maximum recursion depth exceeded while calling a Python object</span><br><span class="line"># 超过递归最大深度--因为一直的开辟空间函数没有结束</span><br></pre></td></tr></table></figure><p>测试递归深度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = 0</span><br><span class="line">def xx():</span><br><span class="line">    global n</span><br><span class="line">    n+=1</span><br><span class="line">    print(n  )</span><br><span class="line">    xx()</span><br><span class="line"></span><br><span class="line">xx()</span><br><span class="line"></span><br><span class="line"># 打印到998</span><br></pre></td></tr></table></figure><blockquote><p>递归的默认深度是997/998是python从内存角度出发做的限制</p></blockquote><p>递归的深度是可以修改的，但是即使设置的过大依然要由硬件决定(我的hp能达到3222)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.setrecursionlimit(10000000)</span><br><span class="line">n = 0</span><br><span class="line">def xx():</span><br><span class="line">    global n</span><br><span class="line">    n+=1</span><br><span class="line">    print(n  )</span><br><span class="line">    xx()</span><br><span class="line"></span><br><span class="line">xx()</span><br></pre></td></tr></table></figure><blockquote><h4 id="如果你说需要1000次递归才能实现"><a href="#如果你说需要1000次递归才能实现" class="headerlink" title="如果你说需要1000次递归才能实现"></a>如果你说需要1000次递归才能实现</h4></blockquote><p>我建议不要用递归，因为要1000次才能实现的需求说明递归不合适</p><h4 id="递归的缺点"><a href="#递归的缺点" class="headerlink" title="递归的缺点"></a>递归的缺点</h4><ul><li>如果递归次数过多，就不适合用递归</li><li>递归的缺点：占内存</li><li>递归的优点：会让代码变简单</li></ul><h4 id="递归调用的定义"><a href="#递归调用的定义" class="headerlink" title="递归调用的定义"></a>递归调用的定义</h4><blockquote><p>函数嵌套调用的一种特殊形式，函数在调用时，直接或间接调用了自身，就是递归调用</p></blockquote><h4 id="递归分为两个阶段："><a href="#递归分为两个阶段：" class="headerlink" title="递归分为两个阶段："></a>递归分为两个阶段：</h4><ul><li>递推</li><li>回溯</li></ul><blockquote><p>经典问题==&gt;阶乘</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def fn(n):</span><br><span class="line">    if (n == 1):</span><br><span class="line">        return 1;</span><br><span class="line">    else:</span><br><span class="line">        return fn(n-1) * n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = fn(5)</span><br><span class="line">print(a) # 120</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P016_03_python匿名函数</title>
      <link href="/2018/07/28/P016_03_python%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
      <url>/2018/07/28/P016_03_python%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>为实现很简单需求而设计的一句话函数</p><h4 id="匿名函数使用规范"><a href="#匿名函数使用规范" class="headerlink" title="匿名函数使用规范"></a>匿名函数使用规范</h4><ul><li>匿名函数关键字是lambda</li><li>lambda写在最前面其后跟参数，然后以「:」为分割,最后实际的逻辑也就是最后的结果</li><li>必须一行结束</li><li>多个参数用「,」分开</li></ul><blockquote><p>万能公式  lambda 参数 : 返回值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xxx = lambda n:n*n</span><br><span class="line"></span><br><span class="line">#两个参数</span><br><span class="line">xxx = lambda m,n:m*n</span><br></pre></td></tr></table></figure><blockquote><p>求字段里值最大的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xx = &#123;&apos;k1&apos;:10,&apos;k2&apos;:20,&apos;k3&apos;:30&#125;</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def fn(key):</span><br><span class="line">    return xx[key]</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">max(xx,key=lambda k:xx[k])</span><br></pre></td></tr></table></figure><h4 id="容易拿分的面试题"><a href="#容易拿分的面试题" class="headerlink" title="容易拿分的面试题"></a>容易拿分的面试题</h4><blockquote><p>1.问执行结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = lambda p:p*2</span><br><span class="line">t = lambda p:p*3</span><br><span class="line"></span><br><span class="line">x = 2</span><br><span class="line">x = d(x) # 4</span><br><span class="line">x = t(x) # 12</span><br><span class="line">x = d(x) # 24</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><blockquote><p>2.有俩元组((‘a’),(‘b’)),((‘c’),(‘d’))如何转换为列表[{‘a’:’c’},{‘b’:’d’}]</p></blockquote><p>提示zip拉链方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># step001 先用zip把格式转换</span><br><span class="line">a = ((&apos;a&apos;),(&apos;b&apos;))</span><br><span class="line">b = ((&apos;c&apos;),(&apos;d&apos;))</span><br><span class="line"></span><br><span class="line">res = zip(a,b) # 此时是一个生成器</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">for i in res:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">(&apos;a&apos;,&apos;c&apos;) </span><br><span class="line">(&apos;b&apos;:&apos;d&apos;)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"># step002 遍历这个生成器 将元组变为字典</span><br><span class="line"># filter/map/sorted/max/min</span><br><span class="line"></span><br><span class="line"># 分析出：明显是用map</span><br><span class="line">def func(tup):</span><br><span class="line">    return &#123;tup[0]:tup[1]&#125;</span><br><span class="line">res = map(func,res)</span><br><span class="line"></span><br><span class="line"># step003 优化用lambda</span><br><span class="line"></span><br><span class="line">res = map(lambda tup:&#123;tup[0]:tup[1]&#125;,res)</span><br><span class="line">print(list(res))</span><br><span class="line"></span><br><span class="line"># step004 各种优化</span><br><span class="line">res = map(lambda tup:&#123;tup[0]:tup[1]&#125;,zip(a,b))</span><br><span class="line"></span><br><span class="line">res = list(map(lambda tup:&#123;tup[0]:tup[1]&#125;,zip(a,b)))</span><br></pre></td></tr></table></figure><blockquote><p>3.刁钻面试题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def xx():</span><br><span class="line">    return (lambda x:i*x for i in range(4))</span><br><span class="line"></span><br><span class="line">[m(2) for m in xx()]</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">[0,2,4,6]</span><br><span class="line"></span><br><span class="line">解析</span><br><span class="line">先看xx函数</span><br><span class="line">def xx():</span><br><span class="line">    return (lambda x:0*x,lambda x:1*x,lambda x:2*x,lambda x:3*x)</span><br><span class="line">[m(2) for m in xx()]</span><br><span class="line"></span><br><span class="line">m(2)实际就是个函数 并传递参数2带入。。。</span><br><span class="line">[0,2,4,6]</span><br></pre></td></tr></table></figure><h4 id="推荐一个流程图的工具ProcessOn"><a href="#推荐一个流程图的工具ProcessOn" class="headerlink" title="推荐一个流程图的工具ProcessOn"></a>推荐一个流程图的工具ProcessOn</h4>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P016_02_python_memoryview用途</title>
      <link href="/2018/07/27/P016_02_python_memoryview%E7%94%A8%E9%80%94/"/>
      <url>/2018/07/27/P016_02_python_memoryview%E7%94%A8%E9%80%94/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="注意：非重点知识点-几乎用不到"><a href="#注意：非重点知识点-几乎用不到" class="headerlink" title="注意：非重点知识点(几乎用不到)"></a>注意：非重点知识点(几乎用不到)</h2></blockquote><h3 id="memoryview"><a href="#memoryview" class="headerlink" title="memoryview"></a>memoryview</h3><ul><li>bytearray是可变(mutable)的字节序列，相对于Python2中的str，但str是不可变(immutable)的。</li><li>在Python3中由于str默认是unicode编码，所以只有通过bytearray才能按字节访问。</li></ul><blockquote><p>memoryview为支持buffer protocol[1,2]的对象提供了按字节的内存访问接口，好处是不会有内存拷贝。</p></blockquote><p>默认str和bytearray支持buffer procotol。</p><h4 id="下面两种行为的对比："><a href="#下面两种行为的对比：" class="headerlink" title="下面两种行为的对比："></a>下面两种行为的对比：</h4><blockquote><p>简单点就是，str和bytearray的切片操作会产生新的切片str和bytearry并拷贝数据，使用memoryview之后不会。</p></blockquote><h5 id="1-不使用memoryview"><a href="#1-不使用memoryview" class="headerlink" title="1.不使用memoryview"></a>1.不使用memoryview</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a = &apos;aaaaaa&apos;</span><br><span class="line">&gt;&gt; b = a[:2]    # 会产生新的字符串</span><br><span class="line"></span><br><span class="line">&gt;&gt; a = bytearray(&apos;aaaaaa&apos;)</span><br><span class="line">&gt;&gt; b = a[:2]    # 会产生新的bytearray</span><br><span class="line">&gt;&gt; b[:2] = &apos;bb&apos; # 对b的改动不影响a</span><br><span class="line">&gt;&gt; a</span><br><span class="line">bytearray(b&apos;aaaaaa&apos;)</span><br><span class="line">&gt;&gt; b</span><br><span class="line">bytearray(b&apos;bb&apos;)</span><br></pre></td></tr></table></figure><h5 id="2-使用memoryview"><a href="#2-使用memoryview" class="headerlink" title="2.使用memoryview"></a>2.使用memoryview</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; a = &apos;aaaaaa&apos;</span><br><span class="line">&gt;&gt; ma = memoryview(a)</span><br><span class="line">&gt;&gt; ma.readonly  # 只读的memoryview</span><br><span class="line">True</span><br><span class="line">&gt;&gt; mb = ma[:2]  # 不会产生新的字符串</span><br><span class="line"></span><br><span class="line">&gt;&gt; a = bytearray(&apos;aaaaaa&apos;)</span><br><span class="line">&gt;&gt; ma = memoryview(a)</span><br><span class="line">&gt;&gt; ma.readonly  # 可写的memoryview</span><br><span class="line">False</span><br><span class="line">&gt;&gt; mb = ma[:2]      # 不会会产生新的bytearray</span><br><span class="line">&gt;&gt; mb[:2] = &apos;bb&apos;    # 对mb的改动就是对ma的改动</span><br><span class="line">&gt;&gt; mb.tobytes()</span><br><span class="line">&apos;bb&apos;</span><br><span class="line">&gt;&gt; ma.tobytes()</span><br><span class="line">&apos;bbaaaa&apos;</span><br></pre></td></tr></table></figure><h4 id="我的使用场景是网络程序中socket接收和接收数据的解析："><a href="#我的使用场景是网络程序中socket接收和接收数据的解析：" class="headerlink" title="我的使用场景是网络程序中socket接收和接收数据的解析："></a>我的使用场景是网络程序中socket接收和接收数据的解析：</h4><ol><li>使用memoryview之前的sock接收代码简化如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def read(size):</span><br><span class="line">    ret = &apos;&apos; </span><br><span class="line">    remain = size</span><br><span class="line">    while True:</span><br><span class="line">        data = sock.recv(remain)</span><br><span class="line">        ret += data     # 这里不断会有新的str对象产生</span><br><span class="line">        if len(data) == remain:</span><br><span class="line">            break</span><br><span class="line">        remain -= len(data)</span><br><span class="line">    return ret</span><br></pre></td></tr></table></figure><ol start="2"><li>使用meoryview之后，避免了不断的字符串拼接和新对象的产生</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def read(size):</span><br><span class="line">    ret = memoryview(bytearray(size)) </span><br><span class="line">    remain = size</span><br><span class="line">    while True:</span><br><span class="line">        data = sock.recv(remain)</span><br><span class="line">        length = len(data)</span><br><span class="line">        ret[size - remain: size - remain + length] = data</span><br><span class="line">        if len(data) == remain:</span><br><span class="line">            break</span><br><span class="line">        remain -= len(data)</span><br><span class="line">    return ret</span><br></pre></td></tr></table></figure><blockquote><p>返回memoryview还有一个优点，在使用struct进行unpack解析时可以直接接收memoryview对象，非常高效（避免大的str进行分段解析时大量的切片操作）。</p></blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv = memoryview(&apos;\x00\x01\x02\x00\x00\xff...&apos;)</span><br><span class="line">type, len = struct.unpack(&apos;!BI&apos;, mv[:5])</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P016_01_python内置函数收尾</title>
      <link href="/2018/07/26/P016_01_python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E6%94%B6%E5%B0%BE/"/>
      <url>/2018/07/26/P016_01_python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E6%94%B6%E5%B0%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="python中一个让你懵的面试题"><a href="#python中一个让你懵的面试题" class="headerlink" title="python中一个让你懵的面试题"></a>python中一个让你懵的面试题</h3><blockquote><p>数据类型有哪些？</p></blockquote><ul><li>int</li><li>bool</li></ul><blockquote><p>数据结构</p></blockquote><ul><li>dict</li><li>list</li><li>tuple</li><li>set</li><li>str</li></ul><h3 id="剩余内置函数"><a href="#剩余内置函数" class="headerlink" title="剩余内置函数"></a>剩余内置函数</h3><blockquote><p>reversed() 保留原列表，返回一个反向的迭代器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [1,2,3,4,5]</span><br><span class="line">l.reverse()</span><br><span class="line">print(l) # 此时 l 还是那个列表只不过内容反序了</span><br><span class="line"></span><br><span class="line">l = [1,2,3,4,5]</span><br><span class="line">l2 = reversed(l)  # 保留 l 不变 ，返回一个反序的迭代器</span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure><blockquote><p>slice() 切片方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = (1,2,23,213,5612,342,43)</span><br><span class="line">sli = slice(1,5,2)</span><br><span class="line">print(l[sli])</span><br><span class="line">print(l[1:5:2])</span><br></pre></td></tr></table></figure><h4 id="字符串相关内置方法"><a href="#字符串相关内置方法" class="headerlink" title="字符串相关内置方法"></a>字符串相关内置方法</h4><blockquote><p>format()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(format(&apos;test&apos;, &apos;&lt;20&apos;)) # 开辟20个字符空间 左对齐</span><br><span class="line">print(format(&apos;test&apos;, &apos;&gt;40&apos;)) # 开辟40个字符空间 右对齐</span><br><span class="line">print(format(&apos;test&apos;, &apos;^40&apos;)) # 开辟40个字符空间 居中对齐</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">test                </span><br><span class="line">                                    test</span><br><span class="line">                  test</span><br></pre></td></tr></table></figure><blockquote><p>bytes() 把unicode转换成 「对应编码」 的bytes</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 我拿到的是gbk编码的，我想转成utf-8编码</span><br><span class="line">print(bytes(&apos;你好&apos;,encoding=&apos;GBK&apos;))     # unicode转换成GBK的bytes</span><br><span class="line">print(b&apos;\xc4\xe3\xba\xc3&apos;.decode(encoding=&apos;GBK&apos;))</span><br><span class="line">print(bytes(&apos;你好&apos;,encoding=&apos;utf-8&apos;))   # unicode转换成utf-8的bytes</span><br><span class="line">print(b&apos;\xe4\xbd\xa0\xe5\xa5\xbd&apos;.decode(encoding=&apos;utf-8&apos;))</span><br><span class="line">结果：</span><br><span class="line">b&apos;\xc4\xe3\xba\xc3&apos;   gbk编码的byte编码</span><br><span class="line">你好    decode按照gbk解码后的unicode字符</span><br><span class="line">b&apos;\xe4\xbd\xa0\xe5\xa5\xbd&apos;   utf-8编码的byte编码</span><br><span class="line">你好    decode按照utf-8解码后的unicode字符</span><br></pre></td></tr></table></figure><blockquote><p>bytearry()</p></blockquote><ul><li>网络编程 只能传二进制</li><li>照片和视频也是以二进制存储</li><li>html网页爬取到的也是编码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b_array = bytearray(&apos;你好&apos;,encoding=&apos;utf-8&apos;) # unicode 你好转换为 utf-8编码的 byte数组</span><br><span class="line">print(b_array)</span><br><span class="line">print(len(b_array))</span><br><span class="line">print(b_array[0])</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">bytearray(b&apos;\xe4\xbd\xa0\xe5\xa5\xbd&apos;)</span><br><span class="line">6</span><br><span class="line">228</span><br></pre></td></tr></table></figure><blockquote><p>memoryview (非重点知识点)</p></blockquote><ul><li>将数据转换为指定编码的byte之后进行一次memoryview就可以进行切片,同时：这个切片不创建新的,而且这个切片是字节类型的</li></ul><p><a href="https://segmentfault.com/q/1010000007137721" target="_blank" rel="noopener">详情请参考 https://segmentfault.com/q/1010000007137721</a></p><p>也可以看我的摘录上述链接的信息在 [P016_01_python内置函数收尾]</p><blockquote><p>ord() 字符按照unicode转数字</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(ord(&apos;好&apos;)) # 22909</span><br><span class="line">print(ord(&apos;a&apos;))  # 97</span><br><span class="line">print(ord(&apos;1&apos;))  # 49</span><br></pre></td></tr></table></figure><blockquote><p>chr() 将数字转字符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chr(97) # a</span><br></pre></td></tr></table></figure><blockquote><p>ascii() </p></blockquote><p>只要是ascii码中的内容，就打印出来，不是就转换成\u</p><blockquote><h4 id="repr-原样输出"><a href="#repr-原样输出" class="headerlink" title="repr() 原样输出"></a>repr() 原样输出</h4></blockquote><p>用于%r格式化输出(%r实际就是调用repr())</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;egg&apos;</span><br><span class="line">print(&apos;你好%r&apos;%name)</span><br><span class="line">print(repr(&apos;1&apos;))</span><br><span class="line">print(repr(1))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">你好&apos;egg&apos;</span><br><span class="line">&apos;1&apos;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="数据集合相关方法"><a href="#数据集合相关方法" class="headerlink" title="数据集合相关方法"></a>数据集合相关方法</h4><ol><li>字典：</li></ol><ul><li>dict</li></ul><ol start="2"><li>集合：</li></ol><ul><li>set：无序排序且不重复，是可变的。</li><li>frozenset：是冻结的集合，他是不可变的，存在哈希值。可以作为字典的key</li></ul><h4 id="判断值的False-True"><a href="#判断值的False-True" class="headerlink" title="判断值的False/True"></a>判断值的False/True</h4><ul><li>all</li><li>any</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">all([&apos;a&apos;,&apos;&apos;,123]) # False 有一个值是False就是False</span><br><span class="line"></span><br><span class="line">any([&apos;a&apos;,123]) # True </span><br><span class="line">any([&apos;a&apos;,&apos;&apos;,123]) # True 有一个值是True就是True</span><br></pre></td></tr></table></figure><h4 id="拉链方法"><a href="#拉链方法" class="headerlink" title="拉链方法"></a>拉链方法</h4><ul><li>zip</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">b = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line"># zip(a,b) # 返回的是 迭代器</span><br><span class="line">for i in zip(a,b):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">(1,&apos;a&apos;)</span><br><span class="line">(2,&apos;b&apos;)</span><br><span class="line">(3,&apos;c&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>如果俩个列表长度不一致呢？</p></blockquote><p>从头开始对齐，以短列表长度为准</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4]</span><br><span class="line">b = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line">for i in zip(a,b):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">(1,&apos;a&apos;)</span><br><span class="line">(2,&apos;b&apos;)</span><br><span class="line">(3,&apos;c&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>多个呢？而且是元组呢？元组子元素继续是列表呢？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4]</span><br><span class="line">b = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line">c = (&apos;*&apos;,&apos;**&apos;,[1,2])</span><br><span class="line">for i in zip(a,b,c):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">(1,&apos;a&apos;,&apos;*&apos;)</span><br><span class="line">(2,&apos;b&apos;,&apos;**&apos;)</span><br><span class="line">(3,&apos;c&apos;,[1,2])</span><br></pre></td></tr></table></figure><blockquote><p>如果是字典呢？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4]</span><br><span class="line">b = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line">c = (&apos;*&apos;,&apos;**&apos;,[1,2])</span><br><span class="line">d = &#123;&quot;k1&quot;:1,&quot;k2&quot;:2&#125;</span><br><span class="line">for i in zip(a,b,c,d):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">(1,&apos;a&apos;,&apos;*&apos;,&apos;k1&apos;)</span><br><span class="line">(2,&apos;b&apos;,&apos;**&apos;,&apos;k2&apos;)</span><br><span class="line">-----------------------------由于字典的key是无序的 所以 k1 k2的顺序不是固定的</span><br></pre></td></tr></table></figure><h4 id="filter和map"><a href="#filter和map" class="headerlink" title="filter和map"></a>filter和map</h4><blockquote><p>filter(函数名,可迭代的数据类型)</p></blockquote><p>根据返回值的布尔值来过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def is_odd(x):</span><br><span class="line">    return x%2 == 1</span><br><span class="line"></span><br><span class="line">res = filter(is_odd,[1,4,6,7,9,12,17])</span><br><span class="line">print(res) # 又是一个迭代器</span><br><span class="line"></span><br><span class="line">for i in res:</span><br><span class="line">    print(i)</span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">17</span><br></pre></td></tr></table></figure><blockquote><p>练习：求1-100开平方是100的数字</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#要引入模块了</span><br><span class="line">form math import sqrt</span><br><span class="line">def func(n):</span><br><span class="line">    res = sqrt(n)</span><br><span class="line">    return res%1 == 0 </span><br><span class="line"></span><br><span class="line">res = filter(func,range(1,101))</span><br></pre></td></tr></table></figure><blockquote><p>map</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">res = map(abs,[1,-4,6,-8])</span><br><span class="line">for i in res:</span><br><span class="line">    print(i)</span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br></pre></td></tr></table></figure><blockquote><p>总结:</p></blockquote><ul><li>filter执行之后的结果集合 &lt;= 数据源</li><li>map 执行之后元素个数不变,值可能发生改变</li></ul><h4 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h4><p>可定制的排序</p><ul><li>生成了一个新列表</li><li>不改变原列表</li><li>占内存</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [1,-4,6,5,-10]</span><br><span class="line">a.sort(key=abs) # 在原列表基础上进行排序</span><br><span class="line"></span><br><span class="line">b =  [2,-4,6,-5]</span><br><span class="line">print(sorted(b)) # 直接返回排序后的列表（已经不是生成器了，所以慎用），它排序后原列表还在</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><blockquote><p>花式用法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sorted(a,reversed=False)</span><br><span class="line">sorted(a,reversed=True)</span><br><span class="line">sorted(a,key=abs,reversed=False)</span><br></pre></td></tr></table></figure><blockquote><p>练习：列表按照每一个元素的长度排序</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [&apos;   &apos;,[1,2],&apos;hello world&apos;]</span><br><span class="line">new_a = sorted(a,key=len)</span><br><span class="line"></span><br><span class="line">你也可以这样</span><br><span class="line">def xxx(n):</span><br><span class="line">    return len(n)</span><br><span class="line">new_a = sorted(a,key=xxx)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P015_02_python内置函数二</title>
      <link href="/2018/07/26/P015_02_python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E4%BA%8C/"/>
      <url>/2018/07/26/P015_02_python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串类型代码的执行"><a href="#字符串类型代码的执行" class="headerlink" title="字符串类型代码的执行"></a>字符串类型代码的执行</h3><ul><li>eval </li><li>exec</li><li>compile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eval(&apos;print(123)&apos;) # 123</span><br><span class="line">exec(&apos;print(123)&apos;) # 123</span><br><span class="line"></span><br><span class="line">eval(&apos;1+2+3&apos;) # 10</span><br><span class="line">exec(&apos;1+2+3&apos;) # None</span><br></pre></td></tr></table></figure><blockquote><p>eval 和 exec区别</p></blockquote><ul><li>都可以执行字符串代码</li><li>exec没有返回值</li></ul><blockquote><h4 id="eval建议不要轻易使用，只能用在你明确知道要执行的代码"><a href="#eval建议不要轻易使用，只能用在你明确知道要执行的代码" class="headerlink" title="eval建议不要轻易使用，只能用在你明确知道要执行的代码"></a>eval建议不要轻易使用，只能用在你明确知道要执行的代码</h4></blockquote><p>尤其eval(文件里的字符串/用户输入的) 非常危险</p><blockquote><p>compile编译</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code = &apos;&apos;&apos;for i in range(10):</span><br><span class="line">    print(i)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">exec(code) #</span><br></pre></td></tr></table></figure><blockquote><p>如果code的内容是500行代码 每次exec都要编译</p></blockquote><blockquote><p>compile就是一次编译多次执行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">code1 = &apos;for i in range(10):print(i)&apos;</span><br><span class="line">compile1 = compile(code1,&apos;&apos;,&apos;exec&apos;)</span><br><span class="line">exec(compile1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code1 = &apos;1+2+3&apos;</span><br><span class="line">compile2 = compile(code2,&apos;&apos;,&apos;eval&apos;)</span><br><span class="line">print(eval(compile2)) # 6</span><br></pre></td></tr></table></figure><blockquote><p>pycharm没法帮你找到字符串里的变量声明</p></blockquote><blockquote><h4 id="交互类命令要用-single"><a href="#交互类命令要用-single" class="headerlink" title="交互类命令要用 single"></a>交互类命令要用 single</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code3 = &apos;name = input(&quot;请输入账号&quot;)&apos;</span><br><span class="line">compile3 = compile(code3,&apos;&apos;,&apos;single&apos;)</span><br><span class="line">print(exec(compile3)) # 执行交互命令</span><br><span class="line">print(name) # pycharm无法检测到name 因为它在待编译的模板里还没有执行</span><br></pre></td></tr></table></figure><h3 id="和数字相关"><a href="#和数字相关" class="headerlink" title="和数字相关"></a>和数字相关</h3><ul><li>complex 复数</li><li>bool</li><li>int </li><li>float 当你小数位过多时就不准了</li></ul><blockquote><p>进制转换</p></blockquote><ul><li>bin() 二进制 0b开头</li><li>oct() 八进制 0o开头</li><li>hex() 十六进制 0x开头</li></ul><blockquote><p>数学运算</p></blockquote><ul><li>abs() 绝对值</li><li>divmod()  div除法 mod取余 ==》 分页处理</li><li>round() 四舍五入</li><li>pow() 幂运算</li><li>sum()</li><li>min()</li><li>max()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">abs(-5) # 5</span><br><span class="line">divmod(7,2) # (7整除2,7对2取余) =&gt;(3,1)</span><br><span class="line">divmod(9,5) # (9整除5,9对5取余) =&gt;(1,4)</span><br><span class="line">round(3.1415926,3) # 3.14</span><br><span class="line"></span><br><span class="line">pow(2,3) # 2*2*2 ==》8</span><br><span class="line">如果三个参数就是 对最后的参数取余</span><br><span class="line">pow(2,3,3) # 8取余3 ==》2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum(1,2,3) # 6</span><br><span class="line">sum([1,2,3]) # 6</span><br><span class="line">sum([1,2,3],10) # 10代表起始值  ==》 31</span><br><span class="line"></span><br><span class="line">min([1,2,3,4]) # 1</span><br><span class="line">min(1,2,3,4) # 1</span><br><span class="line">min(1,2,3,-4) # -4</span><br><span class="line">min(1,2,3,-4,key=abs) # 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P015_01_python内置函数</title>
      <link href="/2018/07/26/P015_01_python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>/2018/07/26/P015_01_python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是内置函数"><a href="#什么是内置函数" class="headerlink" title="什么是内置函数"></a>什么是内置函数</h3><p>就是不用你def就可以直接调用的 如 </p><ul><li>print()</li><li>input()</li><li>len()</li><li>type()</li><li>open()</li><li>tuple()</li><li>list()</li><li>int()</li><li>bool()</li><li>set()</li><li>dir()</li><li>id()</li><li>str()</li></ul><h4 id="作用域相关"><a href="#作用域相关" class="headerlink" title="作用域相关"></a>作用域相关</h4><ul><li>locals()</li><li>globals()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global 变量</span><br><span class="line">nonlocal 变量</span><br></pre></td></tr></table></figure><h4 id="迭代器-生成器相关"><a href="#迭代器-生成器相关" class="headerlink" title="迭代器/生成器相关"></a>迭代器/生成器相关</h4><ul><li>range</li><li>next</li><li>iter</li></ul><blockquote><p>next()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">迭代器.__next__() 这个是迭代器的方法</span><br><span class="line">next(迭代器) 这个是内置函数</span><br><span class="line"></span><br><span class="line">它俩完成的事一样，而__next__()是真正完成功能的地方</span><br><span class="line">------------------------------</span><br><span class="line"># next()的实质就是</span><br><span class="line">def next(迭代器):</span><br><span class="line">    迭代器.__next__()</span><br><span class="line"></span><br><span class="line"># len()的实质就是</span><br><span class="line">def len([]):</span><br><span class="line">    [].__len__()</span><br></pre></td></tr></table></figure><blockquote><p>iter()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">迭代器 = iter(可迭代的)</span><br><span class="line">迭代器 = 可迭代的.__iter__()</span><br></pre></td></tr></table></figure><blockquote><p>range()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;__next__&apos; in dir(range(10))) # False 可迭代的，但不是一个迭代器</span><br><span class="line"></span><br><span class="line">print(&apos;__next__&apos; in dir(iter(range(10))) # True 通过iter转换为迭代器</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><blockquote><p>dir</p></blockquote><p>查看一个变量拥有的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir([])</span><br><span class="line">dir(&#123;&#125;)</span><br><span class="line">dir(1)</span><br></pre></td></tr></table></figure><blockquote><p>callable </p></blockquote><p>调用相关,我们知道函数调用要使用()才可以,但是我们怎么知道一个xxx()就可以调用呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(callable(print)) # True</span><br><span class="line"></span><br><span class="line">a = 1</span><br><span class="line">print(callable(a)) # False</span><br></pre></td></tr></table></figure><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><blockquote><p>查看帮助文档(在一些政府，银行禁网的封闭开发情况下)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(str) # 打印和 str相关的方法 以及用法</span><br></pre></td></tr></table></figure><h4 id="模块相关"><a href="#模块相关" class="headerlink" title="模块相关"></a>模块相关</h4><ul><li>import</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import time # 表面是调用了一个关键字</span><br><span class="line">time.time()</span><br><span class="line">实际上是</span><br><span class="line">time = __import__(time)</span><br><span class="line">time.time()</span><br></pre></td></tr></table></figure><h4 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h4><ul><li>open</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;1.txt&apos;)</span><br><span class="line">print(f.writeable())  # 代表能不能写入</span><br><span class="line">print(f.readable())  # 代表能不能读取</span><br></pre></td></tr></table></figure><h4 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h4><ul><li>id()  获取变量的内存地址</li><li>hash() 和内存相关的东西</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(hash(12345))  # 有结果   </span><br><span class="line">print(hash(&apos;fsdafsadfasdf&apos;))   # 有结果</span><br><span class="line">print(hash((1,&apos;aaa&apos;)))   # 有结果</span><br><span class="line"></span><br><span class="line">print(hash([1,2,3]))  # 报错 unhashable type:&apos;list&apos; 意思就是不可哈希</span><br></pre></td></tr></table></figure><blockquote><p>对于可哈希数据类型的hash值在一次程序执行过程中总是不变的</p></blockquote><p>如出现两次 ‘hahaha’ 他俩哈希值相同</p><blockquote><h4 id="hash函数和字典的存储规则有关系"><a href="#hash函数和字典的存储规则有关系" class="headerlink" title="hash函数和字典的存储规则有关系"></a>hash函数和字典的存储规则有关系</h4></blockquote><p>字典的查找速度特别快，只要有key可以瞬间找到值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">原理：</span><br><span class="line">step001</span><br><span class="line">dict = &#123;</span><br><span class="line">    key:value</span><br><span class="line">&#125;</span><br><span class="line">第一次创建key的时候 会生成一个hash值 3214141244(标识一个内存地址)</span><br><span class="line">然后把value放到这个地址里</span><br><span class="line"></span><br><span class="line">最后查询 dict[key] 实际是 hash(key) ==&gt; value</span><br></pre></td></tr></table></figure><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><ul><li>input</li><li>print</li></ul><blockquote><p>input</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = input(&apos;请输入账号&apos;) # 输入成功后按回车才把值给 res</span><br></pre></td></tr></table></figure><blockquote><p>print 其实你不会</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">print() # 每次print会自动给你一个换行</span><br><span class="line"></span><br><span class="line">不想要换行咋办</span><br><span class="line"></span><br><span class="line">print(&apos;我们是祖国的花朵&apos;,end=&apos;&apos;)</span><br><span class="line">print(&apos;我们是祖国的花朵&apos;,end=&apos;&apos;)</span><br><span class="line"># 我们是祖国的花朵我们是祖国的花朵</span><br><span class="line"></span><br><span class="line">print(1,2,3,4,5) # 1 2 3 4 5</span><br><span class="line"></span><br><span class="line">有分隔符的输出</span><br><span class="line"></span><br><span class="line">print(1,2,3,4,5,sep=&apos;|&apos;) # 1|2|3|4|5</span><br><span class="line"></span><br><span class="line">将输出写入到文件</span><br><span class="line">f = open(&apos;file&apos;,&apos;w&apos;)</span><br><span class="line">print(&apos;aaa&apos;,file=f)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P014_01_python生成器进阶及生成器表达式、列表推导式</title>
      <link href="/2018/07/25/P014_01_python%E7%94%9F%E6%88%90%E5%99%A8%E8%BF%9B%E9%98%B6%E5%8F%8A%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
      <url>/2018/07/25/P014_01_python%E7%94%9F%E6%88%90%E5%99%A8%E8%BF%9B%E9%98%B6%E5%8F%8A%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="生成器回顾"><a href="#生成器回顾" class="headerlink" title="生成器回顾"></a>生成器回顾</h3><blockquote><p>双下方法 ： 很少直接调用的方法。一般情况下，是通过其他语法触发的</p></blockquote><h4 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#娃哈哈%i</span><br><span class="line">def wahaha():</span><br><span class="line">    for i in range(2000000):</span><br><span class="line">        yield &apos;娃哈哈%s&apos;%i</span><br><span class="line"></span><br><span class="line"># wahaha是一个生成器函数</span><br><span class="line">g = wahaha()</span><br><span class="line"></span><br><span class="line">#我们获取它的内容明显不该 这样</span><br><span class="line"># g.__next__()</span><br><span class="line"></span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br><span class="line">print(next(g))</span><br></pre></td></tr></table></figure><h4 id="send"><a href="#send" class="headerlink" title="send()"></a>send()</h4><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def generator():</span><br><span class="line">    print(123)</span><br><span class="line">    content = yield 1</span><br><span class="line">    print(&apos;=======&apos;,content)</span><br><span class="line">    print(456)</span><br><span class="line">    yield 2</span><br><span class="line"></span><br><span class="line"># 返回生成器对象</span><br><span class="line">g = generator() </span><br><span class="line"></span><br><span class="line"># 返回第一个yield 后的值 1</span><br><span class="line">ret = g.__next__()</span><br><span class="line">print(&apos;***&apos;,ret)</span><br><span class="line"></span><br><span class="line"># 给上一个  yield传递一个值</span><br><span class="line">ret = g.send(&apos;hello&apos;)   #send的效果和next一样</span><br><span class="line">print(&apos;***&apos;,ret)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">123</span><br><span class="line">*** 1</span><br><span class="line">======= hello</span><br><span class="line">456</span><br><span class="line">*** 2</span><br></pre></td></tr></table></figure><h4 id="send和-next的区别"><a href="#send和-next的区别" class="headerlink" title="send和 next的区别"></a>send和 next的区别</h4><ul><li>相同点：都可以让生成器向下走一步</li><li>异同点： send 可以给一个值，这个值作为上一个 yield 的整体的结果返回</li></ul><blockquote><p>使用send的注意事项:</p></blockquote><ol><li>第一次使用生成器的时候,必须要用next获取下一个值(因为send是给上一个yield 设置结果，而第一次的时候没有上一个yield)</li><li>最后一个yield不能接受外部的值(因为后面没有 yield 了)</li></ol><blockquote><p>为啥第一次不能用send() </p></blockquote><p>因为会报错！！！详情请看 <a href="https://www.zhihu.com/question/28105502" target="_blank" rel="noopener">为什么python的yield第一次不能用send发送数据？</a></p><h4 id="经典练习"><a href="#经典练习" class="headerlink" title="经典练习"></a>经典练习</h4><blockquote><p>求移动平均值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">10 =&gt; 10</span><br><span class="line">10 20 =&gt; 15</span><br><span class="line">10 20 30 =&gt; 20</span><br><span class="line">10 20 30 10 =&gt; 17.5</span><br><span class="line">avg =sum/count</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def xxx():</span><br><span class="line">    sum = 0</span><br><span class="line">    count = 0</span><br><span class="line">    num = 0</span><br><span class="line">    avg = 0</span><br><span class="line">    while True:</span><br><span class="line">        # num = yield # 接受一个10</span><br><span class="line">        sum += num  # 10</span><br><span class="line">        count += 1  # 1</span><br><span class="line">        avg = sum/count</span><br><span class="line">        num = yield avg</span><br><span class="line"></span><br><span class="line">avg_g = xxx()</span><br><span class="line"></span><br><span class="line">avg_g.__next__()</span><br><span class="line">avg_g.send(10)</span><br><span class="line">avg_g.send(20)</span><br><span class="line">avg_g.send(30)</span><br><span class="line">avg_g.send(10)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">0.0</span><br><span class="line">5.0</span><br><span class="line">10.0</span><br><span class="line">15.0</span><br></pre></td></tr></table></figure><blockquote><p>移动平均值优化</p></blockquote><p>需求就是不要第一次调用next(),因为对使用者没有意义</p><p>提示：装饰器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def init(func):</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        g = func(*args,**kwargs)</span><br><span class="line">        g.__next__()</span><br><span class="line">        return g</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@init</span><br><span class="line">def xxx():</span><br><span class="line">    sum = 0</span><br><span class="line">    count = 0</span><br><span class="line">    num = 0</span><br><span class="line">    avg = 0</span><br><span class="line">    while True:</span><br><span class="line">        # num = yield # 接受一个10</span><br><span class="line">        sum += num  # 10</span><br><span class="line">        count += 1  # 1</span><br><span class="line">        avg = sum/count</span><br><span class="line">        num = yield avg</span><br><span class="line"></span><br><span class="line">avg_g = xxx()</span><br><span class="line"></span><br><span class="line">res = avg_g.send(10)</span><br><span class="line">print(res)</span><br><span class="line">res = avg_g.send(20)</span><br><span class="line">print(res)</span><br><span class="line">res = avg_g.send(30)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><blockquote><p>这个效果就是 预激活装饰器</p></blockquote><h4 id="python3新增知识点"><a href="#python3新增知识点" class="headerlink" title="python3新增知识点"></a>python3新增知识点</h4><p>先看如下例子:把a,b里面的字符一个一个的返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def xxx():</span><br><span class="line">    a = &apos;abc&apos;</span><br><span class="line">    b = &apos;123&apos;</span><br><span class="line"></span><br><span class="line">    for i in a:</span><br><span class="line">        yield i</span><br><span class="line">    for i in b:</span><br><span class="line">        yield i</span><br><span class="line"></span><br><span class="line">g = xxx()</span><br><span class="line"></span><br><span class="line">for i in g:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>添加 yield from</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def xxx():</span><br><span class="line">    a = &apos;abc&apos;</span><br><span class="line">    b = &apos;123&apos;</span><br><span class="line"></span><br><span class="line">    yield from a</span><br><span class="line">    yield from b</span><br><span class="line"></span><br><span class="line">g = xxx()</span><br><span class="line"></span><br><span class="line">for i in g:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><blockquote><h4 id="yield-from-的作用就是："><a href="#yield-from-的作用就是：" class="headerlink" title="yield from 的作用就是："></a>yield from 的作用就是：</h4></blockquote><p>从一个容器类型里取得值不需要一个一个取而是集体返回</p><h3 id="各种表达式推到式"><a href="#各种表达式推到式" class="headerlink" title="各种表达式推到式"></a>各种表达式推到式</h3><h4 id="列表推到式"><a href="#列表推到式" class="headerlink" title="列表推到式"></a>列表推到式</h4><p>10个鸡蛋的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">eggList = []</span><br><span class="line">for i in range(10):</span><br><span class="line">    eggList.append(&quot;鸡蛋%s&quot;%i)</span><br><span class="line"></span><br><span class="line">print(eggList)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"># 一句话代替上面的效果</span><br><span class="line">eggList2 = [&quot;鸡蛋%s&quot;%i for i in range(10)] #列表推到式</span><br><span class="line">print(eggList2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[i for i in range(10)] # [0,1,2,3,4,5,6,7,8,9]</span><br><span class="line"></span><br><span class="line">[i*i for i in range(10)] # [0,1,4,9,16,25,36,49,64,81]</span><br></pre></td></tr></table></figure><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = ( i for i in range(10) )</span><br><span class="line">print(g) #注意这是生成器</span><br></pre></td></tr></table></figure><blockquote><p>列表推导式和生成器表达式的区别</p></blockquote><ul><li>括号不一样</li><li>返回值不同，生成器表达式几乎不占用内存</li></ul><blockquote><p>一道面试题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g = ( i for i in range(10) )</span><br><span class="line"></span><br><span class="line">发生了什么：</span><br><span class="line">1.跟函数定义一样什么也不执行</span><br><span class="line">2.直到 g.__next__() 时，里面的循环才走一次</span><br></pre></td></tr></table></figure><h4 id="各种推导式"><a href="#各种推导式" class="headerlink" title="各种推导式"></a>各种推导式</h4><p>公式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[每一个元素 for 元素 in 可迭代数据类型]</span><br><span class="line">[满足条件元素 for 元素 in 可迭代数据类型 if 元素相关条件判断]</span><br></pre></td></tr></table></figure><blockquote><p>30以内被3整除的数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i for i in range(30) if i%3 == 0]</span><br></pre></td></tr></table></figure><blockquote><p>30以内被3整除的数的平方</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i*i for i in range(30) if i%3 == 0]</span><br></pre></td></tr></table></figure><blockquote><p>找到多重嵌套列表内名字包含e字母 超过两个的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [</span><br><span class="line">    [&apos;ae&apos;,&apos;ee&apos;,&apos;eve&apos;,&apos;even&apos;],</span><br><span class="line">    [&apos;xx&apos;,&apos;xe&apos;,&apos;egg&apos;,&apos;ele&apos;]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">[name for lst in names for name in lst if name.count(&apos;e&apos;)==2 ]</span><br></pre></td></tr></table></figure><blockquote><h5 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h5></blockquote><p>将一个字典的key和value颠倒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xx = &#123;&apos;a&apos;:10,&apos;b&apos;:22&#125;</span><br><span class="line"></span><br><span class="line">xx2 = &#123; xx[k]:k for k in xx&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h5></blockquote><p>计算列表中每个值的平方，在带去重功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squared = &#123;x**2 for x in [1, -1, 2]&#125;</span><br><span class="line">print(squared)</span><br><span class="line"># set([1, 4])</span><br></pre></td></tr></table></figure><h3 id="面试题详解"><a href="#面试题详解" class="headerlink" title="面试题详解"></a>面试题详解</h3><blockquote><p>面试题1</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def demo():</span><br><span class="line">    for i in range(4):</span><br><span class="line">        yield i</span><br><span class="line"></span><br><span class="line">g = demo()</span><br><span class="line">g1 = ( i for i in g)</span><br><span class="line">g2 = ( i for i in g1)</span><br><span class="line"></span><br><span class="line">print(list(g1))</span><br><span class="line">print(list(g2))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[0,1,2,3]</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">前5行啥都没干</span><br><span class="line">直到print(list(g1)) 时才从g中生成到g1 ,但是g1是一个生成器 在list(g1)时把g1里的值已经取走了</span><br><span class="line"></span><br><span class="line">所以到print(list(g2))的时候 是个空列表</span><br></pre></td></tr></table></figure><blockquote><p>面试题2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def add(n,i):</span><br><span class="line">    return n+i</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    for i in range(4):</span><br><span class="line">        yield i</span><br><span class="line"></span><br><span class="line">g = test()</span><br><span class="line">for n in [1,10,5]:</span><br><span class="line">    g =( add(n,i) for i in g)</span><br><span class="line"></span><br><span class="line">print(list(g))</span><br><span class="line"></span><br><span class="line">解析：</span><br><span class="line">第一步</span><br><span class="line">n = 1 </span><br><span class="line">g= (add(n,i) for i in g)</span><br><span class="line">n = 10 </span><br><span class="line">g= (add(n,i) for i in g)</span><br><span class="line">n = 5</span><br><span class="line">g= (add(n,i) for i in g)</span><br><span class="line">第二步--》换元法</span><br><span class="line">n = 1 </span><br><span class="line">g= (add(n,i) for i in test())</span><br><span class="line">n = 10 </span><br><span class="line">g= (add(n,i) for i in (add(n,i) for i in test()))</span><br><span class="line">第三步--》换元法</span><br><span class="line">n = 5</span><br><span class="line">g= (add(n,i) for i in (add(n,i) for i in (add(n,i) for i in test())) )</span><br><span class="line">第四步带入 n =5  0,1,2,3</span><br><span class="line">(add(n,i) for i in (add(n,i) for i in (add(n,i) for i in (0,1,2,3))))</span><br><span class="line"></span><br><span class="line">n = 5</span><br><span class="line">(add(n,i) for i in (add(n,i) for i in (5,6,7,8)))</span><br><span class="line">n = 5</span><br><span class="line">(add(n,i) for i in (10,11,12,13))</span><br><span class="line"></span><br><span class="line">(15,16,17,18)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P013_01_python迭代器</title>
      <link href="/2018/07/24/P013_01_python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2018/07/24/P013_01_python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="迭代器初识"><a href="#迭代器初识" class="headerlink" title="迭代器初识"></a>迭代器初识</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line"># 索引</span><br><span class="line"># 循环for</span><br><span class="line"></span><br><span class="line">for i in a:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">for k in dic:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><ul><li>list</li><li>dic</li><li>str</li><li>set</li><li>tuple</li><li>f = open()文件</li><li>range()</li><li>enumerate</li></ul><h3 id="迭代器的概念"><a href="#迭代器的概念" class="headerlink" title="迭代器的概念"></a>迭代器的概念</h3><blockquote><p>先来一个小知识点，查看一个对象可用的方法 dir</p></blockquote><p>dir(对象)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(dir([])) #告诉我列表拥有的方法</span><br><span class="line">print(dir(&#123;&#125;)) #告诉我字典拥有的方法</span><br><span class="line">print(dir(&apos;&apos;)) #告诉我字符串拥有的方法</span><br><span class="line">print(dir(range(10))) #告诉我range(10)拥有的方法</span><br></pre></td></tr></table></figure><blockquote><p>我们知道数组相加如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1] + [2] # [1,2]</span><br><span class="line">实际上就是调用  [1].__add__([2])</span><br></pre></td></tr></table></figure><blockquote><p>找这些能被for循环使用的方法的交集</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 取这些可被for循环的数据类型的交集</span><br><span class="line">ret = set(dir([]))&amp;set(dir(&#123;&#125;))&amp;set(dir(&apos;&apos;))&amp;set(dir(range(10)))</span><br><span class="line">print(ret)  #iterable</span><br></pre></td></tr></table></figure><p>只要能被for循环的数据类型，就一定有<strong>iter</strong>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;__iter__&apos; in dir(int))</span><br><span class="line">print(&apos;__iter__&apos; in dir(bool))</span><br><span class="line">print(&apos;__iter__&apos; in dir(list))</span><br><span class="line">print(&apos;__iter__&apos; in dir(dict))</span><br><span class="line">print(&apos;__iter__&apos; in dir(set))</span><br><span class="line">print(&apos;__iter__&apos; in dir(tuple))</span><br><span class="line">print(&apos;__iter__&apos; in dir(enumerate([])))</span><br><span class="line">print(&apos;__iter__&apos; in dir(range(1)))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">False</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h4 id="一个列表执行了iter-之后的返回值就是一个迭代器"><a href="#一个列表执行了iter-之后的返回值就是一个迭代器" class="headerlink" title="一个列表执行了iter()之后的返回值就是一个迭代器"></a>一个列表执行了<strong>iter</strong>()之后的返回值就是一个迭代器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(dir([]))</span><br><span class="line">print(dir([].__iter__()))</span><br><span class="line">print(set(dir([].__iter__())) - set(dir([])))</span><br><span class="line">print([1,&apos;a&apos;,&apos;bbb&apos;].__iter__().__length_hint__())  #元素个数</span><br></pre></td></tr></table></figure><p>再看双下划线 next方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l = [1,2,3]</span><br><span class="line">iterator = l.__iter__()</span><br><span class="line">print(iterator.__next__()) # 1</span><br><span class="line">print(iterator.__next__()) # 2</span><br><span class="line">print(iterator.__next__()) # 3</span><br><span class="line">print(iterator.__next__()) # 报错</span><br><span class="line"></span><br><span class="line">[].__iter__() 迭代器  -- &gt; __next__  #通过next就可以从迭代器中一个一个的取值</span><br></pre></td></tr></table></figure><blockquote><p>迭代器要点：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Iterable  可迭代的    -- &gt; __iter__  #只要含有__iter__方法的都是可迭代的</span><br><span class="line"> </span><br><span class="line">只要含有__iter__方法的都是可迭代的 —— 可迭代协议</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [1,2,3,4]</span><br><span class="line">for i in l.__iter__():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h4 id="迭代器的概念-1"><a href="#迭代器的概念-1" class="headerlink" title="迭代器的概念"></a>迭代器的概念</h4><blockquote><p>迭代器协议 —— 内部含有<strong>next</strong>和<strong>iter</strong>方法的就是迭代器</p></blockquote><h4 id="迭代器协议和可迭代协议"><a href="#迭代器协议和可迭代协议" class="headerlink" title="迭代器协议和可迭代协议"></a>迭代器协议和可迭代协议</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以被for循环的都是可迭代的</span><br><span class="line">可迭代的内部都有__iter__方法</span><br><span class="line">只要是迭代器 一定可迭代</span><br><span class="line">可迭代的.__iter__()方法就可以得到一个迭代器</span><br><span class="line">迭代器中的__next__()方法可以一个一个的获取值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for循环其实就是在使用迭代器</span><br><span class="line">iterator</span><br><span class="line">可迭代对象</span><br><span class="line">直接给你内存地址</span><br><span class="line">print([].__iter__())</span><br><span class="line">print(range(10))</span><br></pre></td></tr></table></figure><h4 id="for循环的本质"><a href="#for循环的本质" class="headerlink" title="for循环的本质"></a>for循环的本质</h4><blockquote><p>只有 是可迭代对象的时候 才能用for<br>当我们遇到一个新的变量，不确定能不能for循环的时候，就判断它是否可迭代</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for i in l:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># for循环的本质就是迭代器</span><br><span class="line">#iterator = l.__iter__()</span><br><span class="line">#iterator.__next__()</span><br></pre></td></tr></table></figure><h4 id="迭代器的好处："><a href="#迭代器的好处：" class="headerlink" title="迭代器的好处："></a>迭代器的好处：</h4><ul><li>从容器类型中一个一个的取值，会把所有的值都取到。</li><li>节省内存空间<br>  迭代器并不会在内存中再占用一大块内存，<br>  而是随着循环 每次生成一个<br>  每次next每次给我一个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">range(10000000000000000)  # 并不是立即生成，否则很浪费内存空间</span><br><span class="line"></span><br><span class="line">list(range(10000000000000000)) # 估计内存炸了，把迭代器转为列表</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>本质是个迭代器</p><h4 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h4><blockquote><p>1.我们先实现一个普通方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def generator():</span><br><span class="line">    print(1)</span><br><span class="line">    return &apos;a&apos;</span><br><span class="line"></span><br><span class="line">xxx = generator()</span><br><span class="line">print(xxx)</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">1</span><br><span class="line">a</span><br></pre></td></tr></table></figure><blockquote><p>2.yield关键字</p></blockquote><p>将刚刚的return 换成 yield</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def generator():</span><br><span class="line">    print(1)</span><br><span class="line">    yield &apos;a&apos;</span><br><span class="line"></span><br><span class="line">xxx = generator()</span><br><span class="line">print(xxx)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">&lt;generator object generator at 0x000000000238C518&gt;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">print(xxx.__next__())</span><br><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>####　什么是生成器</p><ul><li>只要含有yield关键字的函数都是生成器函数</li><li>yield不能和return共用而且需要写在函数内部</li><li>函数内部有yield关键字，这个函数执行返回的结果就是生成器，并且不会执行函数内部代码</li></ul><blockquote><h4 id="生成器函数-：-执行之后会得到一个生成器作为返回值"><a href="#生成器函数-：-执行之后会得到一个生成器作为返回值" class="headerlink" title="生成器函数 ： 执行之后会得到一个生成器作为返回值"></a>生成器函数 ： 执行之后会得到一个生成器作为返回值</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def xxx():</span><br><span class="line">    print(&apos;====&gt;a&apos;)</span><br><span class="line">    yield 1</span><br><span class="line">    print(&apos;====&gt;b&apos;)</span><br><span class="line">    yield 2</span><br><span class="line">    print(&apos;====&gt;c&apos;)</span><br><span class="line">    yield 3</span><br><span class="line">    print(&apos;====&gt;end&apos;)</span><br><span class="line"></span><br><span class="line">g=xxx()</span><br><span class="line"></span><br><span class="line">print(g.__next__()) # 返回第一次yield关键字后面的值</span><br><span class="line">print(g.__next__()) # 返回第二次yield关键字后面的值</span><br><span class="line">print(g.__next__()) # 返回第三次yield关键字后面的值</span><br><span class="line">print(g.__next__()) # 报错 </span><br><span class="line"></span><br><span class="line">====&gt;a</span><br><span class="line">1</span><br><span class="line">====&gt;b</span><br><span class="line">2</span><br><span class="line">====&gt;c</span><br><span class="line">3</span><br><span class="line">====&gt;end</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;D:/python_code/py20180718/001.py&quot;, line 18, in &lt;module&gt;</span><br><span class="line">    print(g.__next__())</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><blockquote><p>需求打印 200,0000次 哇哈哈1==》哇哈哈2000000，而我现在只要50个</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#娃哈哈%i</span><br><span class="line">def wahaha():</span><br><span class="line">    for i in range(2000000):</span><br><span class="line">        yield &apos;娃哈哈%s&apos;%i</span><br><span class="line"></span><br><span class="line">g = wahaha()</span><br><span class="line">count = 0</span><br><span class="line">for i in g:</span><br><span class="line">    count +=1</span><br><span class="line">    if count &gt; 50:</span><br><span class="line">        break</span><br><span class="line">    print(&apos;```````````&apos;+i+&apos;`````````````&apos;)</span><br></pre></td></tr></table></figure><h4 id="生成器真的省内存吗？"><a href="#生成器真的省内存吗？" class="headerlink" title="生成器真的省内存吗？"></a>生成器真的省内存吗？</h4><blockquote><p>碰巧前面我们刚学过如何测试效率和装饰器，正好拿来练习！！！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">def test(func):</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(&quot;测试效率:&quot;, end_time - start_time)</span><br><span class="line">        return res</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@test</span><br><span class="line">def getList(n):</span><br><span class="line">    l1 = list(range(n))</span><br><span class="line">@test</span><br><span class="line">def getGenerator(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        yield i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getList(100000)</span><br><span class="line">getGenerator(100000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">测试效率: 0.004000663757324219</span><br><span class="line">测试效率: 0.0</span><br></pre></td></tr></table></figure><blockquote><p>分析下就可以知道，列表是将0-99999都生成后放进列表里了，所以用时比较多。<br>而生成器只是封装了算法，每次调用在去调用算法，这样做就可以做到节省内存了。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P012_01_python装饰器进阶</title>
      <link href="/2018/07/24/P012_01_python%E8%A3%85%E9%A5%B0%E5%99%A8%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/07/24/P012_01_python%E8%A3%85%E9%A5%B0%E5%99%A8%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="先来看看一些题外话-一个函数的相关信息"><a href="#先来看看一些题外话-一个函数的相关信息" class="headerlink" title="先来看看一些题外话(一个函数的相关信息)"></a>先来看看一些题外话(一个函数的相关信息)</h3><ul><li>name 函数名</li><li>doc 函数文档</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def xxx():</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    一个打印 哈哈哈 的函数</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    print(&apos;哈哈哈&apos;)</span><br><span class="line"></span><br><span class="line">print(xxx.__name__)  # xxx</span><br><span class="line">print(xxx.__doc__)   # 一个打印 哈哈哈 的函数</span><br></pre></td></tr></table></figure><blockquote><p>那要是被装饰器的函数呢？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def wrapper(func):</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        return res</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@wrapper</span><br><span class="line">def xxx2():</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    测试xxx2</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    print(&apos;HAHA&apos;)</span><br><span class="line"></span><br><span class="line">print(xxx2.__name__) # inner</span><br><span class="line">print(xxx2.__doc__)  # None</span><br></pre></td></tr></table></figure><h4 id="wraps模块"><a href="#wraps模块" class="headerlink" title="wraps模块"></a>wraps模块</h4><blockquote><p>解决查看函数相关信息的问题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># step1引入wraps模块</span><br><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def wrapper(func):</span><br><span class="line">    # step2 使用这个模块的装饰器函数</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        return res</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@wrapper</span><br><span class="line">def xxx2():</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    测试xxx2</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    print(&apos;HAHA&apos;)</span><br><span class="line"></span><br><span class="line">print(xxx2.__name__) # xxx2</span><br><span class="line">print(xxx2.__doc__)  # 测试xxx2</span><br></pre></td></tr></table></figure><h3 id="带参数装饰器"><a href="#带参数装饰器" class="headerlink" title="带参数装饰器"></a>带参数装饰器</h3><p>通过布尔值来决定「是否」启动装饰器</p><blockquote><p>首先装饰器的原理是闭包</p></blockquote><blockquote><p>控制装饰器是否开启的原理就是：在原装饰器的基础上再一次的闭包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">FLAGE = False # 决定装饰器是否开启的布尔值</span><br><span class="line">def timmer_out(flag):  #接受参数的装饰器用来处理是否开启装饰器</span><br><span class="line">    def timmer(func):</span><br><span class="line">        def inner(*args,**kwargs):</span><br><span class="line">            if flag:</span><br><span class="line">                start = time.time()</span><br><span class="line">                ret = func(*args,**kwargs)</span><br><span class="line">                end = time.time()</span><br><span class="line">                print(end-start)</span><br><span class="line">                return ret</span><br><span class="line">            else:</span><br><span class="line">                ret = func(*args, **kwargs)</span><br><span class="line">                return ret</span><br><span class="line">        return inner</span><br><span class="line">    return timmer</span><br><span class="line">    </span><br><span class="line"># timmer = timmer_out(FLAGE)</span><br><span class="line">@timmer_out(FLAGE)    #wahaha = timmer(wahaha)</span><br><span class="line">def wahaha():</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;wahahahahahaha&apos;)</span><br><span class="line"></span><br><span class="line">@timmer_out(FLAGE)</span><br><span class="line">def wahaha2():</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;wahahahahahaha2222222&apos;)</span><br><span class="line"></span><br><span class="line">wahaha()</span><br><span class="line">wahaha2()</span><br></pre></td></tr></table></figure><h3 id="多个装饰器调用顺序"><a href="#多个装饰器调用顺序" class="headerlink" title="多个装饰器调用顺序"></a>多个装饰器调用顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">def wrapper1(func):</span><br><span class="line">    def inner1():</span><br><span class="line">        print(&apos;wrapper1 ,before func&apos;)</span><br><span class="line">        ret = func()</span><br><span class="line">        print(&apos;wrapper1 ,after func&apos;)</span><br><span class="line">        return ret</span><br><span class="line">    return inner1</span><br><span class="line"></span><br><span class="line">def wrapper2(func):</span><br><span class="line">    def inner2():</span><br><span class="line">        print(&apos;wrapper2 ,before func&apos;)</span><br><span class="line">        ret = func()</span><br><span class="line">        print(&apos;wrapper2 ,after func&apos;)</span><br><span class="line">        return ret</span><br><span class="line">    return inner2</span><br><span class="line"></span><br><span class="line">def wrapper3(func):</span><br><span class="line">    def inner3():</span><br><span class="line">        print(&apos;wrapper3 ,before func&apos;)</span><br><span class="line">        ret = func()</span><br><span class="line">        print(&apos;wrapper3 ,after func&apos;)</span><br><span class="line">        return ret</span><br><span class="line">    return inner3</span><br><span class="line"></span><br><span class="line">@wrapper3</span><br><span class="line">@wrapper2</span><br><span class="line">@wrapper1</span><br><span class="line">def f():</span><br><span class="line">    print(&apos;in f&apos;)</span><br><span class="line">    return &apos;哈哈哈&apos;</span><br><span class="line"></span><br><span class="line">print(f())</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">wrapper3 ,before func</span><br><span class="line">wrapper2 ,before func</span><br><span class="line">wrapper1 ,before func</span><br><span class="line">in f</span><br><span class="line">wrapper1 ,after func</span><br><span class="line">wrapper2 ,after func</span><br><span class="line">wrapper3 ,after func</span><br><span class="line">哈哈哈</span><br></pre></td></tr></table></figure><blockquote><p>多个装饰器的效果就是「俄罗斯套娃」</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P011_01_python装饰器初识</title>
      <link href="/2018/07/23/P011_01_python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%88%9D%E8%AF%86/"/>
      <url>/2018/07/23/P011_01_python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="1-零碎知识点"><a href="#1-零碎知识点" class="headerlink" title="1.零碎知识点"></a>1.零碎知识点</h3><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><blockquote><p>公式： 变量 = 条件返回True的结果  if 条件 else 条件返回False的结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">b = 5</span><br><span class="line">c = a if a&gt;b else b # 三元运算</span><br><span class="line">print(c) # 5</span><br></pre></td></tr></table></figure><h4 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h4><ul><li>time.time() </li><li>time.sleep() 让程序执行到这个位置的时候停一会儿</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line">time.sleep(5) # 让程序执行到这个位置的时候停一会儿</span><br><span class="line">print(&apos;哈哈哈&apos;)</span><br><span class="line"></span><br><span class="line">print(time.time()) # 1514426720.953799 返回从1970.1.1 0:0:0到现在的 秒</span><br><span class="line"></span><br><span class="line"># 5秒后 打印 哈哈哈</span><br></pre></td></tr></table></figure><h3 id="2-装饰器前奏之年终评级测试代码效率"><a href="#2-装饰器前奏之年终评级测试代码效率" class="headerlink" title="2.装饰器前奏之年终评级测试代码效率"></a>2.装饰器前奏之年终评级测试代码效率</h3><blockquote><p>1.测试效率</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;老板好同事好大家好&apos;)</span><br><span class="line"></span><br><span class="line">def timmer(func):</span><br><span class="line">    start = time.time()</span><br><span class="line">    func()</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(end - start)</span><br><span class="line"></span><br><span class="line"># 测试代码效率</span><br><span class="line">timmer(test)</span><br></pre></td></tr></table></figure><blockquote><p>2.这样虽然实现了，但是你的同事必须 每次都timmer(xx) /timmer(aa) /timmer(bb)</p></blockquote><p>我们想要的最终结果就是 直接调用func()</p><blockquote><p>需求：不想修改函数的调用方式，但是还想在原来函数前后添加功能</p></blockquote><blockquote><h4 id="timmer-就是一个装饰器函数，只是对一个函数，有一些装饰作用"><a href="#timmer-就是一个装饰器函数，只是对一个函数，有一些装饰作用" class="headerlink" title="timmer 就是一个装饰器函数，只是对一个函数，有一些装饰作用"></a>timmer 就是一个装饰器函数，只是对一个函数，有一些装饰作用</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;老板好同事好大家好&apos;)</span><br><span class="line"></span><br><span class="line">def timmer(func):</span><br><span class="line">    def inner():</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line"># 这样的效果就是如下</span><br><span class="line">test = timmer(test)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><h3 id="3-装饰器初识"><a href="#3-装饰器初识" class="headerlink" title="3.装饰器初识"></a>3.装饰器初识</h3><blockquote><p>原则：开放封闭原则</p></blockquote><ul><li>开放：对扩展是开放的（在不改变原功能函数调用方式的基础上扩展）</li><li>封闭：对修改是封闭的（不修改原功能函数）</li></ul><h4 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line"></span><br><span class="line">def timmer(func):  #装饰器函数</span><br><span class="line">    def inner():</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@timmer          #语法糖 @+装饰器函数</span><br><span class="line">def test():      #被装饰的函数</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;老板好同事好大家好&apos;)</span><br><span class="line"></span><br><span class="line"># 直接这样就实现了刚刚的功能</span><br><span class="line"># test = timmer(test) 语法糖就是去掉了这句话</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line">print(test) #None</span><br></pre></td></tr></table></figure><p>为什么最后 test()的结果是None</p><ul><li>inner没有返回值</li></ul><p>修改如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line">def timmer(func):  #装饰器函数</span><br><span class="line">    def inner():</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func() # 用一个变量保存 func的执行结果</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">        return res</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@timmer         </span><br><span class="line">def test():     </span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;老板好同事好大家好&apos;)</span><br><span class="line">    return &apos;老板好&apos;</span><br><span class="line"></span><br><span class="line">test() # &apos;老板好&apos;</span><br></pre></td></tr></table></figure><blockquote><p>虽然我们简单的实现了装饰器的雏形，但是如果功能函数要接受参会素怎么办？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line">def timmer(func):  #装饰器函数</span><br><span class="line">    def inner(a):</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(a) # 用一个变量保存 func的执行结果</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">        return res</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@timmer         </span><br><span class="line">def test(a):     </span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;老板好同事好大家好&apos;,a)</span><br><span class="line">    return &apos;老板好&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 内部原理</span><br><span class="line"># test = timmer(test) 此时 test = inner</span><br><span class="line"># test(1)  inner(1)</span><br><span class="line"></span><br><span class="line">test(1)</span><br></pre></td></tr></table></figure><blockquote><p>如果有两个参数呢？继续傻傻的填参数修改。。。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line">def timmer(func):  #装饰器函数</span><br><span class="line">    def inner(a,b):</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(a,b) # 用一个变量保存 func的执行结果</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">        return res</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@timmer         </span><br><span class="line">def test(a,b):     </span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;老板好同事好大家好&apos;,a,b)</span><br><span class="line">    return &apos;老板好&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 内部原理</span><br><span class="line"># test = timmer(test) 此时 test = inner</span><br><span class="line"># test(1,2)  inner(1,2)</span><br><span class="line"></span><br><span class="line">test(1,2)</span><br></pre></td></tr></table></figure><blockquote><p>我们不知道函数参数有多少或者是什么形式的（万能参数）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import time </span><br><span class="line">def timmer(func):  #装饰器函数</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args,**kwargs) # 用一个变量保存 func的执行结果</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">        return res</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@timmer         </span><br><span class="line">def test(a,b,c):     </span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;老板好同事好大家好&apos;,a,b)</span><br><span class="line">    return &apos;老板好&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 内部原理</span><br><span class="line"># test = timmer(test) 此时 test = inner</span><br><span class="line"># test(1,2,c=3)  inner(1,2,c=3)</span><br><span class="line"></span><br><span class="line">test(1,2,c=3)</span><br></pre></td></tr></table></figure><blockquote><h4 id="去掉所有多余的代码-再看装饰器代码"><a href="#去掉所有多余的代码-再看装饰器代码" class="headerlink" title="去掉所有多余的代码,再看装饰器代码"></a>去掉所有多余的代码,再看装饰器代码</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def wrapper(func):  #装饰器函数 func是被装饰的函数</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        res = func(*args,**kwargs) # 用一个变量保存 func的执行结果</span><br><span class="line">        return res</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@wrapper        # test = wrapper(test)         </span><br><span class="line">def test(a,b,c):     </span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    print(&apos;老板好同事好大家好&apos;,a,b)</span><br><span class="line">    return &apos;老板好&apos;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>装饰器</p><ul><li>开发原则：开放封闭原则</li><li>装饰器的作用：在不改变原函数的调用方式的情况下，在函数前后添加功能</li><li>装饰器的本质：闭包函数</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P010_01_python命名空间和作用域</title>
      <link href="/2018/07/23/P010_01_python%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2018/07/23/P010_01_python%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="函数的命名空间"><a href="#函数的命名空间" class="headerlink" title="函数的命名空间"></a>函数的命名空间</h3><blockquote><p>命名空间一共分为三种：</p></blockquote><ul><li>内置命名空间 —— Python解释器<ol><li>就是python解释器一启动就可以使用的名字存储在内置命名空间中</li><li>内置的名字在启动解释器的时候被加载进内存里<br>print() 、len()、list、tuple等</li></ol></li><li>全局命名空间 —— 我们写的代码但不是函数中的代码<ol><li>是在程序从上到下被执行的过程中依次加载进内存的</li><li>放置了我们设置的所有变量名和函数名</li></ol></li><li>局部命名空间 —— 函数<ol><li>就是函数内部定义的名字</li><li>当调用函数的时候，才会产生这个名称空间，随着函数执行的结束，这个命名空间又消失了</li></ol></li></ul><blockquote><p>注意：</p></blockquote><ul><li>在局部:可以使用全局、内置命名空间中的名字</li><li>在全局:可以使用内置命名空间中的名字，但是不能用局部的</li><li>在内置:不能使用局部和全局的名字的</li></ul><h4 id="命名空间的使用"><a href="#命名空间的使用" class="headerlink" title="命名空间的使用"></a>命名空间的使用</h4><blockquote><p>全局不能访问局部</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    a = 1</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">print(a) # 报错 a为 func函数内部定义的变量为局部变量，不能在全局中访问</span><br></pre></td></tr></table></figure><blockquote><p>内置和全局都存在的max方法</p></blockquote><p>这个非常神似js的作用域链</p><ol><li>max为系统定义过的</li><li>你在全局里重新定义max</li><li>调用的时候就会使用全局里定义的(就近原则)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def max(l):</span><br><span class="line">    print(&apos;in max func&apos;)</span><br><span class="line"></span><br><span class="line">print(max([1,2,3]))</span><br></pre></td></tr></table></figure><blockquote><p>python的关怀</p></blockquote><ul><li>func  –&gt; 函数的内存地址</li><li>函数名() 函数的调用</li><li>函数的内存地址() 函数的调用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def xxx():</span><br><span class="line">    print(1)</span><br><span class="line"></span><br><span class="line">print(xxx) # 打印出一个地址  &lt;function xxx at 0x00000000004D2E18&gt;</span><br></pre></td></tr></table></figure><p>通过函数名调用明显比 调用形如「0x00000000004D2E18 」的十六进制数表示的内存地址要快。</p><p>(在一个班级的环境中：你是选择用人名来产生会话？还是身份证号。)</p><blockquote><p>xxx函数的调用过程</p></blockquote><ol><li>xxx() 的时候</li><li>会现在全局范围内找有没有 xxx的定义，有则调用，反之去它的上一层也就是 内置命名空间，有则调用，反之报错</li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="作用域的种类"><a href="#作用域的种类" class="headerlink" title="作用域的种类"></a>作用域的种类</h4><ul><li>全局作用域 —— 作用在全局 —— 内置和全局名字空间中的名字都属于全局作用域  ——globals()<br>  注：永远打印全局的名字</li><li>局部作用域 —— 作用在局部 —— 函数（局部名字空间中的名字属于局部作用域） ——locals()<br>  注：输出什么，根据locals所在的位置(根据调用位置来输出结果)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(globals())</span><br><span class="line">print(locals())</span><br><span class="line"># 结果一样  因为都在全局作用域里</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    a = 12</span><br><span class="line">    b = 20</span><br><span class="line">    print(locals())</span><br><span class="line">    print(globals())</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"># 结果不一样 </span><br><span class="line"># globals在哪里调用都是输出全局作用域里的内容</span><br><span class="line"># locals 这里只有   &#123;&apos;a&apos;: 12 , &apos;b&apos;: 20&#125;</span><br></pre></td></tr></table></figure><h4 id="global关键字的作用"><a href="#global关键字的作用" class="headerlink" title="global关键字的作用"></a>global关键字的作用</h4><ol><li>对于不可变数据类型，在局部可查看全局作用域中的变量，但是不能直接修改</li><li>如果想要修改的时候影响到全局，需要在程序的一开始添加global声明</li><li>如果在一个局部（函数）内声明了一个global变量，那么这个变量在局部的所有操作将对全局的变量有效</li></ol><blockquote><p>不修改的情况下可以直接访问全局作用域的变量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">def xxx():</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">xxx() # 1</span><br></pre></td></tr></table></figure><blockquote><p>修改全局变量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">def xxx():</span><br><span class="line">    a = 2</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">xxx() # 2</span><br><span class="line">print(a) # 1</span><br><span class="line"></span><br><span class="line"># 影响到全局</span><br><span class="line">b = 1</span><br><span class="line">def xxx():</span><br><span class="line">    global b</span><br><span class="line">    b = 2</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line">xxx() # 2</span><br><span class="line">print(b) # 2</span><br></pre></td></tr></table></figure><h3 id="函数的嵌套和作用域链"><a href="#函数的嵌套和作用域链" class="headerlink" title="函数的嵌套和作用域链"></a>函数的嵌套和作用域链</h3><h4 id="1-函数的嵌套调用"><a href="#1-函数的嵌套调用" class="headerlink" title="1.函数的嵌套调用"></a>1.函数的嵌套调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def max(a,b):</span><br><span class="line">    return a if a&gt;b else b</span><br><span class="line"></span><br><span class="line">def the_max(x,y,z):  #函数的嵌套调用</span><br><span class="line">    c = max(x,y)</span><br><span class="line">    return max(c,z)</span><br><span class="line"></span><br><span class="line">print(the_max(1,2,3))</span><br></pre></td></tr></table></figure><h4 id="2-函数的嵌套定义"><a href="#2-函数的嵌套定义" class="headerlink" title="2.函数的嵌套定义"></a>2.函数的嵌套定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    print(&quot;f1&quot;)</span><br><span class="line">    def f2():</span><br><span class="line">        print(&quot;f2&quot;)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h4 id="3-函数的作用域链"><a href="#3-函数的作用域链" class="headerlink" title="3.函数的作用域链"></a>3.函数的作用域链</h4><blockquote><p>初学让你疑惑的执行结果！！！ 尤其是你会js </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    a = 1</span><br><span class="line">    def f2():</span><br><span class="line">        a = 2</span><br><span class="line">    f2()</span><br><span class="line">    print(&apos;a in f1 : &apos;,a)</span><br><span class="line"></span><br><span class="line">f1() # a in f1 :  1</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">f2中修改了 局部变量 a 的值</span><br><span class="line">但是 在 f1中a值仍然为 1 </span><br><span class="line"></span><br><span class="line">ps ： js里这个肯定是 2 </span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>原来python里要加 nonlocal 声明</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    a = 1</span><br><span class="line">    def f2():</span><br><span class="line">        nonlocal a</span><br><span class="line">        a = 2</span><br><span class="line">    f2()</span><br><span class="line">    print(&apos;a in f1 : &apos;,a)</span><br><span class="line"></span><br><span class="line">f1() # a in f1 :  2</span><br></pre></td></tr></table></figure><blockquote><h4 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h4></blockquote><p>首先，要明确 nonlocal 关键字是定义在闭包里面的。请看以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = 0</span><br><span class="line">def outer():</span><br><span class="line">    x = 1</span><br><span class="line">    def inner():</span><br><span class="line">        x = 2</span><br><span class="line">        print(&quot;inner:&quot;, x)</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    print(&quot;outer:&quot;, x)</span><br><span class="line"> </span><br><span class="line">outer()</span><br><span class="line">print(&quot;global:&quot;, x)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">inner: 2</span><br><span class="line">outer: 1</span><br><span class="line">global: 0</span><br></pre></td></tr></table></figure><p>现在，在闭包里面加入nonlocal关键字进行声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">x = 0</span><br><span class="line">def outer():</span><br><span class="line">    x = 1</span><br><span class="line">    def inner():</span><br><span class="line">        nonlocal x</span><br><span class="line">        x = 2</span><br><span class="line">        print(&quot;inner:&quot;, x)</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    print(&quot;outer:&quot;, x)</span><br><span class="line"> </span><br><span class="line">outer()</span><br><span class="line">print(&quot;global:&quot;, x)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">inner: 2</span><br><span class="line">outer: 2</span><br><span class="line">global: 0</span><br></pre></td></tr></table></figure><blockquote><h4 id="区别：一个函数里面嵌套了一个函数。当使用-nonlocal-时，就声明了该变量不只在嵌套函数inner（）里面才有效，-而是在整个大函数里面都有效。"><a href="#区别：一个函数里面嵌套了一个函数。当使用-nonlocal-时，就声明了该变量不只在嵌套函数inner（）里面才有效，-而是在整个大函数里面都有效。" class="headerlink" title="区别：一个函数里面嵌套了一个函数。当使用 nonlocal 时，就声明了该变量不只在嵌套函数inner（）里面才有效， 而是在整个大函数里面都有效。"></a>区别：一个函数里面嵌套了一个函数。当使用 nonlocal 时，就声明了该变量不只在嵌套函数inner（）里面才有效， 而是在整个大函数里面都有效。</h4></blockquote><p>我们在看 global</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">x = 0</span><br><span class="line">def outer():</span><br><span class="line">    x = 1</span><br><span class="line">    def inner():</span><br><span class="line">        global x</span><br><span class="line">        x = 2</span><br><span class="line">        print(&quot;inner:&quot;, x)</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    print(&quot;outer:&quot;, x)</span><br><span class="line"> </span><br><span class="line">outer()</span><br><span class="line">print(&quot;global:&quot;, x)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">inner: 2</span><br><span class="line">outer: 1</span><br><span class="line">global: 2</span><br></pre></td></tr></table></figure><p>结论：global 是对整个环境下的变量起作用，而不是对函数类的变量起作用。</p><h4 id="4-函数的本质"><a href="#4-函数的本质" class="headerlink" title="4.函数的本质"></a>4.函数的本质</h4><ol><li><p>可以被引用</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&apos;in func&apos;)</span><br><span class="line"></span><br><span class="line">f = func</span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure></li><li><p>可以被当作容器类型的元素</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    print(&apos;f1&apos;)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    print(&apos;f2&apos;)</span><br><span class="line"></span><br><span class="line">def f3():</span><br><span class="line">    print(&apos;f3&apos;)</span><br><span class="line"></span><br><span class="line">l = [f1,f2,f3]</span><br><span class="line">d = &#123;&apos;f1&apos;:f1,&apos;f2&apos;:f2,&apos;f3&apos;:f3&#125;</span><br><span class="line">#调用</span><br><span class="line">l[0]()</span><br><span class="line">d[&apos;f2&apos;]()</span><br></pre></td></tr></table></figure></li><li><p>可以当作的参数和返回值</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(123)</span><br><span class="line"></span><br><span class="line">def wahaha(f):</span><br><span class="line">    f()</span><br><span class="line">    return f           #函数名可以作为函数的返回值</span><br><span class="line"></span><br><span class="line">qqxing = wahaha(func)   # 函数名可以作为函数的参数</span><br><span class="line">qqxing()</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5.闭包"></a>5.闭包</h4><blockquote><p>嵌套函数，内部函数调用外部函数的变量</p></blockquote><ol><li><p>常用方式</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    name = &apos;eva&apos;</span><br><span class="line">    def inner():</span><br><span class="line">        print(name)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">f = func()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure></li><li><p>判断闭包函数的方法 closure</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#输出的__closure__有cell元素 ：是闭包函数</span><br><span class="line">def func():</span><br><span class="line">    name = &apos;eva&apos;</span><br><span class="line">    def inner():</span><br><span class="line">        print(name)</span><br><span class="line">    print(inner.__closure__)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">f = func()</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">(&lt;cell at 0x0000000001ECA4C8: str object at 0x0000000001DCB1B8&gt;,)</span><br><span class="line">eva</span><br><span class="line">-------------------------华丽的分割线--------------------------------------------------------------</span><br><span class="line">#输出的__closure__为None ：不是闭包函数</span><br><span class="line">name = &apos;egon&apos;</span><br><span class="line">def func2():</span><br><span class="line">    def inner():</span><br><span class="line">        print(name)</span><br><span class="line">    print(inner.__closure__)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">f2 = func2()</span><br><span class="line">f2()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">None</span><br><span class="line">egon</span><br></pre></td></tr></table></figure><ol start="3"><li>闭包嵌套</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def wrapper():</span><br><span class="line">    money = 1000</span><br><span class="line">    def func():</span><br><span class="line">        name = &apos;eva&apos;</span><br><span class="line">        def inner():</span><br><span class="line">            print(name,money)</span><br><span class="line">        return inner</span><br><span class="line">    return func</span><br><span class="line"></span><br><span class="line">f = wrapper()</span><br><span class="line">i = f()</span><br><span class="line">i()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">eva 1000</span><br></pre></td></tr></table></figure><ol start="4"><li>闭包函数获取网络应用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from urllib.request import urlopen</span><br><span class="line"></span><br><span class="line">def index():</span><br><span class="line">    url = &quot;http://www.xiaohua100.cn/index.html&quot;</span><br><span class="line">    def get():</span><br><span class="line">        return urlopen(url).read()</span><br><span class="line">    return get</span><br><span class="line"></span><br><span class="line">xiaohua = index()</span><br><span class="line">content = xiaohua()</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P009_01_python函数</title>
      <link href="/2018/07/22/P009_01_python%E5%87%BD%E6%95%B0/"/>
      <url>/2018/07/22/P009_01_python%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="详情请参考之前写的知识总结"><a href="#详情请参考之前写的知识总结" class="headerlink" title="详情请参考之前写的知识总结"></a>详情请参考之前写的知识总结</h3><p>Python004函数</p><h3 id="快捷知识点"><a href="#快捷知识点" class="headerlink" title="快捷知识点"></a>快捷知识点</h3><p>函数参数的顺序</p><blockquote><p>位置参数,*args,默认参数,**kwargs</p></blockquote><h3 id="一道恶心的题"><a href="#一道恶心的题" class="headerlink" title="一道恶心的题"></a>一道恶心的题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def xx(a = []):</span><br><span class="line">    a.append(1)</span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure><p>调用方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xx()</span><br><span class="line">xx()</span><br><span class="line">xx()</span><br><span class="line">xx()</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">[1]</span><br><span class="line">[1,1]</span><br><span class="line">[1,1,1]</span><br><span class="line">[1,1,1,1]</span><br></pre></td></tr></table></figure><p>调用方式二：</p><p>xx()<br>xx([]) # 传递了参数<br>xx()<br>xx()</p><p>结果<br>[1]<br>[1]<br>[1,1]<br>[1,1,1]</p><blockquote><p>如果默认参数的值是一个可变数据类型，那么每次调用函数的时候,如果不传就公用这个数据类型的资源</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P008_01_python文件操作</title>
      <link href="/2018/07/22/P008_01_python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/07/22/P008_01_python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><h4 id="1-只读-和-读写"><a href="#1-只读-和-读写" class="headerlink" title="1.只读 和 读写"></a>1.只读 和 读写</h4><blockquote><p>‘r’ 只读模式【默认模式，文件必须存在，不存在则抛出异常】 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;a.txt&apos;,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">data = f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>‘r+’ 读写【可读，可写】</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;a.txt&apos;,&apos;r+&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">data = f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="2-只写-和-写读："><a href="#2-只写-和-写读：" class="headerlink" title="2.只写 和 写读："></a>2.只写 和 写读：</h4><blockquote><p>‘w’ 只写模式【不可读；不存在则创建；存在则清空内容】</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;log&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">f.write(&apos;aaa&apos;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>‘w+’ 写读【可读，可写】</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;log&apos;,&apos;w+&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">f.write(&apos;aaa&apos;)</span><br><span class="line">print(f.read())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="3-追加-和-追加写"><a href="#3-追加-和-追加写" class="headerlink" title="3.追加 和 追加写"></a>3.追加 和 追加写</h4><blockquote><p>‘a’ 之追加写模式【不可读；不存在则创建；存在则只追加内容】</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;log&apos;,&apos;a&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">f.write(&apos;aaa&apos;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>‘a+’ 写读【可读，可写】</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;log&apos;,mode=&apos;a+&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">f.write(&apos;aaa&apos;)</span><br><span class="line">print(f.read())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="4-只写-和-写读"><a href="#4-只写-和-写读" class="headerlink" title="4.只写 和 写读"></a>4.只写 和 写读</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;x&apos;    只写模式【不可读；不存在则创建，存在则报错】</span><br><span class="line"></span><br><span class="line">&apos;x+&apos;    写读【可读，可写】</span><br></pre></td></tr></table></figure><h4 id="5-rb、wb、ab、xb的用法："><a href="#5-rb、wb、ab、xb的用法：" class="headerlink" title="5.rb、wb、ab、xb的用法："></a>5.rb、wb、ab、xb的用法：</h4><ol><li><p>对于非文本文件，我们只能使用b模式，”b”表示以字节的方式操作（而所有文件也都是以字节的形式存储的，使用这种模式无需考虑文本文件的字符编码、图片文件的jgp格式、视频文件的avi格式）</p></li><li><p>以b方式打开时，读取到的内容是字节类型，写入时也需要提供字节类型，不能指定编码</p></li></ol><blockquote><p>b模式写入的时候如果是汉字就得转换为进制码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;log&apos;,mode=&apos;rb&apos;)</span><br><span class="line">f.read() # 进制码</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(&apos;log&apos;,mode=&apos;wb&apos;)</span><br><span class="line">f.write(&apos;纠纷&apos;.encode(&apos;utf-8&apos;))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h4 id="6-操作文件的方法："><a href="#6-操作文件的方法：" class="headerlink" title="6.操作文件的方法："></a>6.操作文件的方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f.read() #读取所有内容,光标移动到文件末尾</span><br><span class="line">f.readline() #读取一行内容,光标移动到第二行首部</span><br><span class="line">f.readlines() #读取每一行内容,存放于列表中</span><br><span class="line"></span><br><span class="line">f.write(&apos;1111\n222\n&apos;) #针对文本模式的写,需要自己写换行符</span><br><span class="line">f.write(&apos;1111\n222\n&apos;.encode(&apos;utf-8&apos;)) #针对b模式的写,需要自己写换行符</span><br><span class="line">f.writelines([&apos;333\n&apos;,&apos;444\n&apos;]) #文件模式</span><br><span class="line">f.writelines([bytes(&apos;333\n&apos;,encoding=&apos;utf-8&apos;),&apos;444\n&apos;.encode(&apos;utf-8&apos;)]) #b模式</span><br><span class="line"></span><br><span class="line">#seek 光标移动到第几个字节的位置</span><br><span class="line">f.seek()    移动到最开始</span><br><span class="line">f.seek(2)   </span><br><span class="line"></span><br><span class="line">#tell    告诉你光标的位置</span><br><span class="line">f.tell()</span><br><span class="line"></span><br><span class="line">#readable    #文件是否可读</span><br><span class="line">f.readable()</span><br></pre></td></tr></table></figure><h4 id="7-truncate的用法："><a href="#7-truncate的用法：" class="headerlink" title="7.truncate的用法："></a>7.truncate的用法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate是截断文件，所有文件的打开方式必须可写，但是不能用w或w+等方式打开，因为那样直接清空文件了，所以truncate要在r+或a或a+等模式下测试效果</span><br></pre></td></tr></table></figure><h4 id="8-强大装逼打开和关闭文件结合代码："><a href="#8-强大装逼打开和关闭文件结合代码：" class="headerlink" title="8.强大装逼打开和关闭文件结合代码："></a>8.强大装逼打开和关闭文件结合代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;log&apos;,mode=&apos;r+&apos;,encoding=&apos;utf-8&apos;) as f：</span><br><span class="line">    f.read()</span><br><span class="line"># 自动调用close()</span><br></pre></td></tr></table></figure><p>对俩文件执行读写操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;log&apos;,mode=&apos;r+&apos;,encoding=&apos;utf-8&apos;) as f1, open(&apos;log&apos;,mode=&apos;w+&apos;,encoding=&apos;utf-8&apos;) as f2：</span><br></pre></td></tr></table></figure><blockquote><p>注意实现 with后的读写操作必须在with的缩进内</p></blockquote><h4 id="9-修改文件"><a href="#9-修改文件" class="headerlink" title="9.修改文件"></a>9.修改文件</h4><blockquote><p>需求：实现文件的编辑效果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;小护士班主任&apos;,encoding=&apos;utf-8&apos;) as f,open(&apos;小护士班主任.bak&apos;,&apos;w&apos;,encoding=&apos;utf-8&apos;) as f2:</span><br><span class="line">    for line in f:</span><br><span class="line">        if &apos;星儿&apos; in line:  #班主任:星儿</span><br><span class="line">            line = line.replace(&apos;星儿&apos;,&apos;啊娇&apos;)</span><br><span class="line">        #写文件</span><br><span class="line">        f2.write(line) #小护士:金老板</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">os.remove(&apos;小护士班主任&apos;) #删除文件</span><br><span class="line">os.rename(&apos;小护士班主任.bak&apos;,&apos;小护士班主任&apos;)  #重命名文件</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>打开文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#open(&apos;路径&apos;，&apos;打开方式&apos;，&apos;指定编码方式&apos;)</span><br><span class="line"># 打开方式 r w a r+ w+ a+ b</span><br><span class="line">    #r+ 打开文件直接写 和读完再写</span><br><span class="line"># 编码方式 —— utf-8</span><br></pre></td></tr></table></figure><blockquote><p>操作文件</p></blockquote><ul><li>读</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">read 一次性读</span><br><span class="line">readlines 一次性读</span><br><span class="line">readline 一行一行读</span><br><span class="line">    不知道在哪儿结束</span><br><span class="line">    视频 图片 rb bytes 按照字节读</span><br><span class="line">    </span><br><span class="line">for循环 —— 最好！！！</span><br></pre></td></tr></table></figure><ul><li>写</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write</span><br></pre></td></tr></table></figure><ul><li>光标 —— 文件指针</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seek _ 指定光标移动到某个位置</span><br><span class="line">tell _ 获取光标当前的位置</span><br><span class="line">truncate _ 截取文件</span><br></pre></td></tr></table></figure><blockquote><p>关闭文件</p></blockquote><ul><li>close</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P007_01_python集合和深浅拷贝</title>
      <link href="/2018/07/22/P007_01_python%E9%9B%86%E5%90%88%E5%92%8C%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2018/07/22/P007_01_python%E9%9B%86%E5%90%88%E5%92%8C%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>1.集合的创建</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set1 = set(&#123;1,2,&apos;barry&apos;&#125;)</span><br><span class="line">set2 = &#123;1,2,&apos;barry&apos;&#125;</span><br><span class="line">print(set1,type(set1))</span><br><span class="line">print(set2,type(set2))</span><br><span class="line">结果：</span><br><span class="line">&#123;1, 2, &apos;barry&apos;&#125; &lt;class &apos;set&apos;&gt;</span><br><span class="line">&#123;1, 2, &apos;barry&apos;&#125; &lt;class &apos;set&apos;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.集合的增</p></blockquote><ul><li>直接增加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;&apos;alex&apos;,&apos;wusir&apos;,&apos;ritian&apos;,&apos;egon&apos;,&apos;barry&apos;&#125;</span><br><span class="line">set1.add(&apos;女神&apos;)</span><br><span class="line">print(set1)  #增加，无序的。</span><br><span class="line">结果：</span><br><span class="line">&#123;&apos;ritian&apos;, &apos;alex&apos;, &apos;egon&apos;, &apos;女神&apos;, &apos;wusir&apos;, &apos;barry&apos;&#125;</span><br></pre></td></tr></table></figure><ul><li>迭代增加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;&apos;alex&apos;,&apos;wusir&apos;,&apos;ritian&apos;,&apos;egon&apos;,&apos;barry&apos;&#125;</span><br><span class="line">set1.update(&apos;A&apos;)</span><br><span class="line">print(set1)</span><br><span class="line">set1.update(&apos;老师&apos;)</span><br><span class="line">print(set1)</span><br><span class="line">set1.update([1,2,3])</span><br><span class="line">print(set1)</span><br><span class="line">结果：</span><br><span class="line">&#123;&apos;egon&apos;, &apos;alex&apos;, &apos;ritian&apos;, &apos;wusir&apos;, &apos;A&apos;, &apos;barry&apos;&#125;</span><br><span class="line">&#123;&apos;egon&apos;, &apos;老&apos;, &apos;alex&apos;, &apos;ritian&apos;, &apos;wusir&apos;, &apos;A&apos;, &apos;师&apos;, &apos;barry&apos;&#125;</span><br><span class="line">&#123;&apos;egon&apos;, &apos;老&apos;, 1, 2, 3, &apos;alex&apos;, &apos;ritian&apos;, &apos;wusir&apos;, &apos;A&apos;, &apos;师&apos;, &apos;barry&apos;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.集合的删</p></blockquote><ul><li>3.1 .remove(‘元素’)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;&apos;alex&apos;,&apos;wusir&apos;,&apos;ritian&apos;,&apos;egon&apos;,&apos;barry&apos;&#125;</span><br><span class="line">set1.remove(&apos;alex&apos;) #删除一个元素</span><br><span class="line">print(set1)</span><br><span class="line">结果：&#123;&apos;wusir&apos;, &apos;ritian&apos;, &apos;barry&apos;, &apos;egon&apos;&#125;</span><br></pre></td></tr></table></figure><ul><li>3.2 .pop()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;&apos;alex&apos;,&apos;wusir&apos;,&apos;ritian&apos;,&apos;egon&apos;,&apos;barry&apos;&#125;</span><br><span class="line">set1.pop() #随机删除一个元素</span><br><span class="line">print(set1)</span><br><span class="line">结果：</span><br><span class="line">&#123;&apos;alex&apos;, &apos;ritian&apos;, &apos;wusir&apos;, &apos;egon&apos;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>3.3 .clear()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;&apos;alex&apos;,&apos;wusir&apos;,&apos;ritian&apos;,&apos;egon&apos;,&apos;barry&apos;&#125;</span><br><span class="line">set1.clear() #清空集合</span><br><span class="line">print(set1)</span><br><span class="line">结果：</span><br><span class="line">set()</span><br></pre></td></tr></table></figure></li><li><p>3.4 del</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;&apos;alex&apos;,&apos;wusir&apos;,&apos;ritian&apos;,&apos;egon&apos;,&apos;barry&apos;&#125;</span><br><span class="line">del set1 #删除集合，会报错</span><br><span class="line">print(set1)</span><br><span class="line">结果：报错</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>4.集合之大招</p></blockquote><ul><li>4.1交集 （&amp; 或者 intersection）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1,2,3,4,5&#125;</span><br><span class="line">set2 = &#123;4,5,6,7,8&#125;</span><br><span class="line">print(set1 &amp; set2)</span><br><span class="line">print(set1.intersection(set2))</span><br><span class="line">结果：</span><br><span class="line">&#123;4, 5&#125;</span><br><span class="line">&#123;4, 5&#125;</span><br></pre></td></tr></table></figure><ul><li>4.2并集 （| 或者 union）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1,2,3,4,5&#125;</span><br><span class="line">set2 = &#123;4,5,6,7,8&#125;</span><br><span class="line">print(set1 | set2)</span><br><span class="line">print(set1.union(set2))</span><br><span class="line">结果：&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure><ul><li><p>4.3差集 （- 或difference）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1,2,3,4,5&#125;</span><br><span class="line">set2 = &#123;4,5,6,7,8&#125;</span><br><span class="line">print(set&#123;1, 2, 3&#125;1 - set2)</span><br><span class="line">print(set1.difference(set2))</span><br><span class="line">结果：</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure></li><li><p>4.4反交集（^ 或者 symmetric_difference）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1,2,3,4,5&#125;</span><br><span class="line">set2 = &#123;4,5,6,7,8&#125;</span><br><span class="line">print(set1 ^ set2)</span><br><span class="line">print(set1.symmetric_difference(set2))</span><br><span class="line">结果：</span><br><span class="line">&#123;1, 2, 3, 6, 7, 8&#125;</span><br><span class="line">&#123;1, 2, 3, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure></li><li><p>4.5子集与超集(&lt; 或者 issubset)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1,2,3&#125;</span><br><span class="line">set2 = &#123;1,2,3,4,5,6&#125;</span><br><span class="line">print(set1 &lt; set2)</span><br><span class="line">print(set1.issubset(set2))</span><br><span class="line">结果：</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">print(set2 &gt; set1)</span><br><span class="line">print(set2.issuperset(set1))</span><br><span class="line">结果：</span><br><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>5.frozenset不可变集合，让集合变成不可变类型。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = frozenset(&apos;barry&apos;)</span><br><span class="line">print(s,type(s))  </span><br><span class="line"># frozenset(&#123;&apos;a&apos;, &apos;y&apos;, &apos;b&apos;, &apos;r&apos;&#125;) &lt;class &apos;frozenset&apos;&gt;</span><br></pre></td></tr></table></figure><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><p>请参考我之前写的知识点总结《Python021==和 is和深浅拷贝》</p><blockquote><p>深浅copy的区别</p><ol><li>对于浅copy来说，第一层创建的是新的内存地址，而从第二层开始，指向的都是同一个内存地址，所以，对于第二层以及更深的层数来说，保持一致性。</li></ol></blockquote><ol start="2"><li>对于深copy来说，两个是完全独立的，改变任意一个的任何元素（无论多少层），另一个绝对不改变。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P006_01_python字符集区别和转换</title>
      <link href="/2018/07/22/P006_01_python%E5%AD%97%E7%AC%A6%E9%9B%86%E5%8C%BA%E5%88%AB%E5%92%8C%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/07/22/P006_01_python%E5%AD%97%E7%AC%A6%E9%9B%86%E5%8C%BA%E5%88%AB%E5%92%8C%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><blockquote><p>ascii：</p></blockquote><ul><li>A：00000010 8位 一个字节</li></ul><blockquote><p>unicode：</p></blockquote><ul><li>A：00000000 00000001 00000010 00000100 32位 四个字节</li><li>中：00000000 00000001 00000010 00000100 32位 四个字节</li></ul><blockquote><p>utf-8：</p><ul><li>A：00000110 8位 一个字节</li><li>中：00000010 00000110 16位 两个字节<br>gbk：</li><li>A：00000110 8位 一个字节</li><li>中：00000010 00000110 16位 两个字节</li></ul></blockquote><ol><li>各个编码之间的二进制，是不能互相识别的，会产生乱码。</li><li>文件的存储，传输，不能是unicode （只能是utf-8 utf-16 gbk gbk2312 ascii等）</li></ol><p>####　py3：</p><ul><li>str  在内存中是Unicode编码。</li><li>bytes类型，可以是 ascii utf-8 gbk ….</li></ul><blockquote><p>b前缀代表它是bytes类型</p></blockquote><h4 id="对于英文："><a href="#对于英文：" class="headerlink" title="对于英文："></a>对于英文：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str：表现形式：s = &apos;alex&apos;</span><br><span class="line">编码方式：010101010 unicode</span><br><span class="line"></span><br><span class="line">bytes：表现形式：s = b&apos;alex&apos;</span><br><span class="line">编码方式：000101010 utf-8 gbk。。。。</span><br></pre></td></tr></table></figure><h4 id="对于中文："><a href="#对于中文：" class="headerlink" title="对于中文："></a>对于中文：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str：表现形式：s = &apos;中国&apos;</span><br><span class="line">编码方式：010101010 unicode</span><br><span class="line">    </span><br><span class="line">bytes： 表现形式：s = b&apos; x\e91\e91\e01\e21\e31\e32&apos;</span><br><span class="line">编码方式：000101010 utf-8 gbk。。。。</span><br><span class="line"></span><br><span class="line">\e91代表一个字节  三个字节代表一个汉字 utf-8里</span><br></pre></td></tr></table></figure><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><blockquote><p>encode 编码，如何将 str ——&gt; bytes</p></blockquote><p>使用方法：  str.encode(‘utf-8’)</p><blockquote><p>decode 解码，如何将 bytes——&gt; str</p></blockquote><p>使用方法：  bytes.decode(‘utf-8’)</p>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P005_01_python字典dict</title>
      <link href="/2018/07/22/P005_01_python%E5%AD%97%E5%85%B8dict/"/>
      <url>/2018/07/22/P005_01_python%E5%AD%97%E5%85%B8dict/</url>
      
        <content type="html"><![CDATA[<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><blockquote><p>神似js里的对象字面量 k/v组成复杂数据类型</p></blockquote><p>但是有更加让人惊讶的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    &apos;name&apos;:[&apos;大乔&apos;,&apos;小乔&apos;],</span><br><span class="line">    &apos;py3&apos;:[&#123;&apos;num&apos;:71,&apos;age&apos;:18&#125;],</span><br><span class="line">    True:1,</span><br><span class="line">    (1,2,3):&apos;aaa&apos;,</span><br><span class="line">    2:&apos;周瑜&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>增</li></ul><p>没有则增加，有则覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&apos;age&apos;:18,&apos;gender&apos;:1&#125;</span><br><span class="line">a[&apos;name&apos;] = &apos;xxx&apos;</span><br><span class="line">a[&apos;age&apos;] = 22</span><br></pre></td></tr></table></figure><blockquote><p>增的扩展</p></blockquote><p>有键值对，不做更改，没有才添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&apos;age&apos;:18,&apos;gender&apos;:1&#125;</span><br><span class="line">a.setdefault(&apos;weight&apos;) # a[&apos;weight&apos;] 的值为None</span><br><span class="line"></span><br><span class="line">a.setdefault(&apos;yy&apos;,2) # a[&apos;yy&apos;] 的值为 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果设置默认值的时候在字典初始化的时候已经有值了 就会用其初始的值</span><br><span class="line">a.setdefault(&apos;gender&apos;,2) # a[&apos;gender&apos;] 的值为 1</span><br></pre></td></tr></table></figure><ul><li>查</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;&apos;age&apos;:15,name:&apos;aa&apos;&#125;</span><br><span class="line">info[&apos;name&apos;] </span><br><span class="line">info.get(&quot;name&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line">注意 如果字典里没有 name字段</span><br><span class="line">a[&apos;name&apos;]就会报错</span><br><span class="line">a.get(&apos;name&apos;) 返回 None</span><br><span class="line"># 返回没有键的情况下返回自定义的值</span><br><span class="line">a.get(&apos;xxxx&apos;,&apos;没有这个键&apos;)</span><br></pre></td></tr></table></figure><ul><li><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">info[&quot;age&quot;] = 10000</span><br><span class="line"></span><br><span class="line">a = &#123;&apos;name&apos;:&apos;aa&apos;,&apos;age&apos;:18,&#125;</span><br><span class="line">b = &#123;&apos;name&apos;:&apos;bb&apos;,&apos;weight&apos;:50&#125;</span><br><span class="line"># 将a的所有键值对 更新到b里 </span><br><span class="line">b.update(a) </span><br><span class="line"># &#123;&apos;name&apos;:&apos;aa&apos;,&apos;age&apos;:18&apos;,weight&apos;:50&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 删除 info里的 name字段</span><br><span class="line">del info[&quot;name&quot;]</span><br><span class="line"></span><br><span class="line"># pop的删--&gt;按照键去删</span><br><span class="line">info.pop(&apos;name&apos;) # 如果info里没有name字段就会报错</span><br><span class="line"></span><br><span class="line"># 如何删除你不知道存在不存在的键，同时不报错</span><br><span class="line"># 设置返回值</span><br><span class="line">info.pop(&apos;name&apos;,None) # 即使name不存在也不会报错</span><br><span class="line"></span><br><span class="line"># 随机删除 返回值是元组，删除的键值</span><br><span class="line">info.popitem()</span><br><span class="line"></span><br><span class="line"># 整个删除</span><br><span class="line">del info</span><br></pre></td></tr></table></figure><ul><li>滞空</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;a:1,b:2&#125;</span><br><span class="line">a.clear()</span><br><span class="line"># &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="字典信息"><a href="#字典信息" class="headerlink" title="字典信息"></a>字典信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;a:1,b:2,c:3&#125;</span><br><span class="line"></span><br><span class="line">len(info)</span><br><span class="line"># 3</span><br><span class="line"></span><br><span class="line">info.keys()</span><br><span class="line"># [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line"></span><br><span class="line">info.values()</span><br><span class="line"># [1,2,3]</span><br></pre></td></tr></table></figure><h5 id="items"><a href="#items" class="headerlink" title="items"></a>items</h5><p>返回包含(k,v)元组的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">info.items()</span><br><span class="line"># [(&quot;a&quot;,1),(&quot;b&quot;:2)]</span><br></pre></td></tr></table></figure><h5 id="has-key"><a href="#has-key" class="headerlink" title="has_key"></a>has_key</h5><p>查看字典中key是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;a:1,b:2&#125;</span><br><span class="line">info.has_key(&apos;a&apos;)</span><br><span class="line"># True</span><br></pre></td></tr></table></figure><h5 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h5><blockquote><p>info = {a:1,b:2,c:3}</p></blockquote><ol><li>遍历字典的key</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for key in info.keys():</span><br><span class="line">    print(key)</span><br></pre></td></tr></table></figure><ol start="2"><li>遍历字典的value</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for val in info.values():</span><br><span class="line">    print(val)</span><br></pre></td></tr></table></figure><ol start="3"><li>遍历字典的</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for item in info.items():</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"># (&quot;a&quot;,1) </span><br><span class="line"># (&quot;b&quot;,2) </span><br><span class="line"># (&quot;c&quot;,3) </span><br><span class="line"></span><br><span class="line">for key,val in info.items():</span><br><span class="line">    print(key)</span><br><span class="line">    print(val)</span><br></pre></td></tr></table></figure><h3 id="扩展问题"><a href="#扩展问题" class="headerlink" title="扩展问题"></a>扩展问题</h3><blockquote><p>如何实现列表带索引的遍历</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方法1 比较low的方法是声明个变量然后随着循环递增 很low 不写了</span><br><span class="line"></span><br><span class="line">方法2 </span><br><span class="line">a = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line">for i,v in enumerate(a):</span><br><span class="line">    print(i)</span><br><span class="line">    print(v)</span><br></pre></td></tr></table></figure><blockquote><p>「+ *」</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;abc&quot;+&quot;123&quot;</span><br><span class="line"># &quot;abc123&quot;</span><br><span class="line"></span><br><span class="line">[11,22,33]+[44,55,66]</span><br><span class="line"># [11,22,33,44,55,66]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-&quot;*3</span><br><span class="line"># &quot;---&quot;</span><br><span class="line"></span><br><span class="line">[11,22,33]*2</span><br><span class="line"># [11,22,33,11,22,33]</span><br></pre></td></tr></table></figure><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><ul><li>cmp 比较两个值</li><li>len(item) 计算容器中元素个数</li><li>max(item) 返回容器中最大的元素</li><li>min(item) 返回容器中最小的元素</li><li>del(item) 删除变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cmp(&quot;hello&quot;,&quot;itcast&quot;)</span><br><span class="line"># -1</span><br><span class="line"></span><br><span class="line">cmp(&quot;itcast&quot;,&quot;hello&quot;)</span><br><span class="line"># 1</span><br><span class="line"></span><br><span class="line">cmp(&quot;hello&quot;,&quot;hello&quot;)</span><br><span class="line"># 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P004_01_python列表和元组</title>
      <link href="/2018/07/22/P004_01_python%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/"/>
      <url>/2018/07/22/P004_01_python%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>python里的列表(神似js里的数组)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names =[&apos;aa&apos;,&apos;bb&apos;,&apos;cc&apos;]</span><br><span class="line">type(names) # list</span><br></pre></td></tr></table></figure><p>遍历列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">infos = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</span><br><span class="line"></span><br><span class="line">for temp in infos:</span><br><span class="line">    print(temp)</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">while i&lt;len(infos):</span><br><span class="line">    print(infos[i])</span><br><span class="line">    i+=1</span><br></pre></td></tr></table></figure><h4 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h4><blockquote><p>增</p></blockquote><ul><li>append(obj) 向列表最后添加一个元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">a.append(4)</span><br><span class="line"># [1,2,3,4]</span><br></pre></td></tr></table></figure><ul><li>extend 添加内容必须是一个可迭代对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4]</span><br><span class="line">b = [100,200]</span><br><span class="line">a.extend(b)</span><br><span class="line"># [1,2,3,4,100,200]</span><br></pre></td></tr></table></figure><ul><li>insert(index,obj) 指定位置添加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = [1,2,3,4]</span><br><span class="line">b.insert(1,99)</span><br><span class="line"># [1,99,2,3,4]</span><br></pre></td></tr></table></figure><blockquote><p>查</p></blockquote><ul><li>in</li><li>not in </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#判断列表里是否存在</span><br><span class="line"># 笨方法</span><br><span class="line"># 笨方法</span><br><span class="line">inputName = 2</span><br><span class="line">flg = 0 </span><br><span class="line">names = [1,2,3,4,5]</span><br><span class="line">for name in names:</span><br><span class="line">    if name = inputName:</span><br><span class="line">        flg = 1</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"># 好方法</span><br><span class="line">if inputName in names:</span><br><span class="line">    print(&apos;find&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;not find&apos;)</span><br></pre></td></tr></table></figure><ul><li>index</li><li>count</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [1,1,2,2,3,3,4]</span><br><span class="line">a.index(1,1,3)  # 左闭右开[1,3)</span><br><span class="line"></span><br><span class="line">a.count(2)</span><br><span class="line"># 2</span><br></pre></td></tr></table></figure><blockquote><p>删</p></blockquote><ul><li>del 根据索引删 (也可以直接删除整个数组)</li><li>pop 删最后一个(也可以传递index参数删除指定位置的元素，不传递默认最后一个)</li><li>remove 根据值删</li><li>clear 清空</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------</span><br><span class="line"># del</span><br><span class="line">a = [1,2,3,4,5,6]</span><br><span class="line">del a[0]</span><br><span class="line"># [2,3,4,5,6]</span><br><span class="line"></span><br><span class="line">del a </span><br><span class="line">print(a) # 报错 在内存里把数组删除了</span><br><span class="line">--------------------------------</span><br><span class="line">a.pop()</span><br><span class="line"># [2,3,4,5]</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line"># clear</span><br><span class="line">b = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line">b.clear() # []</span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line">&gt; 删除部分(切片删除)</span><br></pre></td></tr></table></figure><p>a = [1,2,3,4,5]<br>del a[0:2] # [3,4,5]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><blockquote><p>改</p></blockquote><ul><li>按切片改如果内容是字符串就会把修改的内容迭代添加到该位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [&apos;aaa&apos;,&apos;bbb&apos;,&apos;ccc&apos;]</span><br><span class="line">a[0:2] = &apos;ab&apos;</span><br><span class="line">print(a) # [&apos;a&apos;,&apos;b&apos;,&apos;bbb&apos;,&apos;ccc&apos;]</span><br><span class="line">a[0:2] = &apos;abcd&apos;</span><br><span class="line">print(a) # [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;bbb&apos;,&apos;ccc&apos;]</span><br></pre></td></tr></table></figure><ul><li>如果切换改的内容是数组也是迭代添加到指定位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [&apos;aaa&apos;,&apos;bbb&apos;,&apos;ccc&apos;]</span><br><span class="line">a[0:3] = [1,2,3,&apos;a&apos;,&apos;b&apos;]</span><br><span class="line">print(a) # [1,2,3,&apos;a&apos;,&apos;b&apos;,&apos;bbb&apos;,&apos;ccc&apos;]</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>sort </li><li>reverse 逆序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [1,3,4,2]</span><br><span class="line">a.reverse()</span><br><span class="line"># [2,4,3,1]</span><br><span class="line"></span><br><span class="line">a.sort()  # 默认正序</span><br><span class="line"># [1,2,3,4]</span><br><span class="line">a.sort(reverse=True)</span><br><span class="line">#[4,3,2,1]</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul><li><p>元组被称为只读列表，即数据可以被查询，但不能被修改，所以，字符串的切片操作同样适用于元组。</p><p>  例：（1，2，3）（”a”,”b”,”c”）</p></li><li>儿子不能改，孙子可能可以改###</li></ul><blockquote><p>元组和列表不同之处在于</p></blockquote><ul><li>元组不能修改</li><li>元组使用小括号，列表使用方括号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = (&apos;a&apos;,1,2,3)</span><br></pre></td></tr></table></figure><blockquote><p>元组的不一致性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = (1.0,2.0,3.0)</span><br><span class="line">type(a)</span><br><span class="line">#tuple</span><br><span class="line"></span><br><span class="line">b = (1.0)</span><br><span class="line">type(b)</span><br><span class="line"># float</span><br><span class="line"># 元组初始化的时候如果只有一个元素是不会初始化为元组的 会把括号里的值当作实际的类型处理</span><br><span class="line"></span><br><span class="line"># 正确做法</span><br><span class="line"></span><br><span class="line">c = (1.0,)</span><br><span class="line">type(c)</span><br><span class="line"># tuple</span><br></pre></td></tr></table></figure><blockquote><p>元组之修改孙子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = (&apos;a&apos;,&apos;b&apos;,[1,2,3],4)</span><br><span class="line"></span><br><span class="line">a[2][0] = &apos;xxx&apos;</span><br><span class="line"># (&apos;a&apos;,&apos;b&apos;,[&apos;xxx&apos;,2,3],4)</span><br></pre></td></tr></table></figure><h3 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h3><blockquote><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;abcde&apos;</span><br><span class="line">s1 = &apos;+&apos;.join(s) # a+b+c+d+e</span><br></pre></td></tr></table></figure><blockquote><p>再看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li = [1,2,3,4,5,6]</span><br><span class="line">&apos;&apos;.join(li) # 123456</span><br></pre></td></tr></table></figure><blockquote><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">range() #就是一个元祖</span><br><span class="line">for i in range(3,10):</span><br><span class="line">    print(i) #循环打印一次，3-9的数字。</span><br><span class="line">for i in range(10):</span><br><span class="line">    print(i) #循环打印一次，0-9的数字。</span><br><span class="line">for i in range(0,10,3):</span><br><span class="line">    print(i) #循环打印一次，0-9的数字，步长3，间接输出0-9所有的被3整除的数。</span><br><span class="line">for i in range(10,0,-2):</span><br><span class="line">    print(i) #循环打印一次，10-1的数字，反向步长为2。</span><br><span class="line">for i in range(10,-1,-2):</span><br><span class="line">    print(i) #循环打印一次，10-0的数字，反向步长为2。</span><br></pre></td></tr></table></figure><blockquote><p>恶心的面试题</p></blockquote><p>执行结果是啥？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(0,10,-1):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>什么也不会执行。。。也不会报错。</p>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P003_01_python基础数据类型</title>
      <link href="/2018/07/19/P003_01_python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/07/19/P003_01_python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数字int。"><a href="#1-数字int。" class="headerlink" title="1. 数字int。"></a>1. 数字int。</h3><blockquote><p>数字主要是用于计算用的，使用方法并不是很多，就记住一种就可以：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#bit_length() 当十进制用二进制表示时，最少使用的位数</span><br><span class="line">v = 11</span><br><span class="line">data = v.bit_length()</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">0000 0000   0  1</span><br><span class="line">0000 0001   1  1</span><br><span class="line">0000 0010   2  2</span><br><span class="line">0000 0011   3  2</span><br><span class="line">0000 0100   4  3</span><br><span class="line">0000 0101   5  3</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h3 id="2-布尔值bool"><a href="#2-布尔值bool" class="headerlink" title="2.布尔值bool"></a>2.布尔值bool</h3><blockquote><p>布尔值就两种：True，False。就是反应条件的正确与否。</p></blockquote><ul><li>真   1   True。</li><li>假   0   False。</li></ul><blockquote><p>与js的不同点 后四个也是False,但是在js里 只要是对象就是true</p></blockquote><ul><li>0 </li><li>‘’</li><li>[]</li><li>()</li><li>{}</li><li>set()</li></ul><blockquote><p>int —-&gt; str<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = 1</span><br><span class="line">s = str(i)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>str —&gt; int<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;123&apos;</span><br><span class="line">i = int(s)</span><br><span class="line"></span><br><span class="line">s2 = &apos;123a&apos;</span><br><span class="line">i2 = int(s2) #报错</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>int —–&gt;bool  只要是0 —-》False  非0就是True<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = 3</span><br><span class="line">b = bool(i)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>bool—-&gt; int</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#True   1</span><br><span class="line">#False  0</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><h3 id="ps-大神的高端写法"><a href="#ps-大神的高端写法" class="headerlink" title="ps:大神的高端写法"></a>ps:大神的高端写法</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    pass</span><br><span class="line">while 1:  # 效率高</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><blockquote><p>str —&gt;bool<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#s = &quot;&quot; -----&gt; False</span><br><span class="line">#非空字符串都是True</span><br><span class="line">#s = &quot;0&quot; -----&gt; True</span><br><span class="line"># s</span><br><span class="line"># if s:</span><br><span class="line">#     print(&apos;你输入的为空，请重新输入&apos;)</span><br><span class="line"># else:</span><br><span class="line">#     pass</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="3-字符串str"><a href="#3-字符串str" class="headerlink" title="3.字符串str"></a>3.字符串str</h3><h4 id="字符串的索引与切片。"><a href="#字符串的索引与切片。" class="headerlink" title="字符串的索引与切片。"></a>字符串的索引与切片。</h4><blockquote><p>索引即下标，就是字符串组成的元素从第一个开始，初始索引为0以此类推。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;ABCDEFGHIJK&apos;</span><br><span class="line">print(a[0])</span><br><span class="line">print(a[3])</span><br><span class="line">print(a[5])</span><br><span class="line">print(a[7])</span><br><span class="line"></span><br><span class="line">#超过字符串长度咋办？</span><br><span class="line">a[0:70] &apos;ABCDEFGHIJK&apos;</span><br></pre></td></tr></table></figure><p>切片就是通过索引（索引：索引：步长）截取字符串的一段，形成新的字符串（原则就是包头不包尾）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;ABCDEFGHIJK&apos;</span><br><span class="line">print(a[0:3]) # ABC</span><br><span class="line">print(a[2:5]) # CDE</span><br><span class="line">print(a[0:])  # 默认到最后 ABCDEFGHIJK</span><br><span class="line">print(a[0:-1]) # -1就是最后一个 ABCDEFGHIJ</span><br><span class="line">print(a[0:5:2]) #加步长 ACE</span><br><span class="line">print(a[5:0:-2]) #反向加步长 FDB</span><br></pre></td></tr></table></figure><blockquote><p>索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;ABCDLSESRF&apos;</span><br><span class="line">s1 = s[0] # A</span><br><span class="line">s2 = s[2] # C</span><br><span class="line">s3 = s[-1] # F</span><br><span class="line">s4 = s[-2] # R</span><br></pre></td></tr></table></figure><blockquote><p>ABCD   切片 ：包头不包尾</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;ABCDLSESRF&apos;</span><br><span class="line">s5 = s[0:4]  # ABCD</span><br><span class="line">s6 = s[0:-1] # ABCDLSESR</span><br><span class="line"></span><br><span class="line">s7 = s[:] # ABCDLSESRF</span><br><span class="line">s8 = s[0:] #ABCDLSESRF</span><br><span class="line"></span><br><span class="line">s9 = s[0:0] # &apos;&apos;空字符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &apos;ABCDLSESRF&apos;    # s[首:尾:步长]</span><br><span class="line">s10 = s[0:5:2]  # ACL</span><br><span class="line">s11 = s[4:0:-1] # LDCB</span><br><span class="line">s12 = s[3::-1]  # DCBA</span><br><span class="line">s13 = s[3::-2]  # DB</span><br><span class="line">s14 = s[-1::-1] # FRSESLDCBA</span><br><span class="line">s15 = s[::-1]   # FRSESLDCBA</span><br></pre></td></tr></table></figure><blockquote><h4 id="简洁写法-都可以获取整个字符串"><a href="#简洁写法-都可以获取整个字符串" class="headerlink" title="简洁写法 都可以获取整个字符串"></a>简洁写法 都可以获取整个字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name[0:]</span><br><span class="line">name[:]</span><br><span class="line">name[::]</span><br><span class="line"></span><br><span class="line"># name[]报错</span><br></pre></td></tr></table></figure></blockquote><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><blockquote><p>也可以参考我之前写的python文章 《Python002字符串》</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/python/p003_01.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#字符串的操作</span><br><span class="line">s = &apos;alexWUsir&apos;</span><br><span class="line">s1 = s.capitalize()  # 首字母大写</span><br><span class="line"></span><br><span class="line"># 全大写，全小写</span><br><span class="line">s2 = s.upper()</span><br><span class="line">s21 = s.lower()</span><br><span class="line"></span><br><span class="line">#大小写翻转</span><br><span class="line"># s3 = s.swapcase()</span><br><span class="line"></span><br><span class="line"># 每个隔开(特殊字符或者数字)的单词首字母大写</span><br><span class="line"># s = &apos;alex*egon-wusir&apos;</span><br><span class="line"># s4 = s.title()</span><br><span class="line"></span><br><span class="line"># s = &apos;fade,crazy*w4rri0r_songsong node_3&apos;</span><br><span class="line"># s4 = s.title()</span><br><span class="line"></span><br><span class="line">#居中，空白填充</span><br><span class="line"># s = &apos;alexWUsir&apos;</span><br><span class="line"># s5 = s.center(20,&apos;~&apos;)</span><br><span class="line"></span><br><span class="line"># s = &apos;alex\tsir&apos;</span><br><span class="line"># s6 = s.expandtabs()</span><br><span class="line"></span><br><span class="line"># s = &apos;alex二哥&apos;</span><br><span class="line"># #公共方法</span><br><span class="line"># l = len(s)</span><br><span class="line"></span><br><span class="line">#以什么开头结尾 endswith</span><br><span class="line"># s = &apos;alexWUsir&apos;</span><br><span class="line"># s7 =s.startswith(&apos;alex&apos;)</span><br><span class="line"># s71 = s.startswith(&apos;e&apos;,2,5)</span><br><span class="line"></span><br><span class="line"># find 通过元素找索引，找不到返回-1</span><br><span class="line">#</span><br><span class="line"># index通过元素找索引，找不到报错</span><br><span class="line"># s = &apos;alexWUsir&apos;</span><br><span class="line"># s8 = s.find(&apos;A&apos;)</span><br><span class="line"># s81 = s.index(&apos;A&apos;)</span><br><span class="line"></span><br><span class="line">#strip rstrip lstrip</span><br><span class="line"># s = &apos;alexWUsir%&apos;</span><br><span class="line"># s9 = s.strip(&apos;%&apos;)</span><br><span class="line"></span><br><span class="line"># s = &apos; *a%lexWUsi* r%&apos;</span><br><span class="line"># s91 = s.strip(&apos; %*&apos;)</span><br><span class="line"></span><br><span class="line"># strip 默认删除前后空格</span><br><span class="line"></span><br><span class="line"># username = input(&apos;请输入名字：&apos;).strip()</span><br><span class="line"># if username ==&apos;春哥&apos;:</span><br><span class="line">#     print(&apos;恭喜春哥发财&apos;)</span><br><span class="line"></span><br><span class="line"># s = &apos;alexaa wusirl&apos;</span><br><span class="line"># s10 = s.count(&apos;al&apos;)</span><br><span class="line"># print(s10)</span><br><span class="line"></span><br><span class="line"># split   str ----&gt;list</span><br><span class="line"># s = &apos;;alex;wusir;taibai&apos;</span><br><span class="line"># l = s.split(&apos;a&apos;)</span><br><span class="line"># print(l)</span><br><span class="line"></span><br><span class="line"># s = &apos;来看待街坊邻居复合大师街坊法好的撒见客户&apos;</span><br><span class="line"># s11 = s.replace(&apos;街坊&apos;,&apos;老王&apos;,1)</span><br><span class="line"></span><br><span class="line"># s = &apos;fhdsklfds&apos;</span><br><span class="line"># for i in s:</span><br><span class="line">#     print(i)</span><br><span class="line">s = &apos;fdsa苍井空fdsalk&apos;</span><br><span class="line">if &apos;苍井空&apos; in s:</span><br><span class="line">    print(&apos;您的评论有敏感词...&apos;)</span><br></pre></td></tr></table></figure><h4 id="format的格式化输出"><a href="#format的格式化输出" class="headerlink" title="format的格式化输出"></a>format的格式化输出</h4><p>三种玩法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res=&apos;&#123;&#125; &#123;&#125; &#123;&#125;&apos;.format(&apos;egon&apos;,18,&apos;male&apos;)</span><br><span class="line">res=&apos;&#123;1&#125; &#123;0&#125; &#123;1&#125;&apos;.format(&apos;egon&apos;,18,&apos;male&apos;)</span><br><span class="line">res=&apos;&#123;name&#125; &#123;age&#125; &#123;sex&#125;&apos;.format(sex=&apos;male&apos;,name=&apos;egon&apos;,age=18)</span><br></pre></td></tr></table></figure><h4 id="循环字符串"><a href="#循环字符串" class="headerlink" title="循环字符串"></a>循环字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;abcdefg&apos;</span><br><span class="line">for temp in a:</span><br><span class="line">    print(temp) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = 0 ;</span><br><span class="line">length = len(a)</span><br><span class="line">while i&lt;length:</span><br><span class="line">    print(a[i])</span><br><span class="line">    i+=1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slTrust/note/master/python/p003_02.jpg" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P002_python编码问题和逻辑运算</title>
      <link href="/2018/07/19/P002_python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E5%92%8C%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/"/>
      <url>/2018/07/19/P002_python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E5%92%8C%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="1-知识点回顾"><a href="#1-知识点回顾" class="headerlink" title="1.知识点回顾"></a>1.知识点回顾</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#1、使用while循环输入 1 2 3 4 5 6 8 9 10</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">count = 0</span><br><span class="line">while count &lt; 10:</span><br><span class="line">    count += 1  # count = count + 1</span><br><span class="line">    if count == 7:</span><br><span class="line">        print(&apos; &apos;)</span><br><span class="line">    else:</span><br><span class="line">        print(count)</span><br><span class="line"></span><br><span class="line">count = 0</span><br><span class="line">while count &lt; 10:</span><br><span class="line">    count += 1  # count = count + 1</span><br><span class="line">    if count == 7:</span><br><span class="line">        continue</span><br><span class="line">    print(count)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">#3、输出 1-100 内的所有奇数</span><br><span class="line">#方法一：</span><br><span class="line"># count = 1</span><br><span class="line"># while count &lt; 101:</span><br><span class="line">#     print(count)</span><br><span class="line">#     count += 2</span><br><span class="line">#方法二：</span><br><span class="line"># count = 1</span><br><span class="line"># while count &lt; 101:</span><br><span class="line">#     if count % 2 == 1:</span><br><span class="line">#         print(count)</span><br><span class="line">#     count += 1</span><br><span class="line"></span><br><span class="line">#5、求1-2+3-4+5 ... 99的所有数的和</span><br><span class="line"># sum = 0</span><br><span class="line"># count = 1</span><br><span class="line"># while count &lt; 100:</span><br><span class="line">#     if count % 2 == 0:</span><br><span class="line">#         sum = sum - count</span><br><span class="line">#     else:</span><br><span class="line">#         sum = sum + count</span><br><span class="line">#     count += 1</span><br><span class="line"># print(sum)</span><br><span class="line"></span><br><span class="line">#6、用户登陆（三次机会重试）</span><br><span class="line">#input 心中有账号，密码 while</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">while i &lt; 3:</span><br><span class="line">    username = input(&apos;请输入账号：&apos;)</span><br><span class="line">    password = int(input(&apos;请输入密码：&apos;))</span><br><span class="line">    if username == &apos;咸鱼哥&apos; and password == 123:</span><br><span class="line">        print(&apos;登录成功&apos;)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;登录失败请重新登录&apos;)</span><br><span class="line">    i += 1</span><br></pre></td></tr></table></figure><h3 id="2-格式化输出"><a href="#2-格式化输出" class="headerlink" title="2.格式化输出"></a>2.格式化输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#格式化输出</span><br><span class="line"># % s d</span><br><span class="line"># name = input(&apos;请输入姓名&apos;)</span><br><span class="line"># age = input(&apos;请输入年龄&apos;)</span><br><span class="line"># height = input(&apos;请输入身高&apos;)</span><br><span class="line"># msg = &quot;我叫%s，今年%s 身高 %s&quot; %(name,age,height)</span><br><span class="line"># print(msg)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name = input(&apos;请输入姓名:&apos;)</span><br><span class="line">age = input(&apos;请输入年龄:&apos;)</span><br><span class="line">job = input(&apos;请输入工作:&apos;)</span><br><span class="line">hobbie = input(&apos;你的爱好:&apos;)</span><br><span class="line"></span><br><span class="line">msg = &apos;&apos;&apos;------------ info of %s -----------</span><br><span class="line">Name  : %s</span><br><span class="line">Age   : %d</span><br><span class="line">job   : %s</span><br><span class="line">Hobbie: %s</span><br><span class="line">------------- end -----------------&apos;&apos;&apos; %(name,name,int(age),job,hobbie)</span><br><span class="line">print(msg)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">name = input(&apos;请输入姓名&apos;)</span><br><span class="line">age = input(&apos;请输入年龄&apos;)</span><br><span class="line">height = input(&apos;请输入身高&apos;)</span><br><span class="line">msg = &quot;我叫%s，今年%s 身高 %s 学习进度为3%%s&quot; %(name,age,height)</span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure><blockquote><p>想格式化输出%就要 两个%%代表转义，否则报错</p></blockquote><h3 id="3-while-else"><a href="#3-while-else" class="headerlink" title="3. while else"></a>3. while else</h3><blockquote><p>与其它语言else 一般只与if 搭配不同，在Python 中还有个while …else 语句</p></blockquote><blockquote><p>while 后面的else 作用是指，当while 循环正常执行完，中间没有被break 中止的话，就会执行else后面的语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt;= 5 :</span><br><span class="line">    count += 1</span><br><span class="line">    print(&quot;Loop&quot;,count)</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">    print(&quot;循环正常执行完啦&quot;)</span><br><span class="line">print(&quot;-----out of while loop ------&quot;)</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line"></span><br><span class="line">Loop 1</span><br><span class="line">Loop 2</span><br><span class="line">Loop 3</span><br><span class="line">Loop 4</span><br><span class="line">Loop 5</span><br><span class="line">Loop 6</span><br><span class="line">循环正常执行完啦</span><br><span class="line">-----out of while loop ------</span><br></pre></td></tr></table></figure><p>如果执行过程中被break啦，就不会执行else的语句啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt;= 5 :</span><br><span class="line">    count += 1</span><br><span class="line">    if count == 3:break</span><br><span class="line">    print(&quot;Loop&quot;,count)</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">    print(&quot;循环正常执行完啦&quot;)</span><br><span class="line">print(&quot;-----out of while loop ------&quot;)</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line"></span><br><span class="line">Loop 1</span><br><span class="line">Loop 2</span><br><span class="line">-----out of while loop ------</span><br></pre></td></tr></table></figure><h3 id="4-初始编码"><a href="#4-初始编码" class="headerlink" title="4.初始编码"></a>4.初始编码</h3><ul><li>最早的’密码本’ ascii 涵盖了英文字母大小写，特殊字符，数字。<br>01010101</li><li>ascii 只能表示256种可能，太少，</li><li>创办了万国码 unicode<br>  16表示一个字符不行，32位表示一个字符。<br>  A  01000001010000010100000101000001<br>  B  01000010010000100100001001000010<br>  我 01000010010000100100001001000010</li><li><p>Unicode 升级 utf-8  utf-16 utf-32<br>  8位 = 1字节bytes</p><ol><li>utf-8 一个字符最少用8位去表示，英文用8位  一个字节<br>   欧洲文字用16位去表示                两个字节<br>   中文用24 位去表示                   三个字节</li><li>utf-16 一个字符最少用16位去表示</li></ol></li><li><p>gbk 中国人自己发明的，一个中文用两个字节 16位去表示。</p></li></ul><h3 id="5-逻辑运算"><a href="#5-逻辑运算" class="headerlink" title="5. 逻辑运算"></a>5. 逻辑运算</h3><ul><li>and  (JS里的 &amp;&amp;) </li><li>or   (JS里的 ||)</li><li>not  (JS里的 !)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#and or not</span><br><span class="line">#优先级，（）&gt; not &gt; and &gt; or</span><br><span class="line"># print(2 &gt; 1 and 1 &lt; 4)</span><br><span class="line"># print(2 &gt; 1 and 1 &lt; 4 or 2 &lt; 3 and 9 &gt; 6 or 2 &lt; 4 and 3 &lt; 2)</span><br><span class="line"># T or T or F</span><br><span class="line">#T or F</span><br><span class="line"># print(3&gt;4 or 4&lt;3 and 1==1)  # F</span><br><span class="line"># print(1 &lt; 2 and 3 &lt; 4 or 1&gt;2)  # T</span><br><span class="line"># print(2 &gt; 1 and 3 &lt; 4 or 4 &gt; 5 and 2 &lt; 1)  # T</span><br><span class="line"># print(1 &gt; 2 and 3 &lt; 4 or 4 &gt; 5 and 2 &gt; 1 or 9 &lt; 8)  # F</span><br><span class="line"># print(1 &gt; 1 and 3 &lt; 4 or 4 &gt; 5 and 2 &gt; 1 and 9 &gt; 8 or 7 &lt; 6)  # F</span><br><span class="line"># print(not 2 &gt; 1 and 3 &lt; 4 or 4 &gt; 5 and 2 &gt; 1 and 9 &gt; 8 or 7 &lt; 6) # F</span><br><span class="line"></span><br><span class="line">#ps  int  ----&gt; bool   非零转换成bool True   0 转换成bool 是False</span><br><span class="line"># print(bool(2))</span><br><span class="line"># print(bool(-2))</span><br><span class="line"># print(bool(0))</span><br><span class="line"></span><br><span class="line"># #bool ---&gt;int</span><br><span class="line"># print(int(True))   # 1</span><br><span class="line"># print(int(False))  # 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;x or y x True，则返回x&apos;&apos;&apos;</span><br><span class="line"># print(1 or 2)  # 1</span><br><span class="line"># print(3 or 2)  # 3</span><br><span class="line"># print(0 or 2)  # 2</span><br><span class="line"># print(0 or 100)  # 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># print(2 or 100 or 3 or 4)  # 2</span><br><span class="line"></span><br><span class="line"># print(0 or 4 and 3 or 2)</span><br><span class="line">&apos;&apos;&apos;x and y x True，则返回y&apos;&apos;&apos;</span><br><span class="line"># print(1 and 2)</span><br><span class="line"># print(0 and 2)</span><br><span class="line">print(2 or 1 &lt; 3)</span><br><span class="line">print(3 &gt; 1 or 2 and 2)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P001_python基础</title>
      <link href="/2018/07/19/P001_python%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/07/19/P001_python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：自我学习总结python全栈的知识点,版本为3.4</p></blockquote><p>题外话：最近《我不是药神》很火.我也客串的说《我不是大神》全栈知识点我将参考《路飞学院7天入门》赠送的 全栈9期视频。枯燥的部分我会尽量结合一些段子或者其他语言如js知识来加深理解！</p><h3 id="1-计算机基础"><a href="#1-计算机基础" class="headerlink" title="1.计算机基础"></a>1.计算机基础</h3><blockquote><p>我觉得这个只要你会开机关机就差不多了，如果不方便理解给你举个例子：</p></blockquote><ol><li>计算机主要就是二进制，二进制就是0/1 逢二进一<br>(实在不好理解你就想现实中的电线插头 左零右火)</li><li>计算机通过电信号来判断是0还是1 比如电压低于50%就代表0 高于50%代表 1</li><li>于是这些 01组成的东西就被机器所认识也叫 机器语言<br>但是这很反人类啊！多么复杂的大脑才能识别这个啊！<br>于是出现了汇编，还是不够好，于是 C / C++ /JAVA等高级语言横空出世</li><li>8位 0、1组成的序列代表1字节  <ul><li>1B(byte) = 8位(bit)</li><li>1KB = 1024B</li><li>1MB = 1024KB</li><li>1GB = 1024MB</li><li>1T  = 1024GB</li></ul></li></ol><blockquote><p>买手机可千万注意别被那些卖家忽悠了，老说啥机身内存大运行速度快啥的！大错特错  如果你买手机建议运行内存买高点</p></blockquote><ul><li>电脑和手机这些设备分为  内存(RAM随机存储) 和 外存(ROM只读存储)</li><li>内存就是 01这堆组成的电信号 没电了只要你编辑的word文档没保存就丢了</li><li>外存就是 电脑上存的小说啊 mp3 短视频等 只要你不手动删除怎么开关机都在</li></ul><p>如下是一些进制转换:</p><blockquote><p>口诀：逢二进一 逢八进一 逢十进一 逢十六进一</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">如:</span><br><span class="line">二进制       十进制     八进制     十六进制</span><br><span class="line">0000 0000    0          0         0</span><br><span class="line">0000 0001    1          1         1</span><br><span class="line">0000 0010    2          2         2</span><br><span class="line">0000 0011    3          3         3</span><br><span class="line">0000 0100    4          4         4</span><br><span class="line">0000 0101    5          5         5</span><br><span class="line">0000 0110    6          6         6</span><br><span class="line">0000 0111    7          7         7</span><br><span class="line">0000 1000    8         10         8</span><br><span class="line">0000 1001    9         11         9</span><br><span class="line">0000 1010   10         12         a</span><br><span class="line">0000 1011   11         13         b</span><br><span class="line">0000 1100   12         14         c</span><br><span class="line">0000 1101   13         15         d</span><br><span class="line">0000 1110   14         16         e</span><br><span class="line">0000 1111   15         17         f</span><br></pre></td></tr></table></figure><h3 id="2-python历史"><a href="#2-python历史" class="headerlink" title="2.python历史"></a>2.python历史</h3><blockquote><p>python的创始人为吉多·范罗苏姆（Guido van Rossum）</p></blockquote><p>我们习惯叫他 龟叔(他俩个月写出了python)<br>js之父(Brendan Eich)也比较厉害10天创造了 javascript</p><blockquote><p>宏观上：python2 与 python3 区别：</p></blockquote><ul><li>python2 源码不标准.混乱.重复代码太多.</li><li>python3 统一 标准.去除重复代码。</li></ul><h3 id="3-python的环境。"><a href="#3-python的环境。" class="headerlink" title="3.python的环境。"></a>3.python的环境。</h3><blockquote><p>编译型：一次性将所有程序编译成二进制文件。</p></blockquote><ul><li>缺点：开发效率低.不能跨平台。</li><li>优点：运行速度快。C/C++等等。</li></ul><blockquote><p>解释型：当程序执行时.一行一行的解释。</p><ul><li>优点：开发效率高.可以跨平台。</li><li>缺点：运行速度慢。python,js,php,等等。</li></ul></blockquote><h3 id="4-python的发展。"><a href="#4-python的发展。" class="headerlink" title="4.python的发展。"></a>4.python的发展。</h3><blockquote><p>传言未来十年是python的。个人觉得最主要的一个原因是纳入小学课本了。。。 </p></blockquote><p>听我一小段子：中国近5000年的重男轻女思想，让10年的房地产改变了,10年都难修改的教学课本都纳入python了。你说是不是该学习一下。最最主要的观点请参考阮一峰老师的 《未来世界幸存者》里的断言。机器学习的电脑真的可以打败围棋高手的事从不可能变成了可能。</p><h3 id="5-python种类。"><a href="#5-python种类。" class="headerlink" title="5.python种类。"></a>5.python种类。</h3><ul><li>CPython</li><li>IPython</li><li>PyPy</li><li>Jython</li><li>IronPython</li></ul><blockquote><p>Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。</p></blockquote><p>运行第一个py文件：</p><ul><li>python3x :python 文件路径 回车</li><li><p>python2x :python2 文件路径 回车</p><blockquote><p>python2 python3 区别：</p></blockquote></li><li><p>python2默认编码方式是ascii码<br>  解决方式：在文件的首行：#-<em>- encoding:utf-8 -</em>-</p></li><li>python3 默认编码方式utf-8</li></ul><blockquote><p>理解为什么首行加入如下内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br></pre></td></tr></table></figure><ol><li>在linux里代表查找系统环境变量的 python命令路径 </li><li>但是linux里默认的是2.x版本 而你自己安装的3.x版本python在 usr/local/bin<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果你这样写调用的默认安装的python</span><br><span class="line">#!/usr/bin/python</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-变量。"><a href="#6-变量。" class="headerlink" title="6.变量。"></a>6.变量。</h3><p>变量：就是将一些运算的中间结果暂存到内存中.以便后续代码调用。</p><p>变量名规则：</p><ol><li>必须由数字.字母.下划线任意组合.且不能数字开头。</li><li><p>不能是python中的关键字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[&apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;,</span><br><span class="line">&apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;exec&apos;,</span><br><span class="line">&apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, </span><br><span class="line">&apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;print&apos;, </span><br><span class="line">&apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]</span><br></pre></td></tr></table></figure></li><li><p>变量具有可描述性。</p></li><li>不能是中文。(python3变量名可以是中文)</li></ol><blockquote><p>但是毕竟编程语言不是中国制造，所以请务必尊重一下别人，而且你写中文会被别人笑话的！！！</p></blockquote><h3 id="7-常量。"><a href="#7-常量。" class="headerlink" title="7.常量。"></a>7.常量。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一直不变的量。     π</span><br><span class="line">BIR_OF_CHINA = 1949</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">&gt; 在Python中没有一个专门的语法代表常量，程序员约定俗成用变量名全部大写代表常量</span><br></pre></td></tr></table></figure><p>//JS的常量<br>const a = 1   //修改就报错哦！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">     </span><br><span class="line">### 8.注释。</span><br></pre></td></tr></table></figure></p><p>方便自己方便他人理解代码。<br>单行注释：#<br>多行注释：’’’被注释内容’’’  “””被注释内容”””<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">### 9.用户交互。input</span><br><span class="line"></span><br><span class="line">1. 等待输入.</span><br><span class="line">2. 将你输入的内容赋值给了前面变量。</span><br><span class="line">3. input出来的数据类型全部是str</span><br><span class="line">    </span><br><span class="line">### 10.基础数据类型初始。</span><br><span class="line"></span><br><span class="line">#### 数字：int 12,3,45 </span><br><span class="line">    + - * / ** </span><br><span class="line">    % 取余数</span><br><span class="line">    ps:type()</span><br><span class="line">        字符串转化成数字：int(str) 条件：str必须是数字组成的。</span><br><span class="line">        数字转化成字符串：str(int)</span><br><span class="line"></span><br><span class="line">&gt; 注意，自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母L也不会导致严重后果了。</span><br><span class="line"></span><br><span class="line">&gt; #### 注意：在Python3里不再有long类型了，全都是int</span><br><span class="line">#### 字符串：</span><br><span class="line"></span><br><span class="line">&gt; str.python当中凡是用引号引起来的都是字符串。</span><br><span class="line">    可相加:字符串的拼接。</span><br><span class="line">    可相乘：str * int</span><br></pre></td></tr></table></figure></p><p>name = ‘abc’<br>print(name*3) # abcabcabc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### bool:布尔值。 </span><br><span class="line">- True</span><br><span class="line">- False</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#### 11.if 分支语句</span><br></pre></td></tr></table></figure></p><p>if 条件:<br>    结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">### 12.while。</span><br></pre></td></tr></table></figure></p><p>while 条件:<br>    循环体<br>    无限循环。<br>    终止循环：1.改变条件.使其不成立。<br>              2,break</p><pre><code>continue</code></pre><h1 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h1><p>while True:<br>    print(1)<br><code>`</code> </p>]]></content>
      
      
      
        <tags>
            
            <tag> fullstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL007python连接数据库</title>
      <link href="/2018/06/27/MySQL007python%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/06/27/MySQL007python%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="python连接mysql"><a href="#python连接mysql" class="headerlink" title="python连接mysql"></a>python连接mysql</h3><blockquote><p>注意我是python3版本 所以数据库,如果你实在不知道咋配置就参考这个(问题检索是你该具备的能力)</p></blockquote><p>如果安装好了 python3,可以用pip下载mysql工具包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install PyMySQL</span><br><span class="line"># 有可能会提示你pip版本低，于是你按照命令升级，然后不小心ctrl c了，那就直接去python官网重新下载一个覆盖安装即可</span><br></pre></td></tr></table></figure><p><a href="https://jingyan.baidu.com/article/da1091fb1272be027849d694.html" target="_blank" rel="noopener">windows下python连接数据库</a></p><p>待更新(我想更新个mac版)</p><h4 id="Connection对象"><a href="#Connection对象" class="headerlink" title="Connection对象"></a>Connection对象</h4><ul><li>用于建立与数据库的连接</li><li>创建对象：调用connect()方法</li></ul><p>conn=connect(参数列表)</p><ul><li>参数host：连接的mysql主机，如果本机是’localhost’</li><li>参数port：连接的mysql主机的端口，默认是3306</li><li>参数db：数据库的名称</li><li>参数user：连接的用户名</li><li>参数password：连接的密码</li><li>参数charset：通信采用的编码方式，默认是’gb2312’，要求与数据库创建时指定的编码一致，否则中文会乱码</li></ul><h5 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h5><ul><li>close()关闭连接</li><li>commit()事务，所以需要提交才会生效</li><li>rollback()事务，放弃之前的操作</li><li>cursor()返回Cursor对象，用于执行sql语句并获得结果</li></ul><h4 id="Cursor对象"><a href="#Cursor对象" class="headerlink" title="Cursor对象"></a>Cursor对象</h4><ul><li>执行sql语句</li><li>创建对象：调用Connection对象的cursor()方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor1=conn.cursor()</span><br></pre></td></tr></table></figure><h4 id="对象的方法-1"><a href="#对象的方法-1" class="headerlink" title="对象的方法"></a>对象的方法</h4><ul><li>close()关闭</li><li>execute(operation [, parameters ])执行语句，返回受影响的行数</li><li>fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组</li><li>next()执行查询语句时，获取当前行的下一行</li><li>fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回</li><li>scroll(value[,mode])将行指针移动到某个位置<pre><code>1. mode表示移动的方式2. mode的默认值为relative，表示基于当前行移动到value，value为正则向下移动，value为负则向上移动3. mode的值为absolute，表示基于第一条数据的位置，第一条数据的位置为0</code></pre></li></ul><h4 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h4><ul><li>rowcount只读属性，表示最近一次execute()执行后受影响的行数</li><li>connection获得当前连接对象</li></ul><h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><blockquote><p>增</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    # 连接数据库</span><br><span class="line">    db = pymysql.connect(host=&quot;localhost&quot;,user=&quot;root&quot;,password=&quot;123456&quot;,db=&quot;test170910&quot;,port=3306,charset=&quot;utf8&quot;)</span><br><span class="line">    #创建游标对象</span><br><span class="line">    cursor = db.cursor() </span><br><span class="line">    # sql语句</span><br><span class="line">    sql = &apos;insert into students(name,gender,birthday) values(&quot;郭大侠&quot;,1,&quot;2018-01-11&quot;)&apos;;</span><br><span class="line">    #执行SQL语句</span><br><span class="line">    cursor.execute(sql) </span><br><span class="line">    #提交</span><br><span class="line">    db.commit()</span><br><span class="line">except Exception as e:</span><br><span class="line">        db.rollback() </span><br><span class="line">        print(e)</span><br><span class="line">finally:</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure><blockquote><p>更新</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    # 连接数据库</span><br><span class="line">    db = pymysql.connect(host=&quot;localhost&quot;,user=&quot;root&quot;,password=&quot;123456&quot;,db=&quot;test170910&quot;,port=3306,charset=&quot;utf8&quot;)</span><br><span class="line">    cursor = db.cursor() #创建游标对象</span><br><span class="line">    # sql语句</span><br><span class="line">    sql = &apos;update  students set name=&quot;郭一一&quot; where id &gt;3&apos;;</span><br><span class="line">    #执行SQL语句</span><br><span class="line">    cursor.execute(sql) </span><br><span class="line">    #提交</span><br><span class="line">    db.commit()</span><br><span class="line">    print(&apos;ok&apos;)</span><br><span class="line">except Exception as e:</span><br><span class="line">        db.rollback() </span><br><span class="line">        print(e)</span><br><span class="line">finally:</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure><blockquote><p>删</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    # 连接数据库</span><br><span class="line">    db = pymysql.connect(host=&quot;localhost&quot;,user=&quot;root&quot;,password=&quot;123456&quot;,db=&quot;test170910&quot;,port=3306,charset=&quot;utf8&quot;)</span><br><span class="line">    cursor = db.cursor() #创建游标对象</span><br><span class="line">    # sql语句</span><br><span class="line">    sql = &apos;delete from students where id =3&apos;;</span><br><span class="line">    #执行SQL语句</span><br><span class="line">    cursor.execute(sql) </span><br><span class="line">    #提交</span><br><span class="line">    db.commit()</span><br><span class="line">    print(&apos;ok&apos;)</span><br><span class="line">except Exception as e:</span><br><span class="line">        db.rollback() </span><br><span class="line">        print(e)</span><br><span class="line">finally:</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure><blockquote><p>查</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    # 连接数据库</span><br><span class="line">    db = pymysql.connect(host=&quot;localhost&quot;,user=&quot;root&quot;,password=&quot;123456&quot;,db=&quot;test170910&quot;,port=3306,charset=&quot;utf8&quot;)</span><br><span class="line">    cursor = db.cursor() #创建游标对象</span><br><span class="line">    # sql语句</span><br><span class="line">    sql = &apos;select * from students&apos;;</span><br><span class="line">    #执行SQL语句</span><br><span class="line">    cursor.execute(sql) </span><br><span class="line">    #获取返回数据</span><br><span class="line">    print(&apos;--------------------&apos;)</span><br><span class="line">    data = cursor.fetchone() </span><br><span class="line">    print(data)</span><br><span class="line">    print(&apos;--------------------&apos;)</span><br><span class="line">except Exception as e:</span><br><span class="line">        db.rollback() </span><br><span class="line">        print(e)</span><br><span class="line">finally:</span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure><blockquote><p>其他语句</p></blockquote><ul><li>cursor对象的execute()方法，也可以用于执行create table等语句</li><li>建议在开发之初，就创建好数据库表结构，不要在这里执行</li></ul><h4 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h4><blockquote><p>保证数据库的安全性,解决sql注入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name=&apos;a&apos;</span><br><span class="line"></span><br><span class="line">如果 &apos;a&apos; ===&gt; &apos;a&apos; or 1 = 1 就会导致全部被查出来 1=1为true</span><br><span class="line"></span><br><span class="line">参数化</span><br><span class="line">1. sql语句作为第一个参数  </span><br><span class="line">2. @name的值作为第二个参数(进行一系列的判断，来有效阻止sql注入)</span><br><span class="line">select * from students where name=@name</span><br></pre></td></tr></table></figure><p>实际使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sname = &apos;对应的一个值&apos;</span><br><span class="line"># 参数是一个列表的形式</span><br><span class="line">params =[sname] </span><br><span class="line"># 这里的%s不是 print()里的格式化输出  对应 params里的值</span><br><span class="line">sql = &apos;insert into students(name) values(%s)&apos;</span><br><span class="line">count = cursor.execute(sql,params)</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><blockquote><p>查一条记录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(&apos;select * from students where id=7&apos;)</span><br><span class="line">result=cur.fetchone()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><blockquote><p>查询多行数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(&apos;select * from students&apos;)</span><br><span class="line">result=cur.fetchall()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL006事务和索引</title>
      <link href="/2018/06/25/MySQL006%E4%BA%8B%E5%8A%A1/"/>
      <url>/2018/06/25/MySQL006%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>保证一个业务逻辑的完整操作</p><blockquote><p>事务可以完成回退的功能，保证业务逻辑的正确性</p></blockquote><h4 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h4><ul><li>原子性</li><li>一致性(几个并行的事务，执行结果必须与按某一顺序串行执行的结果一致)</li><li>隔离性（A向C转账，B向C转账，C不会因为AB的转账不知道现在有多少钱）</li><li>持久性</li></ul><blockquote><p>使用事务的条件</p></blockquote><ul><li>数据库引擎必须是innodb或bdb</li></ul><blockquote><p>使用事务的情况</p></blockquote><ul><li>insert</li><li>update</li><li>delete</li></ul><h4 id="事务的三个命令"><a href="#事务的三个命令" class="headerlink" title="事务的三个命令"></a>事务的三个命令</h4><ul><li>begin</li><li>commit</li><li>rollback</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">数据库里有一条数据,进行更新操作</span><br><span class="line">1 郭靖</span><br><span class="line"></span><br><span class="line">step000 开启事务</span><br><span class="line">begin;</span><br><span class="line"></span><br><span class="line">step001_1 此句话会把  1 郭靖这条数据锁起来</span><br><span class="line">step001_2 在临时的一个表里(内存级的临时表) 将数据改成 1 效果</span><br><span class="line">update students set name=&apos;小郭&apos; where id=1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">此时你有两种操作  一个是commit一个是rollback</span><br><span class="line"></span><br><span class="line">commit操作</span><br><span class="line">step002_0 如果你此时执行一个commit操作</span><br><span class="line">step002_1 将临时表的操作更新到实际的表</span><br><span class="line">step002_2 取消原表的锁定状态</span><br><span class="line"></span><br><span class="line">rollback操作</span><br><span class="line">step002_0 会将begin之后所有操作丢弃</span><br><span class="line">step002_1 取消原表的锁定状态</span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>如何在英语字典里找 book单词？ 查找b开头所在页码</p><ul><li>当数据库数据量很大的时候，查找数据就会变得很慢</li><li>索引能提高数据访问性能</li><li>主键和唯一索引，都是索引，可以提高查询速度</li><li>索引的建立会占据一定的空间(物理开销)</li></ul><blockquote><p>默认所以以主键来存的,而且所以要占据一定的空间(物理开销)，你可以建立索引，但是建立多了就会占据更多的空间</p></blockquote><h4 id="选择列的数据类型"><a href="#选择列的数据类型" class="headerlink" title="选择列的数据类型"></a>选择列的数据类型</h4><ul><li>越小的数据类型越好</li><li>简单的数据类型更好</li><li>避免用null值</li></ul><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ul><li>索引分为单列索引和组合索引</li></ul><blockquote><p>查看索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from students;</span><br></pre></td></tr></table></figure><blockquote><p>建立索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create index 索引名 on 表名(字段名(长度，如果是数组就不用指定))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">多个字段索引</span><br><span class="line">create index 索引名 on 表名(name,gender);</span><br></pre></td></tr></table></figure><blockquote><p>删除索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index [索引名] on 表名</span><br></pre></td></tr></table></figure><h4 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h4><ul><li>虽然提升了查询速度，同时降低了更新表的速度，如对表进行insert,update,delete(因为更新表的时候数据库不仅仅保存数据，还要保存索引信息)</li><li>建立索引会占用磁盘空间的索引文件</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL005关系</title>
      <link href="/2018/06/24/MySQL005%E5%85%B3%E8%81%94/"/>
      <url>/2018/06/24/MySQL005%E5%85%B3%E8%81%94/</url>
      
        <content type="html"><![CDATA[<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><blockquote><p>查询男生的姓名，总分</p></blockquote><p>为啥不以姓名分组，因为有同名的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select name,sum(score)</span><br><span class="line">from students </span><br><span class="line">inner join scores on students.id=scores.stuid</span><br><span class="line">where gender=1</span><br><span class="line">group by students.id;</span><br></pre></td></tr></table></figure><blockquote><p>查询科目的名称，平均分</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select subjects.title,avg(scores.score)</span><br><span class="line">from scores </span><br><span class="line">inner join subjects on scores.subid=subjects.id</span><br><span class="line">group by subjects.title;</span><br></pre></td></tr></table></figure><blockquote><p>查询未删除科目的名称，最高分、平均分</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select subjects.title,avg(scores.score),max(scores.score)</span><br><span class="line">from scores </span><br><span class="line">inner join subjects on scores.subid=subjects.id</span><br><span class="line">where subjects.isdelete=0</span><br><span class="line">group by subjects.title;</span><br></pre></td></tr></table></figure><h3 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h3><p>省市区</p><table><thead><tr><th>省</th><th style="text-align:center">市</th><th style="text-align:right">区</th></tr></thead><tbody><tr><td>id</td><td style="text-align:center">id</td><td style="text-align:right">id</td></tr><tr><td>name</td><td style="text-align:center">name</td><td style="text-align:right">name</td></tr><tr><td>-</td><td style="text-align:center">pid省的引用</td><td style="text-align:right">pid市的引用</td></tr></tbody></table><p>我们知道中国36个省，但是这样就创建了一个表显然很浪费</p><p>我们假设</p><ul><li>省 36</li><li>市 1万</li><li>区 10万</li></ul><blockquote><p>没有必要建立三张表去存这些数据,如果我们能建立一张表把这些数据存起来</p></blockquote><p>每建一张表对数据库的开销是很大的</p><ol><li>我们能不能给省加一个pid</li><li>给省的pid为null</li><li>合成了一个表外键还是需要的引谁呢？ 市引用省，区引用市</li></ol><table><thead><tr><th>id</th><th style="text-align:center">name</th><th style="text-align:right">pid</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">河南省</td><td style="text-align:right">null</td></tr><tr><td>2</td><td style="text-align:center">郑州市</td><td style="text-align:right">1</td></tr></tbody></table><blockquote><p>自引用,自关联</p></blockquote><ul><li>不用增加新表的开销</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table areas(</span><br><span class="line">    aid int primary key auto_increment not null,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    pid int,</span><br><span class="line">    foreign key(pid) references areas(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>自关联查询山西省的市</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select sheng.aid as sid,sheng.name as sname,</span><br><span class="line">shi.aid as shiid,shi.name as shiname</span><br><span class="line">from areas as sheng</span><br><span class="line">inner join areas as shi on sheng.aid=shi.aid</span><br><span class="line">where sheng.pid is null and sheng.name=&apos;山西省&apos;</span><br><span class="line">;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL004关系</title>
      <link href="/2018/06/24/MySQL004%E5%85%B3%E7%B3%BB/"/>
      <url>/2018/06/24/MySQL004%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><ul><li>实体与实体之间有3种对应关系，这些关系也需要存储下来</li><li>在开发中需要对存储的数据进行一些处理，用到内置的一些函数</li><li>视图用于完成查询语句的封装</li><li>事务可以保证复杂的增删改操作有</li></ul><blockquote><p>请看如下情况</p></blockquote><table><thead><tr><th>学生表</th><th style="text-align:center">成绩表</th><th style="text-align:right">科目表</th></tr></thead><tbody><tr><td>id</td><td style="text-align:center">id</td><td style="text-align:right">id</td></tr><tr><td>name</td><td style="text-align:center">score</td><td style="text-align:right">title</td></tr><tr><td>-</td><td style="text-align:center">学生的引用</td><td style="text-align:right">-</td></tr><tr><td>-</td><td style="text-align:center">科目的引用</td><td style="text-align:right">-</td></tr></tbody></table><p>学生列的数据不是在scores表里建立的,而应该从学生表引用过来,关系也是一条数据;根据范式,应该存储学生的唯一编号(id),而不是学生的姓名或其他信息,同理科目表也是关系列</p><blockquote><p>创建表如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table scores (</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    stuid int,</span><br><span class="line">    subid int,</span><br><span class="line">    score decimal(5,2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><table><thead><tr><th>班级表</th><th style="text-align:center">学生表 </th></tr></thead><tbody><tr><td>id</td><td style="text-align:center">id</td></tr><tr><td>name</td><td style="text-align:center">name</td></tr><tr><td>-</td><td style="text-align:center">班级的引用</td></tr></tbody></table><p>假如有班级表只有三个班</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">学生添加的时候如果添加班级4如何去验证班级是否存在？</span><br><span class="line"></span><br><span class="line">此时就会有外键约束</span><br></pre></td></tr></table></figure><ul><li>必须是班级表中存在的数据,可以通过外键约束进行数据的有效性验证</li><li>为classid添加外键约束</li></ul><blockquote><p>为刚刚的分数表添加外键约束</p></blockquote><p>此时插入或修改数据时,如果stuid的值在students表里不存在就会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table scores (</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    stuid int,</span><br><span class="line">    subid int,</span><br><span class="line">    score decimal(5,2),</span><br><span class="line">    foreign key(stuid) references students(id),</span><br><span class="line">    foreign key(subid) references subjects(id),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>已经建表了再进行添加约束</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table scores add constraint stu_score foreign key(stuid) references students(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu_score 代表约束名字(语法要求)</span><br></pre></td></tr></table></figure><h4 id="外键的级联操作"><a href="#外键的级联操作" class="headerlink" title="外键的级联操作"></a>外键的级联操作</h4><ul><li>在删除students表的数据时，如果这个id值在scores中已经存在，则会抛异常</li><li>推荐使用逻辑删除，还可以解决这个问题</li><li>可以创建表时指定级联操作，也可以在创建表后再修改外键的级联操作</li></ul><blockquote><p>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table scores add constraint stu_sco foreign key(stuid) references students(id) on delete cascade;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>级联操作的类型包括：</p></blockquote><ul><li>restrict（限制）：默认值，抛异常</li><li>cascade（级联）：如果主表的记录删掉，则从表中相关联的记录都将被删除</li><li>set null：将外键设置为空</li><li>no action：什么都不做</li></ul><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>分数表查询后是如下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from scores;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th style="text-align:center">score</th><th style="text-align:center">stuid</th><th>subid</th></tr></thead><tbody><tr><td>0</td><td style="text-align:center">100</td><td style="text-align:center">1</td><td>1</td></tr><tr><td>1</td><td style="text-align:center">99</td><td style="text-align:center">1</td><td>2</td></tr><tr><td>2</td><td style="text-align:center">78</td><td style="text-align:center">2</td><td>1</td></tr><tr><td>3</td><td style="text-align:center">60</td><td style="text-align:center">2</td><td>2</td></tr><tr><td>4</td><td style="text-align:center">30</td><td style="text-align:center">3</td><td>1</td></tr><tr><td>5</td><td style="text-align:center">78</td><td style="text-align:center">3</td><td>2</td></tr></tbody></table><p>但是这样根本看不出谁是谁啊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select students.name,subjects.title,scores.score    </span><br><span class="line">from scores</span><br><span class="line">inner join students on scores.stuid=students.id</span><br><span class="line">inner join subjects on scores.subid=subjects.id</span><br><span class="line">;</span><br></pre></td></tr></table></figure><ul><li>inner join 后的表先写谁后写谁没关系</li><li>但是inner join subjects on之后的 scores.subid必须和subjects有关系</li></ul><h4 id="连接查询的分类"><a href="#连接查询的分类" class="headerlink" title="连接查询的分类"></a>连接查询的分类</h4><ul><li>内连接</li></ul><p>连接表的数据都能对应才会出现(都匹配才出现，即如有学生黄药师但是他没有成绩，就不会查出来) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">from scores</span><br><span class="line">inner join  students on students.id=scores.stuid</span><br><span class="line">;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th style="text-align:center">score</th><th style="text-align:center">stuid</th><th style="text-align:center">subid</th><th style="text-align:center">name</th><th style="text-align:center">gender</th><th style="text-align:center">birthday</th><th>isDelete</th></tr></thead><tbody><tr><td>0</td><td style="text-align:center">100</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">黄蓉</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td></tr><tr><td>1</td><td style="text-align:center">99</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">黄蓉</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td></tr><tr><td>2</td><td style="text-align:center">100</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">郭靖</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td></tr><tr><td>3</td><td style="text-align:center">99</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">郭靖</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td></tr><tr><td>4</td><td style="text-align:center">78</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">杨过</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td></tr><tr><td>5</td><td style="text-align:center">78</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">杨过</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td></tr><tr><td>6</td><td style="text-align:center">78</td><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">小龙女</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td></tr><tr><td>7</td><td style="text-align:center">78</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">小龙女</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td></tr></tbody></table><ul><li>左连接代表以 from后的 表名为准的数据全查出来 连接的表数据没有就用null填充</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">from students</span><br><span class="line">left join scores on students.id=scores.stuid</span><br><span class="line">;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th style="text-align:center">name</th><th style="text-align:center">gender</th><th style="text-align:center">birthday</th><th style="text-align:center">isDelete</th><th style="text-align:center">id1</th><th style="text-align:center">score</th><th style="text-align:center">stuid</th><th>subid</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">黄蓉</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">100</td><td style="text-align:center">1</td><td>1</td><td></td></tr><tr><td>1</td><td style="text-align:center">黄蓉</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">99</td><td style="text-align:center">1</td><td>2</td><td></td></tr><tr><td>2</td><td style="text-align:center">郭靖</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">100</td><td style="text-align:center">2</td><td>1</td></tr><tr><td>2</td><td style="text-align:center">郭靖</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">3</td><td style="text-align:center">99</td><td style="text-align:center">2</td><td>2</td><td></td></tr><tr><td>3</td><td style="text-align:center">杨过</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">78</td><td style="text-align:center">3</td><td>1</td><td></td></tr><tr><td>3</td><td style="text-align:center">杨过</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">5</td><td style="text-align:center">78</td><td style="text-align:center">3</td><td>2</td><td></td></tr><tr><td>4</td><td style="text-align:center">小龙女</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">6</td><td style="text-align:center">78</td><td style="text-align:center">4</td><td>1</td></tr><tr><td>4</td><td style="text-align:center">小龙女</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">7</td><td style="text-align:center">78</td><td style="text-align:center">4</td><td>2</td><td></td></tr><tr><td>5</td><td style="text-align:center">黄药师</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">null</td><td style="text-align:center">null</td><td style="text-align:center">null</td><td>null</td><td>null</td></tr><tr><td>6</td><td style="text-align:center">郭襄</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td style="text-align:center">0</td><td style="text-align:center">null</td><td style="text-align:center">null</td><td style="text-align:center">null</td><td>null</td><td>null</td></tr></tbody></table><ul><li>右连接 跟左连接类似</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">from scores </span><br><span class="line">left join students on students.id=scores.stuid</span><br><span class="line">;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id1</th><th style="text-align:center">score</th><th style="text-align:center">stuid</th><th style="text-align:center">subid</th><th style="text-align:center">id</th><th style="text-align:center">name</th><th style="text-align:center">gender</th><th style="text-align:center">birthday</th><th>isDelete</th></tr></thead><tbody><tr><td>0</td><td style="text-align:center">100</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">黄蓉</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr><tr><td>1</td><td style="text-align:center">99</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">黄蓉</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr><tr><td>2</td><td style="text-align:center">100</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">郭靖</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr><tr><td>3</td><td style="text-align:center">99</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">郭靖</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr><tr><td>4</td><td style="text-align:center">78</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">杨过</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr><tr><td>5</td><td style="text-align:center">78</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">杨过</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr><tr><td>6</td><td style="text-align:center">78</td><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">4</td><td style="text-align:center">小龙女</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr><tr><td>7</td><td style="text-align:center">78</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">小龙女</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr><tr><td>null</td><td style="text-align:center">null</td><td style="text-align:center">null</td><td style="text-align:center">null</td><td style="text-align:center">5</td><td style="text-align:center">黄药师</td><td style="text-align:center">1</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr><tr><td>null</td><td style="text-align:center">null</td><td style="text-align:center">null</td><td style="text-align:center">null</td><td style="text-align:center">6</td><td style="text-align:center">郭襄</td><td style="text-align:center">0</td><td style="text-align:center">1990-02-11 00:00:00</td><td>0</td><td></td></tr></tbody></table><h4 id="查询平均分"><a href="#查询平均分" class="headerlink" title="查询平均分"></a>查询平均分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select name,ave(scores) as avg1 from scores</span><br><span class="line">inner join students on scores.stuid=students.id</span><br><span class="line">group by stuid</span><br><span class="line">order by avg1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL003查询强化</title>
      <link href="/2018/06/23/MySQL003%E6%9F%A5%E8%AF%A2%E5%BC%BA%E5%8C%96/"/>
      <url>/2018/06/23/MySQL003%E6%9F%A5%E8%AF%A2%E5%BC%BA%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><blockquote><p>占据90%的业务</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 ;</span><br></pre></td></tr></table></figure><ul><li>from关键字后面写表名，表示数据来源于是这张表</li><li>select后面写表中的列名，如果是*表示在结果中显示表中所有列</li><li>在select后面的列名部分，可以使用as为列起别名，这个别名出现在结果集中</li><li>如果要查询多个列，之间使用逗号分隔</li></ul><blockquote><p>查询所有</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select * from students;</span><br><span class="line">##########################################################</span><br><span class="line">| id | name | birthday              | gender | isDelete |</span><br><span class="line">##########################################################</span><br><span class="line">  1    郭靖   2017-01-01 00:00:00       1</span><br><span class="line">  2    黄蓉   2017-01-01 00:00:00       0</span><br><span class="line">  3    郭芙   2017-01-01 00:00:00       0</span><br><span class="line">  4    杨过   2017-01-01 00:00:00       1</span><br></pre></td></tr></table></figure><blockquote><p>查询 id和name列</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select id,name from students;</span><br><span class="line">##########################################################</span><br><span class="line">  id   name</span><br><span class="line">  1    郭靖  </span><br><span class="line">  2    黄蓉   </span><br><span class="line">  3    郭芙   </span><br><span class="line">  4    杨过</span><br></pre></td></tr></table></figure><blockquote><p>查询gender</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select gender from students;</span><br><span class="line">##########################################################</span><br><span class="line">gender</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure><blockquote><p>想看gender有多少种(去重复)</p></blockquote><ul><li>distinct消除重复的行</li><li>如果是多列比较的整个一行的每列进行去重复(如果你查了id肯定没法去重)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select distinct gender from students;</span><br><span class="line">##########################################################</span><br><span class="line">gender</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 where 条件;</span><br></pre></td></tr></table></figure><blockquote><p>where之后的内容为条件，它是对行进行筛选</p></blockquote><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id=3;</span><br><span class="line">select * from students where id&gt;3;</span><br><span class="line">select * from students where id&gt;=3;</span><br><span class="line">select * from students where id&lt;3;</span><br><span class="line">select * from students where id&lt;=3;</span><br></pre></td></tr></table></figure><blockquote><p>查询名字为「黄蓉」和的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name=&apos;黄蓉&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>查询名字不为「黄蓉」和的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name!=&apos;黄蓉&apos;;</span><br></pre></td></tr></table></figure><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><ul><li>and</li><li>or</li><li>not</li></ul><blockquote><p>学号大于3的女同学</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id&gt;3 and gender=0;</span><br></pre></td></tr></table></figure><blockquote><p>编号小于4或没被删除的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id&lt;4 or isdelete=0;</span><br></pre></td></tr></table></figure><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><ul><li>like</li><li>%任意个字符</li><li>_一个任意字符</li></ul><blockquote><p>查询姓黄的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name like &apos;黄%&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>查询姓名为黄且总共两个字的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name like &apos;黄_&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>查询姓名为黄且总共三个字的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name like &apos;黄__&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>查询姓名为黄或者叫靖的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name like &apos;黄%&apos; or name like &apos;%靖&apos;;</span><br></pre></td></tr></table></figure><h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><ul><li>连续的范围</li><li>不连续的范围</li></ul><blockquote><p>in表示不连续的范围</p></blockquote><p>查询编号是1,3,8的学生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id in(1,3,8);</span><br></pre></td></tr></table></figure><blockquote><p>between … and …表示连续的范围</p></blockquote><p>查询编号是3-8的学生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id between 3 and 8;</span><br></pre></td></tr></table></figure><p>查询编号是3-8的「男」学生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id between 3 and 8 and gender=1;</span><br></pre></td></tr></table></figure><h5 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h5><ul><li>null与’’是不同的</li><li>判空is null</li></ul><blockquote><p>查询没写地址的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where address is null;</span><br></pre></td></tr></table></figure><blockquote><p>查询写了地址的学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where address is not null;</span><br></pre></td></tr></table></figure><blockquote><p>查询写了地址的女学生</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where address is not null and gender=0;</span><br></pre></td></tr></table></figure><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><ul><li>小括号,not,比较运算符,逻辑运算符</li><li>and比or先运算，如果同时出现并希望先算or,需要使用()</li></ul><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>将现有的多行数据进行统计，统计的结果是你看不到任何原始数据了，只看到结果</p><ul><li>count</li><li>max</li><li>min</li><li>sum</li><li>avg</li></ul><blockquote><p>count(*)表示计算总行数，括号中写星与列名，结果是相同的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询学生总数</span><br><span class="line">select count(*) from students;</span><br><span class="line"></span><br><span class="line">查询学生总数未被删除的</span><br><span class="line">select count(*) from students where isdelete=0;</span><br></pre></td></tr></table></figure><blockquote><p>max(列)表示求此列的最大值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询女生的编号最大值</span><br><span class="line">select max(id) from students where gender=0;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>min(列)表示求此列的最小值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询未删除的学生最小编号</span><br><span class="line">select min(id) from students where isdelete=0;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>sum(列)表示求此列的和<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询男生的编号之后</span><br><span class="line">select sum(id) from students where gender=1;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>avg(列)表示求此列的平均值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询未删除女生的编号平均值</span><br><span class="line">select avg(id) from students where isdelete=0 and gender=0;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查询最小编号的学生信息  ————子查询</span><br><span class="line">select * from students where id =(</span><br><span class="line">    select min(id) from students where isdelete=0</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><ul><li>按照字段分组，表示此字段相同的数据会被放到一个组中</li><li>分组后，只能查询出相同的数据列，对于有差异的数据列无法出现在结果集中</li><li>可以对分组后的数据进行统计，做聚合运算</li></ul><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列1,列2,聚合... from 表名 group by 列1,列2,列3...</span><br></pre></td></tr></table></figure></p><blockquote><p>查询男女生总数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select gender as 性别,count(*)</span><br><span class="line">from students</span><br><span class="line">group by gender;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查询各城市人数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select hometown as 家乡,count(*)</span><br><span class="line">from students</span><br><span class="line">group by hometown;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="分组后筛选"><a href="#分组后筛选" class="headerlink" title="分组后筛选"></a>分组后筛选</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 列1,列2,聚合... from 表名</span><br><span class="line">group by 列1,列2,列3...</span><br><span class="line">having 列1,...聚合...</span><br></pre></td></tr></table></figure><ul><li>having后面的条件运算符与where的相同</li></ul><blockquote><p>查询男生总人数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方案一</span><br><span class="line">select count(*)</span><br><span class="line">from students</span><br><span class="line">where gender=1;</span><br><span class="line">-----------------------------------</span><br><span class="line">方案二：</span><br><span class="line">select gender as 性别,count(*)</span><br><span class="line">from students</span><br><span class="line">group by gender</span><br><span class="line">having gender=1;</span><br></pre></td></tr></table></figure><h4 id="对比where与having"><a href="#对比where与having" class="headerlink" title="对比where与having"></a>对比where与having</h4><ul><li>where是对from后面指定的表进行数据筛选，属于对原始数据的筛选</li><li>having是对group by的结果进行筛选</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原始集合——&gt;where——&gt;结果集——&gt;分组&gt;结果集——&gt;having——&gt;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><p>为了方便查看数据，可以对数据进行排序</p></blockquote><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名</span><br><span class="line">order by 列1 asc|desc,列2 asc|desc,...</span><br></pre></td></tr></table></figure><ul><li>将行数据按照列1进行排序，如果某些行列1的值相同时，则按照列2排序，以此类推</li><li>默认按照列值从小到大排列</li><li>asc从小到大排列，即升序</li><li>desc从大到小排序，即降序</li></ul><blockquote><p>查询未删除男生学生信息，按学号降序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from students</span><br><span class="line">where gender=1 and isdelete=0</span><br><span class="line">order by id desc;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查询未删除科目信息，按名称升序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from subject</span><br><span class="line">where isdelete=0</span><br><span class="line">order by stitle;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>获取部分行</p><blockquote><p>当数据量过大时，在一页中查看数据是一件非常麻烦的事情</p></blockquote><p>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 limit start,count;</span><br></pre></td></tr></table></figure></p><ul><li>从start开始，获取count条数据</li><li>start索引从0开始</li></ul><h5 id="示例：分页"><a href="#示例：分页" class="headerlink" title="示例：分页"></a>示例：分页</h5><blockquote><p>已知：每页显示m条数据，当前显示第n页</p></blockquote><blockquote><p>求总页数：此段逻辑后面会在python中实现</p></blockquote><ul><li>查询总条数p1</li><li>使用p1除以m得到p2</li><li>如果整除则p2为总数页</li><li>如果不整除则p2+1为总页数</li></ul><p>求第n页的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from students</span><br><span class="line">where isdelete=0</span><br><span class="line">limit (n-1)*m,m</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>完整的select语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名</span><br><span class="line">where ...</span><br><span class="line">group by ... having ...</span><br><span class="line">order by ...</span><br><span class="line">limit start,count</span><br></pre></td></tr></table></figure><blockquote><p>执行顺序</p></blockquote><ul><li>from 表名</li><li>where 条件</li><li>group by 列名</li><li>select distinct *</li><li>having …</li><li>order by …</li><li>limit start,count</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL002CRUD</title>
      <link href="/2018/06/23/MySQL002%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/"/>
      <url>/2018/06/23/MySQL002%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>查所有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名</span><br></pre></td></tr></table></figure><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><ul><li>全列插入 insert into 表名 values(…);</li><li>缺省插入 insert into 表名(列1,列2) values(值1,值2);</li><li>同时插入多条数据 insert into 表名 values(…),(…);<br>或者  insert into 表名(列1,列2) values(值1,值2),(值1,值2),(值1,值2);</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 全列</span><br><span class="line">insert into students values(0,&apos;八戒&apos;,1,&apos;1990-1-1&apos;,0);</span><br><span class="line"># 缺省插入</span><br><span class="line">insert into students(name) values(&apos;唐僧&apos;);</span><br><span class="line"></span><br><span class="line">#批量</span><br><span class="line">insert into students values(1,&apos;aaa&apos;,1,&apos;1990-1-1&apos;,0),(2,&apos;bbb&apos;,1,&apos;1990-1-1&apos;,0),(3,&apos;ccc&apos;,1,&apos;1990-1-1&apos;,0);</span><br><span class="line"></span><br><span class="line">insert into students(name) values(&apos;唐僧&apos;),(&apos;八戒&apos;),(&apos;悟空&apos;);</span><br></pre></td></tr></table></figure><ul><li>主键列是自动增长，但是在全列插入的时候要占位，通常使用0，插入成功后以实际数据为准</li></ul><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 对满足条件的行修改</span><br><span class="line">update 表名 set 列1=值,... where条件 </span><br><span class="line"></span><br><span class="line">如</span><br><span class="line"># 把id=2的 生日修改了</span><br><span class="line">update students set birthday=&apos;1990-1-1&apos; where id=2; </span><br><span class="line"></span><br><span class="line"># 不写条件就是全部改</span><br><span class="line">update students set gender=0,birthday=&apos;2018-6-23&apos; where id=6;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>物理删除，数据真的没了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 where 条件</span><br></pre></td></tr></table></figure><blockquote><p>逻辑删除表里设计这样一个字段 isDelete 默认为0，当值为1时代表删除了，查询的时候只取isDelete=0的</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL001基本概念</title>
      <link href="/2018/06/23/MySQL001%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2018/06/23/MySQL001%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h4><ol><li>列不可拆分</li><li>唯一标识</li><li>引用主键</li></ol><p>每一个范式都是在前一个范式基础上建立的</p><h4 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h4><p>类型有很多，这里列出常用的</p><ul><li>数字 int, decimal</li><li>字符串 char,varchar,text</li><li>日期 datetime</li><li>布尔 bit</li></ul><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><ul><li>主键primary key</li><li>非空 not null</li><li>唯一 unique</li><li>默认 default</li><li>外键 foreign key </li></ul><blockquote><p>创建数据库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名 charset=utf-8;</span><br></pre></td></tr></table></figure><blockquote><p>删除数据库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>切换数据库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>查看当前数据库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><blockquote><p>查看表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><ul><li>创建表</li><li>auto_increment表示自增长</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(列及类型);</span><br><span class="line">如</span><br><span class="line">create table students2 (</span><br><span class="line">    id int auto_increment primary key,</span><br><span class="line">    sname varchar(10) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>查看表设计</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><blockquote><p>修改表 alter</p></blockquote><ul><li>修改列的时候列名是不能改的</li><li>如果已经有数据了在进行增加列，容易出错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add|change|drop 列名 类型;</span><br><span class="line"></span><br><span class="line">alter table students add birthday datetime;</span><br><span class="line"></span><br><span class="line">###############################逻辑删除，数据还在只是 isDelete状态变成1</span><br><span class="line">alter table students add isDelete bit default 0;</span><br></pre></td></tr></table></figure><blockquote><p>删除表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure><blockquote><p>更改表名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename table 原名 to 现名</span><br></pre></td></tr></table></figure><blockquote><p>查看建表语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python033gc垃圾回收之三</title>
      <link href="/2018/06/23/Python033gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B9%8B%E4%B8%89/"/>
      <url>/2018/06/23/Python033gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B9%8B%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>（待更新）</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python032gc垃圾回收之二</title>
      <link href="/2018/06/23/Python032gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B9%8B%E4%BA%8C/"/>
      <url>/2018/06/23/Python032gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B9%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>（待更新）</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python031gc垃圾回收</title>
      <link href="/2018/06/23/Python031gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B9%8B%E4%B8%80/"/>
      <url>/2018/06/23/Python031gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B9%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>避免垃圾产生的方式</p><ol><li>小整数对象池</li></ol><blockquote><p>python 对小整数的定义是[-5,257)这些整数对象是提前建好的,不会被垃圾回收</p></blockquote><blockquote><p>单个字符同理</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = 100</span><br><span class="line">b = 100</span><br><span class="line">c = 100</span><br><span class="line"></span><br><span class="line">id(a) # 532323123</span><br><span class="line">id(b) # 532323123</span><br><span class="line">id(c) # 532323123</span><br><span class="line">都是相同的地址</span><br></pre></td></tr></table></figure><ol start="2"><li>大整数对象池</li></ol><p>每个大整数,均创建一个新的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 1000</span><br><span class="line">b = 1000</span><br><span class="line">c = 1000</span><br><span class="line"></span><br><span class="line">id(a) # 4532323123</span><br><span class="line">id(b) # 1235567788</span><br><span class="line">id(c) # 5215567888</span><br></pre></td></tr></table></figure><ol start="3"><li>intern机制</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a1 = &quot;helloworld&quot;</span><br><span class="line">a2 = &quot;helloworld&quot;</span><br><span class="line">a3 = &quot;helloworld&quot;</span><br><span class="line">a4 = &quot;helloworld&quot;</span><br><span class="line">a5 = &quot;helloworld&quot;</span><br><span class="line">a6 = &quot;helloworld&quot;</span><br><span class="line">a7 = &quot;helloworld&quot;</span><br><span class="line">a8 = &quot;helloworld&quot;</span><br><span class="line">a9 = &quot;helloworld&quot;</span><br><span class="line">不会创建9 个对象 会共用一份</span><br><span class="line"></span><br><span class="line">例外就是 字符串里不能包含特殊字符 如 空格</span><br><span class="line">b1 = &quot;hello world&quot;</span><br><span class="line">b2 = &quot;hello world&quot;</span><br><span class="line">b3 = &quot;hello world&quot;</span><br><span class="line">b4 = &quot;hello world&quot;</span><br><span class="line">b5 = &quot;hello world&quot;</span><br><span class="line">b6 = &quot;hello world&quot;</span><br><span class="line">b7 = &quot;hello world&quot;</span><br><span class="line">b8 = &quot;hello world&quot;</span><br><span class="line">b9 = &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">这样就会创建9个对象</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>小整数[-5,257)共用对象，常驻内存</li><li>单个字符共用对象，常驻内存</li><li>单个单词，不能修改,默认开启intern机制,共用对象,引用计数为0则销毁</li></ul><h3 id="什么是gc-garbage-collection-垃圾回收"><a href="#什么是gc-garbage-collection-垃圾回收" class="headerlink" title="什么是gc(garbage collection)垃圾回收"></a>什么是gc(garbage collection)垃圾回收</h3><p>python采用引用计数为主，标记清除为辅的策略</p><h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><blockquote><p>优点</p></blockquote><ul><li>简单</li><li>时效性:一旦没有被引用就释放内存</li></ul><blockquote><p>缺点</p></blockquote><ul><li>维护起来耗费资源</li><li>循环引用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line">list1.append(list2)</span><br><span class="line">list2.append(list1)</span><br><span class="line">俩个列表互相引用。占用的内存无法回收</span><br></pre></td></tr></table></figure><h4 id="标记清除（待更新）"><a href="#标记清除（待更新）" class="headerlink" title="标记清除（待更新）"></a>标记清除（待更新）</h4><blockquote><p>高深的知识点</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>030Python元类</title>
      <link href="/2018/06/23/Python030%E5%85%83%E7%B1%BB/"/>
      <url>/2018/06/23/Python030%E5%85%83%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h3><p>python里一切皆对象，所以类也是对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Test(object):</span><br><span class="line">    print(&apos;类也是对象&apos;)</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &apos;abc&apos;</span><br><span class="line"></span><br><span class="line">执行这个程序的时候 会打印  “类也是对象”</span><br></pre></td></tr></table></figure><h4 id="动态创建类"><a href="#动态创建类" class="headerlink" title="动态创建类"></a>动态创建类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def select_class(name):</span><br><span class="line">    if name == &apos;a&apos;</span><br><span class="line">        class A(object):</span><br><span class="line">            pass</span><br><span class="line">        return A</span><br><span class="line">    else:</span><br><span class="line">        class B(object):</span><br><span class="line">            pass</span><br><span class="line">        return B</span><br><span class="line"></span><br><span class="line">myClass = select_class(&apos;a&apos;)</span><br></pre></td></tr></table></figure><h4 id="深刻理解对象"><a href="#深刻理解对象" class="headerlink" title="深刻理解对象"></a>深刻理解对象</h4><p>type函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">type(p1) # __main__.Person</span><br><span class="line"></span><br><span class="line">type(100) # int</span><br><span class="line"></span><br><span class="line">type(&quot;hello&quot;) # str</span><br></pre></td></tr></table></figure><h4 id="使用tppe创建对象"><a href="#使用tppe创建对象" class="headerlink" title="使用tppe创建对象"></a>使用tppe创建对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test2 = type(&quot;Test2&quot;,(),&#123;&#125;)</span><br><span class="line"></span><br><span class="line">t2 = Test2()</span><br><span class="line"></span><br><span class="line">type(t2) #  __main__.Test2</span><br></pre></td></tr></table></figure><blockquote><p>类带属性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Test:</span><br><span class="line">    num = 0</span><br><span class="line"></span><br><span class="line">Test2 = type(&quot;Test2&quot;,(),&#123;&quot;num&quot;:100&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.num # 0</span><br><span class="line"></span><br><span class="line">t2 = Test2()</span><br><span class="line">t2.num # 100</span><br></pre></td></tr></table></figure><blockquote><p>类带方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Test:</span><br><span class="line">    def xx(self):</span><br><span class="line">        print(&apos;num is %s&apos;%self.num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def xx2(self):</span><br><span class="line">    print(&apos;num is %s&apos;%self.num)</span><br><span class="line"></span><br><span class="line">Test2 = type(&quot;Test2&quot;,(),&#123;&quot;xx2&quot;:xx2&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.num = 100</span><br><span class="line">t.xx() # num is 100</span><br><span class="line"></span><br><span class="line">t2 = Test2()</span><br><span class="line">t2.num = 100</span><br><span class="line">t2.xx2() # num is 100</span><br></pre></td></tr></table></figure><blockquote><p>type里的()参数是干啥的</p></blockquote><p>继承的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Animal:</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;--eat--&apos;)</span><br><span class="line"></span><br><span class="line">class Dog(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># ()代表一个元组 声明元组如果只有一个元素要多加一个&quot;,&quot;</span><br><span class="line">Cat = type(&quot;Cat&quot;,(Animal,),&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="理解元类-非重点，面试可能会问"><a href="#理解元类-非重点，面试可能会问" class="headerlink" title="理解元类(非重点，面试可能会问)"></a>理解元类(非重点，面试可能会问)</h3><p>元类就是类的类</p><ul><li>使用元类创建出一个对象，这个对象叫做 类</li><li>使用类创建的叫做 实例对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cat.__class__ # type</span><br><span class="line">Dog.__class__ # type</span><br><span class="line">i_cat.__class__ # __main__.Cat</span><br><span class="line">i_dog.__class__ # __main__.Dog</span><br><span class="line"></span><br><span class="line">type.__class__  # type</span><br></pre></td></tr></table></figure><h4 id="metaclass属性"><a href="#metaclass属性" class="headerlink" title="metaclass属性"></a>metaclass属性</h4><blockquote><p>自行百度(太偏的知识点，平时机会不用)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果class在定义的时候 设置了 __metaclass__ = 一坨代码</span><br><span class="line">那么 一坨代码 怎么写的 类就怎么定义</span><br><span class="line"></span><br><span class="line">class Test(object):</span><br><span class="line">    __metaclass__ = 一坨代码</span><br><span class="line"></span><br><span class="line">######################</span><br><span class="line">如果一个类里没有 __metaclass__ 就会去父类找 这个属性</span><br><span class="line">如果父类没有就会使用系统默认的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python029类装饰器</title>
      <link href="/2018/06/23/Python029%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2018/06/23/Python029%E7%B1%BB%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><h4 id="把类的实例对象当作方法调用"><a href="#把类的实例对象当作方法调用" class="headerlink" title="把类的实例对象当作方法调用"></a>把类的实例对象当作方法调用</h4><p>一般类的实例对象是不能直接当作方法调用的，因为方法通常定义在类中</p><p>大部分情况是通过 该实例对象 t.fn()的形式调用</p><blockquote><p>我们的需求是直接把类的实例对象当作方法调用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Test():</span><br><span class="line">    def fn(self):</span><br><span class="line">        print(&apos;fn exe&apos;)</span><br><span class="line">t = Test()</span><br><span class="line">t.fn()</span><br><span class="line">t() # 现在会报错！！！ </span><br><span class="line">#这样调用实际是可以实现的</span><br></pre></td></tr></table></figure><p>如何实现 t() 的方式调用呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Test():</span><br><span class="line">    def __call__(self):</span><br><span class="line">        print(&apos;--test--&apos;)</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t() # --test--</span><br></pre></td></tr></table></figure><h4 id="类装饰器的实现"><a href="#类装饰器的实现" class="headerlink" title="类装饰器的实现"></a>类装饰器的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Test():</span><br><span class="line">    def __init__(self,fn):</span><br><span class="line">        print(&apos;--初始化--&apos;)</span><br><span class="line">        print(&apos;fn name is %s&apos;@fn.__name__)</span><br><span class="line">        self.__fn = fn</span><br><span class="line">    def __call__(self):</span><br><span class="line">        print(&apos;--装饰器中的功能--&apos;)</span><br><span class="line">        sefl.__fn()</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">def test():</span><br><span class="line">    print(&apos;--test--&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">    理解</span><br><span class="line">    1. 执行到装饰器及装饰的方法后 也就是从@Test到 test()定义结束  时候相当于构造了类Test的实例对象</span><br><span class="line">        也就是 Test(test) </span><br><span class="line">        然后执行 init 方法 并且把传递进入的 fn(也就是test) 挂载到实例对象</span><br><span class="line">        此时test 的指向改变为 生成的实例对象</span><br><span class="line">        test = Test(test)</span><br><span class="line">    2. test() 后的理解</span><br><span class="line">        此时test实际上是 Test(test)生成的实例对象</span><br><span class="line">        因为我们声明了 call方法</span><br><span class="line">        所以 test() 执行了 call方法的调用</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python028生成器</title>
      <link href="/2018/06/22/Python028%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2018/06/22/Python028%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><blockquote><p>根据规则生成你要的东西，在你实际需要的时候生成</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [x*2 for x in range(10)]</span><br><span class="line"># [0,2,4,6,8,10,12,14,16,18]</span><br></pre></td></tr></table></figure><p>有的时候你需要一个很大的列表这样内存就会需要很多，但是不希望现在就生成，而是使用其中某些个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 基本会死掉</span><br><span class="line">a = [x*2 for x in range(100000000000000000)]</span><br></pre></td></tr></table></figure><blockquote><p>生成器如何表达</p></blockquote><h4 id="生成器生成方式一"><a href="#生成器生成方式一" class="headerlink" title="生成器生成方式一"></a>生成器生成方式一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">原来的方式(列表生成式)</span><br><span class="line">a = [x*2 for x in range(10)]</span><br><span class="line"># [0,2,4,6,8,10,12,14,16,18]</span><br><span class="line"></span><br><span class="line">生成器的方式  ==&gt; 将列表生成式的[]改成 ()</span><br><span class="line">b = (x*2 for x in range(10))</span><br><span class="line"># &lt;generator object &lt;genexpr&gt; at 0x79898312312&gt;</span><br></pre></td></tr></table></figure><p>如何使用生成器里的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">next(b) # 0</span><br><span class="line">next(b) # 2</span><br><span class="line">next(b) # 4</span><br><span class="line">next(b) # 6</span><br><span class="line">next(b) # 8</span><br><span class="line">next(b) # 10</span><br><span class="line">next(b) # 12</span><br><span class="line">next(b) # 14</span><br><span class="line">next(b) # 16</span><br><span class="line">next(b) # 18</span><br><span class="line">next(b) # 异常 如果生成器已经到了最后一个值就罢工了。。。直接异常了</span><br></pre></td></tr></table></figure><h4 id="生成器生成方式二"><a href="#生成器生成方式二" class="headerlink" title="生成器生成方式二"></a>生成器生成方式二</h4><ul><li>yield 执行到它的时候,creatNum执行就结束了,返回 yield 后的值</li></ul><blockquote><p>如果一个函数里有yield那么 它返回的就是生成器对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def creatNum():</span><br><span class="line">    print(&apos;start&apos;)</span><br><span class="line">    a,b = 0,1</span><br><span class="line">    for i in range(5)</span><br><span class="line">        yield b</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">    print(&apos;stop&apos;)</span><br><span class="line"></span><br><span class="line"># 创建了一个生成器对象   creatNum()已经不像函数了，而是一个生成器对象</span><br><span class="line">a = creatNum()</span><br><span class="line"></span><br><span class="line"># 第一种方式：使用循环执行迭代器</span><br><span class="line">for num in a:</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">第二种方式：</span><br><span class="line">两种next方式执行生成器 前提是你要指定生成的次数</span><br><span class="line">res = a.__next__()</span><br><span class="line">res =  next(a)</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>详解 yield</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">def creatNum():</span><br><span class="line">    print(&apos;start&apos;)</span><br><span class="line">    a,b = 0,1</span><br><span class="line">    for i in range(5)</span><br><span class="line">        yield b</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">    print(&apos;stop&apos;)</span><br><span class="line"></span><br><span class="line">a =  creatNum() # 生成器对象</span><br><span class="line"></span><br><span class="line">next(a)</span><br><span class="line"># 此时 a是生成器对象  但是是第一次执行 所以就会执行</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    初始化部分</span><br><span class="line">    print(&apos;start&apos;)</span><br><span class="line">    a,b = 0,1</span><br><span class="line">    然后执行循环第一次  返回yield 后的值 b (b = 1)</span><br><span class="line">    函数停止在 yield</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line"># 第二次调用 next</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    会从上次停止的地方执行 也就是 yield b (b = 1) 开始</span><br><span class="line">    a,b = b,a+b</span><br><span class="line">    然后根据循环条件看是否继续循环</span><br><span class="line">    发现yield b (b = 1)</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">next(a)</span><br><span class="line"></span><br><span class="line"># 第三次同第二次的结果 。。。</span><br><span class="line"># 第四次同第二次的结果 。。。</span><br><span class="line"># 第五次同第二次的结果 。。。 由于循环已经结束 所以最后会打印 stop</span><br></pre></td></tr></table></figure><h4 id="send"><a href="#send" class="headerlink" title="send"></a>send</h4><p>先看如下程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def test():</span><br><span class="line">    i = 0</span><br><span class="line">    while i&lt;5:</span><br><span class="line">        temp = yield i</span><br><span class="line">        print(temp)</span><br><span class="line">        i += 1</span><br><span class="line"></span><br><span class="line">t = test()</span><br><span class="line"></span><br><span class="line">a = next(t) #  a为0</span><br><span class="line"></span><br><span class="line">a = next(t) #  打印 None ,a为1 </span><br><span class="line"></span><br><span class="line">a = next(t) #  打印 None ,a为2</span><br></pre></td></tr></table></figure><blockquote><p>为啥是None</p></blockquote><ul><li>如果 yield 前有如下形式 temp = yield i,并不是把 yield值给了temp 而是在下一次执行生成器的时候给它传递一个值</li><li>之所以为None 因为 yield i 的时候函数就停止了 temp没有执行到<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp = yield i </span><br><span class="line">要看为两部分  左边 temp  和右边 yield i </span><br><span class="line">程序执行的时候会从右往左</span><br><span class="line">但是yield i的时候就结束返回了</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>再看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def test():</span><br><span class="line">    i = 0</span><br><span class="line">    while i&lt;5:</span><br><span class="line">        temp = yield i</span><br><span class="line">        print(temp)</span><br><span class="line">        i += 1</span><br><span class="line"></span><br><span class="line">t = test()</span><br><span class="line">a = next(t) #  a为0</span><br><span class="line">a = next(t) #  打印 None ,a为1 </span><br><span class="line">a = t.send(&apos;haha&apos;) # 打印 haha ,a 为2</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">t.send(&apos;haha&apos;) 是把 haha 作为 yield i 的返回结果赋值为temp</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h5 id="send-和-next的区别"><a href="#send-和-next的区别" class="headerlink" title="send 和 next的区别"></a>send 和 next的区别</h5><ul><li>相同点：都可以让生成器向下走一步</li><li>异同点： send可以给一个值，这个值作为 yield i 的整体的结果</li></ul><h5 id="使用send的注意点"><a href="#使用send的注意点" class="headerlink" title="使用send的注意点"></a>使用send的注意点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def test():</span><br><span class="line">    i = 0</span><br><span class="line">    while i&lt;5:</span><br><span class="line">        temp = yield i</span><br><span class="line">        print(temp)</span><br><span class="line">        i += 1</span><br><span class="line"></span><br><span class="line">t = test()</span><br><span class="line"></span><br><span class="line">t.send(&apos;haha&apos;) # 报错</span><br><span class="line"></span><br><span class="line">##########################################</span><br><span class="line">因为第一次从程序开头执行</span><br><span class="line">即i = 0执行 但是 send(&apos;haha&apos;)是把值给 yield i的整体的返回结果</span><br><span class="line"></span><br><span class="line">解决方式就是 第一次先调用 一次 t.next() 然后在 t.send(&apos;haha&apos;)</span><br><span class="line"></span><br><span class="line">第二种方式 if/else</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    i = 0</span><br><span class="line">    while i&lt;5:</span><br><span class="line">        if i == 0:</span><br><span class="line">            temp = yield i</span><br><span class="line">        else:</span><br><span class="line">            yield i</span><br><span class="line">        i += 1</span><br></pre></td></tr></table></figure><h4 id="生成器的应用"><a href="#生成器的应用" class="headerlink" title="生成器的应用"></a>生成器的应用</h4><p>相当于一起执行(就像单核的CPU进程里时间片的概念看上去执行多个应用实际上是假象)</p><blockquote><p>多任务应用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def test1():</span><br><span class="line">    while True:</span><br><span class="line">        print(&apos;--1--&apos;)</span><br><span class="line">        yield None</span><br><span class="line"></span><br><span class="line">def test2():</span><br><span class="line">    while True:</span><br><span class="line">        print(&apos;--2--&apos;)</span><br><span class="line">        yield None</span><br><span class="line"></span><br><span class="line">t1 = test1()</span><br><span class="line">t2 = test2()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    t1.__next__()</span><br><span class="line">    t2.__next__()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python027动态添加属性及方法</title>
      <link href="/2018/06/22/Python027%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%96%B9%E6%B3%95/"/>
      <url>/2018/06/22/Python027%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="动态添加属性"><a href="#动态添加属性" class="headerlink" title="动态添加属性"></a>动态添加属性</h3><ul><li>给实例对象添加</li><li>给类添加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__:(self,name,age)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = Person(&quot;a1&quot;,100)</span><br><span class="line">print(a1.name)</span><br><span class="line">print(a1.age)</span><br><span class="line"># 给a1添加属性</span><br><span class="line">a1.addr = &apos;beijing&apos;</span><br><span class="line">print(a1.addr)</span><br><span class="line"></span><br><span class="line">b1 = Person(&quot;b1&quot;,1000)</span><br><span class="line">print(b1.name)</span><br><span class="line">print(b1.age)</span><br><span class="line"></span><br><span class="line"># print(b1.addr) 报错 因为 addr是a1对象动态添加的属性，仅跟对象绑定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 类属性</span><br><span class="line">Person.num = 100</span><br><span class="line"></span><br><span class="line">print(a1.num) #100</span><br><span class="line">print(b1.num) #100</span><br></pre></td></tr></table></figure><h3 id="动态添加方法"><a href="#动态添加方法" class="headerlink" title="动态添加方法"></a>动态添加方法</h3><ul><li>实例方法</li><li>静态方法</li><li>类方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    def __init__:(self,name,age)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&quot;%s正在吃&quot;%self.name)</span><br><span class="line"></span><br><span class="line"># run不在 Person类中定义</span><br><span class="line">def run(self):</span><br><span class="line">     print(&quot;--------%s正在跑-----&quot;%self.name)</span><br><span class="line"></span><br><span class="line">p1 = Person(&apos;p1&apos;,10)</span><br><span class="line">p1.eat()</span><br><span class="line"></span><br><span class="line">#错误方式1</span><br><span class="line"># p1.run()  报错</span><br><span class="line"></span><br><span class="line">#错误方式2 (把方法地址传递给 p1.run属性)</span><br><span class="line">#虽然p1对象中，run属性已经指向了 外部 run方法的地址</span><br><span class="line">#因为run属性指向的函数是后来添加的,执行p1.run()的时候,并没有把p1当作第一个参数,所以在调用的时候出现却缺少参数</span><br><span class="line"># p1.run = run</span><br></pre></td></tr></table></figure><p>正确的做法是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import types</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">types.MethodType(method,instance) </span><br><span class="line">可以实现对对象添加动态方法</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">p1.run = types.MethodType(run,p1) </span><br><span class="line">p1.run() # 不报错 ！！！</span><br><span class="line"># p1正在吃</span><br></pre></td></tr></table></figure><blockquote><p>types.MethodType深入</p></blockquote><p>如果我们这样发现可以直接调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxxx = types.MethodType(run,p1) </span><br><span class="line">xxxx()</span><br><span class="line"># p1正在吃</span><br></pre></td></tr></table></figure><ol><li>types.MethodType(run,p1) 实际是把实例对象传递到普通方法run里缺少的self参数</li><li>types.MethodType(run,p1) 返回的实际就是那个传递了参数的run方法的引用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def run(self):</span><br><span class="line">    print(self.name)</span><br><span class="line"></span><br><span class="line"> def run(p1):</span><br><span class="line">    print(p1.name)</span><br></pre></td></tr></table></figure></li></ol><h4 id="静态方法添加"><a href="#静态方法添加" class="headerlink" title="静态方法添加"></a>静态方法添加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@staticMethod</span><br><span class="line">def test():</span><br><span class="line">    print(&apos;-----static method ------&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 静态方法可以直接添加因为没有self参数</span><br><span class="line">Person.test = test;</span><br><span class="line"></span><br><span class="line">Person.test()</span><br></pre></td></tr></table></figure><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@classMethod</span><br><span class="line">def test2(cls):</span><br><span class="line">    print(&apos;-----class method ------&apos;)</span><br><span class="line"></span><br><span class="line">Person.test2 = test2</span><br><span class="line"></span><br><span class="line">Person.test2()</span><br></pre></td></tr></table></figure><h3 id="slots作用"><a href="#slots作用" class="headerlink" title="slots作用"></a>slots作用</h3><p>因为python是动态语言所以在实例生成之后仍然可以额外添加属性</p><blockquote><p>如何做到让它添加指定的属性呢</p></blockquote><p>slots</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    __slots__ = (&quot;name&quot;,&quot;age&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">p1.name = &apos;aa&apos; # 正常</span><br><span class="line">p1.age = 20 # 正常</span><br><span class="line">p1.num =1000 # 报错</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python026作用域</title>
      <link href="/2018/06/22/Python026%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2018/06/22/Python026%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>globals() 全局的一些东西</li><li>locals()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def test():</span><br><span class="line">    a = 11</span><br><span class="line">    b = 22</span><br><span class="line">    print(locals())</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"># &#123;a:11,b:22&#125;</span><br></pre></td></tr></table></figure><h3 id="LEGB规则"><a href="#LEGB规则" class="headerlink" title="LEGB规则"></a>LEGB规则</h3><blockquote><p>就是既有全局又有局部的时候变量使用问题(就近原则)</p></blockquote><ul><li>locals 当前所在命名空间(函数，闭包)，函数的参数也属于命名空间内的变量</li><li><p>enclosing 外部嵌套函数的命名空间(闭包中常见)</p></li><li><p>global</p></li><li>builtins</li></ul><p>查找变量的顺序</p><p>locals&gt;enclosing&gt;global&gt;builtins</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python025装饰器</title>
      <link href="/2018/06/22/Python025%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2018/06/22/Python025%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><blockquote><p>不影响你正常工作写代码，但是应试的时候如果你不会就代表你不深入python</p></blockquote><p>先看下面一段代码，(理解函数的覆盖)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def t():</span><br><span class="line">    print(1)</span><br><span class="line"></span><br><span class="line">def t():</span><br><span class="line">    print(2)</span><br><span class="line"></span><br><span class="line">t # 代表函数t的内存地址</span><br><span class="line"></span><br><span class="line">t() # 执行函数  打印 2</span><br><span class="line"></span><br><span class="line">################################################</span><br><span class="line"></span><br><span class="line">def xxx(a):</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">xxx = lambda x:x+1</span><br><span class="line"></span><br><span class="line">xxx(1) # 打印2 被匿名函数覆盖</span><br></pre></td></tr></table></figure><blockquote><p>重现公司场景</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">############基础平台提供功能############################</span><br><span class="line">def f1():</span><br><span class="line">    print(1)</span><br><span class="line">def f2():</span><br><span class="line">    print(2)</span><br><span class="line">def f3():</span><br><span class="line">    print(3)</span><br><span class="line">def f4():</span><br><span class="line">    print(4)</span><br><span class="line">#############业务部门A###########################</span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br><span class="line">#############业务部门B###########################</span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br></pre></td></tr></table></figure><blockquote><p>公司发展后发现需要职责分离每个部门分配的功能调用不一样</p></blockquote><ul><li>如A部门只能调用 f1 f2</li><li>如B部门只能调用 f3 f4</li></ul><p>然后交给你实现一个鉴权功能,你修改后如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def check_login():</span><br><span class="line">    #验证1</span><br><span class="line">    #验证2</span><br><span class="line">    #验证3</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def f1():</span><br><span class="line">    check_login()</span><br><span class="line">    print(1)</span><br><span class="line">def f2():</span><br><span class="line">    check_login()</span><br><span class="line">    print(2)</span><br><span class="line">def f3():</span><br><span class="line">    check_login()</span><br><span class="line">    print(3)</span><br><span class="line">def f4():</span><br><span class="line">    check_login()</span><br><span class="line">    print(4)</span><br></pre></td></tr></table></figure><blockquote><p>最后部门老大说要遵循「开放封闭」原则，最后给了一个代码的实现</p></blockquote><ul><li>封闭：已实现的功能(不该进行更改功能代码的内部)</li><li>开放：对扩展开发(改外面)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">def w1(func):</span><br><span class="line">    def inner():</span><br><span class="line">        #验证1</span><br><span class="line">        #验证2</span><br><span class="line">        #验证3</span><br><span class="line">        func()</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@w1</span><br><span class="line">def f1():</span><br><span class="line">    print(1)</span><br><span class="line">@w1</span><br><span class="line">def f2():</span><br><span class="line">    print(2)</span><br><span class="line">@w1    </span><br><span class="line">def f3():</span><br><span class="line">    print(3)</span><br><span class="line">@w1</span><br><span class="line">def f4():</span><br><span class="line">    print(4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##########################################</span><br><span class="line">@w1是一个语法糖</span><br><span class="line"></span><br><span class="line">@w1</span><br><span class="line">def f1():</span><br><span class="line">    print(1)</span><br><span class="line">实际上代码是这样</span><br><span class="line">def w1(func):</span><br><span class="line">    def inner():</span><br><span class="line">        print(&apos;鉴权通过&apos;)</span><br><span class="line">        func()</span><br><span class="line">    return inner</span><br><span class="line">程序执行到 @w1的时候 </span><br><span class="line">##########################################</span><br><span class="line">#第一步理解</span><br><span class="line">innerFunc = w1(f1)</span><br><span class="line">innerFunc()</span><br><span class="line">##########################################</span><br><span class="line">#第二步理解——原理</span><br><span class="line">f1 = w1(f1)</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h4 id="装饰器的应用"><a href="#装饰器的应用" class="headerlink" title="装饰器的应用"></a>装饰器的应用</h4><blockquote><p>包裹数据给字符串加上 b标签</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#定义函数：完成包裹数据</span><br><span class="line">def makeBold(fn):</span><br><span class="line">    def wrapped():</span><br><span class="line">        print(&quot;----1---&quot;)</span><br><span class="line">        return &quot;&lt;b&gt;&quot; + fn() + &quot;&lt;/b&gt;&quot;</span><br><span class="line">    return wrapped</span><br><span class="line"></span><br><span class="line">@makeBold</span><br><span class="line">def test3():</span><br><span class="line">    print(&quot;----3---&quot;)</span><br><span class="line">    return &quot;hello world-3&quot;</span><br><span class="line"></span><br><span class="line">ret = test3()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><blockquote><p>思考？多个装饰器的会如何处理</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#定义函数：完成包裹数据</span><br><span class="line">def makeBold(fn):</span><br><span class="line">    def wrapped():</span><br><span class="line">        print(&quot;----1---&quot;)</span><br><span class="line">        return &quot;&lt;b&gt;&quot; + fn() + &quot;&lt;/b&gt;&quot;</span><br><span class="line">    return wrapped</span><br><span class="line"></span><br><span class="line">#定义函数：完成包裹数据</span><br><span class="line">def makeItalic(fn):</span><br><span class="line">    def wrapped():</span><br><span class="line">        print(&quot;----2---&quot;)</span><br><span class="line">        return &quot;&lt;i&gt;&quot; + fn() + &quot;&lt;/i&gt;&quot;</span><br><span class="line">    return wrapped</span><br><span class="line"></span><br><span class="line">@makeBold</span><br><span class="line">@makeItalic</span><br><span class="line">def test3():</span><br><span class="line">    print(&quot;----3---&quot;)</span><br><span class="line">    return &quot;hello world-3&quot;</span><br><span class="line"></span><br><span class="line">ret = test3()</span><br><span class="line">print(ret) # &lt;b&gt;&lt;i&gt;hello world-3&lt;/i&gt;&lt;/b&gt;</span><br><span class="line"></span><br><span class="line">###########原理############</span><br><span class="line">1.因为此时还存在装饰器所以不会立刻执行test3的返回结果  return &quot;hello world-3&quot;</span><br><span class="line">2.此时返回的是</span><br><span class="line">    def wrapped():</span><br><span class="line">            print(&quot;----1---&quot;)</span><br><span class="line">            return &quot;&lt;b&gt;&quot; + fn() + &quot;&lt;/b&gt;&quot;</span><br><span class="line">test3 = makeBold(test3)</span><br><span class="line">发现可以把  wrapped 返回了</span><br><span class="line">test3 = makeItalic(test3)</span><br></pre></td></tr></table></figure><h4 id="装饰器执行顺序"><a href="#装饰器执行顺序" class="headerlink" title="装饰器执行顺序"></a>装饰器执行顺序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def w1(func):</span><br><span class="line">    def inner():</span><br><span class="line">        #验证1</span><br><span class="line">        #验证2</span><br><span class="line">        #验证3</span><br><span class="line">        func()</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@w1</span><br><span class="line">def f1():</span><br><span class="line">    print(1)</span><br></pre></td></tr></table></figure><blockquote><p> @w1这一行的时候 只要python解释器执行到这里，就自动进行装饰，而不是等调用的时候才装饰</p></blockquote><blockquote><p>如果是多个装饰器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@w1</span><br><span class="line">@w2</span><br><span class="line">实际是</span><br><span class="line">1.w2包装了一下</span><br><span class="line">2.w1继续包装了一下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">调用的时候</span><br><span class="line">先拆开w1</span><br><span class="line">再拆开w2</span><br></pre></td></tr></table></figure><h4 id="装饰器对带有参数的函数的处理"><a href="#装饰器对带有参数的函数的处理" class="headerlink" title="装饰器对带有参数的函数的处理"></a>装饰器对带有参数的函数的处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def w1(func):</span><br><span class="line">    def inner(a,b):</span><br><span class="line">        func(a,b)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@w1</span><br><span class="line">def f1(a,b):</span><br><span class="line">    print(a+b)</span><br><span class="line"></span><br><span class="line">f1(1,2) # 实际调的是inner(1,2)</span><br></pre></td></tr></table></figure><p>如何做到接受任意参数的函数的装饰器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def w1(func):</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@w1</span><br><span class="line">def f1(a,b):</span><br><span class="line">    print(a+b)</span><br></pre></td></tr></table></figure><h4 id="带返回值的装饰器"><a href="#带返回值的装饰器" class="headerlink" title="带返回值的装饰器"></a>带返回值的装饰器</h4><blockquote><p>又来了一个坑如果f1带有返回值装饰器返回的是什么</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def w1(func):</span><br><span class="line">    def inner():</span><br><span class="line">        func()</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@w1</span><br><span class="line">def f1():</span><br><span class="line">    print(&apos;test&apos;)</span><br><span class="line">    return &apos;haha&apos;</span><br><span class="line"></span><br><span class="line">f1() # None</span><br></pre></td></tr></table></figure><p>再看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def w1(func):</span><br><span class="line">    def inner():</span><br><span class="line">        print(&apos;1&apos;)</span><br><span class="line">        x = func() # 保存返回值 &apos;haha&apos;</span><br><span class="line">        print(&apos;2&apos;)</span><br><span class="line">        return x</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@w1</span><br><span class="line">def f1():</span><br><span class="line">    print(&apos;test&apos;)</span><br><span class="line">    return &apos;haha&apos;</span><br><span class="line"></span><br><span class="line">f1() # None</span><br></pre></td></tr></table></figure><h4 id="通用装饰器"><a href="#通用装饰器" class="headerlink" title="通用装饰器"></a>通用装饰器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def w1(func):</span><br><span class="line">    def inner(*args,**kwargs):</span><br><span class="line">        x =func(*args,**kwargs)</span><br><span class="line">        return x</span><br><span class="line">    return inner</span><br><span class="line"></span><br><span class="line">@w1</span><br><span class="line">def f1(a,b):</span><br><span class="line">    return a+b</span><br></pre></td></tr></table></figure><h4 id="带参数装饰器"><a href="#带参数装饰器" class="headerlink" title="带参数装饰器"></a>带参数装饰器</h4><blockquote><p>装饰器是一次闭包，如果装饰器带参就在进行一次闭包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def func_arg(arg):</span><br><span class="line">    def func(functionName):</span><br><span class="line">        def func_in():</span><br><span class="line">            print(&quot;---记录日志-arg=%s--&quot;%arg)</span><br><span class="line">            if arg==&quot;heihei&quot;:</span><br><span class="line">                functionName()</span><br><span class="line">                functionName()</span><br><span class="line">            else:</span><br><span class="line">                functionName()</span><br><span class="line">        return func_in</span><br><span class="line">    return func</span><br><span class="line"></span><br><span class="line">#1. 先执行func_arg(&quot;heihei&quot;)函数,这个函数return 的结果是func这个函数的引用</span><br><span class="line">#2. @func</span><br><span class="line">#3. 使用@func对test进行装饰</span><br><span class="line">@func_arg(&quot;heihei&quot;)</span><br><span class="line">def test():</span><br><span class="line">    print(&quot;--test--&quot;)</span><br><span class="line"></span><br><span class="line">#带有参数的装饰器,能够起到在运行时,有不同的功能</span><br><span class="line">@func_arg(&quot;haha&quot;)</span><br><span class="line">def test2():</span><br><span class="line">    print(&quot;--test2--&quot;)</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python024闭包</title>
      <link href="/2018/06/22/Python024%E9%97%AD%E5%8C%85/"/>
      <url>/2018/06/22/Python024%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def test(number):</span><br><span class="line">    # 内部函数调用访问number</span><br><span class="line">    def test_in():</span><br><span class="line">        print(number)</span><br><span class="line">    # 将内部函数返回</span><br><span class="line">    return test_in</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xxx = test(100)</span><br><span class="line">print(&quot;-&quot;*30)</span><br><span class="line">xxx(1)</span><br><span class="line">xxx(100)</span><br><span class="line">xxx(200)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python023迭代器</title>
      <link href="/2018/06/22/Python023%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2018/06/22/Python023%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h4 id="先来了解什么是可迭代对象"><a href="#先来了解什么是可迭代对象" class="headerlink" title="先来了解什么是可迭代对象"></a>先来了解什么是可迭代对象</h4><blockquote><p>集合类型</p></blockquote><ul><li>list</li><li>tuple</li><li>dict</li><li>set</li><li>str</li></ul><blockquote><p>generator 生成器</p></blockquote><h4 id="判断是否可以迭代"><a href="#判断是否可以迭代" class="headerlink" title="判断是否可以迭代"></a>判断是否可以迭代</h4><p>使用 isinstance()判断一个对象是否是 Iterable对象(可迭代)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line"></span><br><span class="line">isinstance([],Iterable) # True</span><br><span class="line">isinstance(&apos;abc&apos;,Iterable) # True</span><br><span class="line">isinstance(&#123;&#125;,Iterable) # True</span><br><span class="line">isinstance((x for x in range(10)),Iterable) # True</span><br><span class="line">isinstance(100,Iterable) # False</span><br></pre></td></tr></table></figure><h4 id="迭代器可以调用next"><a href="#迭代器可以调用next" class="headerlink" title="迭代器可以调用next()"></a>迭代器可以调用next()</h4><p>Iterator可迭代对象，可迭代对象才可以使用next</p><ul><li>生成器就是可迭代对象</li><li>列表不是可迭代对象但是它可以迭代</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from collections import Iterator</span><br><span class="line"></span><br><span class="line">isinstance((x for x in range(10)),Iterator) # True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">isinstance([],Iterator) # False</span><br><span class="line">isinstance(&apos;abc&apos;,Iterator) # False</span><br><span class="line">isinstance(&#123;&#125;,Iterator) # False</span><br><span class="line">isinstance(100,Iterator) # False</span><br></pre></td></tr></table></figure><h4 id="iter-函数"><a href="#iter-函数" class="headerlink" title="iter()函数"></a>iter()函数</h4><p>可以把「非可迭代对象」转换为「可迭代对象」</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isinstance(iter([]),Iterator) # True</span><br><span class="line"></span><br><span class="line">isinstance(iter(&apos;abc&apos;),Iterator) # True</span><br><span class="line"></span><br><span class="line"># 生成器比实际的列表占用空间小</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python022property</title>
      <link href="/2018/06/20/Python022property%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/06/20/Python022property%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><blockquote><p>先看私有属性get和set方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class  Test(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__num = 100</span><br><span class="line">    def getNum(self):</span><br><span class="line">        return self.__num</span><br><span class="line">    def setNum(self,newNum):</span><br><span class="line">        self.__num = newNum</span><br><span class="line"></span><br><span class="line"># 类 Test有私有属性 num (__属性名，代表私有属性)</span><br><span class="line"># 通过get 和 set方法 可以对私有属性进行操作</span><br><span class="line">t = Test()</span><br><span class="line">print(t.getNum())</span><br><span class="line">t.setNum(50)</span><br><span class="line">print(t.getNum())</span><br></pre></td></tr></table></figure><blockquote><p>需求来了</p></blockquote><ul><li>t.num = 100 就调用设置 __num的值为100</li><li>print(t.num)的时候就直接取__num的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class  Test(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__num = 100</span><br><span class="line">    def getNum(self):</span><br><span class="line">        return self.__num</span><br><span class="line">    def setNum(self,newNum):</span><br><span class="line">        self.__num = newNum</span><br><span class="line">    num = property(getNum,setNum)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t.num = 9 相当于 t.setNum(9)</span><br><span class="line">t.num 相当于 t.getNum()</span><br></pre></td></tr></table></figure><p>如果你在定义类的时候设置了一个私有属性，同时设置了get和set方法，并设置property</p><ul><li>相当于把方法进行了封装，开发者在对属性设置数据的时候变得方便</li></ul><h4 id="设置property的另一种方式"><a href="#设置property的另一种方式" class="headerlink" title="设置property的另一种方式"></a>设置property的另一种方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Test(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">       self.__num = 100</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def num(self):</span><br><span class="line">        print(&quot;----getter----&quot;)</span><br><span class="line">        return self.__num</span><br><span class="line"></span><br><span class="line">    @num.setter</span><br><span class="line">    def num(self, newNum):</span><br><span class="line">        print(&quot;----setter----&quot;)</span><br><span class="line">        self.__num = newNum</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line"></span><br><span class="line">t.num = 200 #相当于调用了 t.setNum(200)</span><br><span class="line"></span><br><span class="line">print(t.num) #相当于调用了 t.getNum()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python021==和 is和深浅拷贝</title>
      <link href="/2018/06/20/Python021==%E5%92%8Cis%E5%92%8C%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2018/06/20/Python021==%E5%92%8Cis%E5%92%8C%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="和-is"><a href="#和-is" class="headerlink" title="== 和 is"></a>== 和 is</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = [11,22,33]</span><br><span class="line">b = [11,22,33]</span><br><span class="line">a == b # True 你的苹果6 和我的苹果6型号一样的</span><br><span class="line">a is b # False 你的苹果6 不是我的苹果6</span><br><span class="line"></span><br><span class="line">id(a) # 139804120094600</span><br><span class="line">id(b) # 139804120094640</span><br><span class="line"></span><br><span class="line"># 此时 </span><br><span class="line">c = a # 把a的地址给了c</span><br><span class="line">id(a) # 139804120094600</span><br><span class="line">id(c) # 139804120094600</span><br><span class="line">id(b) # 139804120094640</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a is c </span><br><span class="line">True</span><br></pre></td></tr></table></figure><ul><li>== 是比较两个对象内容是否相等</li><li>is 是比较两个引用是否指向同一个对象(引用比较)</li></ul><blockquote><p>注意点单纯的值类型(这个问题以后讲) 在一定范围内 a is b 是 True的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = 100</span><br><span class="line">b = 100</span><br><span class="line">a == b # True</span><br><span class="line">a is b # True</span><br><span class="line"></span><br><span class="line">a = 10000</span><br><span class="line">b = 10000</span><br><span class="line">a is b # False</span><br></pre></td></tr></table></figure><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">b = a </span><br><span class="line">id(a) # 地址1001</span><br><span class="line">id(b) # 地址1001</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line">a = [1,2,3]</span><br><span class="line">c = copy.deepcopy(a) # 深拷贝 [1,2,3]</span><br><span class="line"></span><br><span class="line">id(a) # 地址1001</span><br><span class="line">id(c) # 地址1211</span><br></pre></td></tr></table></figure><blockquote><p>问题1多重嵌套的列表拷贝之后拷贝的是地址还是内容?</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">b = [4,5,6]</span><br><span class="line">c = [a,b] # c是一个二维的列表</span><br><span class="line"></span><br><span class="line">d = copy.deepcopy(c) # 深拷贝</span><br><span class="line"></span><br><span class="line">c[0] # [1,2,3] </span><br><span class="line">d[0] # [1,2,3]</span><br><span class="line"></span><br><span class="line">c[0].append(4) # [1,2,3,4]</span><br><span class="line">d[0] # [1,2,3]</span><br></pre></td></tr></table></figure><p>元组同上也会进行深拷贝</p><h4 id="copy模块的方法"><a href="#copy模块的方法" class="headerlink" title="copy模块的方法"></a>copy模块的方法</h4><ul><li>copy.copy(xxx) 如果是可变类型仅进行一层拷贝，如果是不可变类型不进行拷贝(浅拷贝)</li><li>copy.deepcopy(xxx) 递归的进行拷贝无论多少层</li></ul><blockquote><p>copy的坑</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">b = [4,5,6]</span><br><span class="line">c = [a,b] # c是一个二维的列表</span><br><span class="line">d = copy.copy(c) </span><br><span class="line"></span><br><span class="line"># 仅进行第一层拷贝</span><br><span class="line">id(c) # 地址100</span><br><span class="line">id(d) # 地址110</span><br><span class="line"></span><br><span class="line">c[0].append(4) # [1,2,3,4]</span><br><span class="line">d[0] # [1,2,3,4]</span><br><span class="line"></span><br><span class="line"># 元组又有例外</span><br><span class="line">a = [1,2,3]</span><br><span class="line">b = [4,5,6]</span><br><span class="line">c = (a,b) </span><br><span class="line">d = copy.copy(c) </span><br><span class="line"></span><br><span class="line">id(c) # 地址1100</span><br><span class="line">id(d) # 地址1100</span><br></pre></td></tr></table></figure><p>copy.copy去拷贝一个不可变类型时不进行拷贝，可变类型拷贝一层</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python013set_list_tuple</title>
      <link href="/2018/06/18/Python013set_list_tuple/"/>
      <url>/2018/06/18/Python013set_list_tuple/</url>
      
        <content type="html"><![CDATA[<blockquote><p>set 的简单应用以后会更复杂。。。。。。</p></blockquote><h3 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h3><blockquote><p>跟列表一样，但是它不重复</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [11,22,33,44,55,11]</span><br><span class="line"></span><br><span class="line">b = set(a)</span><br><span class="line"># &#123;11,22,33,44&#125;</span><br><span class="line">type(b)</span><br><span class="line"># set</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = list(b)</span><br><span class="line"># [33,11,44,22] 集合转成列表虽然去重但是是无序的</span><br></pre></td></tr></table></figure><h3 id="set-list-tuple相互可以转化"><a href="#set-list-tuple相互可以转化" class="headerlink" title="set list tuple相互可以转化"></a>set list tuple相互可以转化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (11,22,33,44,55,11)</span><br><span class="line">b = set(a)</span><br><span class="line"># &#123;11,22,33,44&#125;</span><br><span class="line"></span><br><span class="line">c = tuple(b)</span><br><span class="line"># (11,22,33,44)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python012列表推导式</title>
      <link href="/2018/06/18/Python012%E5%88%97%E8%A1%A8%E6%8E%A8%E5%88%B0%E5%BC%8F/"/>
      <url>/2018/06/18/Python012%E5%88%97%E8%A1%A8%E6%8E%A8%E5%88%B0%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="列表推到式"><a href="#列表推到式" class="headerlink" title="列表推到式"></a>列表推到式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = [x for x in [11,22,33,44,55]]</span><br><span class="line"># [11,22,33,44,55]</span><br><span class="line"></span><br><span class="line"># 生成1-100的列表</span><br><span class="line">b = [x for x in range(1,101)]</span><br><span class="line"></span><br><span class="line"># 生成1-100的奇数列表</span><br><span class="line">b = [x for x in range(1,101,2)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 生成1-100的偶数列表</span><br><span class="line">b = [x for x in range(2,101,2)]</span><br><span class="line"># 生成1-100的偶数列表</span><br><span class="line">c = [x+1 for x in range(1,101,2)]</span><br><span class="line"></span><br><span class="line"># 生成1-100的偶数列表  只能写一个条件</span><br><span class="line">d = [x for x in range(1,101) if x%2==0]</span><br></pre></td></tr></table></figure><blockquote><p>列表推到式，循环嵌套</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">e = [x for x in range(1,4) for y in range(1,3)]</span><br><span class="line"></span><br><span class="line"># x是外层循环 循环3次</span><br><span class="line"># y是内层循环 循环2次</span><br><span class="line"></span><br><span class="line"># [1,1,2,2,3,3]      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 想要既取到x也取到y 生成元组</span><br><span class="line">e = [(x,y) for x in range(1,4) for y in range(1,3)] </span><br><span class="line"># [(1,1),(1,2),(2,1),(2,2),(3,1),(3,2)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python011模块</title>
      <link href="/2018/06/18/Python011%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/06/18/Python011%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import 模块名</span><br><span class="line"># 引入模块</span><br><span class="line">import random</span><br><span class="line">random.randint(0,2)</span><br></pre></td></tr></table></figure><h4 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># test.py内容如下</span><br><span class="line"></span><br><span class="line">def test:</span><br><span class="line">    print(&apos;test&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在你的模块里引入并使用</span><br><span class="line">import test</span><br><span class="line">test.test()</span><br></pre></td></tr></table></figure><blockquote><p>导入模块的过程实际就是把模块里的内容执行一遍</p></blockquote><p>你的模块需要自测，但是不想在被引入的地方调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__name__  代表模块的名字 test.py</span><br><span class="line"></span><br><span class="line">单独执行test.py  </span><br><span class="line">print(__name__)  # __main__</span><br><span class="line">在其他模块里导入 test.py</span><br><span class="line">会打印  __test__</span><br></pre></td></tr></table></figure><blockquote><p>实现自测才调用的效果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def test():</span><br><span class="line">    print(&apos;haha&apos;)</span><br><span class="line"></span><br><span class="line">#测试</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    print(__name__)</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h3 id="模块导入路径问题"><a href="#模块导入路径问题" class="headerlink" title="模块导入路径问题"></a>模块导入路径问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import random </span><br><span class="line">random.randint(1,3)</span><br><span class="line"># 每次都有random命名空间是不是很不爽</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 太极端会把random里所有方法导入进来</span><br><span class="line">from random import *</span><br><span class="line">randint(1,3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 单独导入一个</span><br><span class="line">from random import randint</span><br><span class="line">randint(1,3)</span><br><span class="line"></span><br><span class="line"># 导入多个</span><br><span class="line">from random import randint,randrange</span><br></pre></td></tr></table></figure><h3 id="定位模块"><a href="#定位模块" class="headerlink" title="定位模块"></a>定位模块</h3><blockquote><p>如果第三方模块在当前执行目录则没有关系，如果模块拆的比较碎同时不在同一目录，就会有路径问题</p></blockquote><ol><li>当前目录</li><li>如果不在当前目录，搜索shell改变了pythonpath下的每个目录</li><li>如果不在以上目录，python会查看默认路径 UNIX下默认路径为/usr/local/lib/python</li><li>模块搜索路径存储在system模块的sys.path变量里。它是一个列表，包含以上目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"># 将你的模块路径插入到最前面</span><br><span class="line">sys.path.insert(0,&quot;test.py的路径&quot;) </span><br><span class="line"># 将你的模块路径插入到最后， 如果加载失败一定是 sys.path里有同名的test模块覆盖了你的test</span><br><span class="line"># sys.path.append(&quot;test.py的路径&quot;) </span><br><span class="line">def test():</span><br><span class="line">    print(&apos;haha&apos;)</span><br></pre></td></tr></table></figure><h3 id="all变量"><a href="#all变量" class="headerlink" title="all变量"></a>all变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模块中的__all__</span><br></pre></td></tr></table></figure><p>当你有test.py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Test(object):</span><br><span class="line">    def test(def):</span><br><span class="line">        print(&quot;class defined method&quot;)</span><br><span class="line"></span><br><span class="line">def test1():</span><br><span class="line">    print(&quot;test1&quot;)</span><br><span class="line"></span><br><span class="line">def test2():</span><br><span class="line">    print(&quot;test2&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from test import *</span><br><span class="line">这时你可以调用test模块所有东西</span><br></pre></td></tr></table></figure><blockquote><p>在test.py里添加如下内容后</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [&quot;Test&quot;,&quot;test1&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from test import *</span><br><span class="line">这时你可以调用test模块里的 Test类 和 test1 </span><br><span class="line">调用 test2报错</span><br></pre></td></tr></table></figure><blockquote><p>all仅仅影响的是 from test import <em> 里的 「</em>」</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from test import *</span><br><span class="line">from test from test2</span><br><span class="line">test1 ()</span><br><span class="line">test2() #不报错</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python010异常</title>
      <link href="/2018/06/18/Python010%E5%BC%82%E5%B8%B8/"/>
      <url>/2018/06/18/Python010%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><blockquote><p>try … except…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(a) #a没有定义直接打印报错</span><br><span class="line">except:</span><br><span class="line">    print(&apos;hahahaha&apos;)</span><br><span class="line"></span><br><span class="line"># 打印 hahahaha</span><br></pre></td></tr></table></figure><blockquote><p>异常有多种应该怎样捕获</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    xxxxxxxxxx1</span><br><span class="line">    xxxxxxxxxx2</span><br><span class="line">    xxxxxxxxxx3</span><br><span class="line">    xxxxxxxxxx4</span><br><span class="line">except 车胎扎了:</span><br><span class="line">    补胎</span><br><span class="line">except 链子掉了:</span><br><span class="line">    挂上</span><br><span class="line">except 闸坏了:</span><br><span class="line">    换车闸</span><br></pre></td></tr></table></figure><blockquote><p>一次捕获多个异常</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    xxxxxxxxxx1</span><br><span class="line">    xxxxxxxxxx2</span><br><span class="line">    xxxxxxxxxx3</span><br><span class="line">    xxxxxxxxxx4</span><br><span class="line">except (车胎扎了,链子掉了,闸坏了):</span><br><span class="line">    处理</span><br><span class="line"></span><br><span class="line"># python2 里不用加括号</span><br></pre></td></tr></table></figure><blockquote><p>打印错误的基本信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(a)</span><br><span class="line">except NameError as ffff:</span><br><span class="line">    print(&apos;产生了一个异常%s&apos;%ffff)</span><br><span class="line"></span><br><span class="line"># 多种异常</span><br><span class="line">try:</span><br><span class="line">    print(a)</span><br><span class="line">except (NameError,FileNotFoundError) as ffff:</span><br><span class="line">    print(&apos;产生了一个异常%s&apos;%ffff)</span><br></pre></td></tr></table></figure><blockquote><p>捕获所有异常</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(a)</span><br><span class="line">except:</span><br><span class="line">    print(&apos;产生了一个异常&apos;)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    print(a)</span><br><span class="line">except Exception as ffff:</span><br><span class="line">    print(&apos;产生了一个异常%s&apos;%ffff)</span><br></pre></td></tr></table></figure><h4 id="异常之else"><a href="#异常之else" class="headerlink" title="异常之else"></a>异常之else</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    #如果产生了一个异常，但是except没有捕获，那么就会按照这个异常默认的处理方式进行</span><br><span class="line">    open(&quot;aaa.txt&quot;)</span><br><span class="line">    a = 100</span><br><span class="line">    print(a)</span><br><span class="line">except NameError:</span><br><span class="line">    #如果在try中的代码产生了一个NameError时，才会执行的异常处理</span><br><span class="line">    print(&quot;捕获到了一个异常&quot;)</span><br><span class="line">else:</span><br><span class="line">    #在try中的代码都没有产生异常的时候，才会执行的代码</span><br><span class="line">    print(&quot;-----1-----&quot;)</span><br></pre></td></tr></table></figure><h4 id="异常之finally"><a href="#异常之finally" class="headerlink" title="异常之finally"></a>异常之finally</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    #如果产生了一个异常，但是except没有捕获，那么就会按照这个异常默认的处理方式进行</span><br><span class="line">    open(&quot;aaa.txt&quot;)</span><br><span class="line">    a = 100</span><br><span class="line">    print(a)</span><br><span class="line">except NameError:</span><br><span class="line">    #如果在try中的代码产生了一个NameError时，才会执行的异常处理</span><br><span class="line">    print(&quot;捕获到了一个异常&quot;)</span><br><span class="line">else:</span><br><span class="line">    #在try中的代码都没有产生异常的时候，才会执行的代码</span><br><span class="line">    print(&quot;-----1-----&quot;)</span><br><span class="line">finally:</span><br><span class="line">    print(&quot;-----最后执行的实行-0----&quot;)</span><br></pre></td></tr></table></figure><h4 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def test1():</span><br><span class="line">    print(&quot;------1-1------&quot;)</span><br><span class="line">    print(num)</span><br><span class="line">    print(&quot;------1-2------&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test2():</span><br><span class="line">    print(&quot;------2-1------&quot;)</span><br><span class="line">    test1()</span><br><span class="line">    print(&quot;------2-2------&quot;)</span><br><span class="line"></span><br><span class="line">def test3():</span><br><span class="line">    try:</span><br><span class="line">        print(&quot;------2-1------&quot;)</span><br><span class="line">        test1()</span><br><span class="line">        print(&quot;------2-2------&quot;)</span><br><span class="line">    except Exception as result:</span><br><span class="line">        print(&quot;捕获到了异常:%s&quot;%result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test3()</span><br></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Test(Exception):</span><br><span class="line">    def __init__(self, length, atleast):</span><br><span class="line">        self.length =  length</span><br><span class="line">        self.atleast = atleast</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    raise Test(1,2)</span><br><span class="line">except Test as result:</span><br><span class="line">    print(&quot;---f-f-f-f-f----&quot;)</span><br><span class="line">    print(result.length)</span><br><span class="line">    print(result.atleast)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python009单例模式</title>
      <link href="/2018/06/18/Python009%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/06/18/Python009%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h3>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python008类属性实例属性静态方法</title>
      <link href="/2018/06/17/Python008%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/"/>
      <url>/2018/06/17/Python008%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class 士兵:</span><br><span class="line">    #类属性</span><br><span class="line">    血量 = 100</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">            self.name = name</span><br><span class="line">    #方法</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;士兵奔跑&apos;)    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = 士兵(&apos;a&apos;)</span><br><span class="line">b = 士兵(&apos;b&apos;)</span><br><span class="line"></span><br><span class="line">a.血量  # 100</span><br><span class="line">b.血量  # 100</span><br></pre></td></tr></table></figure><blockquote><p>如果实例属性里定义了 血量 属性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class 士兵:</span><br><span class="line">    #类属性</span><br><span class="line">    血量 = 100</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">            self.name = name</span><br><span class="line">            self.血量 = 200</span><br><span class="line">    #方法</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;士兵奔跑&apos;)    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = 士兵(&apos;a&apos;)</span><br><span class="line">a.血量 # 200</span><br></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><blockquote><p>要用修饰器 @classmethod来标识</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Test:</span><br><span class="line">    #类属性</span><br><span class="line">    num = 0</span><br><span class="line">    def __init__(self):</span><br><span class="line">        #实例属性</span><br><span class="line">        self.age = 20</span><br><span class="line">    @classmethod</span><br><span class="line">    def setNum(cls,newNum):</span><br><span class="line">        cls.num = newNum</span><br><span class="line"></span><br><span class="line">a = Test()</span><br><span class="line">print(Test.num) # 0</span><br><span class="line"></span><br><span class="line">Test.setNum(100) </span><br><span class="line">print(Test.num) # 100</span><br><span class="line"></span><br><span class="line">a.setNum(200)</span><br><span class="line">print(Test.num) # 200</span><br><span class="line"></span><br><span class="line"># 类方法既可以通过 类调用 也可以通过 实例对象</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><blockquote><p>要用修饰器 @staticmethod来标识</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Test:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        #实例属性</span><br><span class="line">        self.age = 20</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def test():</span><br><span class="line">        print(&apos;我是Test类的静态方法&apos;)</span><br><span class="line"></span><br><span class="line">a = Test()</span><br><span class="line">a.test()</span><br><span class="line">Test.test()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python007继承和多态</title>
      <link href="/2018/06/17/Python007%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/"/>
      <url>/2018/06/17/Python007%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>记得有句经典话，你可以使用你爸的抽屉，但你只有使用权，而没有抽屉所有权，因为抽屉是你爸的</p><blockquote><p>所有类默认继承 object(object是所有类的基类)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Cat(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">#两种方式一样 默认继承object</span><br></pre></td></tr></table></figure><h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;----run---&apos;)</span><br><span class="line"></span><br><span class="line">class Bosi(Cat):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Jiafei(Cat):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">bosi = Bosi()</span><br><span class="line">bosi.run()</span><br><span class="line"></span><br><span class="line">jf = Jiafei()</span><br><span class="line">jf.run()</span><br></pre></td></tr></table></figure><blockquote><p>继承的注意点，后代无法使用父类的私有属性和方法</p></blockquote><p>你的牙刷和你爸的牙刷属于私有的</p><blockquote><p>重写的应用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;----run---&apos;)</span><br><span class="line"></span><br><span class="line">class Bosi(Cat):</span><br><span class="line">     def run(self):</span><br><span class="line">        print(&apos;----run RUN RUN---&apos;)</span><br><span class="line"></span><br><span class="line"># 波斯猫的run方法跟父类不一致的时候可以自行定义行为——重写</span><br></pre></td></tr></table></figure><blockquote><p>如果想要在重写的方法里调用父类的方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;----run---&apos;)</span><br><span class="line"></span><br><span class="line">class Bosi(Cat):</span><br><span class="line">     def run(self):</span><br><span class="line">        super().run()</span><br><span class="line">        print(&apos;----run RUN RUN---&apos;)</span><br></pre></td></tr></table></figure><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><ul><li>马驴骡子实例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Ma(object):</span><br><span class="line">    def pao(self):</span><br><span class="line">        print(&apos;----100km/h  跑----&apos;)</span><br><span class="line"></span><br><span class="line">class Lv(object):</span><br><span class="line">    def tuowupin(self):</span><br><span class="line">        print(&apos;----托物品----&apos;)</span><br><span class="line"></span><br><span class="line"># 多继承</span><br><span class="line">class Luozi(Ma,Lv):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">luozi = Luozi()</span><br><span class="line">luozi.pao()</span><br><span class="line">luozi.tuowupin()</span><br></pre></td></tr></table></figure><blockquote><p>注意点：如果马和驴都有 jiao()骡子继承谁的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Ma(object):</span><br><span class="line">    def pao(self):</span><br><span class="line">        print(&apos;----100km/h  跑----&apos;)</span><br><span class="line">    def jiao(self):</span><br><span class="line">        print(&apos;----马在叫----&apos;)</span><br><span class="line"></span><br><span class="line">class Lv(object):</span><br><span class="line">    def tuowupin(self):</span><br><span class="line">        print(&apos;----托物品----&apos;)</span><br><span class="line">    def jiao(self):</span><br><span class="line">        print(&apos;----驴在叫----&apos;)</span><br><span class="line"># 多继承</span><br><span class="line">class Luozi(Ma,Lv):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">luozi = Luozi()</span><br><span class="line">luozi.jiao() #是谁的？</span><br></pre></td></tr></table></figure><blockquote><h4 id="如果继承多个类，每个类都有同名方法"><a href="#如果继承多个类，每个类都有同名方法" class="headerlink" title="如果继承多个类，每个类都有同名方法"></a>如果继承多个类，每个类都有同名方法</h4></blockquote><ul><li>如果是平行关系，则继承写在第一个继承的类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 继承Ma的jiao</span><br><span class="line">class Luozi(Ma,Lv):</span><br><span class="line"></span><br><span class="line"># 继承Lv的jiao</span><br><span class="line">class Luozi(Lv,Ma):</span><br></pre></td></tr></table></figure><ul><li>如果继承的有多重嵌套关系，而且又特别复杂</li></ul><p>它有一个mro算法,不在本次总结范围之内</p><p>但是你看有查看调用类的先后顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(Luozi.__mro__)</span><br><span class="line"># 打印出继承类的先后顺序</span><br><span class="line"># 继承时寻找方法会从头往后找，使用最先找到的</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>地下城与勇士实例,以下是伪代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class 勇士:</span><br><span class="line">    def 攻击(self):</span><br><span class="line">        print(&apos;按X  XX XXX&apos;)</span><br><span class="line"></span><br><span class="line">class 法师(勇士):</span><br><span class="line">    def 攻击(self):</span><br><span class="line">        print(&apos;魔法星弹。。。。&apos;)</span><br><span class="line"></span><br><span class="line">class 鬼剑士(勇士):</span><br><span class="line">    def 攻击(self):</span><br><span class="line">        print(&apos;拔刀斩。。。。&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 这是一个函数</span><br><span class="line">def fight(obj):</span><br><span class="line">    obj.攻击()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fight(勇士()) # &apos;按X  XX XXX&apos;</span><br><span class="line">fight(法师()) # &apos;魔法星弹。。。。&apos;</span><br><span class="line">fight(鬼剑士()) # &apos;拔刀斩。。。。&apos;</span><br></pre></td></tr></table></figure><ul><li>同样的方法表现方式不一样</li></ul><blockquote><p>不是勇士的子类可不可以调用fight？</p></blockquote><p>可以，但是你要保证你自身有 「攻击( )」</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class 喷火龙:</span><br><span class="line">    def 攻击(self):</span><br><span class="line">        print(&quot;喷出火焰。。。。&quot;)</span><br><span class="line"></span><br><span class="line">fight(喷火龙())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python006面向对象之我不是异教徒</title>
      <link href="/2018/06/16/Python006%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%88%91%E4%B8%8D%E6%98%AF%E5%BC%82%E6%95%99%E5%BE%92/"/>
      <url>/2018/06/16/Python006%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%88%91%E4%B8%8D%E6%98%AF%E5%BC%82%E6%95%99%E5%BE%92/</url>
      
        <content type="html"><![CDATA[<p>稍微懂点js，而且js里的继承是模拟的即使出了ES6 class特性但是它的实质依然是原型链具体请参考之前写的总结文章「继承」</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote><p>什么是面向对象，最深刻的理解莫过于think in java里的灯泡图</p></blockquote><p>虽然今天是python</p><ul><li>面向过程</li></ul><ol><li>老张开车去东北</li><li>先搞辆车</li><li>充满油</li><li>踩上油门</li><li>打开百度地图</li><li>东北之旅</li></ol><ul><li>面向对象</li></ul><ol><li>打开支付宝飞猪订票 or 火车12306</li><li>我去！！！竟然莫名其妙的就来到了东北</li></ol><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><ul><li>类 —&gt; 同类事物的抽象描述</li><li>对象 —&gt; 具体的事物</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类    对象</span><br><span class="line"></span><br><span class="line">狗    张三家的萨摩</span><br><span class="line"></span><br><span class="line">车    邻居家的小汽车</span><br></pre></td></tr></table></figure><h3 id="类的构成"><a href="#类的构成" class="headerlink" title="类的构成"></a>类的构成</h3><ul><li>类名 狗 Dog</li><li>属性 品种、毛色、性别、名字</li><li>方法 叫、跑、咬人</li></ul><h3 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class Cat:</span><br><span class="line">    #属性</span><br><span class="line"></span><br><span class="line">    #方法 </span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    只要是方法要加入 self参数 </span><br><span class="line">    不管有没有参数 self为第一个参数</span><br><span class="line">    def原来是顶格写 在类里要 缩进一下</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;吃鱼啦！！！&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建一只猫</span><br><span class="line">a = Cat()</span><br><span class="line">a.eat()</span><br></pre></td></tr></table></figure><blockquote><p> 给猫添加属性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.color = &apos;花色&apos;</span><br><span class="line"># 获取a对象的数据</span><br><span class="line">xxx = a.color  # &apos;花色&apos;</span><br><span class="line"></span><br><span class="line"># 注意如果没有的属性你还去获取会产生异常</span><br><span class="line">print(a.high) # 报错</span><br></pre></td></tr></table></figure><blockquote><p>如果想在方法里访问 color属性就要这样定义，否则抛出异常</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class Cat:</span><br><span class="line">    #方法 </span><br><span class="line">    def xxx(self):</span><br><span class="line">        print(self.color)</span><br><span class="line"></span><br><span class="line">b = Cat()</span><br><span class="line"># 给对象添加color属性</span><br><span class="line">b.color = &apos;red&apos;</span><br><span class="line"># 通过方法访问color属性 </span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">但是这是一个大坑</span><br><span class="line">必须先声明b.color = &apos;red&apos; 否则还是报错</span><br><span class="line">因为color是你动态添加的属性</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">b.xxx() # &apos;red&apos;</span><br></pre></td></tr></table></figure><h3 id="init方法-初始化方法"><a href="#init方法-初始化方法" class="headerlink" title="init方法(初始化方法)"></a>init方法(初始化方法)</h3><p>创建对象后自动调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    # 当创建完一个对象后会立即调用</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&apos;haha&apos;)</span><br><span class="line">    </span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;吃鱼啦！！！&apos;)</span><br><span class="line"></span><br><span class="line">a = Cat()</span><br><span class="line"># &apos;haha&apos;</span><br></pre></td></tr></table></figure><p>稍微好点的挂载属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    # 当创建完一个对象后会立即调用</span><br><span class="line">    def __init__(self,newColor,newHigh):</span><br><span class="line">        self.color = newColor</span><br><span class="line">        self.high = newHigh</span><br><span class="line">        print(&apos;haha&apos;)</span><br><span class="line">    </span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;吃鱼啦！！！&apos;)</span><br><span class="line"></span><br><span class="line">a = Cat(&apos;red&apos;,50)</span><br><span class="line"># &apos;haha&apos;</span><br><span class="line">print(a.color)</span><br><span class="line">print(a.high)</span><br></pre></td></tr></table></figure><h3 id="扩展-创建对象的浪费之处"><a href="#扩展-创建对象的浪费之处" class="headerlink" title="扩展-创建对象的浪费之处"></a>扩展-创建对象的浪费之处</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = Cat()</span><br><span class="line">b = Cat()</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">a对象里有一个 eat方法</span><br><span class="line">b对象里有一个 eat方法</span><br><span class="line">如果是100个对象就是100个 eat方法 很浪费因为方法的内容都是一样的</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h3 id="str方法-神似js的toString实现"><a href="#str方法-神似js的toString实现" class="headerlink" title="str方法(神似js的toString实现)"></a>str方法(神似js的toString实现)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;haha&apos;</span><br><span class="line"></span><br><span class="line"># 这样打印对象的时候就会变成 &apos;haha&apos;</span><br><span class="line">a = Cat()</span><br><span class="line">print(a) # &apos;haha&apos;</span><br></pre></td></tr></table></figure><h3 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h3><p>目的就是保证属性的私有，不让对象的操作者随意操作属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __int__(self,name,age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">laowang = Person(&quot;老王&quot;,30)</span><br><span class="line"># 属性不私有 就会造成随意篡改</span><br><span class="line">laowang.age -= 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person:</span><br><span class="line">    def __int__(self,name,age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    def setNewAge(self,newAge):</span><br><span class="line">        self.age = newAge</span><br><span class="line"></span><br><span class="line">laowang = Person(&quot;老王&quot;,30)</span><br><span class="line"># 属性应该有set/get 方法</span><br><span class="line">laowang.setNewAge(300)</span><br><span class="line"># 但是通过 laowang.age -= 1 调用依然可以操作</span><br></pre></td></tr></table></figure><blockquote><p>私有属性</p></blockquote><ul><li>所谓私有，就是不能在外部使用</li><li>原来没有添加__的属性，默认是公有</li><li>不管是属性还是方法在前面加上 __代表私有外面就无法调用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __int__(self,name,age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age</span><br><span class="line">    def setNewAge(self,newAge):</span><br><span class="line">        self.__age = newAge</span><br><span class="line"></span><br><span class="line">laowang = Person(&quot;老王&quot;,30)</span><br><span class="line">laowang.setNewAge(300)</span><br><span class="line">#通过 laowang.__age -= 1 调用报错</span><br><span class="line"># print(laowang.__age) 报错</span><br></pre></td></tr></table></figure><blockquote><p>就是任性的想调用私有方法可以吗？ 可以，间接的调用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __int__(self,name,age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age</span><br><span class="line">    def setNewAge(self,newAge):</span><br><span class="line">        self.__age = newAge</span><br><span class="line">    def __test(self):</span><br><span class="line">        print(&apos;__test&apos;)</span><br><span class="line">    def test2(self):</span><br><span class="line">        self.__test()</span><br><span class="line">        print(&apos;test2里调用 __test&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>虽然无法调用私有方法和属性，但是可以查看私有的东西</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dir(类名)</span><br><span class="line"></span><br><span class="line">打印该类私有的属性和方法</span><br><span class="line">如果是你自己定义的私有方法__test</span><br><span class="line">会被改名为 _Test__test</span><br><span class="line"></span><br><span class="line">隐姓埋名。。。</span><br></pre></td></tr></table></figure><h3 id="del方法"><a href="#del方法" class="headerlink" title="del方法"></a>del方法</h3><p>当创建一个对象时会默认调用init</p><p>当删除一个对象时也会默认调用一个方法就是 del</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __int__(self,name,age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&apos;------del-------&apos;)</span><br><span class="line"></span><br><span class="line">a = Person(&quot;xxx&quot;,30)</span><br></pre></td></tr></table></figure><ul><li>python程序结束会调用del</li><li>手动删除对象del a 也可以触发del方法调用</li></ul><blockquote><p>如果手动多次del a 程序会挂掉</p></blockquote><blockquote><p>思考一个问题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = Person(&quot;xxx&quot;,30)</span><br><span class="line"># 把a的地址给了 b </span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line"># a和b都指向同一块内存区域(堆) 引用计数为2</span><br><span class="line"></span><br><span class="line">del a</span><br><span class="line">#删除了a的引用 并不调用del方法()  引用计数为1</span><br><span class="line">print(b) #正常</span><br><span class="line"></span><br><span class="line">del b </span><br><span class="line">#删除了b的引用 并调用del方法  引用计数为0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python005文件操作</title>
      <link href="/2018/06/16/Python005%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/06/16/Python005%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ol><li>打开文件 open</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;text.txt&apos;,&apos;w&apos;)</span><br><span class="line"></span><br><span class="line"># 第二个参数代表模式</span><br><span class="line">- r 读</span><br><span class="line">- w 写 存在则覆盖写入，不存在则创建写入</span><br><span class="line">- a 追加内容，存在则追加，不存在创建写入</span><br><span class="line">不常用的。。。。自行科普</span><br><span class="line">- rb 二进制打开</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><ol start="2"><li>关闭文件 close</li></ol><p>与open成对出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;text.txt&apos;,&apos;w&apos;)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ol start="3"><li>文件读写</li></ol><ul><li>read </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;test.txt&apos;)</span><br><span class="line">f.read() # 将文件一次性读完慎用，如果文件5G你内存2G就炸了，真的会爆炸</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果文件内容是</span><br><span class="line">1111122222333334444455555</span><br><span class="line"></span><br><span class="line"># 读5个字节 再次调用会挨着上次的结果继续读</span><br><span class="line">f.read(5) # 11111</span><br><span class="line">f.read(5) # 22222</span><br><span class="line">f.read(5) # 33333</span><br></pre></td></tr></table></figure><ul><li>write</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;abc.txt&apos;,&apos;w&apos;)</span><br><span class="line">f.write(&apos;hahahah&apos;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li>readlines</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;1.txt&apos;,&apos;r&apos;)</span><br><span class="line">f.readlines()</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">文件有多大也都读取出来，生成一个列表 文件每行占据列表一个元素</span><br><span class="line">[</span><br><span class="line">    &apos;fsdafsdfasdafs\n&apos;,</span><br><span class="line">    &apos;fsdafsdfasdafs\n&apos;,</span><br><span class="line">    &apos;fsdafsdfasdafs\n&apos;,</span><br><span class="line">    &apos;fsdafsdfasdafs\n&apos;</span><br><span class="line">    &apos;\n&apos;</span><br><span class="line">]</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><ul><li>readline</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">跟read(5) 类似 它是每次读一行</span><br></pre></td></tr></table></figure><blockquote><p>稳妥的用法是使用read(1000) 每次读取指定的内容</p></blockquote><blockquote><p>复制一个test.txt 的文件 test[副本].txt</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 打开文件</span><br><span class="line">file_read = open(&apos;test.txt&apos;,&apos;r&apos;)</span><br><span class="line">file_write = open(&apos;test[副本].txt&apos;,&apos;w&apos;)</span><br><span class="line"># 读取写入内容</span><br><span class="line">content = file_read.read()</span><br><span class="line">file_write.write(content)</span><br><span class="line"># 关闭文件</span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br></pre></td></tr></table></figure><p>读写文件的最佳实践</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#第一种过于粗暴</span><br><span class="line">#content = file_read.read()</span><br><span class="line">#file_write.write(content)</span><br><span class="line"></span><br><span class="line">#第二种依然粗暴</span><br><span class="line">#for content in file_read.readlines():</span><br><span class="line">#   file_write.write(content)</span><br><span class="line"></span><br><span class="line">#第三种</span><br><span class="line">#content = file_read.read()</span><br><span class="line">#file_write.write(content)</span><br><span class="line">while True:</span><br><span class="line">    content = file_read.readline()</span><br><span class="line">    if len(content)&gt;0:</span><br><span class="line">        file_write.write(content)</span><br><span class="line">    else:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h3 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h3><p>比如你看小说看到了一半被叫走了下次铁定不会从头开始看</p><ul><li>获取定位 tell</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f.read(1) # 1</span><br><span class="line">f.read(1) # 2</span><br><span class="line">f.read(1) # 3</span><br><span class="line">f.read(1) # 4</span><br><span class="line">f.read(1) # 5</span><br><span class="line">f.tell()  # 5</span><br></pre></td></tr></table></figure><ul><li>seek 自行搜索</li></ul><h3 id="文件重命名和删除"><a href="#文件重命名和删除" class="headerlink" title="文件重命名和删除"></a>文件重命名和删除</h3><p>需要引入模块 os</p><ul><li>重命名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.rename(&quot;1.txt&quot;,&quot;2.txt&quot;) # 将1.txt重命名为2.txt</span><br></pre></td></tr></table></figure><ul><li>删除文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.remove(&quot;1.txt&quot;)</span><br></pre></td></tr></table></figure><ul><li>获取当前目录  请参考命令行pwd</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><ul><li>改变默认目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.chdir(&apos;./aaa&apos;) // 切换目录到当前目录的aaa路径下</span><br></pre></td></tr></table></figure><ul><li>获取目录列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.listdir()</span><br></pre></td></tr></table></figure><ul><li>删除文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.rmdir(&apos;./张三&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python004函数</title>
      <link href="/2018/06/16/Python004%E5%87%BD%E6%95%B0/"/>
      <url>/2018/06/16/Python004%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>声明关键字 def</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 函数声明</span><br><span class="line">def aa():</span><br><span class="line">    print(&quot;1&quot;)</span><br><span class="line">    print(&quot;2&quot;)</span><br><span class="line">    print(&quot;3&quot;)</span><br><span class="line">    print(&quot;4&quot;)</span><br><span class="line">    print(&quot;5&quot;)</span><br><span class="line"></span><br><span class="line"># 函数调用</span><br><span class="line"></span><br><span class="line">aa()</span><br></pre></td></tr></table></figure><blockquote><p>带参数的函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def sum(m,n):</span><br><span class="line">    print(m+n)</span><br><span class="line"></span><br><span class="line">sum(1,2)</span><br><span class="line"># 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># sum(1,2,3) 报错  参数要几个传几个</span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p></blockquote><ul><li>def顶格写</li><li>函数内要有缩进</li></ul><blockquote><p>函数返回值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def sum(a,b):</span><br><span class="line">    return a+b</span><br></pre></td></tr></table></figure><p>return的作用</p><ul><li>把结果返回给调用者</li><li>结束一个函数</li><li>如果写了多个return程序不会出现语法错误，并把第一个return的值返回</li></ul><h4 id="注意点函数声明要放在最前"><a href="#注意点函数声明要放在最前" class="headerlink" title="注意点函数声明要放在最前"></a>注意点函数声明要放在最前</h4><blockquote><p>它不像js一样函数声明后会提升</p></blockquote><ul><li>python里函数声明要前置</li><li>先定义后使用</li></ul><h4 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h4><ul><li>在函数里定义的变量叫局部变量,离开函数就没了</li><li>形参也是局部变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def test():</span><br><span class="line">    a = 1</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line"># 1</span><br><span class="line">test() </span><br><span class="line"></span><br><span class="line"># 报错</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><ul><li>全局变量就是定义在函数外</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = 100</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    #运行正常</span><br><span class="line">    print(num)</span><br><span class="line">    #报错 全局变量在函数里不能改，会报错</span><br><span class="line">    num+=2</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"># 报错</span><br></pre></td></tr></table></figure><blockquote><p>如何解决全局变量修改报错的问题</p></blockquote><ul><li>在函数内部加上一个 global 声明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = 100</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    global num</span><br><span class="line">    print(num)</span><br><span class="line">    num+=2</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"># 102</span><br></pre></td></tr></table></figure><h4 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h4><p>我的理解就是给参数设置默认值，你传递了就用你的不传递走默认(兜底)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def xxx(a,b,c):</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line"></span><br><span class="line"># xxx(1,2) 报错 因为指定要三个参数你传少了</span><br><span class="line"></span><br><span class="line">def yyy(a,b,c=33)</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line"></span><br><span class="line">yyy(11,22)</span><br><span class="line"># 11</span><br><span class="line"># 22</span><br><span class="line"># 33</span><br></pre></td></tr></table></figure><ul><li>缺省参数应该放在最后,避免歧义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 非常歧义的写法 你传递4个参数正确 传递3个我不知道自己试！！！</span><br><span class="line">def xxx(a,b,c=33,d):</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(d)</span><br><span class="line"></span><br><span class="line">#多个缺省参数</span><br><span class="line"></span><br><span class="line">def yyy(a,b,c,d=44,e=55):</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(d)</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line">yyy(11,22,33,1000)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">33</span><br><span class="line">1000</span><br><span class="line">55</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"># 乱序的传参数(前提你要知道形参叫什么)</span><br><span class="line">def zzz(a,b):</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line">zzz(b=2,a=1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 我就想给e传递参数</span><br><span class="line"></span><br><span class="line">yyy(11,22,33,e=2000)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">33</span><br><span class="line">44</span><br><span class="line">2000</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def xx(a,b,*args,**kwargs):</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">xx(11,22,33,44,55,66,mm=11,nn=22)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">(33,44,55,66)</span><br><span class="line">&#123;mm:11,nn:22&#125;</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>规定</p></blockquote><ul><li><em>args 写一个「 </em> 」表示传递多个没有名字的值的时候放入 args</li><li><strong>kwargs 写俩个「 </strong> 」表示传递多余的参数带有名字的值的时候放入 kwargs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">A = [11,22,33]</span><br><span class="line">B = &#123;aa:100,bb:200&#125;</span><br><span class="line"></span><br><span class="line">xx(11,22,A,B)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">([11,22,33],&#123;aa:100,bb:200&#125;)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">xx(11,22,A,pp=B)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">([11,22,33])</span><br><span class="line">&#123;pp:&#123;aa:100,bb:200&#125;&#125;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"># 没有名字的参数前加一个 *</span><br><span class="line">xx(11,22,*A,B)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">(11,22,33,&#123;aa:100,bb:200&#125;)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line"># 有名字的参数前加两个 **</span><br><span class="line">xx(11,22,*A,**B)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">11</span><br><span class="line">22</span><br><span class="line">(11,22,33)</span><br><span class="line">&#123;aa:100,bb:200&#125;</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><blockquote><p>当列表/元组在做实参传递的时候，如果前面有一个*，表示对其进行解包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[11,22,33] =======&gt; 11,22,33</span><br></pre></td></tr></table></figure><blockquote><p>当字典在做实参传递的时候，如果前面有两个*，表示对其进行解包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;aa:100,bb:200&#125; =======&gt; aa=100,bb=200</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li>可变数据类型 列表/字典</li><li>不可变数据类型 数字/字符串/元组</li></ul><p>字段的key可以为。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 运行正常</span><br><span class="line">M = &#123;a:100,100:100,3.14:314&#125;</span><br><span class="line">M = &#123;(11,22,33):10086&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 报错</span><br><span class="line">M = &#123;[11,22]:1122&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数-lambda表达式"><a href="#匿名函数-lambda表达式" class="headerlink" title="匿名函数 lambda表达式"></a>匿名函数 lambda表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def test(a):</span><br><span class="line">    return a+1</span><br><span class="line"></span><br><span class="line"># 匿名函数 如果是单独使用需要赋值给一个变量</span><br><span class="line">aaa = lambda a:a+1</span><br><span class="line"></span><br><span class="line">test(10)</span><br><span class="line">aaa(10)</span><br><span class="line"></span><br><span class="line"># 多个参数</span><br><span class="line"></span><br><span class="line">bbb = lambda a,b:a+b</span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p></blockquote><ul><li>匿名函数不能写print</li></ul><p>把函数当作参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def test(a,b,fn):</span><br><span class="line">    return fn(a,b)</span><br><span class="line"></span><br><span class="line">test(11,22,lambda x,y:x+y)</span><br><span class="line"># 33</span><br></pre></td></tr></table></figure><p>排序方法里使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">aa = [</span><br><span class="line">    &#123;index:22,age:18&#125;,</span><br><span class="line">    &#123;index:13,age:22&#125;,</span><br><span class="line">    &#123;index:33,age:12&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># key代表指定的排序列</span><br><span class="line">aa.sort(key = lambda x:x[&apos;index&apos;])</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">[</span><br><span class="line">    &#123;index:13,age:22&#125;,</span><br><span class="line">    &#123;index:22,age:18&#125;,</span><br><span class="line">    &#123;index:33,age:12&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">aa.sort(key = lambda x:x[&apos;index&apos;],reverse=True)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">[</span><br><span class="line">    &#123;index:33,age:12&#125;,</span><br><span class="line">    &#123;index:22,age:18&#125;,</span><br><span class="line">    &#123;index:13,age:22&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python003列表和元组和字典</title>
      <link href="/2018/06/16/Python003%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84%E5%92%8C%E5%AD%97%E5%85%B8/"/>
      <url>/2018/06/16/Python003%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84%E5%92%8C%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names =[&apos;aa&apos;,&apos;bb&apos;,&apos;cc&apos;]</span><br><span class="line">type(names) </span><br><span class="line"># list</span><br></pre></td></tr></table></figure><p>遍历列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">infos = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</span><br><span class="line"></span><br><span class="line">for temp in infos:</span><br><span class="line">    print(temp)</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">while i&lt;len(infos):</span><br><span class="line">    print(infos[i])</span><br><span class="line">    i+=1</span><br></pre></td></tr></table></figure><h4 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h4><blockquote><p>增</p></blockquote><ul><li>append(obj) 向列表最后添加一个元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">a.append(4)</span><br><span class="line"># [1,2,3,4]</span><br></pre></td></tr></table></figure><ul><li>extend</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4]</span><br><span class="line">b = [100,200]</span><br><span class="line">a.extend(b)</span><br><span class="line"># [1,2,3,4,100,200]</span><br></pre></td></tr></table></figure><ul><li>insert(index,obj) 指定位置添加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = [1,2,3,4]</span><br><span class="line">b.insert(1,99)</span><br><span class="line"># [1,99,2,3,4]</span><br></pre></td></tr></table></figure><blockquote><p>查</p></blockquote><ul><li>in</li><li>not in </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#判断列表里是否存在</span><br><span class="line"># 笨方法</span><br><span class="line"># 笨方法</span><br><span class="line">inputName = 2</span><br><span class="line">flg = 0 </span><br><span class="line">names = [1,2,3,4,5]</span><br><span class="line">for name in names:</span><br><span class="line">    if name = inputName:</span><br><span class="line">        flg = 1</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"># 好方法</span><br><span class="line">if inputName in names:</span><br><span class="line">    print(&apos;find&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;not find&apos;)</span><br></pre></td></tr></table></figure><ul><li>index</li><li>count</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [1,1,2,2,3,3,4]</span><br><span class="line">a.index(1,1,3)  # 左闭右开[1,3)</span><br><span class="line"></span><br><span class="line">a.count(2)</span><br><span class="line"># 2</span><br></pre></td></tr></table></figure><blockquote><p>删</p></blockquote><ul><li>del 根据索引删</li><li>pop 删最后一个</li><li>remove 根据值删</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4,5,6]</span><br><span class="line">del a[0]</span><br><span class="line"># [2,3,4,5,6]</span><br><span class="line"></span><br><span class="line">a.pop()</span><br><span class="line"># [2,3,4,5]</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>sort </li><li>reverse 逆序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [1,3,4,2]</span><br><span class="line">a.reverse()</span><br><span class="line"># [2,4,3,1]</span><br><span class="line"></span><br><span class="line">a.sort()</span><br><span class="line"># [1,2,3,4]</span><br><span class="line">a.sort(reverse=True)</span><br><span class="line">#[4,3,2,1]</span><br></pre></td></tr></table></figure><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h3><p>元组和列表不同之处在于</p><ul><li>元组不能修改</li><li>元组使用小括号，列表使用方括号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = (&apos;a&apos;,1,2,3)</span><br></pre></td></tr></table></figure><p>元组的不一致性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = (1.0,2.0,3.0)</span><br><span class="line">type(a)</span><br><span class="line">#tuple</span><br><span class="line"></span><br><span class="line">b = (1.0)</span><br><span class="line">type(b)</span><br><span class="line"># float</span><br><span class="line"># 元组初始化的时候如果只有一个元素是不会初始化为元组的 会把括号里的值当作实际的类型处理</span><br><span class="line"></span><br><span class="line"># 正确做法</span><br><span class="line"></span><br><span class="line">c = (1.0,)</span><br><span class="line">type(c)</span><br><span class="line"># tuple</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul><li>键值对 k/v</li><li>k不可重复</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;key:value&#125;</span><br><span class="line"></span><br><span class="line">info = &#123;</span><br><span class="line">    &quot;name&quot;:&quot;悟空&quot;,</span><br><span class="line">    &quot;age&quot;:5000,</span><br><span class="line">    &quot;gender&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    &quot;name&quot;:&quot;悟空&quot;,</span><br><span class="line">    &quot;age&quot;:5000,</span><br><span class="line">    &quot;gender&quot;:&quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info[&apos;name&apos;] </span><br><span class="line">info.get(&quot;name&quot;)</span><br><span class="line"># &quot;悟空&quot;</span><br></pre></td></tr></table></figure><ul><li><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info[&quot;age&quot;] = 10000</span><br></pre></td></tr></table></figure></li><li><p>删除</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除 info里的 name字段</span><br><span class="line">del info[&quot;name&quot;]</span><br><span class="line"></span><br><span class="line"># 整个删除</span><br><span class="line">del info</span><br></pre></td></tr></table></figure><ul><li>滞空</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;a:1,b:2&#125;</span><br><span class="line">a.clear()</span><br><span class="line"># &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="字典信息"><a href="#字典信息" class="headerlink" title="字典信息"></a>字典信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;a:1,b:2,c:3&#125;</span><br><span class="line"></span><br><span class="line">len(info)</span><br><span class="line"># 3</span><br><span class="line"></span><br><span class="line">info.keys()</span><br><span class="line"># [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line"></span><br><span class="line">info.values()</span><br><span class="line"># [1,2,3]</span><br></pre></td></tr></table></figure><h5 id="items"><a href="#items" class="headerlink" title="items"></a>items</h5><p>返回包含(k,v)元组的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">info.items()</span><br><span class="line"># [(&quot;a&quot;,1),(&quot;b&quot;:2)]</span><br></pre></td></tr></table></figure><h5 id="has-key"><a href="#has-key" class="headerlink" title="has_key"></a>has_key</h5><p>查看字典中key是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;a:1,b:2&#125;</span><br><span class="line">info.has_key(&apos;a&apos;)</span><br><span class="line"># True</span><br></pre></td></tr></table></figure><h5 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h5><blockquote><p>info = {a:1,b:2,c:3}</p></blockquote><ol><li>遍历字典的key</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for key in info.keys():</span><br><span class="line">    print(key)</span><br></pre></td></tr></table></figure><ol start="2"><li>遍历字典的value</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for val in info.values():</span><br><span class="line">    print(val)</span><br></pre></td></tr></table></figure><ol start="3"><li>遍历字典的</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for item in info.items():</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"># (&quot;a&quot;,1) </span><br><span class="line"># (&quot;b&quot;,2) </span><br><span class="line"># (&quot;c&quot;,3) </span><br><span class="line"></span><br><span class="line">for key,val in info.items():</span><br><span class="line">    print(key)</span><br><span class="line">    print(val)</span><br></pre></td></tr></table></figure><h3 id="扩展问题"><a href="#扩展问题" class="headerlink" title="扩展问题"></a>扩展问题</h3><blockquote><p>如何实现列表带索引的遍历</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方法1 比较low的方法是声明个变量然后随着循环递增 很low 不写了</span><br><span class="line"></span><br><span class="line">方法2 </span><br><span class="line">a = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line">for i,v in enumerate(a):</span><br><span class="line">    print(i)</span><br><span class="line">    print(v)</span><br></pre></td></tr></table></figure><blockquote><p>「+ *」</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;abc&quot;+&quot;123&quot;</span><br><span class="line"># &quot;abc123&quot;</span><br><span class="line"></span><br><span class="line">[11,22,33]+[44,55,66]</span><br><span class="line"># [11,22,33,44,55,66]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;-&quot;*3</span><br><span class="line"># &quot;---&quot;</span><br><span class="line"></span><br><span class="line">[11,22,33]*2</span><br><span class="line"># [11,22,33,11,22,33]</span><br></pre></td></tr></table></figure><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><ul><li>cmp 比较两个值</li><li>len(item) 计算容器中元素个数</li><li>max(item) 返回容器中最大的元素</li><li>min(item) 返回容器中最小的元素</li><li>del(item) 删除变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cmp(&quot;hello&quot;,&quot;itcast&quot;)</span><br><span class="line"># -1</span><br><span class="line"></span><br><span class="line">cmp(&quot;itcast&quot;,&quot;hello&quot;)</span><br><span class="line"># 1</span><br><span class="line"></span><br><span class="line">cmp(&quot;hello&quot;,&quot;hello&quot;)</span><br><span class="line"># 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python002字符串</title>
      <link href="/2018/06/16/Python002%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/06/16/Python002%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><blockquote><p>字符串内查找字符串返回索引</p></blockquote><ul><li>find 从左往右，找不到返回 -1</li><li>rfind 从右往左，找不到返回 -1</li><li>index 从左往右，找不到报错</li><li>rindex 从右往左，找不到报错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str = &apos;aa bbb cc dd ee&apos;</span><br><span class="line"></span><br><span class="line">str.find(&apos;aa&apos;) 1</span><br><span class="line">str.find(&apos;ff&apos;) -1</span><br><span class="line">... 懒得写了自己试吧！！！</span><br></pre></td></tr></table></figure><blockquote><p>返回字符串在字符串内出现的次数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &apos;aa bb cc dd aa&apos;</span><br><span class="line">str.count(&apos;aa&apos;)  #2</span><br></pre></td></tr></table></figure><h3 id="字符串替换replace"><a href="#字符串替换replace" class="headerlink" title="字符串替换replace"></a>字符串替换replace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = &apos;python&apos;</span><br><span class="line">str.replace(&apos;py&apos;,&apos;Py&apos;)</span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str = &apos;hello world ha ha&apos;</span><br><span class="line"></span><br><span class="line">str.split(&quot; &quot;)  </span><br><span class="line"># [&apos;hello&apos;,&apos;world&apos;,&apos;ha&apos;,&apos;ha&apos;]</span><br><span class="line"></span><br><span class="line">str.split(&quot; &quot;,2)  </span><br><span class="line"># [&apos;hello&apos;,&apos;world&apos;,&apos;ha ha&apos;]</span><br></pre></td></tr></table></figure><h3 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a>capitalize</h3><p>把字符串第一个字母变大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;aa bb cc&apos;</span><br><span class="line">a.capitalize()</span><br><span class="line">Aa bb cc</span><br></pre></td></tr></table></figure><h3 id="swapcase"><a href="#swapcase" class="headerlink" title="swapcase"></a>swapcase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;aa bb cc&apos;</span><br><span class="line">print(a.swapcase()) #大小写翻转</span><br><span class="line"># AA BB CC</span><br></pre></td></tr></table></figure><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>把字符串每个单词首字母大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;aa bb cc&apos;</span><br><span class="line">a.title()</span><br><span class="line">Aa Bb Cc</span><br></pre></td></tr></table></figure><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><ul><li>startswith </li><li>endswith</li></ul><p>判断字符串是否以字符串 开头/结尾 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;Hello&apos;</span><br><span class="line"></span><br><span class="line">a.startswith(&apos;He&apos;)</span><br><span class="line"># True</span><br><span class="line"></span><br><span class="line">b = &apos;World&apos;</span><br><span class="line">a.endswith(&apos;aa&apos;)</span><br><span class="line"># False</span><br></pre></td></tr></table></figure><ul><li>lower 全部转小写</li><li>upper 全部转大写</li></ul><h3 id="字符串各种处理"><a href="#字符串各种处理" class="headerlink" title="字符串各种处理"></a>字符串各种处理</h3><ul><li>ljust 指定一个字符长度，返回原字符串左对齐，并用空格填充剩余部分</li><li>rjust 指定一个字符长度，返回原字符串右对齐，并用空格填充剩余部分</li><li>center 指定一个字符长度，返回原字符居中对齐，并用空格填充剩余部分</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;hello&apos;</span><br><span class="line">a.ljust(10)</span><br><span class="line"># &apos;hello     &apos;</span><br><span class="line"></span><br><span class="line">a = &apos;hello&apos;</span><br><span class="line">a.rjust(10)</span><br><span class="line"># &apos;     hello&apos;</span><br><span class="line"></span><br><span class="line">a = &apos;hello&apos;</span><br><span class="line">a.center(30)</span><br><span class="line"># &apos;          hello          &apos;</span><br></pre></td></tr></table></figure><ul><li>lstrip 删除字符串左面空白</li><li>rstrip 删除字符串右面空白</li><li>strip 删除字符串空白</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;   hello&apos;</span><br><span class="line">a.lstrip()</span><br><span class="line"># &apos;hello&apos;</span><br></pre></td></tr></table></figure><ul><li>partition 把字符分成三部分从左开始</li><li>rpartition 把字符分成三部分从右开始</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;What are you doing&apos;</span><br><span class="line">a.partition(&apos;are&apos;)</span><br><span class="line"># [&apos;What&apos;,&apos;are&apos;,&apos;you doing&apos;]</span><br></pre></td></tr></table></figure><ul><li>splitlines 按照换行符分割</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;hello\nworld&apos;</span><br><span class="line">a.splitlines()</span><br><span class="line"># [&apos;hello&apos;,&apos;world&apos;]</span><br></pre></td></tr></table></figure><ul><li>isalpha 如果字符串所有字符都是字母返回True</li><li>isdigit 如果字符串所有字符都是数字返回True</li><li>isalnum 如果字符串所有字符都是字母或数字返回True</li><li>isspace 如果字符串所有字符都是空格返回True</li></ul><h3 id="数组拼接"><a href="#数组拼接" class="headerlink" title="数组拼接"></a>数组拼接</h3><p>join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = &apos;_&apos;</span><br><span class="line">a = [&apos;Hi&apos;,&apos;boy&apos;]</span><br><span class="line">str.join(a)</span><br><span class="line"># &apos;Hi_boy&apos;</span><br></pre></td></tr></table></figure><h3 id="format的三种玩法-格式化输出"><a href="#format的三种玩法-格式化输出" class="headerlink" title="format的三种玩法 格式化输出"></a>format的三种玩法 格式化输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res=&apos;&#123;&#125; &#123;&#125; &#123;&#125;&apos;.format(&apos;egon&apos;,18,&apos;male&apos;)</span><br><span class="line">res=&apos;&#123;1&#125; &#123;0&#125; &#123;1&#125;&apos;.format(&apos;egon&apos;,18,&apos;male&apos;)</span><br><span class="line">res=&apos;&#123;name&#125; &#123;age&#125; &#123;sex&#125;&apos;.format(sex=&apos;male&apos;,name=&apos;egon&apos;,age=18)</span><br></pre></td></tr></table></figure><h3 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name=&apos;*egon**&apos;</span><br><span class="line">print(name.strip(&apos;*&apos;))</span><br><span class="line">print(name.lstrip(&apos;*&apos;))</span><br><span class="line">print(name.rstrip(&apos;*&apos;))</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">egon</span><br><span class="line">egon**</span><br><span class="line">*egon</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python001基础</title>
      <link href="/2018/06/16/Python001%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/06/16/Python001%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="学习仪式-hello-world"><a href="#学习仪式-hello-world" class="headerlink" title="学习仪式 hello world"></a>学习仪式 hello world</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">print(&apos;hello world&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#!/usr/bin/env python 在linux里代表查找系统环境变量的 python命令路径 </span><br><span class="line"> 但是linux里默认的是2.x版本 而你自己安装的3.x版本python在 usr/local/bin</span><br><span class="line">#!/usr/bin/python</span><br></pre></td></tr></table></figure><blockquote><p>python2 解释器在加载 .py 文件中的代码时，会对内容进行编码（默认ascill）如果有中文就会报错</p></blockquote><p>你应该指定编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">print(&quot;你好，世界&quot;)</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 单行注释</span><br><span class="line"># 我是注释</span><br><span class="line"># 我是注释</span><br><span class="line"># 我是注释</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;文档注释&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">dd</span><br><span class="line">dd  多行注释</span><br><span class="line">dd</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 与js类似 动态类型具体有那些自行百度</span><br><span class="line"></span><br><span class="line">注意布尔值为 True / False</span><br></pre></td></tr></table></figure><h3 id="基本类型转换方法"><a href="#基本类型转换方法" class="headerlink" title="基本类型转换方法"></a>基本类型转换方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 1;</span><br><span class="line">str(a)  &apos;1&apos;</span><br><span class="line">b = &apos;2&apos;</span><br><span class="line">int(b)  2</span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 格式化输出</span><br><span class="line"></span><br><span class="line"># \n换行</span><br><span class="line"># \t tab制表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = &quot;hjx&quot;</span><br><span class="line">age = 18</span><br><span class="line">height = 199</span><br><span class="line"># print(name+age) 报错  因为 name 和 age类型不一样 相加报错</span><br><span class="line"># print(name+str(age))  要把age 转换为字符串</span><br><span class="line"></span><br><span class="line">print(&quot;========================&quot;)</span><br><span class="line">print(&quot;我叫%s&quot;%name)</span><br><span class="line">print(&quot;我叫%s,今年%d岁,身高%dcm&quot;%(name,age,height))</span><br><span class="line">print(&quot;========================&quot;)</span><br><span class="line"># 检查类型</span><br><span class="line">print(type(name))</span><br><span class="line">print(type(age))</span><br><span class="line">print(&quot;========================&quot;)</span><br><span class="line"># 输出字符</span><br><span class="line">char1 = 65</span><br><span class="line">char2 = 98</span><br><span class="line"></span><br><span class="line">print(&quot;%c&quot;%char1)</span><br><span class="line">print(&quot;%c&quot;%char2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#如果我想输出 %</span><br><span class="line">print(&quot;%&quot;) #  这样会报错的，因为在格式化输出里，你出现%默认为就是占位符的%</span><br><span class="line">print(&quot;%%&quot;) # 第一个%是对第二个%的转译，告诉Python解释器这只是一个单纯的%，而不是占位符。</span><br><span class="line"></span><br><span class="line">print(&quot;========================&quot;)</span><br><span class="line"></span><br><span class="line"># 帮助文档</span><br><span class="line"></span><br><span class="line">help(print)</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+ 懒得说</span><br><span class="line">- 懒得说</span><br><span class="line">* 懒得说</span><br><span class="line">/ 懒得说</span><br><span class="line">// 取整除  商</span><br><span class="line"></span><br><span class="line">11/2     5</span><br><span class="line">11.0/2   5.5</span><br><span class="line"></span><br><span class="line">11//2    5</span><br><span class="line">2**2  4</span><br><span class="line">3**3  27</span><br><span class="line">a = 100</span><br><span class="line">b = 111</span><br><span class="line">交换a b的值</span><br><span class="line">a,b = b,a</span><br></pre></td></tr></table></figure><h3 id="条件判断if"><a href="#条件判断if" class="headerlink" title="条件判断if"></a>条件判断if</h3><p>多重嵌套if使用 tab缩进</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if a &gt;10 and a &lt;20 :</span><br><span class="line">    if a == 15 :</span><br><span class="line">        print(&quot;满足条件&quot;)</span><br></pre></td></tr></table></figure><h3 id="或且非"><a href="#或且非" class="headerlink" title="或且非"></a>或且非</h3><ul><li>and</li><li>or </li><li>not</li></ul><p>猜拳游戏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">com = random.randint(0,2)</span><br><span class="line">user = int(input(&quot;猜拳：0剪刀 1石头 2布&quot;))</span><br><span class="line"></span><br><span class="line">if (com==0 and user ==1) or (com==1 and user ==2) or (com==2 and user ==0):</span><br><span class="line">    print(&apos;算你厉害&apos;)</span><br><span class="line">elif com == user:</span><br><span class="line">    print(&apos;平&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;输了&quot;)</span><br></pre></td></tr></table></figure><h3 id="in-not-in"><a href="#in-not-in" class="headerlink" title="in,not in"></a>in,not in</h3><p>判断子元素是否在原字符串（字典，列表，集合）中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#print(&apos;喜欢&apos; in &apos;dkfljadklf喜欢hfjdkas&apos;)</span><br><span class="line">#print(&apos;a&apos; in &apos;bcvd&apos;)</span><br><span class="line">#print(&apos;y&apos; not in &apos;ofkjdslaf&apos;)</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = 1</span><br><span class="line">while i&lt;=9:</span><br><span class="line">    j = 1</span><br><span class="line">    while j&lt;=i:</span><br><span class="line">        print(&quot;%d*%d=%d&quot;%(j,i,i*j),end=&quot;&quot;)</span><br><span class="line">        j+=1</span><br><span class="line">    print(&quot;&quot;)</span><br><span class="line">    i+=1</span><br></pre></td></tr></table></figure><h4 id="while-else"><a href="#while-else" class="headerlink" title="while else"></a>while else</h4><blockquote><p>与其它语言else 一般只与if 搭配不同，在Python 中还有个while …else 语句</p></blockquote><blockquote><p>while 后面的else 作用是指，当while 循环正常执行完，中间没有被break 中止的话，就会执行else后面的语句</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt;= 5 :</span><br><span class="line">    count += 1</span><br><span class="line">    print(&quot;Loop&quot;,count)</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">    print(&quot;循环正常执行完啦&quot;)</span><br><span class="line">print(&quot;-----out of while loop ------&quot;)</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line"></span><br><span class="line">Loop 1</span><br><span class="line">Loop 2</span><br><span class="line">Loop 3</span><br><span class="line">Loop 4</span><br><span class="line">Loop 5</span><br><span class="line">Loop 6</span><br><span class="line">循环正常执行完啦</span><br><span class="line">-----out of while loop ------</span><br></pre></td></tr></table></figure><p>如果执行过程中被break啦，就不会执行else的语句啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt;= 5 :</span><br><span class="line">    count += 1</span><br><span class="line">    if count == 3:break</span><br><span class="line">    print(&quot;Loop&quot;,count)</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">    print(&quot;循环正常执行完啦&quot;)</span><br><span class="line">print(&quot;-----out of while loop ------&quot;)</span><br><span class="line"></span><br><span class="line">输出如下：</span><br><span class="line"></span><br><span class="line">Loop 1</span><br><span class="line">Loop 2</span><br><span class="line">-----out of while loop ------</span><br></pre></td></tr></table></figure><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;abcdef&apos;</span><br><span class="line">for temp in name</span><br><span class="line">    print(temp)</span><br></pre></td></tr></table></figure><h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;abcdef&apos;</span><br><span class="line">name[0]   &apos;a&apos;</span><br><span class="line">name[1]   &apos;b&apos;</span><br><span class="line">name[2]   &apos;c&apos;</span><br><span class="line">name[3]   &apos;d&apos;</span><br><span class="line">name[4]   &apos;e&apos;</span><br><span class="line">name[5]   &apos;f&apos;</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;abcdef&apos;</span><br><span class="line"></span><br><span class="line">name[0]  &apos;a&apos;</span><br><span class="line"></span><br><span class="line">#注意切片来了 ,口诀包头不包尾</span><br><span class="line"></span><br><span class="line">name[0:4] &apos;abcd&apos;</span><br><span class="line">name[1:4] &apos;bcd&apos;</span><br><span class="line"></span><br><span class="line">#超过字符串长度咋办？</span><br><span class="line">name[0:70] &apos;abcdef&apos;</span><br></pre></td></tr></table></figure><blockquote><p>获取字符长度之len</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#js里  &apos;abc&apos;.length = 3 </span><br><span class="line">#python里 </span><br><span class="line">name = &apos;abcdef&apos;</span><br><span class="line"># 获取字符串长度</span><br><span class="line">len(name)  # 6</span><br></pre></td></tr></table></figure><blockquote><p>想要切片返回当前字符串的内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;fasfasdfl;kfdl;askfl;daskl;fkasl;&apos;</span><br><span class="line">length = len(name)</span><br><span class="line">name[0:length]</span><br><span class="line"></span><br><span class="line">#简洁写法 都可以获取整个字符串</span><br><span class="line">name[0:]</span><br><span class="line">name[:]</span><br><span class="line">name[::]</span><br><span class="line"></span><br><span class="line"># name[]报错</span><br></pre></td></tr></table></figure><h4 id="切片之炮打隔一子"><a href="#切片之炮打隔一子" class="headerlink" title="切片之炮打隔一子"></a>切片之炮打隔一子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;ababababab&apos;</span><br><span class="line">name[::2]  &apos;aaaaa&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name[起始位置:结束位置:步长]</span><br></pre></td></tr></table></figure><h4 id="切片之反序"><a href="#切片之反序" class="headerlink" title="切片之反序"></a>切片之反序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;123456789&apos;</span><br><span class="line">name[::-1]  &apos;987654321&apos;</span><br></pre></td></tr></table></figure><h4 id="切片其他用法"><a href="#切片其他用法" class="headerlink" title="切片其他用法"></a>切片其他用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;abcdef&apos;</span><br><span class="line">name[-1] &apos;f&apos;</span><br><span class="line">name[-2] &apos;e&apos;</span><br><span class="line"></span><br><span class="line">name[0:-1]  &apos;abcde&apos;</span><br><span class="line"></span><br><span class="line">name[0:0] &apos;&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vim001编辑器使用</title>
      <link href="/2018/06/14/Vim001%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/06/14/Vim001%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>一种编辑器详情自行百度</p><blockquote><p>它有三种模式</p></blockquote><ul><li>命令模式</li><li>编辑模式</li><li>末行模式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">当你 vi 1.txt后 是命令模式</span><br><span class="line">切换到编辑模式 </span><br><span class="line">1. i 当前光标左边插入</span><br><span class="line">2. o 当前光标下一行插入</span><br><span class="line">3. a 当前光标右边插入</span><br><span class="line">4. I 当前光标行首插入</span><br><span class="line">5. A 当前光标行尾插入</span><br><span class="line">切换到命令模式 「esc」</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">从编辑模式按了「esc」再输入一个冒号 「:」就会进入末行模式</span><br><span class="line">1. wq 保存退出</span><br><span class="line">2. q! 不保存退出</span><br><span class="line">3. x 保存退出</span><br><span class="line">4. q 退出</span><br></pre></td></tr></table></figure><h3 id="vim里的智能提示功能"><a href="#vim里的智能提示功能" class="headerlink" title="vim里的智能提示功能"></a>vim里的智能提示功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myname = &apos;sssss&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">此时你又输了一个m</span><br><span class="line">m </span><br><span class="line"></span><br><span class="line">你想再次输入 myname不想手敲  「ctrl+n」</span><br></pre></td></tr></table></figure><h4 id="进入命令模式"><a href="#进入命令模式" class="headerlink" title="进入命令模式"></a>进入命令模式</h4><p>移动光标</p><ul><li>h 左</li><li>j 下</li><li>k 上</li><li>l 右</li><li>M 光标移动到行中间行</li><li>L 定位到屏幕最后一行行首</li><li>G 移动到指定行，行号  15G 跳到15行</li><li>gg 跳到第一行</li><li>yy 复制  8yy 表示从当前光标所在行开始复制 只输入yy代表当前行</li><li>p 粘贴</li><li>dd 剪切 8dd 表示从当前光标所在行开始剪切  只输入dd代表当前行</li><li>u 撤销</li><li>ctrl + r 反撤销</li><li>w 向后移动一个字</li><li>b 向前移动一个字</li><li>{ 按段移动上移</li><li>} 按段移动下移</li><li>ctrl + d 翻半屏</li><li>ctrl + u 翻半屏</li><li>crrl + f 下翻一屏</li><li>crrl + b 上翻一屏</li></ul><p>命令模式</p><ul><li>x 删除当前光标后边的字母</li><li>X 删除当前光标前边的字母</li><li>D 当前光标删除到行尾</li><li>d0 当前光标删除到行首</li><li><p>dw 删除一个词 光标所在位置</p></li><li><p>&lt;&lt; 文本左移</p></li><li><blockquote><blockquote><p>文本右移</p></blockquote></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux003多用户多任务操作</title>
      <link href="/2018/06/14/Linux003%E5%A4%9A%E7%94%A8%E6%88%B7%E5%A4%9A%E4%BB%BB%E5%8A%A1%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/06/14/Linux003%E5%A4%9A%E7%94%A8%E6%88%B7%E5%A4%9A%E4%BB%BB%E5%8A%A1%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="多用户"><a href="#多用户" class="headerlink" title="多用户"></a>多用户</h3><p>一个电脑多个用户可以同时登录</p><h3 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h3><p>一个电脑可以跑很多程序 QQ 微信 浏览器 QQ音乐</p><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><p>查看网卡信息(一般能看到俩个代表你的虚拟机能上网了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep &apos;192&apos; 查找一大堆文档中的关键字</span><br></pre></td></tr></table></figure><h4 id="vmware虚拟机的网络设置"><a href="#vmware虚拟机的网络设置" class="headerlink" title="vmware虚拟机的网络设置"></a>vmware虚拟机的网络设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAT模式  比如你的window能上网，你想让虚拟机借助它上网(对于交换机来说它只看到一台电脑window)</span><br><span class="line">桥接模式  你想让window上网，而且虚拟机也能上网而不是间接的通过window就用这个(对于交换机它看到了两台电脑)</span><br><span class="line">仅主机模式 在没有网的情况下和windows进行通讯</span><br></pre></td></tr></table></figure><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>测试是否能通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.2.123</span><br></pre></td></tr></table></figure><h3 id="ssh远程登录"><a href="#ssh远程登录" class="headerlink" title="ssh远程登录"></a>ssh远程登录</h3><p>比如阿里云服务器跟这效果一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh hjx@192.168.17.76 代表远程登录服务器</span><br><span class="line"></span><br><span class="line">如果你第一次登录会让你确认是否连接  ==&gt; yes</span><br><span class="line">然后让你输入密码如果成功了就能远程登录 并且对系统进行远程操作</span><br></pre></td></tr></table></figure><h3 id="who命令"><a href="#who命令" class="headerlink" title="who命令"></a>who命令</h3><p>查看当前登录的用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果你的电脑被攻击了</span><br><span class="line">who可以查看当前谁登录了</span><br></pre></td></tr></table></figure><p>whoami当前终端的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure><p>exit退出登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="添加用户账号useradd"><a href="#添加用户账号useradd" class="headerlink" title="添加用户账号useradd"></a>添加用户账号useradd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-m 自动创建家目录</span><br><span class="line">-d 路径  指定家目录 </span><br><span class="line">useradd aaa -m -d /home/aaa</span><br><span class="line">创建用户 aaa 同时指定家目录为 aaa</span><br><span class="line">通常提示你权限不够</span><br><span class="line"></span><br><span class="line">sudo useradd aaa -m -d /home/aaa</span><br><span class="line">会提示你输入这个用户的密码</span><br></pre></td></tr></table></figure><blockquote><p>修改密码passwd</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passwd aaa</span><br><span class="line">可能会提示权限不够</span><br><span class="line"></span><br><span class="line">sudo passwd aaa</span><br><span class="line">请输入新密码</span><br></pre></td></tr></table></figure><h3 id="su切换用户"><a href="#su切换用户" class="headerlink" title="su切换用户"></a>su切换用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su aaa </span><br><span class="line">输入密码</span><br><span class="line">su hjx</span><br><span class="line">输入密码</span><br></pre></td></tr></table></figure><p>问题 如果你切换了多个用户然后exit会怎样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su aaa</span><br><span class="line">su bbb</span><br><span class="line">su ccc</span><br><span class="line">su ddd</span><br><span class="line"></span><br><span class="line">你当前在 ddd用户 然后输入exit 退出会在 ccc用户</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su aaa 切换后你当前目录在哪还在哪</span><br><span class="line">su - aaa 切换后跳到家目录</span><br></pre></td></tr></table></figure><h3 id="userdel删除用户"><a href="#userdel删除用户" class="headerlink" title="userdel删除用户"></a>userdel删除用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel abc 删除abc用户但不删除用户的主目录 (一般删除这个)</span><br><span class="line">userdel -r abc 删除abc用户同时删除用户的主目录</span><br></pre></td></tr></table></figure><h3 id="sudo添加权限"><a href="#sudo添加权限" class="headerlink" title="sudo添加权限"></a>sudo添加权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -s 一段时间内不询问你密码(最高权限)</span><br><span class="line"></span><br><span class="line">以$结尾代表普通用户</span><br><span class="line">以#结尾代表root用户</span><br></pre></td></tr></table></figure><h3 id="用户组的查看"><a href="#用户组的查看" class="headerlink" title="用户组的查看"></a>用户组的查看</h3><ol><li>cat etc/group</li><li>groupmod + 三次tab键</li></ol><p>什么是用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">比如你输入 ls -al后显示如下信息</span><br><span class="line">-rw-r--r-- root root </span><br><span class="line">第一个root代表用户</span><br><span class="line">第二个root代表用户组</span><br><span class="line">如果其他用户也在 root用户组那他就有 root用户的权限</span><br></pre></td></tr></table></figure><h4 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd YYY</span><br><span class="line">groupdel YYY</span><br><span class="line"></span><br><span class="line">权限不够请加sudo</span><br></pre></td></tr></table></figure><h4 id="修改用户所在用户组"><a href="#修改用户所在用户组" class="headerlink" title="修改用户所在用户组"></a>修改用户所在用户组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-g 代表你将来默认的组(主组)</span><br><span class="line">-G 代表向其他组添加用户</span><br><span class="line"></span><br><span class="line">usermod -g 用户组 用户名 </span><br><span class="line"></span><br><span class="line">usermod -g aaa bbb 把bbb用户修改到aaa用户组里</span><br></pre></td></tr></table></figure><p>一个用户可以有多个用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G XXX bbb 将 bbb添加到 XXX组里</span><br></pre></td></tr></table></figure><h3 id="chmod修改文件权限"><a href="#chmod修改文件权限" class="headerlink" title="chmod修改文件权限"></a>chmod修改文件权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxrwx </span><br><span class="line">第一个rwx代表文件拥有者(用户)的权限</span><br><span class="line">第二个rwx代表同组者里的(用户)的权限</span><br><span class="line">第三个rwx代表其他人的权限</span><br><span class="line"></span><br><span class="line">r代表读</span><br><span class="line">w代表写</span><br><span class="line">x代表执行</span><br><span class="line">-代表没有权限</span><br></pre></td></tr></table></figure><p>chmod的选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">u 代表该文件的所有者user</span><br><span class="line">g 代表用户组的用户group</span><br><span class="line">o 代表其他 other</span><br><span class="line">a 代表所有人 all</span><br><span class="line">+ 增加权限</span><br><span class="line">- 减少权限</span><br><span class="line">= 把当前权限改为现在的权限   =左边是u/g/o/a =右边是 r/w/x</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x 1.txt 用户增加执行权限</span><br><span class="line">chmod g-w 1.txt 同组者去掉写入权限</span><br><span class="line">chmod u=rwx 1.txt</span><br></pre></td></tr></table></figure><h4 id="数字代表权限"><a href="#数字代表权限" class="headerlink" title="数字代表权限"></a>数字代表权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">r读 ==&gt; 对应数字4</span><br><span class="line">w写 ==&gt; 对应数字2</span><br><span class="line">x执行 ==&gt; 对应数字1</span><br><span class="line"></span><br><span class="line">chmod 444  1.txt 可读权限</span><br><span class="line">chmod 761 1.txt 用户=可读可写可执行 用户组=可读可写 其他用户=可执行权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod 777 aa 只会修改aa文件夹的权限</span><br><span class="line">chmod 777 aa -R aa目录里的东西全部权限</span><br></pre></td></tr></table></figure><h3 id="cal和date查看时间（自行百度）"><a href="#cal和date查看时间（自行百度）" class="headerlink" title="cal和date查看时间（自行百度）"></a>cal和date查看时间（自行百度）</h3><h3 id="ps查看进程"><a href="#ps查看进程" class="headerlink" title="ps查看进程"></a>ps查看进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">ps -aux 显示全部信息</span><br><span class="line"></span><br><span class="line">PID代表程序运行的进程号</span><br></pre></td></tr></table></figure><h3 id="kill终止进程"><a href="#kill终止进程" class="headerlink" title="kill终止进程"></a>kill终止进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill pid</span><br><span class="line">kill 进程号</span><br></pre></td></tr></table></figure><h4 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reboot 重启</span><br><span class="line">shutdown -r now 重启 但是会给用户提示</span><br><span class="line">shutdown -h now 立刻关机</span><br><span class="line">shutdown -h 20:25 系统在 20:25关机</span><br><span class="line">shutdown -h +10 10分钟后关机</span><br></pre></td></tr></table></figure><h3 id="查看磁盘占用-du"><a href="#查看磁盘占用-du" class="headerlink" title="查看磁盘占用 du"></a>查看磁盘占用 du</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h</span><br></pre></td></tr></table></figure><h3 id="用文本编辑器gedit"><a href="#用文本编辑器gedit" class="headerlink" title="用文本编辑器gedit"></a>用文本编辑器gedit</h3>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Linux002难点命令</title>
      <link href="/2018/06/13/Linux002%E9%9A%BE%E7%82%B9%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/13/Linux002%E9%9A%BE%E7%82%B9%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="ln软链接和硬链接"><a href="#ln软链接和硬链接" class="headerlink" title="ln软链接和硬链接"></a>ln软链接和硬链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 软链接，就是快捷方式  (源文件没了，现在的链接文件都不好使)</span><br><span class="line"># 修改源文件或链接文件操作的都是一个文件</span><br><span class="line">ln -s 源文件 链接文件 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 硬连接，就算删除了源文件不会影响硬链接的查看</span><br><span class="line"># 修改源文件或链接文件操作的都是一个文件</span><br><span class="line">ln 源文件 链接文件</span><br></pre></td></tr></table></figure><h3 id="cat-查看文件的内容"><a href="#cat-查看文件的内容" class="headerlink" title="cat 查看文件的内容"></a>cat 查看文件的内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.txt</span><br></pre></td></tr></table></figure><p>将一个文件的内容填充到一个文件里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat 1.txt &gt; 2.txt</span><br><span class="line"></span><br><span class="line"># step1 cat 1.txt 复制 1.txt的内容</span><br><span class="line"># step2 将1.txt的内容复制到 2.txt</span><br></pre></td></tr></table></figure><p>复制多个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.txt 2.txt &gt; 3.txt 将 1.txt和2.txt的内容复制到 3.txt</span><br></pre></td></tr></table></figure><h3 id="grep-文本搜索"><a href="#grep-文本搜索" class="headerlink" title="grep 文本搜索"></a>grep 文本搜索</h3><p>从文件中搜索内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 如1.txt的内容</span><br><span class="line">abcdefg</span><br><span class="line">Abcdefg</span><br><span class="line">------1----m</span><br><span class="line">------2----n</span><br><span class="line">------3----m</span><br><span class="line">alown</span><br><span class="line">txt</span><br><span class="line">txt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-v显示不包含匹配文本的所有行</span><br><span class="line">-n代表匹配内容的行号</span><br><span class="line">-i 忽略大小写</span><br><span class="line"></span><br><span class="line">grep -n &apos;a&apos; 1.txt 打印所有带a的打印出来</span><br><span class="line"></span><br><span class="line">grep -n &apos;^a&apos; 1.txt 打印所有以a开头的打印出来</span><br><span class="line"></span><br><span class="line">grep -n &apos;a$&apos; 1.txt 打印所有以a结尾的打印出来</span><br></pre></td></tr></table></figure><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><p>查看帮助文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls --help</span><br></pre></td></tr></table></figure><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>是linux提供的手册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man ls</span><br></pre></td></tr></table></figure><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">按上键</span><br><span class="line">或者 history</span><br><span class="line">history将历史命令列举出来</span><br></pre></td></tr></table></figure><h3 id="find查找文件"><a href="#find查找文件" class="headerlink" title="find查找文件"></a>find查找文件</h3><p>从指定路径查找文件名(条件同样支持正则)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name test.sh 查找当前目录下所有名为 test.sh的文件</span><br><span class="line">find ./ -name .sh 查找当前目录下所有后缀为 .sh的文件</span><br><span class="line">find ./ -name &quot;[A-Z]&quot; 查找当前目录下所有以[A-Z]大写字母开头的文件</span><br><span class="line">find  /tmp -size 2M  查找/tmp目录下所有等于2M的文件</span><br><span class="line">find  /tmp -size +2M  查找/tmp目录下所有大于2M的文件</span><br><span class="line">find  /tmp -size -2M  查找/tmp目录下所有小于2M的文件</span><br><span class="line">find  ./ -size +4k -size -5M  查找当前目录下所有大于4k小于5m的文件</span><br><span class="line">find  ./  -perm 0777  查找当前目录下权限为777文件或目录</span><br></pre></td></tr></table></figure><h3 id="cp-拷贝文件-mv剪切文件"><a href="#cp-拷贝文件-mv剪切文件" class="headerlink" title="cp 拷贝文件 mv剪切文件"></a>cp 拷贝文件 mv剪切文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cp 源文件  目标文件</span><br><span class="line"></span><br><span class="line">选项</span><br><span class="line">-v 显示进度</span><br><span class="line">-r 递归的复制</span><br><span class="line">-i 交互式复制（你确认复制吗？）</span><br><span class="line">-f 强制复制</span><br><span class="line">-a 在复制目录时使用，保留链接/文件属性并递归的复制目录，保留文件原有的属性</span><br><span class="line">(比如失效的软链接文件也会被复制)</span><br><span class="line"></span><br><span class="line">递归的赋值目录</span><br><span class="line">cp -r 源文件目录  目标文件目录</span><br><span class="line"></span><br><span class="line">cp a b</span><br><span class="line">cp a/* b</span><br><span class="line"></span><br><span class="line">mv a b</span><br><span class="line">mv a/* b</span><br></pre></td></tr></table></figure><h3 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h3><p>tar打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c 生成档案文件，创建打包文件</span><br><span class="line">-v 代表进度</span><br><span class="line">-f 指定档案文件名称f后面一定是.tar文件</span><br><span class="line"></span><br><span class="line">tar -cvf test.tar * 把当前路径所有东西打包到 test.tar里</span><br></pre></td></tr></table></figure><p>tar打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf test.tar 把打包文件还原</span><br></pre></td></tr></table></figure><p>gzip 对已经打包的文件进行压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gzip test.tar </span><br><span class="line">就会产生 test.tar.gz 文件(打包压缩后的)</span><br><span class="line"></span><br><span class="line">gzip  test.tar test.tar.gz 跟上面的一样效果(麻烦)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gzip -d test.tar.gz 解压缩  ==&gt; test.tar</span><br></pre></td></tr></table></figure><p>简单的方式打包压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf test.tar.gz * 把当前目录的东西 打包压缩到 test.tar.gz文件里</span><br><span class="line"></span><br><span class="line">tar -zxvf test.tar.gz  把test.tar.gz文件解压缩并且解除打包</span><br></pre></td></tr></table></figure><p>bzip2压缩解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -jcvf aa.tar.bz2 *</span><br><span class="line">tar -jxvf aa.tar.bz2</span><br></pre></td></tr></table></figure><blockquote><p>注意：这几种压缩解压不能混用，即gzip压缩后只能用gzip解压缩</p></blockquote><p>zip 压缩解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip  aa.tar.bz2 *</span><br><span class="line">unzip  aa.tar.bz2</span><br></pre></td></tr></table></figure><h3 id="which查看命令位置"><a href="#which查看命令位置" class="headerlink" title="which查看命令位置"></a>which查看命令位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which ls</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Linux001基本命令</title>
      <link href="/2018/06/13/Linux001%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/13/Linux001%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="linux的文件目录"><a href="#linux的文件目录" class="headerlink" title="linux的文件目录"></a>linux的文件目录</h3><blockquote><p>linux里没有盘符的概念(也就是没有windows里的cdef盘)它不分盘</p></blockquote><ul><li>它有一个顶层目录叫做根目录 「/」斜杠</li><li>它的目录像一棵树</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-|/</span><br><span class="line">-|/bin</span><br><span class="line">-|/sbin</span><br><span class="line">-|/usr</span><br><span class="line">-|/usr/bin</span><br><span class="line">-|/usr/local</span><br><span class="line">-|/usr/local/include</span><br><span class="line">-|/usr/lib</span><br><span class="line">-|/lib</span><br><span class="line">-|/...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd / </span><br><span class="line">linux中  / 代表根目录</span><br><span class="line"></span><br><span class="line">cd ~</span><br><span class="line">linux中 ~代表用户名录</span><br></pre></td></tr></table></figure><blockquote><p>linux里常用的文件夹</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/home 系统默认的用户家目录(也就是你可以随意操作的目录)最常用的目录</span><br><span class="line"></span><br><span class="line">/home 下的每一个文件夹代表的用户</span><br><span class="line">如 </span><br><span class="line">/home/xxx    张三目录</span><br><span class="line">/home/yyy    李四目录</span><br><span class="line"></span><br><span class="line">/home/xxx/   又会有一些文件夹 </span><br><span class="line">如 </span><br><span class="line">Desktop(桌面) </span><br><span class="line">Downloads(下载相关的)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/bin 不要随意操作(可运行命令的执行环境)</span><br><span class="line">/usr/bin 也不要随意操作(可运行命令的执行环境)</span><br><span class="line">/usr 存放用户的应用程序</span><br><span class="line">/tmp 临时性的文件(比如垃圾文件)</span><br><span class="line">/dev  和设备相关的(比如你插的U盘)</span><br></pre></td></tr></table></figure><h3 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h3><h4 id="ls-显示当前路径下的东西"><a href="#ls-显示当前路径下的东西" class="headerlink" title="ls 显示当前路径下的东西"></a>ls 显示当前路径下的东西</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ls -l 按行显示文件及目录(不包含隐藏文件)</span><br><span class="line">ls -a 显示所有文件(包含隐藏的文件)</span><br><span class="line">ls -al 按行显示所有文件及详细信息</span><br><span class="line">ls -h 代表文件大小(多少k)</span><br><span class="line"></span><br><span class="line">-l后显示形如</span><br><span class="line">drwxr-xr-x 1 hjx hjx 197121     0 Apr  9 23:35 public</span><br><span class="line">-rw-r--r-- 1 hjx hjx 197121 76850 Mar 23 22:23 </span><br><span class="line">yarn.lock</span><br><span class="line"></span><br><span class="line">drwxr-xr-x  代表 一共十位  从第二位开始 后九个代表权限 </span><br><span class="line">-rw-r--r--  代表 一共十位  从第二位开始 后九个代表权限</span><br><span class="line"></span><br><span class="line">第一个字母代表文件</span><br><span class="line">第一个字母</span><br><span class="line">d 代表目录</span><br><span class="line">- 代表普通文件</span><br><span class="line"></span><br><span class="line">1      代表链接数</span><br><span class="line">第一个 hjx代表当前用户</span><br><span class="line">第二个 hjx代表用户组</span><br></pre></td></tr></table></figure><blockquote><p>查看 Desktop目录里的东西</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 大前提是你在 Desktop的父目录</span><br><span class="line">ls Desktop</span><br></pre></td></tr></table></figure><blockquote><p>区分绝对路径和相对路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">绝对路径 cd /home/aaa</span><br><span class="line">相对路径 cd Desktop    </span><br><span class="line"></span><br><span class="line">. 表示当前路径</span><br><span class="line">.. 表示当前路径的上一层</span><br><span class="line">../.. 表示当前路径的上一层的上一层</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">cd - 跳转到上一次所在的路径(只在最近两次的目录直接进行直接跳转)</span><br><span class="line"></span><br><span class="line">cd Music 等价于  cd ./Music</span><br></pre></td></tr></table></figure><h4 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd 「跳转的目录」</span><br><span class="line">cd ~ 切换到当前用户目录</span><br><span class="line">cd / 切换到根目录</span><br><span class="line">cd .. 回到上一级目录(父目录)</span><br></pre></td></tr></table></figure><h4 id="pwd-显示当前路径-从头到尾"><a href="#pwd-显示当前路径-从头到尾" class="headerlink" title="pwd 显示当前路径(从头到尾)"></a>pwd 显示当前路径(从头到尾)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd 当前目录的绝对路径从头到尾</span><br></pre></td></tr></table></figure><h4 id="clear-清屏"><a href="#clear-清屏" class="headerlink" title="clear 清屏"></a>clear 清屏</h4><h4 id="tab自动补全"><a href="#tab自动补全" class="headerlink" title="tab自动补全"></a>tab自动补全</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 比如你在你的用户目录   里面有 Desktop 和 Downloads</span><br><span class="line"></span><br><span class="line">cd D 按tab 不会进行自动补全(因为存在两个开头一样的D目录)</span><br><span class="line"></span><br><span class="line">cd De 按 tab 就能自动补全</span><br></pre></td></tr></table></figure><h4 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 1.txt</span><br></pre></td></tr></table></figure><h4 id="正则相关的操作"><a href="#正则相关的操作" class="headerlink" title="正则相关的操作"></a>正则相关的操作</h4><blockquote><p>问题1 显示当前路径下所有的 .txt文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.txt</span><br></pre></td></tr></table></figure><blockquote><p>问题2 显示当前目录下有.txt .tnt .tst</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.t?t</span><br></pre></td></tr></table></figure><blockquote><p>问题3 显示 当前目录下的 .txt .tnt文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls *.t[nx]t</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">? 代表一个字符有且仅有,不能没有</span><br><span class="line">[xn] 代表括号里任意一个字符</span><br><span class="line">[abcdef] 可以写为 [a-f] 表示a到f的任意字符</span><br><span class="line"></span><br><span class="line">如果有以下文件恰好叫 1a 2a 3a *a</span><br><span class="line">ls *a就会有歧义  会显示  1a 2a 3a *a</span><br><span class="line">ls \*a 转义  会显示 *a</span><br></pre></td></tr></table></figure><h4 id="重定向-gt"><a href="#重定向-gt" class="headerlink" title="重定向 &gt;"></a>重定向 &gt;</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ls &gt; 1.txt  文件不存在就创建，清空1.txt的内容 把ls显示的内容填充到1.txt里</span><br><span class="line"></span><br><span class="line">ls &gt;&gt; 1.txt 文件不存在就创建，不清空1.txt的内容 把ls的内容追加到1.txt</span><br></pre></td></tr></table></figure><h4 id="分屏-more"><a href="#分屏-more" class="headerlink" title="分屏 more"></a>分屏 more</h4><p>用命令查看文件的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 1.txt  如果文件内容超过一屏显示  就按当前内容所占比例显示在下方   按空格进行查看其余内容</span><br></pre></td></tr></table></figure><h4 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h4><p>一行里写多个命令通常不好使此时就需要使用管道了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -alh | more</span><br></pre></td></tr></table></figure><h4 id="mkdir创建目录"><a href="#mkdir创建目录" class="headerlink" title="mkdir创建目录"></a>mkdir创建目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 当前目录创建一个demo文件夹</span><br><span class="line">mkdir demo </span><br><span class="line"></span><br><span class="line"># 当前目录创建 a/b/c 嵌套目录的文件夹  需要添加 -p</span><br><span class="line">mkdir -p a/b/c</span><br></pre></td></tr></table></figure><h4 id="tree-以目录树的方式显示目录结构"><a href="#tree-以目录树的方式显示目录结构" class="headerlink" title="tree 以目录树的方式显示目录结构"></a>tree 以目录树的方式显示目录结构</h4><h4 id="rmdir删除目录"><a href="#rmdir删除目录" class="headerlink" title="rmdir删除目录"></a>rmdir删除目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rmdir demo</span><br><span class="line"></span><br><span class="line"># 无法删除嵌套目录 如 demo/a/b</span><br></pre></td></tr></table></figure><h4 id="rm-删除文件-慎用"><a href="#rm-删除文件-慎用" class="headerlink" title="rm 删除文件(慎用)"></a>rm 删除文件(慎用)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rm / 千万不要用,你就完蛋了从根目录开始删</span><br><span class="line">rm / 千万不要用,你就完蛋了从根目录开始删</span><br><span class="line">rm / 千万不要用,你就完蛋了从根目录开始删</span><br><span class="line"></span><br><span class="line">rm 文件名</span><br><span class="line">rm -f 强制删除,也就是不提示(你确认删除吗？)</span><br><span class="line">rm -r 目录 递归的删除目录(每删除一个文件问你一次 你确认删除吗？)</span><br><span class="line">rm -rf 递归的删除目录(没有任何提示)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iview引入问题</title>
      <link href="/2018/06/06/Vue_221_iview%E5%BC%95%E5%85%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2018/06/06/Vue_221_iview%E5%BC%95%E5%85%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="本文针对vue-cli-2-9-3版本"><a href="#本文针对vue-cli-2-9-3版本" class="headerlink" title="本文针对vue-cli@2.9.3版本"></a>本文针对<a href="mailto:vue-cli@2.9.3" target="_blank" rel="noopener">vue-cli@2.9.3</a>版本</h4></blockquote><blockquote><p>我使用的iview版本为2.14.1</p></blockquote><h3 id="引入iview触发的问题"><a href="#引入iview触发的问题" class="headerlink" title="引入iview触发的问题"></a>引入iview触发的问题</h3><h4 id="本地运行正常，打包后报错提示没有某个字体文件"><a href="#本地运行正常，打包后报错提示没有某个字体文件" class="headerlink" title="本地运行正常，打包后报错提示没有某个字体文件"></a>本地运行正常，打包后报错提示没有某个字体文件</h4><p>webpack.prod.conf.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123;</span><br><span class="line">        sourceMap: config.build.productionSourceMap,</span><br><span class="line">        extract: false</span><br><span class="line">        // extract: true</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//里边的 extract改为false,默认是true</span><br></pre></td></tr></table></figure><p><a href="https://github.com/iview/iview/issues/515" target="_blank" rel="noopener">详情请参考issues</a></p><h4 id="iview全局引入后，打包体积过大"><a href="#iview全局引入后，打包体积过大" class="headerlink" title="iview全局引入后，打包体积过大"></a>iview全局引入后，打包体积过大</h4><blockquote><p>我说的是vendor.js(打包后的1M)</p></blockquote><h5 id="然后依照官网的api进行按需引用的改造"><a href="#然后依照官网的api进行按需引用的改造" class="headerlink" title="然后依照官网的api进行按需引用的改造"></a>然后依照官网的api进行按需引用的改造</h5><p>借助插件 babel-plugin-import可以实现按需加载组件，减少文件体积。首先安装，并在文件 .babelrc 中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-import --save-dev</span><br><span class="line"></span><br><span class="line">// .babelrc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [[&quot;import&quot;, &#123;</span><br><span class="line">    &quot;libraryName&quot;: &quot;iview&quot;,</span><br><span class="line">    &quot;libraryDirectory&quot;: &quot;src/components&quot;</span><br><span class="line">  &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这样按需引入组件，就可以减小体积了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button, Table &#125; from &apos;iview&apos;;</span><br><span class="line">Vue.component(&apos;Button&apos;, Button);</span><br><span class="line">Vue.component(&apos;Table&apos;, Table);</span><br></pre></td></tr></table></figure><blockquote><p>但是这样会报UglifyJs的错误，因为截止2018年6月6日为止，iview里的内容使用了es6语法，然而uglifyJs是不支持的！</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UglifyJs do not support ES6+, you can also use babel-minify for better treeshaking: https://github.com/babel/minify</span><br></pre></td></tr></table></figure><p>于是我就又各种搜索报错终于找到答案</p><p><a href="https://blog.csdn.net/nongweiyilady/article/details/78893504" target="_blank" rel="noopener">原文链接</a></p><blockquote><h4 id="解决方案-参考以上链接"><a href="#解决方案-参考以上链接" class="headerlink" title="解决方案(参考以上链接)"></a>解决方案(参考以上链接)</h4></blockquote><ol><li>在webpack.base.conf.js中，我们先在js编译的时候添加如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: /\.js$/,</span><br><span class="line">    loader: &apos;babel-loader&apos;,</span><br><span class="line">    include: [resolve(&apos;src&apos;),</span><br><span class="line">    resolve(&apos;test&apos;),resolve(&apos;/node_modules/iview/src&apos;),resolve(&apos;/node_modules/iview/packages&apos;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>先让iview的es6语法经过babel来转换，然后在build/webpack.prod.conf.js中，注释掉原来的uglifyJs，引入外部的uglifyJs对js进行压缩混淆，代码如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//改动 你需要下载依赖 </span><br><span class="line">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">// 注释掉原来的 UglifyJs 因为 它不支持ES6</span><br><span class="line">// new webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">//   compress: &#123;</span><br><span class="line">//     warnings: false</span><br><span class="line">//   &#125;,</span><br><span class="line">//   sourceMap: true</span><br><span class="line">// &#125;),</span><br><span class="line">new UglifyJsPlugin(&#123;</span><br><span class="line">    // 使用外部引入的新版本的js压缩工具</span><br><span class="line">    parallel: true,</span><br><span class="line">    sourceMap: true,</span><br><span class="line">    uglifyOptions: &#123;</span><br><span class="line">    ie8: false,</span><br><span class="line">    ecma: 6,</span><br><span class="line">    warnings: false,</span><br><span class="line">    mangle: true,</span><br><span class="line">    // debug false</span><br><span class="line">    output: &#123;</span><br><span class="line">        comments: false,</span><br><span class="line">        beautify: false,</span><br><span class="line">        // debug true</span><br><span class="line">    &#125;,</span><br><span class="line">    compress: &#123;</span><br><span class="line">        // 在UglifyJs删除没有用到的代码时不输出警告</span><br><span class="line">        warnings: false,</span><br><span class="line">        // 删除所有的 `console` 语句</span><br><span class="line">        // 还可以兼容ie浏览器</span><br><span class="line">        drop_console: true,</span><br><span class="line">        // 内嵌定义了但是只用到一次的变量</span><br><span class="line">        collapse_vars: true,</span><br><span class="line">        // 提取出出现多次但是没有定义成变量去引用的静态值</span><br><span class="line">        reduce_vars:true</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><ol start="3"><li>不要忘了安装依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install uglifyjs-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><ol start="4"><li>详情配置请参考官网</li></ol><p><a href="http://www.css88.com/doc/webpack/plugins/uglifyjs-webpack-plugin/" target="_blank" rel="noopener">uglifyjs-webpack-plugin</a></p><blockquote><h5 id="经历如上步骤后，我的vendor-js打包后体积为-300K-我只用了iview-的-DatePicker"><a href="#经历如上步骤后，我的vendor-js打包后体积为-300K-我只用了iview-的-DatePicker" class="headerlink" title="经历如上步骤后，我的vendor.js打包后体积为 300K(我只用了iview 的 DatePicker)"></a>经历如上步骤后，我的vendor.js打包后体积为 300K(我只用了iview 的 DatePicker)</h5><h5 id="但是iview即使按需引入css还是挺大的大约300K还需要在-main-js里引入-依然很大。。。。。。"><a href="#但是iview即使按需引入css还是挺大的大约300K还需要在-main-js里引入-依然很大。。。。。。" class="headerlink" title="但是iview即使按需引入css还是挺大的大约300K还需要在 main.js里引入 依然很大。。。。。。"></a>但是iview即使按需引入css还是挺大的大约300K还需要在 main.js里引入 依然很大。。。。。。</h5></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue多页面配置问题汇总</title>
      <link href="/2018/05/22/Vue_202_vue%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%A4%8D%E7%94%A8%E6%A8%A1%E5%9D%97%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/22/Vue_202_vue%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%A4%8D%E7%94%A8%E6%A8%A1%E5%9D%97%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="注意：本项目基于vue-cli-2-9-3"><a href="#注意：本项目基于vue-cli-2-9-3" class="headerlink" title="注意：本项目基于vue-cli 2.9.3"></a>注意：本项目基于vue-cli 2.9.3</h4></blockquote><h3 id="基于上一篇vue多页面的配置方式"><a href="#基于上一篇vue多页面的配置方式" class="headerlink" title="基于上一篇vue多页面的配置方式"></a>基于上一篇vue多页面的配置方式</h3><h4 id="很多时候我们需要引用同一模块"><a href="#很多时候我们需要引用同一模块" class="headerlink" title="很多时候我们需要引用同一模块"></a>很多时候我们需要引用同一模块</h4><blockquote><p>当你定义api接口的时候,或者加载去除默认样式的reset.css文件</p></blockquote><blockquote><p>我们应把复用的模块放在同一目录下,如图我这里把复用的文件放在「modules」里</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/vuenote_202_01.png" alt=""></p><p>找到webpack.base.conf.js文件,添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class="line">      &apos;@&apos;: resolve(&apos;src&apos;),</span><br><span class="line">      // 公共文件路径加载</span><br><span class="line">      &apos;css&apos;:&apos;@/modules/css&apos;,</span><br><span class="line">      &apos;js&apos;:&apos;@/modules/js&apos;,</span><br><span class="line">      &apos;components&apos;:&apos;@/components&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你的页面里需要使用该模块的时候就可以像这样引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &apos;css/reset.css&apos;;</span><br><span class="line">import &apos;js/flexible.js&apos;;</span><br></pre></td></tr></table></figure><h4 id="引入淘宝移动端适配方案后flexible-js-与引入-mint-ui的冲突"><a href="#引入淘宝移动端适配方案后flexible-js-与引入-mint-ui的冲突" class="headerlink" title="引入淘宝移动端适配方案后flexible.js 与引入 mint-ui的冲突"></a>引入淘宝移动端适配方案后flexible.js 与引入 mint-ui的冲突</h4><blockquote><p>当你做了移动端适配后，也就是配置了postcss-px2rem后,引入mint-ui框架会把UI框架里组件像素单位「px」转为「rem」</p></blockquote><p>我使用的是postcss依赖  所以.postcssrc.js配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">    // to edit target browsers: use &quot;browserslist&quot; field in package.json</span><br><span class="line">    &quot;autoprefixer&quot;: &#123;&#125;,</span><br><span class="line">    &quot;postcss-px2rem&quot;: &#123;</span><br><span class="line">       remUnit: 75</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>移动端如果使用阿里的flexible适配方案，现有的移动端UI库大部分都不适用了，移动端的UI库默认的initial-scale=1，在高清屏上flexible会调整initial-scale=1/dpr，UI的样式被整体缩小了</p></blockquote><blockquote><h5 id="这样就导致UI变形"><a href="#这样就导致UI变形" class="headerlink" title="这样就导致UI变形"></a>这样就导致UI变形</h5></blockquote><ul><li><h5 id="解决方式一：就是你要用样式覆盖-这样就更恶心了"><a href="#解决方式一：就是你要用样式覆盖-这样就更恶心了" class="headerlink" title="解决方式一：就是你要用样式覆盖,这样就更恶心了"></a>解决方式一：就是你要用样式覆盖,这样就更恶心了</h5></li><li><h5 id="解决方式二：依然使用flexible适配方案，但是不使用px2rem"><a href="#解决方式二：依然使用flexible适配方案，但是不使用px2rem" class="headerlink" title="解决方式二：依然使用flexible适配方案，但是不使用px2rem"></a>解决方式二：依然使用flexible适配方案，但是不使用px2rem</h5></li></ul><blockquote><p>注掉使用postcss-px2rem的功能，采用手写rem的方式，这样引入的ui组件样式就不会变小</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">    // to edit target browsers: use &quot;browserslist&quot; field in package.json</span><br><span class="line">    &quot;autoprefixer&quot;: &#123;&#125;,</span><br><span class="line">    //&quot;postcss-px2rem&quot;: &#123;</span><br><span class="line">    //   remUnit: 75</span><br><span class="line">    //&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手写rem问题来了，又回到原始的方式了"><a href="#手写rem问题来了，又回到原始的方式了" class="headerlink" title="手写rem问题来了，又回到原始的方式了"></a>手写rem问题来了，又回到原始的方式了</h4><p>我们可以使用强大的IDE插件来帮我们解决问题</p><blockquote><p>我用的是VScode，设计稿750px,如果每个需要适配的单位都去计算rem是很麻烦的，推荐px to rem这个插件，然后将16设置为75（设计稿为750px）</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/vuenote_202_02.png" alt=""></p><p>这个时候我们直接写px，选中后alt+z就直接转换为rem了</p><ul><li>先选中如下文本 「16px」</li><li>再按住「alt」</li><li>最后按「z」</li></ul><h4 id="npm-run-build问题"><a href="#npm-run-build问题" class="headerlink" title="npm run build问题"></a>npm run build问题</h4><blockquote><p>打包之后的文件为绝对路径,需在服务环境下才能打开</p></blockquote><p>不方便我们本地调试，我们需要相对路径</p><ol><li>打开config文件夹下的index.js文件</li><li>修改build中assetsPublicPath为’’（原本为’/‘）</li></ol><h4 id="静态资源路径问题"><a href="#静态资源路径问题" class="headerlink" title="静态资源路径问题"></a>静态资源路径问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-|src</span><br><span class="line">-|static</span><br><span class="line">---|img</span><br><span class="line">------|aa.png</span><br></pre></td></tr></table></figure><blockquote><h5 id="在html或者css里请这样书写，打包后这个路径也是对的"><a href="#在html或者css里请这样书写，打包后这个路径也是对的" class="headerlink" title="在html或者css里请这样书写，打包后这个路径也是对的"></a>在html或者css里请这样书写，打包后这个路径也是对的</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;static/img/aa.png&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意这样是错的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../static/img/aa.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web性能优化之DNS预解析</title>
      <link href="/2018/05/17/WEB_001_%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96_DNS%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/05/17/WEB_001_%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96_DNS%E9%A2%84%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="DNS预解析"><a href="#DNS预解析" class="headerlink" title="DNS预解析"></a>DNS预解析</h3><blockquote><p>去参考淘宝的移动端页面你可能会看到这样一段代码</p></blockquote><p>请自行选择</p><p><a href="https://h5.m.taobao.com" target="_blank" rel="noopener">淘宝</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;淘宝网触屏版&lt;/title&gt;</span><br><span class="line">&lt;meta name=data-spm content=a215s&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//g.alicdn.com&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//gw.alicdn.com&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//log.mmstat.com&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//api.m.taobao.com&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//cdn.tanx.com&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//ecpm.tanx.com&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>淘宝页面有很多的图片资源</li></ul><blockquote><p>预解析就是指「加载后面图片的时候，不会对域名再次进行解析了(因为已经解析过了)」</p></blockquote><p>作用</p><ul><li>加快后面图片的解析时间</li></ul><h3 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h3>]]></content>
      
      
      
        <tags>
            
            <tag> web性能优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue多页面配置方式</title>
      <link href="/2018/05/17/Vue_201_vue%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/05/17/Vue_201_vue%E5%A4%9A%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="注意本文使用的vue-cli是2-9-3"><a href="#注意本文使用的vue-cli是2-9-3" class="headerlink" title="注意本文使用的vue-cli是2.9.3"></a>注意本文使用的vue-cli是2.9.3</h3></blockquote><h3 id="vue多页面配置调整方式"><a href="#vue多页面配置调整方式" class="headerlink" title="vue多页面配置调整方式"></a>vue多页面配置调整方式</h3><ol><li>全局安装vue-cli</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli@2.9.3 -g</span><br></pre></td></tr></table></figure><ol start="2"><li>生成模板，我使用的模板是webpack</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack xxx</span><br></pre></td></tr></table></figure><ol start="3"><li>安装过程中的询问</li></ol><ul><li>是否安装vue-router(安装方便我们多页面里路由再次进行跳转)</li><li>是否安装eslint (这个配置比较繁琐这次不安装)</li><li>后面几个模块先不进行安装(这次的目标是多页面配置。。。。)</li></ul><blockquote><p>初始化后会有提示如何进行运行</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/vuenote_201_01.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 依照我们的项目，你应该</span><br><span class="line">cd xxx        //切换到生成的模板目录</span><br><span class="line">npm install   //安装依赖</span><br><span class="line">npm run dev   //如果出现经典的vue logo说明你初始化成功</span><br></pre></td></tr></table></figure><ol start="4"><li>多页面的目录结构调整</li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/vuenote_201_02.png" alt=""></p><ul><li>在开发路径src下增加modules和pages文件夹，分别存放模块和页面</li><li>页面的所有文件都放到同一文件夹下就近管理：</li><li>如上选中文件都移到index文件夹下，并把main.js改为index.js,保证页面的入口js文件和模板文件的名称一致<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index.html(页面模板)</span><br><span class="line">main.js(页面入口文件)</span><br><span class="line">App.vue(页面使用的组件，公用组件放到components文件夹下)router(页面的路由配置)</span><br><span class="line">assets(页面的静态资源)</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>添加共同方法</li></ol><ul><li>在build/utils.js中添加两个方法：webpack多入口文件和多页面输出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">var glob = require(&apos;glob&apos;)</span><br><span class="line">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">var PAGE_PATH = path.resolve(__dirname, &apos;../src/pages&apos;)</span><br><span class="line">var merge = require(&apos;webpack-merge&apos;)</span><br><span class="line"></span><br><span class="line">//多入口配置</span><br><span class="line">exports.entries = function() &#123;</span><br><span class="line">  var entryFiles = glob.sync(PAGE_PATH + &apos;/*/*.js&apos;)</span><br><span class="line">  var map = &#123;&#125;</span><br><span class="line">  entryFiles.forEach((filePath) =&gt; &#123;</span><br><span class="line">    var filename = filePath.substring(filePath.lastIndexOf(&apos;\/&apos;) + 1, filePath.lastIndexOf(&apos;.&apos;))</span><br><span class="line">    map[filename] = filePath</span><br><span class="line">  &#125;)</span><br><span class="line">  return map</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//多页面输出配置</span><br><span class="line">exports.htmlPlugin = function() &#123;</span><br><span class="line">  let entryHtml = glob.sync(PAGE_PATH + &apos;/*/*.html&apos;)</span><br><span class="line">  let arr = []</span><br><span class="line">  entryHtml.forEach((filePath) =&gt; &#123;</span><br><span class="line">    let filename = filePath.substring(filePath.lastIndexOf(&apos;\/&apos;) + 1, filePath.lastIndexOf(&apos;.&apos;))</span><br><span class="line">    let conf = &#123;</span><br><span class="line">      template: filePath,</span><br><span class="line">      filename: filename + &apos;.html&apos;,</span><br><span class="line">      chunks: [filename],</span><br><span class="line">      inject: true</span><br><span class="line">    &#125;</span><br><span class="line">    if (process.env.NODE_ENV === &apos;production&apos;) &#123;</span><br><span class="line">      conf = merge(conf, &#123;</span><br><span class="line">        chunks: [&apos;manifest&apos;, &apos;vendor&apos;, filename],</span><br><span class="line">        minify: &#123;</span><br><span class="line">          removeComments: true,</span><br><span class="line">          collapseWhitespace: true,</span><br><span class="line">          removeAttributeQuotes: true</span><br><span class="line">        &#125;,</span><br><span class="line">        chunksSortMode: &apos;dependency&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(new HtmlWebpackPlugin(conf))</span><br><span class="line">  &#125;)</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>修改配置</li></ol><p>1) 修改build/webpack.base.conf.js的入口配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 替换默认的单页面入口</span><br><span class="line">// entry: &#123;</span><br><span class="line">//   app: &apos;./src/main.js&apos;</span><br><span class="line">// &#125;</span><br><span class="line">entry: utils.entries()</span><br></pre></td></tr></table></figure><p>2)修改build/webpack.dev.conf.js和build/webpack.prod.conf.js的多页面配置：</p><blockquote><p>把原有的页面模板配置注释或删除，并把多页面配置添加到plugins</p></blockquote><p>webpack.dev.conf.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    ......</span><br><span class="line">    //  new HtmlWebpackPlugin(&#123;</span><br><span class="line">    //    filename: &apos;index.html&apos;,</span><br><span class="line">    //    template: &apos;index.html&apos;,</span><br><span class="line">    //    inject: true</span><br><span class="line">    //  &#125;),</span><br><span class="line">    ......</span><br><span class="line">  ].concat(utils.htmlPlugin())</span><br></pre></td></tr></table></figure><p>webpack.prod.conf.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    ......</span><br><span class="line">    // new HtmlWebpackPlugin(&#123;</span><br><span class="line">    //   filename: config.build.index,</span><br><span class="line">    //   template: &apos;index.html&apos;,</span><br><span class="line">    //   inject: true,</span><br><span class="line">    //   minify: &#123;</span><br><span class="line">    //     removeComments: true,</span><br><span class="line">    //     collapseWhitespace: true,</span><br><span class="line">    //     removeAttributeQuotes: true</span><br><span class="line">    //   &#125;,</span><br><span class="line">    //   chunksSortMode: &apos;dependency&apos;</span><br><span class="line">    // &#125;),</span><br><span class="line">    ......</span><br><span class="line">  ].concat(utils.htmlPlugin())</span><br></pre></td></tr></table></figure><ol start="7"><li>在pages目录里创建cart目录</li></ol><ul><li>新建cart.html</li><li>新建cart.js</li></ul><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/vuenote_201_03.png" alt=""></p><ol start="8"><li>终于你可以试试多页面是否成功了</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/vuenote_201_04.png" alt=""></p><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><blockquote><p>在上面多页面输出配置utils.js中有这样一行代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunks: [&apos;manifest&apos;, &apos;vendor&apos;, filename]</span><br></pre></td></tr></table></figure><blockquote><p>这是<a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a>插件对页面入口文件(即js文件)的限定，如果不设置则会把整个项目下的所有入口文件全部引入</p></blockquote><ul><li>为什么要引入’manifest’和’vendor’</li></ul><p>在build/webpack.prod.conf.js中有如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// split vendor js into its own file</span><br><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: &apos;vendor&apos;,</span><br><span class="line">    minChunks: function (module, count) &#123;</span><br><span class="line">    // any required modules inside node_modules are extracted to vendor</span><br><span class="line">    return (</span><br><span class="line">        module.resource &amp;&amp;</span><br><span class="line">        /\.js$/.test(module.resource) &amp;&amp;</span><br><span class="line">        module.resource.indexOf(</span><br><span class="line">        path.join(__dirname, &apos;../node_modules&apos;)</span><br><span class="line">        ) === 0</span><br><span class="line">    )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;),</span><br><span class="line">// extract webpack runtime and module manifest to its own file in order to</span><br><span class="line">// prevent vendor hash from being updated whenever app bundle is updated</span><br><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: &apos;manifest&apos;,</span><br><span class="line">    chunks: [&apos;vendor&apos;]</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><ul><li>vendor模块是指提取涉及node_modules中的公共模块</li><li>manifest模块是对vendor模块做的缓存</li></ul><p>关于CommonsChunkPlugin插件的详细说明请阅读<a href="https://webpack.js.org/plugins/commons-chunk-plugin/" target="_blank" rel="noopener">官方文档</a></p><p>关于html-webpack-plugin插件的配置还有一行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunksSortMode: &apos;dependency&apos;</span><br></pre></td></tr></table></figure><p>插件会按照模块的依赖关系依次加载，即：manifest，vendor，本页面入口，其他页面入口…</p><p>至此，多页面应用已经搭建完毕，只需要在pages文件夹创建相应的页面文件即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Schema和Model</title>
      <link href="/2018/05/10/MONGODB_007_Schema%E5%92%8CModel/"/>
      <url>/2018/05/10/MONGODB_007_Schema%E5%92%8CModel/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="我使用的mongodb是-4-11-4"><a href="#我使用的mongodb是-4-11-4" class="headerlink" title="我使用的mongodb是 4.11.4"></a>我使用的mongodb是 4.11.4</h4></blockquote><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&apos;mongoose&apos;);</span><br><span class="line">const uri = &apos;mongodb://localhost/test&apos;;</span><br><span class="line">mongoose.connect(uri);</span><br><span class="line">const db = mongoose.connection;</span><br><span class="line"></span><br><span class="line">const Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建Schema模式对象 </span><br><span class="line">const UserSchema = new Schema(&#123;</span><br><span class="line">    name:String,</span><br><span class="line">    age:Number</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">1.通过Schema创建Model</span><br><span class="line">    Model代表 数据库中的集合collections</span><br><span class="line">    mongodb命令行里使用要加s  如 db.users.find()</span><br><span class="line">2. mongoose.model(集合名称,模型对象)</span><br><span class="line">*/</span><br><span class="line">const UserModel = mongoose.model(&apos;user&apos;,UserSchema);</span><br><span class="line"></span><br><span class="line">db.on(&apos;open&apos;,()=&gt;&#123;console.log(&apos;db open &apos;)&#125;) </span><br><span class="line">db.on(&apos;error&apos;,(err,res)=&gt;&#123;console.log(&apos;db error&apos;)&#125;) </span><br><span class="line">db.on(&apos;close&apos;,(err,res)=&gt;&#123;console.log(&apos;db close&apos;)&#125;)</span><br></pre></td></tr></table></figure><blockquote><h4 id="运行如上代码数据库连接成功后-mongodb中并不会立刻创建-collection-需要向数据库中插入文档才会创建"><a href="#运行如上代码数据库连接成功后-mongodb中并不会立刻创建-collection-需要向数据库中插入文档才会创建" class="headerlink" title="运行如上代码数据库连接成功后  mongodb中并不会立刻创建 collection,需要向数据库中插入文档才会创建"></a>运行如上代码数据库连接成功后  mongodb中并不会立刻创建 collection,需要向数据库中插入文档才会创建</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UserModel.create(&#123;</span><br><span class="line">        name:&apos;hjx&apos;,</span><br><span class="line">        age:18</span><br><span class="line">    &#125;,function(err)&#123;</span><br><span class="line">        if(!err)&#123;</span><br><span class="line">            console.log(&quot;创建成功&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="Schema模型对象的规则约束"><a href="#Schema模型对象的规则约束" class="headerlink" title="Schema模型对象的规则约束"></a>Schema模型对象的规则约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const UserSchema =Schema(&#123;</span><br><span class="line">    // type:类型</span><br><span class="line">    // require 是否必须</span><br><span class="line">    // unique 在mongodb里创建索引   类似mysql唯一主键</span><br><span class="line">    // enum:[&apos;aa&apos;,&apos;bb&apos;]  指定他的值必须是什么</span><br><span class="line">    name:&#123;type:String,require:true,unique:true,enum:[&apos;hjx&apos;,&apos;lisi&apos;]&#125;,</span><br><span class="line">    // 最简单写法</span><br><span class="line">    // age:Number</span><br><span class="line">    // 数字复杂的校验 </span><br><span class="line">    // max 最大值</span><br><span class="line">    // min 最小值  如果是数组   第一个值是最小范围  第二个值是报错信息</span><br><span class="line">    age:&#123;type:Number,max:90,min:[18,&apos;不能小于18岁&apos;]&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><blockquote><h4 id="把全局的Pormise挂载到-mongoose-Promise上"><a href="#把全局的Pormise挂载到-mongoose-Promise上" class="headerlink" title="把全局的Pormise挂载到 mongoose.Promise上"></a>把全局的Pormise挂载到 mongoose.Promise上</h4></blockquote><blockquote><h4 id="使用-async、await解决异步问题"><a href="#使用-async、await解决异步问题" class="headerlink" title="使用 async、await解决异步问题"></a>使用 async、await解决异步问题</h4></blockquote><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&apos;mongoose&apos;);</span><br><span class="line">const uri = &apos;mongodb://localhost/test&apos;;</span><br><span class="line">mongoose.connect(uri);</span><br><span class="line">const db = mongoose.connection;</span><br><span class="line">const Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line">mongoose.Promise = global.Promise;</span><br><span class="line"></span><br><span class="line">// 表单对象</span><br><span class="line">const UserSchema =new Schema(&#123;</span><br><span class="line">    name:String,</span><br><span class="line">    age:Number</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const UserModel = mongoose.model(&apos;user&apos;,UserSchema);</span><br><span class="line"></span><br><span class="line">(async()=&gt;&#123;</span><br><span class="line">    let created = await UserModel.create(&#123;</span><br><span class="line">        name:&apos;hjx&apos;,</span><br><span class="line">        age:18</span><br><span class="line">    &#125;).then()</span><br><span class="line">    return created;</span><br><span class="line">&#125;)().then(r=&gt;&#123;</span><br><span class="line">    console.log(r)</span><br><span class="line">&#125;).catch(e=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.on(&apos;open&apos;,()=&gt;&#123;console.log(&apos;db open &apos;)&#125;) </span><br><span class="line">db.on(&apos;error&apos;,(err,res)=&gt;&#123;console.log(&apos;db error&apos;)&#125;) </span><br><span class="line">db.on(&apos;close&apos;,(err,res)=&gt;&#123;console.log(&apos;db close&apos;)&#125;)</span><br></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">const UserSchema = new Schema(&#123;</span><br><span class="line">    name:String,</span><br><span class="line">    age:Number</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const UserModel = mongoose.model(&apos;user&apos;,UserSchema);</span><br><span class="line">// 实例方法</span><br><span class="line">UserSchema.methods.sayYourName = function()&#123;</span><br><span class="line">    return this.name;</span><br><span class="line">&#125;</span><br><span class="line">// 静态方法</span><br><span class="line">UserSchema.statics.findByName = async function(name)&#123;</span><br><span class="line">    return await this.findOne(&#123;name:name&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体的表   命令行里使用要加s  如   db.users.find()</span><br><span class="line">const UserModel = mongoose.model(&apos;user&apos;,UserSchema);</span><br><span class="line"></span><br><span class="line">// 实例方法</span><br><span class="line">(async()=&gt;&#123;</span><br><span class="line">    let found = await UserModel.findOne(&#123;&#125;);</span><br><span class="line">    console.log(found.sayYourName())</span><br><span class="line">&#125;)().then(r=&gt;&#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;).catch(e=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 静态方法</span><br><span class="line">(async()=&gt;&#123;</span><br><span class="line">    let found = await UserModel.findByName(&apos;hjx&apos;);</span><br><span class="line">    return found;</span><br><span class="line">&#125;)().then(r=&gt;&#123;</span><br><span class="line">    console.log(r)</span><br><span class="line">&#125;).catch(e=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//保存</span><br><span class="line">(async()=&gt;&#123;</span><br><span class="line">   let user = new UserModel(&#123;name:&apos;lisi&apos;,age:19&#125;)</span><br><span class="line">   return await user.save()</span><br><span class="line">&#125;)().then(r=&gt;&#123;</span><br><span class="line">&#125;).catch(e=&gt;&#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>工厂模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 工厂模式</span><br><span class="line">(async(params)=&gt;&#123;</span><br><span class="line">   let flow = UserModel.find(&#123;&#125;);</span><br><span class="line">   flow.where(&apos;age&apos;).lt(21);</span><br><span class="line">   flow.select(&#123;name:1&#125;)</span><br><span class="line">   flow.skip(0);</span><br><span class="line">   if(params.sort) flow.sort(params.sort);</span><br><span class="line">   let res = await flow.then()</span><br><span class="line">   return res;</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    sort:&apos;-age&apos;</span><br><span class="line">&#125;)</span><br><span class="line">.then(r=&gt;&#123;</span><br><span class="line">    console.log(r)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(e=&gt;&#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoose是什么鬼</title>
      <link href="/2018/05/10/MONGODB_006_mongoose/"/>
      <url>/2018/05/10/MONGODB_006_mongoose/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是mongoose"><a href="#什么是mongoose" class="headerlink" title="什么是mongoose"></a>什么是mongoose</h3><blockquote><p>在之前的文章中我们都是命令行操作mongodb</p></blockquote><ul><li>而实际使用中肯定不能让客户操作命令行录入数据</li><li>mongoose是一个可以让我们通过node来操作 mongoDB的模块</li><li>mongoose是一个ODM库（对象文档模型）</li></ul><p><a href="http://mongoosejs.com/" target="_blank" rel="noopener">官网</a></p><blockquote><p>moogoose实际作用是让我们以「对象的形式」操作数据库</p></blockquote><p>好处</p><ol><li>可以为文档创建一个模式结构（Schema）</li><li>可以对模型中的对象进行验证</li><li>数据可以通过类型转换为对象模型</li><li>可以使用中间件来与业务逻辑挂钩</li><li>比Node原生的mongodb驱动更容易</li></ol><h3 id="mongoose提供的对象"><a href="#mongoose提供的对象" class="headerlink" title="mongoose提供的对象"></a>mongoose提供的对象</h3><ul><li>Schema （模式对象） 对字段进行约束</li><li>Model 作为集合中所有文档的表示，相当于MongoDB中的collections</li><li>Document 表示集合中的具体文档，相当于MongoDB中的document</li></ul><h3 id="使用mongoose"><a href="#使用mongoose" class="headerlink" title="使用mongoose"></a>使用mongoose</h3><ol><li>下载安装 mongoose </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建项目目录</span><br><span class="line">mkdir demo</span><br><span class="line"># 切换目录</span><br><span class="line">cd demo</span><br><span class="line"># 初始化package.json</span><br><span class="line">npm init 一路回车</span><br><span class="line"># 安装依赖</span><br><span class="line">npm i mongoose --save</span><br><span class="line"># 新建test.js</span><br><span class="line">touch test.js</span><br></pre></td></tr></table></figure><ol start="2"><li>引入mongoose</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&apos;mongoose&apos;)</span><br></pre></td></tr></table></figure><ol start="3"><li>连接数据库</li></ol><blockquote><p>如果端口号是27017可以省略</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//引入mongoose模块</span><br><span class="line">const mongoose = require(&apos;mongoose&apos;)</span><br><span class="line">mongoose.connect(&quot;mongodb://数据库的ip地址:端口号/数据库名&quot;)</span><br></pre></td></tr></table></figure><ol start="4"><li>监听数据库的连接状态</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.disconnect() //一般不使用</span><br></pre></td></tr></table></figure><p>全部代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mongoose = require(&apos;mongoose&apos;);</span><br><span class="line">const db = mongoose.connect(&apos;mongodb://localhost/test&apos;);</span><br><span class="line">db.on(&apos;open&apos;,()=&gt;&#123;console.log(&quot;数据库连接成功&quot;)&#125;)</span><br><span class="line"></span><br><span class="line">db.on(&apos;close&apos;,()=&gt;&#123;console.log(&quot;数据库连接断开&quot;)&#125;)</span><br></pre></td></tr></table></figure><h4 id="和mysql区别"><a href="#和mysql区别" class="headerlink" title="和mysql区别"></a>和mysql区别</h4><ul><li>mongoDB一般只连接一次，不会主动断开（没有事务控制）除非服务器宕机</li><li>mysql是关系型数据库，每操作数据就要进行事务控制，以至于 连接一次关闭一次 连接一次关闭一次</li></ul><blockquote><p>所以一般不会调用 mongoose.disconnect() </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoDb练习三</title>
      <link href="/2018/05/10/MONGODB_005_%E7%BB%83%E4%B9%A03/"/>
      <url>/2018/05/10/MONGODB_005_%E7%BB%83%E4%B9%A03/</url>
      
        <content type="html"><![CDATA[<h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h3><ol><li>查询工资小于1000 或 大于3000的数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.emp.find(&#123;</span><br><span class="line">    $or:[</span><br><span class="line">        sal:&#123;</span><br><span class="line">            $lt:1000</span><br><span class="line">        &#125;,</span><br><span class="line">        sal:&#123;</span><br><span class="line">            $gt:3000</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>为所有工资低于1000的 员工 涨薪 400</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.emp.updateMany(</span><br><span class="line">    &#123;sal:&#123;$let:1000&#125;&#125;,</span><br><span class="line">    &#123;$inc:&#123;sal:400&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="排序-sort"><a href="#排序-sort" class="headerlink" title="排序 sort()"></a>排序 sort()</h4><p>查询文档时，默认按_id的值进行升序排列</p><ul><li>sort()需要传递一个对象指定对应列进行排序</li><li>1代表升序</li><li>-1代表降序</li><li>多个排序  sort({sal:1,empno:-1}) 先按照工资排序 然后再按照 部门排序</li><li>limit skip sort 可以任意顺序调用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">按工资升序排列</span><br><span class="line">db.emp.find(&#123;&#125;).sort(&#123;sal:1&#125;)</span><br><span class="line">按工资降序排列</span><br><span class="line">db.emp.find(&#123;&#125;).sort(&#123;sal:-1&#125;)</span><br></pre></td></tr></table></figure><h4 id="设置投影-如果我只想看员工姓名-工资，不想看-id"><a href="#设置投影-如果我只想看员工姓名-工资，不想看-id" class="headerlink" title="设置投影 (如果我只想看员工姓名/工资，不想看_id)"></a>设置投影 (如果我只想看员工姓名/工资，不想看_id)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.emp.find(&#123;&#125;,&#123;name:1,sal:1,_id:0&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoDb文档之间的关系</title>
      <link href="/2018/05/10/MONGODB_004%E6%96%87%E6%A1%A3%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2018/05/10/MONGODB_004%E6%96%87%E6%A1%A3%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="文档之间的关系"><a href="#文档之间的关系" class="headerlink" title="文档之间的关系"></a>文档之间的关系</h3><h4 id="一对一-one-to-one"><a href="#一对一-one-to-one" class="headerlink" title="一对一 one to one"></a>一对一 one to one</h4><ul><li>夫妻</li><li>Mongodb中 通过内嵌文档体现 一对一的关系</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.test.insert([</span><br><span class="line">    &#123;</span><br><span class="line">        name:&quot;黄蓉&quot;,</span><br><span class="line">        husband:&#123;</span><br><span class="line">            name:&quot;郭靖&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&quot;小龙女&quot;,</span><br><span class="line">        husband:&#123;</span><br><span class="line">            name:&quot;杨过&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="一对多-one-to-many-many-to-one"><a href="#一对多-one-to-many-many-to-one" class="headerlink" title="一对多 one to many  / many to one"></a>一对多 one to many  / many to one</h4><ul><li>父母  孩子</li><li>用户  订单</li><li>文章  评论</li></ul><p>一对多的关系 ==&gt;  用户&amp;&amp;订单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">db.users.insert([</span><br><span class="line">    &#123;username:&quot;aaa&quot;&#125;,</span><br><span class="line">    &#123;username:&quot;bbb&quot;&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">&#123;_id:ObjectId(&quot;5aaaaaaaaaaaaaa&quot;),username:&quot;aaa&quot;&#125;,</span><br><span class="line">&#123;_id:ObjectId(&quot;5bbbbbbbbbbbbbb&quot;),username:&quot;bbb&quot;&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">订单</span><br><span class="line">db.order.insert(&#123;</span><br><span class="line">    list:[&quot;苹果&quot;,&quot;香蕉&quot;,&quot;葡萄&quot;]</span><br><span class="line">    user_id:ObjectId(&quot;5aaaaaaaaaaaaaa&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.order.insert(&#123;</span><br><span class="line">    list:[&quot;华为&quot;,&quot;平板&quot;,&quot;iPad&quot;]</span><br><span class="line">    user_id:ObjectId(&quot;5bbbbbbbbbbbbbb&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">查询用户名 aaa的订单</span><br><span class="line">var aaaId = db.users.find(&#123;username:&quot;aaa&quot;&#125;)</span><br><span class="line">db.order.find(&#123;user_id:aaaId&#125;)</span><br></pre></td></tr></table></figure><h4 id="多对多-many-to-many"><a href="#多对多-many-to-many" class="headerlink" title="多对多 many to many"></a>多对多 many to many</h4><ul><li>分类  商品</li><li>老师  学生</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">db.teachers.insert([</span><br><span class="line">    &#123;name:&quot;欧阳锋&quot;&#125;,</span><br><span class="line">    &#123;name:&quot;黄药师&quot;&#125;,</span><br><span class="line">    &#123;name:&quot;洪七公&quot;&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">db.students:insert([</span><br><span class="line">    &#123;</span><br><span class="line">        name:&quot;郭靖&quot;,</span><br><span class="line">        tech_ids:[</span><br><span class="line">            ObjectId(&quot;5aaaaaaaaaaa&quot;),</span><br><span class="line">            ObjectId(&quot;5bbbbbbbbbbb&quot;),</span><br><span class="line">            ObjectId(&quot;5ccccccccccc&quot;),</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:&quot;孙悟空&quot;,</span><br><span class="line">        tech_ids:[</span><br><span class="line">            ObjectId(&quot;5aaaaaaaaaaa&quot;),</span><br><span class="line">            ObjectId(&quot;5bbbbbbbbbbb&quot;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="使用最广泛的关系是-一对多"><a href="#使用最广泛的关系是-一对多" class="headerlink" title="使用最广泛的关系是 一对多"></a>使用最广泛的关系是 一对多</h4>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoDb练习二</title>
      <link href="/2018/05/10/MONGODB_003_%E7%BB%83%E4%B9%A02/"/>
      <url>/2018/05/10/MONGODB_003_%E7%BB%83%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><ol><li>向 numbers 集合中插入20000条数据</li></ol><p>笨方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.insert(&#123;num:1&#125;)</span><br><span class="line">db.numbers.insert(&#123;num:2&#125;)</span><br><span class="line">db.numbers.insert(&#123;num:3&#125;)</span><br><span class="line">db.numbers.insert(&#123;num:4&#125;)</span><br><span class="line">...</span><br><span class="line">db.numbers.insert(&#123;num:20000&#125;)</span><br></pre></td></tr></table></figure><p>稍微快一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i=1;i&lt;=20000,i++)&#123;</span><br><span class="line">    db.numbers.insert(&#123;num:i&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr =[];</span><br><span class="line">for(var i=1;i&lt;=20000,i++)&#123;</span><br><span class="line">    arr.push(&#123;num:i&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.numbers.insert(arr)</span><br></pre></td></tr></table></figure><ol start="2"><li>查询numbers 中 num 为500的文档</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.find(&#123;num:500&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>查询 num 大于500的文档</li></ol><blockquote><p>$lt 小于  $gt大于  $eq等于  $ne 不等于</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.find(&#123;num:&#123;$gt:500&#125;&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>查询 num 大于等于500的文档</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.find(&#123;num:&#123;$gte:500&#125;&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>查询num 大于40 小于50的文档</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.find(&#123;num:&#123;$gt:40,$lt:50&#125;&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>查看 numbers集合中 前10条数据</li></ol><blockquote><h4 id="limit-设置数据的上限"><a href="#limit-设置数据的上限" class="headerlink" title="limit()设置数据的上限"></a>limit()设置数据的上限</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">不靠谱的方式</span><br><span class="line">db.numbers.find(&#123;num:&#123;$lte:10&#125;&#125;)</span><br><span class="line"></span><br><span class="line">靠谱的方式</span><br><span class="line">设置显示数据的上限</span><br><span class="line">db.numbers.find().limit(10)</span><br></pre></td></tr></table></figure><blockquote><h3 id="开发中绝对不该执行不带条件的查询"><a href="#开发中绝对不该执行不带条件的查询" class="headerlink" title="开发中绝对不该执行不带条件的查询"></a>开发中绝对不该执行不带条件的查询</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.find()</span><br></pre></td></tr></table></figure><ol start="7"><li>查询numbers  11条到20条的数据</li></ol><blockquote><p>分页skip()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1-10</span><br><span class="line">11-20</span><br><span class="line">21-30 </span><br><span class="line">...</span><br><span class="line">skip()用于跳过指定的条数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.find().skip(10).limit(10)</span><br></pre></td></tr></table></figure><ol start="8"><li>查询numbers  21条到30条的数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.find().skip(20).limit(10)</span><br></pre></td></tr></table></figure><h3 id="分页公式"><a href="#分页公式" class="headerlink" title="分页公式"></a>分页公式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip((pageNo-1)*pageSize).limit(pageSize)</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongodb会自动调整 skip和limit的位置</span><br><span class="line">skip() 和 limit()的顺序谁先谁后无所谓</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoDb练习一</title>
      <link href="/2018/05/10/MONGODB_002_%E7%BB%83%E4%B9%A01/"/>
      <url>/2018/05/10/MONGODB_002_%E7%BB%83%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><ol><li>进入my_test数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use my_test</span><br></pre></td></tr></table></figure><ol start="2"><li>向 my_test中 user集合插入一个文档</li></ol><p>集合习惯会在其后加s  所以 user在操作时是 db.users</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.insert(&#123;username:&quot;猪八戒&quot;&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>查询user集合中的文档</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find()</span><br></pre></td></tr></table></figure><ol start="4"><li>向user集合中插入一个文档</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.insert(&#123;username:&quot;孙悟空&quot;&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>统计user集合中文档document的数量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find().count()</span><br></pre></td></tr></table></figure><ol start="6"><li>查询user集合中 username为孙悟空的值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;username:&quot;孙悟空&quot;&#125;)</span><br></pre></td></tr></table></figure><ol start="7"><li>向user集合中 username=”孙悟空”的文档添加一个 address= 花果山</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(&#123;username:&quot;孙悟空&quot;&#125;,&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        $set:&#123;</span><br><span class="line">            &#123;address:&quot;花果山&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="8"><li>使用{username:”唐僧”}替换  username为 猪八戒 的文档</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.replaceOne(&#123;username:&quot;猪八戒&quot;&#125;,&#123;username:&quot;唐僧&quot;&#125;)</span><br></pre></td></tr></table></figure><ol start="9"><li>删除 username 为 孙悟空 的 address属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(&#123;username:&quot;孙悟空&quot;&#125;,&#123;$unset:&#123;address:&quot;&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure><ol start="10"><li>向 username 为 孙悟空 的文档中 添加一个 hobby:{cities:[“北京”,”上海”,”深圳”],movies:[“三国”,”英雄”]}</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(&#123;username:&quot;孙悟空&quot;&#125;,&#123;</span><br><span class="line">    $set:&#123;</span><br><span class="line">        hobby:&#123;</span><br><span class="line">            cities:[&quot;北京&quot;,&quot;上海&quot;,&quot;深圳&quot;],</span><br><span class="line">            movies:[&quot;三国&quot;,&quot;英雄&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>mongodb 中的属性值也可以是一个文档，当一个文档的一个属性值是文档时，我们称之为「内嵌文档」</p></blockquote><ol start="11"><li>向 username 为 唐僧 的文档中 添加一个 hobby:{movies:[“大话西游”,”天下第一”]}</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(&#123;username:&quot;孙悟空&quot;&#125;,&#123;</span><br><span class="line">    $set:&#123;</span><br><span class="line">        hobby:&#123;</span><br><span class="line">           movies:[&quot;大话西游&quot;,&quot;天下第一&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="12"><li>查询喜欢 电影 movies = 英雄 的文档</li></ol><ul><li>mongodb支持直接通过内嵌文档的属性进行查询，使用「.」进行操作 形如 hobby.movies的形式</li><li>通过内嵌文档查询 必须使用引号包起来 形如 “hobby.movies”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;&quot;hobby.movies&quot;:&quot;英雄&quot;&#125;)</span><br></pre></td></tr></table></figure><ol start="13"><li>向 唐僧 的文档中,电影 movies 中添加 “寒战”</li></ol><ul><li>注意此时不要用 $set 修改操作符</li><li>使用 $push 用于向数组中添加一个新的元素(可重复添加)</li><li>$addToSet 向数组中添加一个元素 (如果添加元素已经存在就不会再去添加了，不可重复添加)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(&#123;username:&quot;唐僧&quot;&#125;,&#123;</span><br><span class="line">    $push:&#123;</span><br><span class="line">        &quot;hobby.movies&quot;:&quot;寒战&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.users.update(&#123;username:&quot;唐僧&quot;&#125;,&#123;</span><br><span class="line">    $addToSet:&#123;</span><br><span class="line">        &quot;hobby.movies&quot;:&quot;寒战&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="14"><li>删除 喜欢 北京 的用户</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.remove(&#123;&quot;hobby.cities&quot;:&quot;北京&quot;&#125;)</span><br></pre></td></tr></table></figure><ol start="15"><li>删除 users集合</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.users.remove(&#123;&#125;) </span><br><span class="line">db.users.drop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoDb入门一</title>
      <link href="/2018/05/10/MONGODB_001_%E5%85%A5%E9%97%A81/"/>
      <url>/2018/05/10/MONGODB_001_%E5%85%A5%E9%97%A81/</url>
      
        <content type="html"><![CDATA[<h3 id="mongodb入门"><a href="#mongodb入门" class="headerlink" title="mongodb入门"></a>mongodb入门</h3><blockquote><p>windows用户推荐下载3.4 （3.6会卡在一个进度不动）</p></blockquote><p><a href="https://www.mongodb.com/" target="_blank" rel="noopener">官网</a></p><p>解压后一路next 然后在对应目录建立目录 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data/db</span><br><span class="line"># 命令行中输入如下即可启动 mongodb</span><br><span class="line">mongod --dbpath &quot;f:/mongodb/data&quot;</span><br></pre></td></tr></table></figure><h3 id="执行mongo命令"><a href="#执行mongo命令" class="headerlink" title="执行mongo命令"></a>执行mongo命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 进入mongo命令行环境  path请自行添加</span><br><span class="line">mongo </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&gt; 如果安装不了  你可以使用官方提供的在线版(mongodb官网 doc中 /MongoDB CRUD Opeartions/Insert Document)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 常用命令</span><br></pre></td></tr></table></figure><p>show dbs 查看所有库<br>use test 使用test数据库 如果test不存在则创建<br>db.p   操作collections  p就是mysql表的概念  有就使用没有则创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### CRUD</span><br><span class="line"></span><br><span class="line">#### 增</span><br><span class="line"></span><br><span class="line">&gt; 增加的时候会默认生成 _id 确认数据的唯一标识</span><br></pre></td></tr></table></figure></p><p>use test<br>db.p.insert({name:”aa”})<br>db.p.insert({name:”aa”},{name:”bb”})<br>db.p.insertOne({name:”aa”})<br>db.p.insertMany({name:”aa”},{name:”bb”})</p><p>#如果你想不要生成的 _id 就可以传递该自动进行覆盖<br>db.p.insertOne({_id:”hello”,name:”aa”})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 查</span><br></pre></td></tr></table></figure></p><h1 id="查所有"><a href="#查所有" class="headerlink" title="查所有"></a>查所有</h1><p>db.p.find()   / db.p.find({})</p><h1 id="按字段查"><a href="#按字段查" class="headerlink" title="按字段查"></a>按字段查</h1><p>db.p.find({name:”aa”})</p><h1 id="多个字段-name为aa-age为-18"><a href="#多个字段-name为aa-age为-18" class="headerlink" title="多个字段  name为aa age为 18"></a>多个字段  name为aa age为 18</h1><p>db.p.find({name:”aa”,age:18})</p><h1 id="find返回的是数组"><a href="#find返回的是数组" class="headerlink" title="find返回的是数组"></a>find返回的是数组</h1><h1 id="findOne-返回匹配的第一个文档"><a href="#findOne-返回匹配的第一个文档" class="headerlink" title="findOne() 返回匹配的第一个文档"></a>findOne() 返回匹配的第一个文档</h1><p>db.p.findOne({age:18}).name</p><h1 id="find返回的个数"><a href="#find返回的个数" class="headerlink" title="find返回的个数"></a>find返回的个数</h1><p>db.p.find().count()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 修改</span><br></pre></td></tr></table></figure></p><p>假如数据为{_id:Object(“3124912ui9012i8fsdafdsf”) ,name:”唐僧”,age:40,gender:”man”}<br>db.p.update({name:”唐僧”},{age:999})<br>数据更新为 {_id:Object(“3124912ui9012i8fsdafdsf”),age:999}<br>update默认 会覆盖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">修改操作符避免覆盖 $set</span><br></pre></td></tr></table></figure></p><p>db.p.update({_id:Object(“3124912ui9012i8fsdafdsf”)},<br>            {<br>                $set:{<br>                    name:”沙和尚”<br>                }<br>            }<br>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">删除文档的指定属性$unset</span><br></pre></td></tr></table></figure></p><p>db.p.update({_id:Object(“3124912ui9012i8fsdafdsf”)},<br>            {<br>                $unset:{<br>                    gender:”这个值写不写没关系因为是删除的”<br>                }<br>            }<br>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">update默认只会改第一个匹配的数据</span><br></pre></td></tr></table></figure></p><p>db.p.updateOne({name:”八戒”},<br>    {<br>        $set:{<br>            address:”天宫”<br>        }<br>    }<br>)</p><p>db.p.updateMany({name:”八戒”},<br>    {<br>        $set:{<br>            address:”天宫”<br>        }<br>    }<br>)</p><h1 id="我就要用-update更新多条数据"><a href="#我就要用-update更新多条数据" class="headerlink" title="我就要用 update更新多条数据"></a>我就要用 update更新多条数据</h1><p>db.p.update({name:”八戒”},<br>    {<br>        $set:{<br>            address:”天宫”<br>        }<br>    },<br>    {<br>        multi:true  //修改多条<br>    }<br>)</p><p>#替换一个文档<br>db.p.replaceOne({name:”八戒”}, { address:”天宫” })<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 删除</span><br></pre></td></tr></table></figure></p><p>db.p.remove()  不传递参数报错<br>db.p.remove({})  全删了，性能比较查  一个一个删<br>db.p.remove({name:”aa”})   //默认删除多个<br>db.p.remove({name:”aa”},true)  //删除一个<br>db.p.deleteOne({name:”aa”})<br>db.p.deleteMany({name:”aa”})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">删除相关操作</span><br></pre></td></tr></table></figure></p><p>db.p.remove({})  全删了，集合还在，性能比较差  一个一个删<br>db.p.drop()  清空集合，性能好 集合没了<br>db.dropDatabase() 删库<br><code>`</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node ten Modules(初始)</title>
      <link href="/2018/05/04/LANG_001/"/>
      <url>/2018/05/04/LANG_001/</url>
      
        <content type="html"><![CDATA[<h3 id="给迷茫的你学习Node-js最好的方法"><a href="#给迷茫的你学习Node-js最好的方法" class="headerlink" title="给迷茫的你学习Node.js最好的方法"></a>给迷茫的你学习Node.js最好的方法</h3><p><a href="http://cnodejs.org/topic/59c75a3dd7cbefc511964688" target="_blank" rel="noopener">原文连接</a></p><h3 id="每天10个-npm-模块"><a href="#每天10个-npm-模块" class="headerlink" title="每天10个 npm 模块"></a>每天10个 npm 模块</h3><p><a href="https://github.com/parro-it/awesome-micro-npm-packages" target="_blank" rel="noopener">仓库地址</a></p><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="is-sorted"><a href="#is-sorted" class="headerlink" title="is-sorted"></a>is-sorted</h4><blockquote><p>A small module to check if an Array is sorted.</p></blockquote><p>核心代码   index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function defaultComparator (a, b) &#123;</span><br><span class="line">  return a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = function checksort (array, comparator) &#123;</span><br><span class="line">  comparator = comparator || defaultComparator</span><br><span class="line"></span><br><span class="line">  for (var i = 1, length = array.length; i &lt; length; ++i) &#123;</span><br><span class="line">    if (comparator(array[i - 1], array[i]) &gt; 0) return false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var sorted = require(&apos;./index&apos;)</span><br><span class="line"></span><br><span class="line">console.log(sorted([1, 2, 3]))</span><br><span class="line">// =&gt; true</span><br><span class="line"></span><br><span class="line">console.log(sorted([3, 1, 2]))</span><br><span class="line">// =&gt; false</span><br><span class="line"></span><br><span class="line">// supports custom comparators</span><br><span class="line">console.log(sorted([3, 2, 1], function (a, b) &#123; return b - a &#125;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node每日精进 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>express三连(一)</title>
      <link href="/2018/04/27/NODE_002_02Express/"/>
      <url>/2018/04/27/NODE_002_02Express/</url>
      
        <content type="html"><![CDATA[<h3 id="Router用法"><a href="#Router用法" class="headerlink" title="Router用法"></a>Router用法</h3><p>simpleRouter.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const router = require(&apos;express&apos;).Router();</span><br><span class="line"></span><br><span class="line">router.get(&apos;/&apos;,(req,res)=&gt;&#123;</span><br><span class="line">    res.json(&#123;code:0,msg:&apos;welcome to simple root router&apos;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(&apos;/simple_demo&apos;,(req,res,next)=&gt;&#123;</span><br><span class="line">    res.end(`your simple_demo  here`)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>anotherRouter.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const router = require(&apos;express&apos;).Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.route(&apos;/&apos;)</span><br><span class="line">    .get((req,res)=&gt;&#123;</span><br><span class="line">        res.json(&#123;code:0,msg:&apos;welcome to another root router  get method&apos;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .post((req,res)=&gt;&#123;</span><br><span class="line">        res.json(&#123;code:0,msg:&apos;welcome to another root router post method&apos;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(&apos;/another_demo&apos;,(req,res,next)=&gt;&#123;</span><br><span class="line">    res.end(`your another_demo  here`)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p>server001.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">const simpleRouter = require(&apos;./simpleRouter&apos;)</span><br><span class="line">const anotherRouter = require(&apos;./anotherRouter&apos;)</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended:false&#125;))</span><br><span class="line"></span><br><span class="line">app.use(&apos;/simple/&apos;,simpleRouter);</span><br><span class="line">app.use(&apos;/another/&apos;,anotherRouter);</span><br><span class="line"></span><br><span class="line">app.use((err,req,res,next)=&gt;&#123;</span><br><span class="line">    res.status(401)</span><br><span class="line">    res.json(&#123;code:-1,msg:err.message&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(8001,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;port 8001 is listening!&apos;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用express生成器-类似vue-cli脚手架的工具"><a href="#使用express生成器-类似vue-cli脚手架的工具" class="headerlink" title="使用express生成器(类似vue-cli脚手架的工具)"></a>使用express生成器(类似vue-cli脚手架的工具)</h3><p>安装express模板生成器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-generator -g</span><br></pre></td></tr></table></figure><p>创建目录(你的项目目录)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir one_punch</span><br></pre></td></tr></table></figure><p>生成模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># --view==ejs 代表设置支持ejs语法的模板文件</span><br><span class="line">express --view=ejs one_punch</span><br></pre></td></tr></table></figure><p>切换项目目录，安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd one_punch</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>启动项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><blockquote><p>默认监听3000端口</p></blockquote><p>打开浏览器你会看到生成的express页面</p><ul><li>localhost:3000 </li><li>localhost:3000/users</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>express三连(一)</title>
      <link href="/2018/04/26/NODE_002_01Express/"/>
      <url>/2018/04/26/NODE_002_01Express/</url>
      
        <content type="html"><![CDATA[<h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><blockquote><p>基于 Node.js 平台，快速、开放、极简的 web 开发框架。</p></blockquote><p><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">express</a></p><h3 id="express-helloworld"><a href="#express-helloworld" class="headerlink" title="express helloworld"></a>express helloworld</h3><ol><li>初始化项目(请确保你安装了node)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir demo</span><br><span class="line">cd demo</span><br><span class="line"># 初始化 package.json 一路回车</span><br><span class="line">npm init   </span><br><span class="line"># 安装express 我的是4.16.3版本</span><br><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><ol start="2"><li>创建server.js</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;</span><br><span class="line">  res.send(&apos;hello world&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8001,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;port 8001 is listening!&apos;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>开启服务器  node server.js</p></li><li><p>浏览器访问 localhost:8001</p></li></ol><h3 id="参数信息"><a href="#参数信息" class="headerlink" title="参数信息"></a>参数信息</h3><blockquote><p>请求url为 <a href="http://localhost:8001/?name=22" target="_blank" rel="noopener">http://localhost:8001/?name=22</a> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;</span><br><span class="line">  //获取请求方式</span><br><span class="line">  console.log(req.method)</span><br><span class="line">  //请求参数为 k/v形式</span><br><span class="line">  console.log(JSON.stringify(req.query));</span><br><span class="line">  //根据url取参数 </span><br><span class="line">  console.log(req.query.name);</span><br><span class="line">  //返回数据</span><br><span class="line">  return res.json(&#123;code:0&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>restful风格的匹配参数</p></blockquote><p>restful风格 <a href="http://localhost:8001/aa/18/man" target="_blank" rel="noopener">http://localhost:8001/aa/18/man</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/:name/:age/:gender&apos;, function(req, res)&#123;</span><br><span class="line">  console.log(req.params.name);</span><br><span class="line">  console.log(req.params.age);</span><br><span class="line">  console.log(req.params.gender);</span><br><span class="line">  return res.json(&#123;code:0&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取请求头和设置响应头"><a href="#获取请求头和设置响应头" class="headerlink" title="获取请求头和设置响应头"></a>获取请求头和设置响应头</h3><ul><li>request.get()</li><li>response.set()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 获取请求头 和设置响应头</span><br><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;</span><br><span class="line">  console.log(req.get(&apos;Accept&apos;));</span><br><span class="line">  res.set(&apos;token&apos;,&apos;fdsalkjljjfadslkjfds&apos;)</span><br><span class="line">  return res.json(&#123;code:0&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="设置json格式的响应类型"><a href="#设置json格式的响应类型" class="headerlink" title="设置json格式的响应类型"></a>设置json格式的响应类型</h3><ul><li>res.json({code:0})</li><li>麻烦的方式 先设置Content-Type 在去调对象序列化字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 响应json格式</span><br><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;</span><br><span class="line">   return res.json(&#123;code:0&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 响应json格式</span><br><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;</span><br><span class="line">    res.set(&apos;Content-Type&apos;,&apos;application/json;charset=utf-8&apos;)</span><br><span class="line">    return res.send(JSON.stringify(&#123;code:0&#125;))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="设置状态码"><a href="#设置状态码" class="headerlink" title="设置状态码"></a>设置状态码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.status(404)</span><br></pre></td></tr></table></figure><h3 id="get-amp-amp-post"><a href="#get-amp-amp-post" class="headerlink" title="get &amp;&amp; post"></a>get &amp;&amp; post</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/&apos;, function(req, res)&#123;</span><br><span class="line">   return res.json(&#123;code:0&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(&apos;/&apos;, function(req, res)&#123;</span><br><span class="line">   return res.json(&#123;code:0&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="app-use"><a href="#app-use" class="headerlink" title="app.use()"></a>app.use()</h3><blockquote><p>可以直接包含 get、post 等的匹配就不用同一路径分开写了 app.get(‘/user’,[args…]) app.post(‘/user’,[args..])</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;,(req,res,next)=&gt;&#123;</span><br><span class="line">    res.json(&#123;msg:&quot;use&quot;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(8001,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;port 8001 is listening!&apos;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><blockquote><p>类似promise里的 .then().then().then() 的加工处理</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">// const Router = express.Router();</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;,mod1,mod2)</span><br><span class="line"></span><br><span class="line">function mod1(req,res,next)&#123;</span><br><span class="line">    console.log(&apos;进入 mod1 厂房&apos;)</span><br><span class="line">    return next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mod2(req,res,next)&#123;</span><br><span class="line">    console.log(&apos;进入 mod2 厂房&apos;)</span><br><span class="line">    res.json(&#123;msg:&apos;数据返回结束&apos;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(8001,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;port 8001 is listening!&apos;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>use使用中间件的方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/&apos;,mod1,mod2)</span><br><span class="line">app.use(&apos;/&apos;,[mod1,mod2])</span><br><span class="line">app.use(&apos;/&apos;,[mod1],mod2)</span><br></pre></td></tr></table></figure><blockquote><p>处理过程中通过req携带参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/&apos;,mod1,mod2)</span><br><span class="line"></span><br><span class="line">function mod1(req,res,next)&#123;</span><br><span class="line">    console.log(&apos;进入 mod1 厂房&apos;)</span><br><span class="line">    req.user = &#123;name:&quot;fsafsdfas&quot;&#125;;</span><br><span class="line">    return next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mod2(req,res,next)&#123;</span><br><span class="line">    console.log(&apos;进入 mod2 厂房&apos;)</span><br><span class="line">    console.log(JSON.stringify(req.user))</span><br><span class="line">    res.json(&#123;msg:&apos;数据返回结束&apos;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="next-控制流程"><a href="#next-控制流程" class="headerlink" title="next() 控制流程"></a>next() 控制流程</h4><ul><li>不传递参数就会进入下一个中间件</li><li>传递Error对象 就会走进错误的处理分支</li><li>传递字符串 也会进入错误的处理分支 但是获取不到错误信息</li><li>传递字符串除非你是’route’ 否则都会进入错误分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">next()</span><br><span class="line">next(new Error(&apos;fdsfdsa&apos;))</span><br><span class="line">next(&apos;fdsafsa&apos;)</span><br><span class="line">next(&apos;route&apos;)</span><br></pre></td></tr></table></figure><h4 id="中间件的兜底处理"><a href="#中间件的兜底处理" class="headerlink" title="中间件的兜底处理"></a>中间件的兜底处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;,mod1,mod2)</span><br><span class="line"></span><br><span class="line">function mod1(req,res,next)&#123;</span><br><span class="line">    console.log(&apos;进入 mod1 厂房&apos;)</span><br><span class="line">    return next(new Error(&apos;少了一个零件，请求召回&apos;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mod2(req,res,next)&#123;</span><br><span class="line">    console.log(&apos;进入 mod2 厂房&apos;)</span><br><span class="line">    res.json(&#123;msg:&apos;数据返回结束&apos;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//兜底处理</span><br><span class="line">app.use((err,req,res,next)=&gt;&#123;</span><br><span class="line">    res.status(401)</span><br><span class="line">    res.json(&#123;code:-1,msg:err.message&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(8001,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;port 8001 is listening!&apos;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="处理请求体-body-parser"><a href="#处理请求体-body-parser" class="headerlink" title="处理请求体 body-parser"></a>处理请求体 body-parser</h3><blockquote><p>安装 body-parser</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended:false&#125;))</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;,mod1,mod2)</span><br><span class="line"></span><br><span class="line">function mod1(req,res,next)&#123;</span><br><span class="line">    //打印解析后的请求体</span><br><span class="line">    console.log(req.body)</span><br><span class="line">    console.log(&apos;进入 mod1 厂房&apos;)</span><br><span class="line">    return next()</span><br><span class="line">    // return next(new Error(&apos;少了一个零件，请求召回&apos;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mod2(req,res,next)&#123;</span><br><span class="line">    console.log(&apos;进入 mod2 厂房&apos;)</span><br><span class="line">    res.json(&#123;msg:&apos;数据返回结束&apos;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use((err,req,res,next)=&gt;&#123;</span><br><span class="line">    res.status(401)</span><br><span class="line">    res.json(&#123;code:-1,msg:err.message&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(8001,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;port 8001 is listening!&apos;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小型node服务器</title>
      <link href="/2018/04/26/NODE_001_01%E5%B0%8F%E5%9E%8Bnode%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/04/26/NODE_001_01%E5%B0%8F%E5%9E%8Bnode%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="node增删改查"><a href="#node增删改查" class="headerlink" title="node增删改查"></a>node增删改查</h3><h4 id="localhost-8200-user-获取所有用户-GET"><a href="#localhost-8200-user-获取所有用户-GET" class="headerlink" title="localhost:8200/user 获取所有用户(GET)"></a>localhost:8200/user 获取所有用户(GET)</h4><h4 id="localhost-8200-user-创建一个用户-POST"><a href="#localhost-8200-user-创建一个用户-POST" class="headerlink" title="localhost:8200/user 创建一个用户(POST)"></a>localhost:8200/user 创建一个用户(POST)</h4><h4 id="localhost-8200-user-aaa-修改一个用户-PATHC"><a href="#localhost-8200-user-aaa-修改一个用户-PATHC" class="headerlink" title="localhost:8200/user/aaa 修改一个用户(PATHC)"></a>localhost:8200/user/aaa 修改一个用户(PATHC)</h4><h4 id="localhost-8200-user-bbb-删除一个用户-DELETE"><a href="#localhost-8200-user-bbb-删除一个用户-DELETE" class="headerlink" title="localhost:8200/user/bbb 删除一个用户(DELETE)"></a>localhost:8200/user/bbb 删除一个用户(DELETE)</h4><blockquote><p>Content-Type:application/json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;aaa&quot;,&quot;age&quot;:118&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">const server = http.createServer();</span><br><span class="line">const url = require(&apos;url&apos;)</span><br><span class="line"></span><br><span class="line">let users = [</span><br><span class="line">    &#123;name:&quot;aaa&quot;,age:18&#125;,</span><br><span class="line">    &#123;name:&quot;bbb&quot;,age:34&#125;,</span><br><span class="line">    &#123;name:&quot;ccc&quot;,age:22&#125;,</span><br><span class="line">    &#123;name:&quot;ddd&quot;,age:13&#125;,</span><br><span class="line">    &#123;name:&quot;eee&quot;,age:19&#125;,</span><br><span class="line">    &#123;name:&quot;fff&quot;,age:28&#125;</span><br><span class="line">];</span><br><span class="line">server.on(&apos;request&apos;,(req,res)=&gt;&#123;</span><br><span class="line">    console.log(&apos;请求方式==&gt;&apos;+req.method)</span><br><span class="line">    console.log(&apos;请求的路径==&gt;&apos;+req.url)</span><br><span class="line"></span><br><span class="line">    //获取请求的路径</span><br><span class="line">    const parseUrl = url.parse(req.url)</span><br><span class="line"></span><br><span class="line">    if(parseUrl.path.indexOf(&apos;/user&apos;)===-1)&#123;</span><br><span class="line">        res.statusCode = 403;</span><br><span class="line">        res.end(`$&#123;res.statusCode&#125; not allowed!`)</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(req.method)</span><br><span class="line">    switch(req.method)&#123;</span><br><span class="line">        case &apos;GET&apos;:</span><br><span class="line">            console.log(&apos;get users&apos;)</span><br><span class="line">            res.statusCode = 200;</span><br><span class="line">            res.end(JSON.stringify(users))</span><br><span class="line">            break;</span><br><span class="line">        case &apos;POST&apos;:</span><br><span class="line">            console.log(&apos;create user&apos;)</span><br><span class="line">            let user = &apos;&apos;;</span><br><span class="line">            req.on(&apos;data&apos;,(buffer)=&gt;&#123;</span><br><span class="line">                const userStr = buffer.toString();</span><br><span class="line">                let CT = req.headers[&apos;content-type&apos;];</span><br><span class="line">                if(CT === &apos;application/json&apos;)&#123;</span><br><span class="line">                    user = JSON.parse(userStr);</span><br><span class="line">                    users.push(user);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            req.on(&apos;end&apos;,()=&gt;&#123;</span><br><span class="line">                res.statusCode = 201;</span><br><span class="line">                res.end(&apos;user has created!&apos;)</span><br><span class="line">            &#125;)</span><br><span class="line">            break;</span><br><span class="line">        case &apos;PATCH&apos;:</span><br><span class="line">            console.log(&apos;update users&apos;)</span><br><span class="line">            //   /user/aaa</span><br><span class="line">            let userName = parseUrl.path.substring(6)</span><br><span class="line">            console.log(userName)</span><br><span class="line">            req.on(&apos;data&apos;,(buffer)=&gt;&#123;</span><br><span class="line">                const userStr = buffer.toString();</span><br><span class="line">                let CT = req.headers[&apos;content-type&apos;];</span><br><span class="line">                if(CT === &apos;application/json&apos;)&#123;</span><br><span class="line">                    let update = JSON.parse(userStr)</span><br><span class="line">                    let user = users.find(u=&gt;u.name === userName)</span><br><span class="line">                    user.age = update.age;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            req.on(&apos;end&apos;,()=&gt;&#123;</span><br><span class="line">                res.statusCode = 201;</span><br><span class="line">                res.end(&apos;user has updated!&apos;)</span><br><span class="line">            &#125;)</span><br><span class="line">            break;</span><br><span class="line">        case &apos;DELETE&apos;:</span><br><span class="line">            console.log(&apos;DELETE user&apos;)</span><br><span class="line">            if(parseUrl.path.indexOf(&apos;/user/&apos;)&gt;-1)&#123;</span><br><span class="line">                let userName = parseUrl.path.substring(6)</span><br><span class="line">                let index = users.findIndex(u=&gt;u.name === userName);</span><br><span class="line">                users.splice(index,1);</span><br><span class="line">                res.statusCode = 200;</span><br><span class="line">                res.end(JSON.stringify(users))</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(8200)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node从零开始之HTTP</title>
      <link href="/2018/04/24/NODE_001_HTTP/"/>
      <url>/2018/04/24/NODE_001_HTTP/</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP-HyperText-Transfer-Protocol-超文本传输协议"><a href="#HTTP-HyperText-Transfer-Protocol-超文本传输协议" class="headerlink" title="HTTP(HyperText Transfer Protocol) 超文本传输协议"></a>HTTP(HyperText Transfer Protocol) 超文本传输协议</h3><p><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">维基百科中文</a></p><h3 id="HTTP格式"><a href="#HTTP格式" class="headerlink" title="HTTP格式"></a>HTTP格式</h3><p>文本</p><h3 id="HTTP的组成部分"><a href="#HTTP的组成部分" class="headerlink" title="HTTP的组成部分"></a>HTTP的组成部分</h3><blockquote><p>详情请看我写的 HTTP入门文章</p></blockquote><ol><li>动词 路径 协议/版本   第一部分路径随便写 一定要以”/“开头</li><li>第二部分 键值对<ul><li>Key1: value1     </li><li>Key2: value2</li><li>Key3: value3</li><li>Content-Type: application/x-www-form-urlencoded</li><li>Host: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>User-Agent: curl/7.54.0</li></ul></li><li>回车     就一个目的区分 第二部分和第四部分 </li><li>要上传的数据</li></ol><h3 id="推荐使用的测试工具-postman"><a href="#推荐使用的测试工具-postman" class="headerlink" title="推荐使用的测试工具 postman"></a>推荐使用的测试工具 postman</h3><blockquote><p>方便调试http请求的工具</p></blockquote><p><a href="https://www.getpostman.com/" target="_blank" rel="noopener">download</a></p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/node/node_001_01.png" alt="postman"></p><ul><li>get 获取数据</li><li>post 新增数据</li><li>patch 更新资源</li><li>delete 删除数据</li><li>head 不用实际请求资源的时候,获取文件的相关信息(大小/长度/权限)<blockquote><p>对一个资源发一个head请求就会返回它的头文件(里面包含CDN 上的资源/图片/视频的相关信息)</p></blockquote></li><li>options 向服务器询问我能通过那些方法去操作这个资源(区分管理员/游客信息)</li></ul><blockquote><p>具体风格请去看 restful 相关的约定</p></blockquote><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">维基百科HTTP状态码</a></p><ul><li>200 OK 响应成功啦</li><li>201 Created 创建资源的时候做一个返回</li><li>202 服务器已接受但是没有处理(最终请求可能会也可能不会被执行)</li><li>206 断点续传。下载时（文件比较大100MB）先返回10M 你下载好后下次再从10M的节点去要后面的10M</li><li>302 Found 重定向(资源被放到了其他地方)</li><li>304 Not modified 表示资源未修改返回上一次请求的内容(但是仍然触发了请求)</li><li>400 参数不对 返回请求失败的一些原因</li><li>401 服务器向客户端询问权限的一个响应头</li><li>403 服务器已经收到，但是拒绝执行。 通常告诉用户权限不够</li><li>404 未找到页面</li><li>500 </li><li>502 网关错误</li><li>504 超时</li></ul><h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><ul><li>图解HTTP(简单)推荐这本</li><li>HTTP权威指南(工具书)</li></ul><h3 id="node-模块化"><a href="#node-模块化" class="headerlink" title="node 模块化"></a>node 模块化</h3><blockquote><p>最简单的模块点定义</p></blockquote><p>module_a.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function haha()&#123;console.log(1)&#125;</span><br><span class="line"></span><br><span class="line">exports.haha = haha;</span><br></pre></td></tr></table></figure><p>main.js 使用module_a.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var mod = require(&apos;./module_a&apos;)</span><br><span class="line">mod.haha()</span><br></pre></td></tr></table></figure><ul><li>系统模块用绝对路径如 requier(‘http’)</li><li>自有模块要用相对路径 requier(‘./module_a’)  </li></ul><blockquote><p>同一模块导出多个变量或方法</p></blockquote><p>module_a.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function haha()&#123;console.log(1)&#125;</span><br><span class="line"></span><br><span class="line">function lala()&#123;console.log(2)&#125;</span><br></pre></td></tr></table></figure><blockquote><p>每个都指定一下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module.exports.haha = haha;</span><br><span class="line">module.exports.lala = lala;</span><br></pre></td></tr></table></figure><blockquote><p>多个导出</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    haha,</span><br><span class="line">    lala</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="node-之字里行间创建一个服务器"><a href="#node-之字里行间创建一个服务器" class="headerlink" title="node 之字里行间创建一个服务器"></a>node 之字里行间创建一个服务器</h3><p>node可以很简短的几句话就可以创建一个服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">let server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(&apos;request&apos;,(request,response)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(8200)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>继承</title>
      <link href="/2018/04/20/N062_01_%E7%BB%A7%E6%89%BF/"/>
      <url>/2018/04/20/N062_01_%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="编程语言的佛魔道"><a href="#编程语言的佛魔道" class="headerlink" title="编程语言的佛魔道"></a>编程语言的佛魔道</h3><blockquote><p>流派</p></blockquote><p>面向对象</p><ul><li>总所周知的Java 一切皆对象（一不自觉我就想到think in java里的特别形象的灯泡图，真的是秒懂什么是方法什么是类）</li><li>什么是类（同一事物的抽象描述）</li><li>对象（实例）</li><li>封装</li><li>继承</li><li>多态</li><li>反射</li></ul><p>函数式</p><ul><li>JavaScript</li><li>算子</li><li>lamda</li><li>柯里化</li><li>高阶函数</li><li>纯函数</li></ul><blockquote><p>所以这就好比佛教和道教，每个流派都有自己的信仰。所以说编程语言上升到宗教层面还是挺可怕的</p></blockquote><blockquote><p>如果说上面不好理解，可以说说军队，武警和解放军虽然都是国防力量，但是性质不一样，一个对内(处突维稳，抢险救灾)一个对外(抵抗外敌)</p></blockquote><p>所以说不能拿java特有的东西去看待js</p><h3 id="JS之假继承"><a href="#JS之假继承" class="headerlink" title="JS之假继承"></a>JS之假继承</h3><blockquote><p>ES6新特性class出来之前 JS是没有继承的(都是模拟的)</p></blockquote><p>JS有原型「prototype」共有属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = new Object()</span><br><span class="line">// a可以调用toString()</span><br><span class="line">a.toString() </span><br><span class="line"></span><br><span class="line">//我们知道 a.__proto__ = Object.prototype</span><br><span class="line">Object.prototype 上有toString()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note062_01.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Object是所有对象的基类</span><br><span class="line"></span><br><span class="line">var a = new Array()</span><br><span class="line">a.valueOf()  //a自己没有valueOf()</span><br><span class="line"></span><br><span class="line">//Array的原型没有valueOf()</span><br><span class="line">Array.__proto__ = Array.prototype</span><br><span class="line">//Object的原型有valueOf() 二次的原型查找</span><br><span class="line">Array.__proto__.__proto__ = Object.prototype</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note062_02.png" alt=""></p><blockquote><h4 id="JS是没有类的概念的，只有原型"><a href="#JS是没有类的概念的，只有原型" class="headerlink" title="JS是没有类的概念的，只有原型"></a>JS是没有类的概念的，只有原型</h4></blockquote><blockquote><p>但是面试官认为是有的。。。(因为人都会拿相似的东西去推测没接深入触过的东西)</p></blockquote><h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3><blockquote><p>能产生对象的东西就是「类」</p></blockquote><ol><li>非常纯粹的人类对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Human()&#123;&#125;</span><br><span class="line">var person = new Human()</span><br><span class="line">// person就是一个对象了</span><br></pre></td></tr></table></figure><ol start="2"><li>人类应该有个名字</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Human(name)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line">var person = new Human(&apos;aa&apos;)</span><br><span class="line">person.name // aa</span><br></pre></td></tr></table></figure><ol start="3"><li>人类应该有些技能比如 跑</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Human(name)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line">Human.prototype.run = function()&#123; </span><br><span class="line">    console.log(&apos;run&apos;)</span><br><span class="line">&#125;</span><br><span class="line">var person = new Human(&apos;aa&apos;)</span><br><span class="line">person.name // aa</span><br><span class="line">person.run() // run</span><br></pre></td></tr></table></figure><ol start="4"><li>人类还有子类 比如  男人</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 男人类 他有一个属性就是性别</span><br><span class="line">function Man(name)&#123;</span><br><span class="line">    this.gender = &apos;男&apos;</span><br><span class="line">&#125;</span><br><span class="line">// 男人天生会打架</span><br><span class="line">Man.prototype.fight = function()&#123;</span><br><span class="line">    console.log(&apos;糊你熊脸&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>我们希望 Man 应该有个名字</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//人类</span><br><span class="line">function Human(name)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line">// 男人类 他有一个属性就是性别</span><br><span class="line">function Man(name)&#123;</span><br><span class="line">    Human.call(this,name)</span><br><span class="line">    this.gender = &apos;男&apos;</span><br><span class="line">&#125;</span><br><span class="line">// 男人天生会打架</span><br><span class="line">Man.prototype.fight = function()&#123;</span><br><span class="line">    console.log(&apos;糊你熊脸&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>我们希望 Man 会跑</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//人类</span><br><span class="line">function Human(name)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line">Human.prototype.run = function()&#123; </span><br><span class="line">    console.log(&apos;run&apos;)</span><br><span class="line">&#125;</span><br><span class="line">// 男人类 他有一个属性就是性别</span><br><span class="line">function Man(name)&#123;</span><br><span class="line">    Human.call(this,name)</span><br><span class="line">    this.gender = &apos;男&apos;</span><br><span class="line">&#125;</span><br><span class="line">// 男人天生会打架</span><br><span class="line">Man.prototype.fight = function()&#123;</span><br><span class="line">    console.log(&apos;糊你熊脸&apos;)</span><br><span class="line">&#125;</span><br><span class="line">Man.prototype.__proto__ = Human.prototype;</span><br><span class="line"></span><br><span class="line">//然后你声明一个 m1</span><br><span class="line">var m1 = new Man(&apos;m1&apos;)</span><br><span class="line">m1.__proto__ = Man.prototype</span><br><span class="line">m1.__proto__.__proto__ = Human.prototype</span><br><span class="line">m1.__proto__.__proto__.__proto__ = Object.prototype</span><br></pre></td></tr></table></figure><blockquote><p>以上就是一个ES5完整的继承</p></blockquote><p>核心只有两句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Human.call(this,name)</span><br><span class="line">Man.prototype.__proto__ = Human.prototype;</span><br></pre></td></tr></table></figure><h3 id="但是IE里不允许你操作「下划线proto下划线」"><a href="#但是IE里不允许你操作「下划线proto下划线」" class="headerlink" title="但是IE里不允许你操作「下划线proto下划线」"></a>但是IE里不允许你操作「下划线proto下划线」</h3><p>我们可以像这样来模拟继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Man.prototype = new Human()</span><br></pre></td></tr></table></figure><p>虽然 new Human()产生的对象的 </p><blockquote><p>但是这样 new Human( )会产生一个对象 假设为temp</p></blockquote><blockquote><p>temp会自带一个name属性 这个是我们不想要的</p></blockquote><blockquote><p>我们只想要Human的原型上的东西</p></blockquote><p>于是我们用这三句代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//step1声明一个空函数，里面什么属性也没有</span><br><span class="line">var f = function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">//step2 让空函数「f」原型 = Human.prototype</span><br><span class="line">f.prototype = Human.prototype</span><br><span class="line"></span><br><span class="line">//step3 生成一个「f」对象因为它是个空函数</span><br><span class="line">Man.prototype = new f()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function Human(name)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line">Human.prototype.run = function()&#123;</span><br><span class="line">    console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class="line">    return undefined</span><br><span class="line">&#125;</span><br><span class="line">function Man(name)&#123;</span><br><span class="line">    Human.call(this, name)</span><br><span class="line">    this.gender = &apos;男&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var f = function()&#123;&#125;</span><br><span class="line">f.prototype = Human.prototype</span><br><span class="line">Man.prototype = new f()</span><br><span class="line"></span><br><span class="line">Man.prototype.fight = function()&#123;</span><br><span class="line">console.log(&apos;糊你熊脸&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6诞生了"><a href="#ES6诞生了" class="headerlink" title="ES6诞生了"></a>ES6诞生了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Human&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    run()&#123;</span><br><span class="line">        console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class="line">        return undefined</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Man extends Human&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        super(name)</span><br><span class="line">        this.gender = &apos;男&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    fight()&#123;</span><br><span class="line">        console.log(&apos;糊你熊脸&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>extends就是为了连接原型链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Man extends Human 就是为了实现</span><br><span class="line">Man.prototype.__proto__ = Human.prototype</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(name) 就是Human.call(this,name)</span><br></pre></td></tr></table></figure><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><blockquote><p>ES5方式的继承印证了，我对JS内存的理解</p></blockquote><blockquote><p>ES6方式你可以自行去浏览器里打印，你会发现它还是用的prototype实现继承的</p></blockquote><blockquote><h4 id="也就是说ES6的继承会翻译成ES5的写法，如果你是Js程序员应该用ES5的写法，ES6是方便java程序员的写法。"><a href="#也就是说ES6的继承会翻译成ES5的写法，如果你是Js程序员应该用ES5的写法，ES6是方便java程序员的写法。" class="headerlink" title="也就是说ES6的继承会翻译成ES5的写法，如果你是Js程序员应该用ES5的写法，ES6是方便java程序员的写法。"></a>也就是说ES6的继承会翻译成ES5的写法，如果你是Js程序员应该用ES5的写法，ES6是方便java程序员的写法。</h4></blockquote><h4 id="如果你想给-Human-的原型添加一个种族是-人类"><a href="#如果你想给-Human-的原型添加一个种族是-人类" class="headerlink" title="如果你想给 Human 的原型添加一个种族是 人类"></a>如果你想给 Human 的原型添加一个种族是 人类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// ES5</span><br><span class="line">Human.prototype.s = &apos;人类&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ES6 对不起,不支持,有一种变通的写法</span><br><span class="line"></span><br><span class="line">class Human&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    //麻烦不？？？？</span><br><span class="line">    //麻烦不？？？？</span><br><span class="line">    //麻烦不？？？？</span><br><span class="line">    get s()&#123;</span><br><span class="line">        return &apos;人类&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run()&#123;</span><br><span class="line">        console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class="line">        return undefined</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ES5写法证明你是JS程序员</p></blockquote><blockquote><p>ES6写法证明你是Java程序员</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>axios设置token</title>
      <link href="/2018/04/20/Vue_220_axios%E8%AE%BE%E7%BD%AEtoken/"/>
      <url>/2018/04/20/Vue_220_axios%E8%AE%BE%E7%BD%AEtoken/</url>
      
        <content type="html"><![CDATA[<h4 id="axios之后台死活接不到的token参数"><a href="#axios之后台死活接不到的token参数" class="headerlink" title="axios之后台死活接不到的token参数"></a>axios之后台死活接不到的token参数</h4><p><a href="https://zhuanlan.zhihu.com/p/27594936" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27594936</a></p><blockquote><p>近期在给公司做硬件后台于是就搭了一个vue-cli项目</p></blockquote><ul><li>从单vue文件路由</li><li>从路由到路由守卫(跳转前鉴权)</li><li>从路由守卫到菜单鉴权</li><li>引入iview组件到封装基于  iview(表格、分页、加筛选、前端排序)</li><li>使用mixin混入对象</li><li>其中也踩了很多坑</li></ul><blockquote><p>今天就说一个就是axios设置 headers</p></blockquote><p>这个问题问了好多人好多群、大致的结果就是你设置就行了  然后后台直接取</p><h5 id="问题1-登录发了两次请求"><a href="#问题1-登录发了两次请求" class="headerlink" title="问题1 登录发了两次请求"></a>问题1 登录发了两次请求</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</span><br><span class="line">Vue.prototype.$http= axios;</span><br><span class="line"></span><br><span class="line">//在你登录的时候后台返回登录信息设置全局token请求头</span><br><span class="line">let params = new URLSearchParams();</span><br><span class="line">                        </span><br><span class="line">params.append(&apos;userAcnt&apos;,this.formSignIn.user);</span><br><span class="line">params.append(&apos;nowPwd&apos;, this.formSignIn.password);</span><br><span class="line">params.append(&apos;signInAvoid&apos;,0);</span><br><span class="line">this.$http.post(ApiLink.URL_LOGIN,params).then((res)=&gt;&#123;</span><br><span class="line">    //登录逻辑</span><br><span class="line">    //获取token 从res里获取  我就不多说了</span><br><span class="line">    this.$http.defaults.headers.token = token;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如图</p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/vuenote_220_01.png" alt="step"></p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/vuenote_220_02.png" alt="step"></p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/vuenote_220_03.png" alt="step"></p><ol><li>简单来说就是后台以为 「OPTIONS」就是你实际的请求了</li><li>然后想方设法的去取 「Access-Control-Request-Headers: token 」里的内容，断点的去看请求发现 token 一直是字符串的 ‘token’ (键名)</li><li>实际上第二次的请求才是实际的请求</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>难以启齿的正则</title>
      <link href="/2018/04/18/REG_001_1_%E9%9A%BE%E4%BB%A5%E5%90%AF%E9%BD%BF%E7%9A%84%E6%AD%A3%E5%88%99/"/>
      <url>/2018/04/18/REG_001_1_%E9%9A%BE%E4%BB%A5%E5%90%AF%E9%BD%BF%E7%9A%84%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h3 id="JS正则表达式"><a href="#JS正则表达式" class="headerlink" title="JS正则表达式"></a>JS正则表达式</h3><blockquote><p>既然是正则那就先从字符串操作开始</p></blockquote><h4 id="search-‘xxx’"><a href="#search-‘xxx’" class="headerlink" title="search(‘xxx’)"></a>search(‘xxx’)</h4><ul><li>字符串操作返回查找字符串的位置 </li><li>没找到返回 -1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;abcdef&apos;;</span><br><span class="line"></span><br><span class="line">console.log(str.search(&apos;a&apos;))  // 0</span><br><span class="line">console.log(str.search(&apos;b&apos;))  // 1</span><br><span class="line">console.log(str.search(&apos;c&apos;))  // 2</span><br><span class="line">console.log(str.search(&apos;d&apos;))  // 3</span><br><span class="line">console.log(str.search(&apos;e&apos;))  // 4</span><br><span class="line"></span><br><span class="line">console.log(str.search(&apos;x&apos;))  //  -1</span><br></pre></td></tr></table></figure><h4 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h4><blockquote><p>口诀「包头不包尾」(左闭右开)</p></blockquote><p>获取子字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;abcdef&apos;;</span><br><span class="line">console.log(str.substring(2,5))  //cde</span><br><span class="line">console.log(str.substring(1))    // bcdef</span><br><span class="line">console.log(str.substring(6))  // &apos;&apos;空字符</span><br><span class="line">console.log(str.substing(-1))  //abcdef</span><br></pre></td></tr></table></figure><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>获取某个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;abcdef&apos;;</span><br><span class="line">console.log(str.charAt(3))  //d</span><br></pre></td></tr></table></figure><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>分割字符串，获取数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;13-14-aaa-xxx&apos;;</span><br><span class="line">var arr = str.split(&apos;-&apos;);</span><br><span class="line">console.log(arr)  // [13,14,&apos;aaa&apos;,&apos;xxx&apos;]</span><br></pre></td></tr></table></figure><h4 id="为什么要学正则"><a href="#为什么要学正则" class="headerlink" title="为什么要学正则"></a>为什么要学正则</h4><blockquote><p>需求查找字符串里的数字</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;12 fff 87 er334 233 -=-=fa80&apos;;</span><br><span class="line">var arr = [];</span><br><span class="line">var tmp = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">for(var i=0;i&lt;str.length;i++)&#123;</span><br><span class="line">    if(str.charAt(i) &gt;= &apos;0&apos; &amp;&amp; str.charAt(i) &lt;= &apos;9&apos;)&#123;</span><br><span class="line">        tmp+=str.charAt(i);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if(tmp)&#123;</span><br><span class="line">            arr.push(tmp);</span><br><span class="line">            tmp = &apos;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr)  //[&apos;12&apos;,&apos;87&apos;,&apos;334&apos;,&apos;80&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>if 正则</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;12 fff 87 er334 233 -=-=fa80&apos;;</span><br><span class="line">var arr = [];</span><br><span class="line"></span><br><span class="line">arr = str.match(/\d+/g)</span><br><span class="line"></span><br><span class="line">console.log(arr) //[&apos;12&apos;,&apos;87&apos;,&apos;334&apos;,&apos;80&apos;]</span><br></pre></td></tr></table></figure><h4 id="什么是正则"><a href="#什么是正则" class="headerlink" title="什么是正则"></a>什么是正则</h4><blockquote><p>一串英文、数字  @ - 一串英文、各种文 「计算机」是看不懂的</p></blockquote><blockquote><p>计算机只懂 0/1  、逻辑、程序 —-&gt;规则、模式</p></blockquote><ul><li>强大的字符串匹配工具</li><li>一种正常人类很难懂得文字</li><li>RegExp对象</li></ul><h4 id="正则就是干"><a href="#正则就是干" class="headerlink" title="正则就是干"></a>正则就是干</h4><ul><li>两种风格迥异的使用方式</li></ul><h5 id="需求1-看第一个例子查找字母-‘a’"><a href="#需求1-看第一个例子查找字母-‘a’" class="headerlink" title="需求1 看第一个例子查找字母 ‘a’"></a>需求1 看第一个例子查找字母 ‘a’</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// js风格</span><br><span class="line">var reg = new RegExp(&apos;a&apos;);</span><br><span class="line">var str = &apos;abcdef&apos;;</span><br><span class="line"></span><br><span class="line">console.log(str.search(reg));  // 0</span><br></pre></td></tr></table></figure><p>另一种风格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// perl风格</span><br><span class="line">var reg = /a/;</span><br><span class="line">var str = &apos;abcdef&apos;;</span><br><span class="line">console.log(str.search(reg));  // 0</span><br></pre></td></tr></table></figure><h5 id="需求2-查找忽略大小写的字母-‘b’"><a href="#需求2-查找忽略大小写的字母-‘b’" class="headerlink" title="需求2 查找忽略大小写的字母  ‘b’"></a>需求2 查找忽略大小写的字母  ‘b’</h5><h5 id="忽略大小写之「i」-ignore"><a href="#忽略大小写之「i」-ignore" class="headerlink" title="忽略大小写之「i」(ignore)"></a>忽略大小写之「i」(ignore)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// js风格</span><br><span class="line">var reg = new RegExp(&apos;b&apos;,&apos;i&apos;);</span><br><span class="line">var str = &apos;aBcdef&apos;;</span><br><span class="line"></span><br><span class="line">console.log(str.search(reg));  // 0</span><br></pre></td></tr></table></figure><p>另一种风格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// perl风格</span><br><span class="line">var reg = /a/i;</span><br><span class="line">var str = &apos;Abcdef&apos;;</span><br><span class="line">console.log(str.search(reg));  // 0</span><br></pre></td></tr></table></figure><h5 id="search-和-match-的区别"><a href="#search-和-match-的区别" class="headerlink" title="search 和 match 的区别"></a>search 和 match 的区别</h5><blockquote><p>search是查找匹配规则的字符(只找一次，找到匹配规则的第一个索引返回)</p></blockquote><blockquote><p>match 是返回所有匹配规则的东西都取出来</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\d/;</span><br><span class="line">var str = &apos;asdf 34  657 cs33&apos;;</span><br><span class="line">console.log(str.search(reg))  //5</span><br><span class="line">alert(str.match(reg)) // 3</span><br><span class="line">console.log(str.match(reg)) // [&quot;3&quot;, index: 5, input: &quot;asdf 34  657 cs33&quot;, groups: undefined]</span><br></pre></td></tr></table></figure><blockquote><p>match返回3是因为 计算机很蠢，你只告诉它找数字，没告诉它找几个</p></blockquote><blockquote><p>但是，正则天生懒惰想变勤奋你得加「g」</p></blockquote><h5 id="「g」global"><a href="#「g」global" class="headerlink" title="「g」global"></a>「g」global</h5><p>那你就给我勤奋一点！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\d/g;</span><br><span class="line">var str = &apos;asdf 34  657 cs33&apos;;</span><br><span class="line">console.log(str.match(reg))  // [&quot;3&quot;, &quot;4&quot;, &quot;6&quot;, &quot;5&quot;, &quot;7&quot;, &quot;3&quot;, &quot;3&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>怎么出来的都是个位的数字?</p></blockquote><blockquote><p>因为你只告诉计算机取一个数字</p></blockquote><h5 id="量词-个数"><a href="#量词-个数" class="headerlink" title="量词(个数)"></a>量词(个数)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\d+/g;</span><br><span class="line">var str = &apos;asdf 34  657 cs33&apos;;</span><br><span class="line">console.log(str.match(reg)) // [&quot;34&quot;, &quot;657&quot;, &quot;33&quot;]</span><br></pre></td></tr></table></figure><h5 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h5><blockquote><p>把’a’替换成 0</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//仅第一个a被替换了  </span><br><span class="line">var str = &apos;abc aaa erv&apos;;</span><br><span class="line">console.log(str.replace(&apos;a&apos;,&apos;0&apos;))  // 0bc aaa erv</span><br></pre></td></tr></table></figure><ul><li>replace 配合 字符串去替换字符是非常弱爆的</li><li>replace只有配合正则才能发挥真正的作用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;abc aaa erv&apos;;</span><br><span class="line"></span><br><span class="line">var reg = /a/;</span><br><span class="line">console.log(str.replace(reg,&apos;0&apos;)) // 0bc aaa erv</span><br></pre></td></tr></table></figure><blockquote><p>但是正则有全局匹配啊</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var reg2 = /a/g;</span><br><span class="line">console.log(str.replace(reg2,&apos;0&apos;)) // 0bc 000 erv</span><br></pre></td></tr></table></figure><h5 id="replace之敏感词过滤"><a href="#replace之敏感词过滤" class="headerlink" title="replace之敏感词过滤"></a>replace之敏感词过滤</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg = /零售|中国|淘宝/g;</span><br><span class="line">var str = &apos;淘宝网是亚太地区较大的网络零售、商圈，由阿里巴巴集团在2003年5月创立。淘宝网 [1]  是中国深受欢迎的网购零售平台，拥有近5亿的注册用户数，每天有超过6000万的固定访客，同时每天的在线商品数已经超过了8亿件，平均每分钟售出4.8万件商品&apos;;</span><br><span class="line"></span><br><span class="line">console.log(str.replace(reg,&apos;**&apos;))</span><br></pre></td></tr></table></figure><h4 id="元字符-方括号"><a href="#元字符-方括号" class="headerlink" title="元字符(方括号)"></a>元字符(方括号)</h4><blockquote><p>需求匹配 以a或b或c开头+ ‘pc’结尾的字符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[abc]pc</span><br><span class="line">apc bpc cpc √</span><br><span class="line">dpc epc fpc ×</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;apc xpc ppc bpc spc tpc&apos;;</span><br><span class="line">var reg = /[abc]pc/g;</span><br><span class="line">console.log(str.match(reg)) // [&quot;apc&quot;, &quot;bpc&quot;]</span><br></pre></td></tr></table></figure><h4 id="元字符之范围"><a href="#元字符之范围" class="headerlink" title="元字符之范围"></a>元字符之范围</h4><ul><li>任意字符 [abc]</li><li>范围 [a-z] [0-9]</li><li>排除 [^a]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[a-z]   a到z的字母</span><br><span class="line">[0-9]   相当于 \d 匹配数字</span><br><span class="line">[^a-z]  除了a到z的字母</span><br><span class="line">[^a-z0-9] 除了a到z的字母和数字</span><br></pre></td></tr></table></figure><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.  点----任意字符</span><br><span class="line">\d  数字0-9         [0-9]</span><br><span class="line">\w  英文数字下划线   [a-z0-9_]</span><br><span class="line">\s  空白字符</span><br><span class="line">\D  非0-9            [^0-9]</span><br><span class="line">\W  非字母数字下划线  [^a-z0-9_]</span><br><span class="line">\S  非空白字符</span><br></pre></td></tr></table></figure><h4 id="偷小说之替换html标签"><a href="#偷小说之替换html标签" class="headerlink" title="偷小说之替换html标签"></a>偷小说之替换html标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var str = `&lt;p id=&quot;p1&quot;&gt;fdsadfdssafas&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;p2&quot;&gt;aaaaaaaaaaaa&lt;/p&gt;</span><br><span class="line">&lt;p disabled&gt;bbbbbbbbbbb&lt;/p&gt;</span><br><span class="line">&lt;span&gt;ccccccccccc&lt;/span&gt;</span><br><span class="line">&lt;div&gt;dddddddddddd&lt;/div&gt;</span><br><span class="line">&lt;p&gt;eeeeeeeeeeeee&lt;/p&gt;`;</span><br><span class="line"></span><br><span class="line">//你肯定想到的是 </span><br><span class="line">var reg = /&lt;.+&gt;/g;  // 这样会把遇到的第一个 &quot;&lt;&quot;一直匹配到最后一个&quot;&gt;&quot;</span><br><span class="line"></span><br><span class="line">//实际上应该是除了 &quot;&lt;&gt;&quot;以外</span><br><span class="line"></span><br><span class="line">var reg2 = /&lt;[^&lt;&gt;]+&gt;/g;</span><br><span class="line">console.log(str.replace(reg2,&apos;&apos;))</span><br></pre></td></tr></table></figure><h4 id="量词：个数"><a href="#量词：个数" class="headerlink" title="量词：个数"></a>量词：个数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;n&#125; 正好出现n次</span><br><span class="line">&#123;n,m&#125;  最少n次，最多m次</span><br><span class="line">&#123;n,&#125;  最少n次，最多不限</span><br><span class="line"></span><br><span class="line">+  &lt;===&gt; &#123;1,&#125;</span><br><span class="line">?  &lt;===&gt; &#123;0,1&#125;</span><br><span class="line"></span><br><span class="line">*  &lt;===&gt; &#123;0,&#125; 可以可无  不推荐使用容易误导</span><br></pre></td></tr></table></figure><h5 id="需求1-电话号码-除去区号010-022-0537"><a href="#需求1-电话号码-除去区号010-022-0537" class="headerlink" title="需求1 电话号码 (除去区号010/022/0537)"></a>需求1 电话号码 (除去区号010/022/0537)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1-9]\d&#123;7&#125;</span><br></pre></td></tr></table></figure><h5 id="需求2-qq号-qq号没有0开头的-5-11位"><a href="#需求2-qq号-qq号没有0开头的-5-11位" class="headerlink" title="需求2 qq号(qq号没有0开头的) 5-11位"></a>需求2 qq号(qq号没有0开头的) 5-11位</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1-9]\d&#123;4,10&#125;</span><br></pre></td></tr></table></figure><h5 id="需求3-固定电话-010-87490623-86"><a href="#需求3-固定电话-010-87490623-86" class="headerlink" title="需求3 固定电话 010-87490623-86"></a>需求3 固定电话 010-87490623-86</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">010-87490623-86</span><br><span class="line">010是区号可有可无</span><br><span class="line">86是分机号也是可有可无</span><br><span class="line"></span><br><span class="line">前面的区号可有可无 (0\d&#123;2,3&#125;-)?</span><br><span class="line">座机号8位 [1-9]\d&#123;7&#125;</span><br><span class="line">分机号可有可无  (-\d&#123;1,5&#125;)?</span><br><span class="line"></span><br><span class="line">//最后</span><br><span class="line">(0\d&#123;2,3&#125;-)?[1-9]\d&#123;7&#125;(-\d&#123;1,5&#125;)?</span><br></pre></td></tr></table></figure><h5 id="为什么不推荐用「-」"><a href="#为什么不推荐用「-」" class="headerlink" title="为什么不推荐用「*」"></a>为什么不推荐用「*」</h5><blockquote><p>因为匹配数字的时候0次也算在内</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;12 fff 85 er552 333 -=-=fa22&apos;;</span><br><span class="line">console.log(str.match(/\d*/g))  </span><br><span class="line">// [&quot;12&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;85&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;552&quot;, &quot;&quot;, &quot;333&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;22&quot;, &quot;&quot;]</span><br></pre></td></tr></table></figure><h5 id="行首-「-」行尾「-」"><a href="#行首-「-」行尾「-」" class="headerlink" title="行首 「^」行尾「$」"></a>行首 「^」行尾「$」</h5><h4 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h4><blockquote><p>校验是否符合正则返回 true/false</p></blockquote><h5 id="校验邮箱"><a href="#校验邮箱" class="headerlink" title="校验邮箱"></a>校验邮箱</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;trustfor@sina.cn&apos;</span><br><span class="line">var reg = /^\w+@[a-z0-9]+\.[a-z]+$/i;</span><br><span class="line">if(reg.test(str))&#123;</span><br><span class="line">    //合法</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    //你丫写错了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tabs组件</title>
      <link href="/2018/04/18/JS005_01_tabs%E7%BB%84%E4%BB%B6/"/>
      <url>/2018/04/18/JS005_01_tabs%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="base-on-jQuery-基于jquery-否则请别继续"><a href="#base-on-jQuery-基于jquery-否则请别继续" class="headerlink" title="base on jQuery(基于jquery,否则请别继续)"></a>base on jQuery(基于jquery,否则请别继续)</h4></blockquote><h3 id="tabs组件"><a href="#tabs组件" class="headerlink" title="tabs组件"></a>tabs组件</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;tabs&quot;&gt;</span><br><span class="line">    &lt;ol class=&quot;tabs-bar&quot;&gt;</span><br><span class="line">        &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;ol class=&quot;tabs-content&quot;&gt;</span><br><span class="line">        &lt;li&gt;content 1&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;content 2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;content 3&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.tabs&#123;&#125;</span><br><span class="line">.tabs &gt; ol&#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  margin: 0; padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; ol.tabs-bar&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  border-bottom: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; ol.tabs-bar &gt; li&#123;</span><br><span class="line">  padding: 4px 8px;</span><br><span class="line">  border: 1px solid transparent;</span><br><span class="line">  border-bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">.tabs &gt; ol.tabs-bar &gt; li:hover&#123;</span><br><span class="line">  border-color: red;</span><br><span class="line">&#125;</span><br><span class="line">/* 选中项显示边框 */</span><br><span class="line">.tabs &gt; ol.tabs-bar &gt; li.active&#123;</span><br><span class="line">  border-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">/* 内容默认隐藏 */</span><br><span class="line">.tabs &gt; ol.tabs-content &gt; li&#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">/* 选中项显示内容 */</span><br><span class="line">.tabs &gt; ol.tabs-content &gt; li.active&#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.tabs&apos;).each(function(index,element) &#123;</span><br><span class="line">    $(element).children(&apos;.tabs-bar&apos;).children(&apos;li&apos;).eq(0).addClass(&apos;active&apos;)</span><br><span class="line">    $(element).children(&apos;.tabs-content&apos;).children(&apos;li&apos;).eq(0).addClass(&apos;active&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&apos;.tabs&apos;).on(&apos;click&apos;, &apos;.tabs-bar &gt; li&apos;, function(e) &#123;</span><br><span class="line">        var $li = $(e.currentTarget)</span><br><span class="line">        $li.addClass(&apos;active&apos;).siblings().removeClass(&apos;active&apos;)</span><br><span class="line">        var index = $li.index()</span><br><span class="line">        //从当前选中的li往外找父级元素  而不是 $(&apos;.tabs .tabs-content&gt;li&apos;)  因为可能有多个 tabs组件</span><br><span class="line">        var $content = $li.closest(&apos;.tabs&apos;).find(&apos;.tabs-content&gt;li&apos;).eq(index)</span><br><span class="line">        $content.addClass(&apos;active&apos;).siblings().removeClass(&apos;active&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是这样只是页面上没法复用 </p><h4 id="面向对象的JS"><a href="#面向对象的JS" class="headerlink" title="面向对象的JS"></a>面向对象的JS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function Tabs(selector) &#123;</span><br><span class="line">  this.elements = $(selector)</span><br><span class="line">  this.init()</span><br><span class="line">  this.bindEvents()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tabs.prototype.init = function() &#123;</span><br><span class="line">  this.elements.each(function(index, element) &#123;</span><br><span class="line">    $(element).children(&apos;.tabs-bar&apos;).children(&apos;li&apos;).eq(0).addClass(&apos;active&apos;)</span><br><span class="line">    $(element).children(&apos;.tabs-content&apos;).children(&apos;li&apos;).eq(0).addClass(&apos;active&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tabs.prototype.bindEvents = function() &#123;</span><br><span class="line">  this.elements.on(&apos;click&apos;, &apos;.tabs-bar &gt; li&apos;, function(e) &#123;</span><br><span class="line">    var $li = $(e.currentTarget)</span><br><span class="line">    $li.addClass(&apos;active&apos;).siblings().removeClass(&apos;active&apos;)</span><br><span class="line">    var index = $li.index()</span><br><span class="line">    var $content = $li.closest(&apos;.tabs&apos;).find(&apos;.tabs-content&gt;li&apos;).eq(index)</span><br><span class="line">    $content.addClass(&apos;active&apos;).siblings().removeClass(&apos;active&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var tabs = new Tabs(&apos;.tabs&apos;)</span><br></pre></td></tr></table></figure><h4 id="ES6写法-class"><a href="#ES6写法-class" class="headerlink" title="ES6写法(class)"></a>ES6写法(class)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Tabs &#123;</span><br><span class="line">  constructor(selector) &#123;</span><br><span class="line">    this.elements = $(selector)</span><br><span class="line">    this.init()</span><br><span class="line">    this.bindEvents()</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    this.elements.each(function(index, element) &#123;</span><br><span class="line">      $(element).children(&apos;.tabs-bar&apos;).children(&apos;li&apos;).eq(0).addClass(&apos;active&apos;)</span><br><span class="line">      $(element).children(&apos;.tabs-content&apos;).children(&apos;li&apos;).eq(0).addClass(&apos;active&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  bindEvents() &#123;</span><br><span class="line">    this.elements.on(&apos;click&apos;, &apos;.tabs-bar &gt; li&apos;, function(e) &#123;</span><br><span class="line">      var $li = $(e.currentTarget)</span><br><span class="line">      $li.addClass(&apos;active&apos;).siblings().removeClass(&apos;active&apos;)</span><br><span class="line">      var index = $li.index()</span><br><span class="line">      var $content = $li.closest(&apos;.tabs&apos;).find(&apos;.tabs-content&gt;li&apos;).eq(index)</span><br><span class="line">      $content.addClass(&apos;active&apos;).siblings().removeClass(&apos;active&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var tabs = new Tabs(&apos;.tabs&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS不知深浅 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>造轮子-组件实现思路</title>
      <link href="/2018/04/18/JS005_%E9%80%A0%E8%BD%AE%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
      <url>/2018/04/18/JS005_%E9%80%A0%E8%BD%AE%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="前端有哪些轮子"><a href="#前端有哪些轮子" class="headerlink" title="前端有哪些轮子"></a>前端有哪些轮子</h3><ol><li><p>标准库的扩充</p><ol><li>underscore.js 扩充了 Array 和 Object 相关 API</li><li>moment.js 扩充了 Date</li><li>bluebird.js / hax/my-promise 实现了 Promise</li><li>async.js 模拟了 async 操作符</li><li>es5shim 用 ES 3 语法部分实现了 ES 5 特性</li><li>handlebars.js 实现模板字符串功能</li></ol></li><li><p>DOM 的扩充</p><ol><li>jQuery.js 操作 DOM</li><li>video.js 操作 video</li><li>Fabric.js 操作 canvas</li></ol></li><li><p>UI 组件</p><ol><li>纯 CSS 的 UI 组件库，如 Bulma</li><li>大而全的 UI 框架（CSS + JS），如 Bootstrap、Element UI</li><li>垂直领域的 UI 组件<ul><li>专门做轮播的 <a href="http://idangero.us/swiper/demos/" target="_blank" rel="noopener">Swiper</a></li><li>专门做输入提示的 <a href="https://twitter.github.io/typeahead.js/" target="_blank" rel="noopener">typeahead</a></li><li>专门做文件上传的 fine-uploader</li><li>专门做 3D 瓦片效果的 <a href="https://micku7zu.github.io/vanilla-tilt.js/" target="_blank" rel="noopener">vanilla-tilt.js</a></li><li>专门做视差效果的 <a href="http://matthew.wagerfield.com/parallax/" target="_blank" rel="noopener">parallax.js</a></li><li>专门做数据可视化的 <a href="http://mbostock.github.io/d3/talk/20111116/airports.html" target="_blank" rel="noopener">D3.js</a></li><li>专门做图表的 echarts.js</li><li>专门做动画的 velocity.js</li><li>专门做粒子效果的 particle.js</li><li>专门做手势识别的 hammer.js</li></ul></li></ol></li><li>编程思想类的轮子<ol><li>实现 MVC 思想的 backbone.js</li><li>实现 MVVM 思想的 AngularJS 1 和 Vue 1</li><li>实现 Virtual DOM 的 React 和 Preact</li><li>实现单向数据流（FLUX）思想的 Redux</li><li>实现 Reactive 思想的 Rx.js</li><li>实现 Rails 思想的 Ember.js</li><li>实现函数式思想的 Ramda</li></ol></li></ol><h3 id="我们的重点"><a href="#我们的重点" class="headerlink" title="我们的重点"></a>我们的重点</h3><blockquote><p>重点是 UI 组件，因为</p></blockquote><ol><li>我们日常工作中经常用到的就是 UI 组件</li><li>UI 组件一般是由 HTML、CSS 和 JS 组成，把 UI 组件做好了，就能更好的做网页</li><li>UI 组件做起来更有趣，所有效果你都能用眼睛看到，而做编程思想类、DOM扩充类组件可能过于抽象</li></ol><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul><li>（内部）分层原则：正交原则</li><li>（对外）封装原则：面向接口编程</li></ul><blockquote><p>正交原则之x/y/z</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/jsnote_005_1.png" alt=""></p><blockquote><p>永远不要用 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#div&apos;).show() </span><br><span class="line">$(&apos;#div&apos;).hide()</span><br></pre></td></tr></table></figure><p>因为你不知道 div以前display是什么</p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/jsnote_005_2.png" alt=""></p><blockquote><p>你应该做的是用状态控制</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#div&apos;).addClass(&apos;active&apos;)</span><br><span class="line">$(&apos;#div&apos;).removeClass(&apos;active&apos;)</span><br></pre></td></tr></table></figure><h4 id="内容、行为、样式分离原则"><a href="#内容、行为、样式分离原则" class="headerlink" title="内容、行为、样式分离原则"></a>内容、行为、样式分离原则</h4><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/jsnote_005_3.png" alt=""></p><h4 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h4><blockquote><p>你不该首先考虑代码怎么写</p></blockquote><blockquote><p>你该考虑用户如何调用</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/jsnote_005_4.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS不知深浅 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>异步代码烧脑的原因</title>
      <link href="/2018/04/17/JS003_%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81%E7%83%A7%E8%84%91%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/2018/04/17/JS003_%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81%E7%83%A7%E8%84%91%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>同步：等待结果<br>异步：不等待结果</p><blockquote><p>注意，异步常常伴随回调一起出现，但是异步不是回调，回调也不一定是异步</p></blockquote><p>如下代码就是同步,只要fn内部的循环完毕才能执行下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function fn()&#123;</span><br><span class="line">    for(var i=0;i&lt;5000000000;i++)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var startTime = new Date().getTime();</span><br><span class="line">console.log(&apos;开始了&apos;)</span><br><span class="line">fn();</span><br><span class="line">var exeTime = new Date().getTime() - startTime;</span><br><span class="line">console.log(&apos;执行了&apos;+exeTime/1000+&apos;秒&apos;)</span><br></pre></td></tr></table></figure><p>异步代码</p><ul><li>定时器就相当于浏览器设置了一个闹钟</li><li>之后继续执行</li><li>闹钟到了时间再去执行相应的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//异步的 asyncFn</span><br><span class="line">function asyncFn(fn)&#123;</span><br><span class="line">    setTimeout(fn, 3000)</span><br><span class="line">&#125;</span><br><span class="line">console.log(1)</span><br><span class="line">asyncFn(()=&gt; console.log(&apos;wake up&apos;))</span><br><span class="line">console.log(2)</span><br></pre></td></tr></table></figure><h3 id="前端经常遇到的异步"><a href="#前端经常遇到的异步" class="headerlink" title="前端经常遇到的异步"></a>前端经常遇到的异步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//因为图片还没有加载完毕所以并不知道高度，(请禁用浏览器缓存在执行)</span><br><span class="line">document.getElementsByTagNames(&apos;img&apos;)[0].width // 宽度为 0</span><br><span class="line">console.log(&apos;done&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>你应该在图片加载成功后在获取图片的高度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByTagNames(&apos;img&apos;)[0].onload = function()&#123;</span><br><span class="line">    console.log(this.width) // 宽度不为 0</span><br><span class="line">    console.log(&apos;real done&apos;)</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;done&apos;)</span><br></pre></td></tr></table></figure><h3 id="面试题中的异步"><a href="#面试题中的异步" class="headerlink" title="面试题中的异步"></a>面试题中的异步</h3><p>为啥点击li每次都打印 6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;11111111&lt;/li&gt;</span><br><span class="line">&lt;li&gt;22222222&lt;/li&gt;</span><br><span class="line">&lt;li&gt;33333333&lt;/li&gt;</span><br><span class="line">&lt;li&gt;44444444&lt;/li&gt;</span><br><span class="line">&lt;li&gt;55555555&lt;/li&gt;</span><br><span class="line">&lt;li&gt;66666666&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">let liList = document.querySelectorAll(&apos;li&apos;)</span><br><span class="line">for(var i=0; i&lt;liList.length; i++)&#123;</span><br><span class="line">    liList[i].onclick = function()&#123;</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(i)  //6</span><br></pre></td></tr></table></figure><ol><li>for循环用极短的时间执行完毕  我们假设 3 毫秒</li><li>var i 有变量提升  即使循环之后仍然可以访问到i的值</li><li>用户看到 Li 的时间绝对大于3 毫秒，每个 Li 点击事件已经初始化结束</li><li>log(i) 还是外面的 i</li></ol><blockquote><p>如何解决 把 var i 改为 let i 就可以了 </p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/28140450" target="_blank" rel="noopener">详情参考</a></p><h3 id="AJAX-中的异步"><a href="#AJAX-中的异步" class="headerlink" title="AJAX 中的异步"></a>AJAX 中的异步</h3><p>这样调用虽然是同步的，但是页面会失去响应，直到结果回来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let request = $.ajax(&#123;</span><br><span class="line">  url: &apos;.&apos;,</span><br><span class="line">  async: false</span><br><span class="line">&#125;)</span><br><span class="line">console.log(request.responseText)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//异步方式</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: &apos;/&apos;,</span><br><span class="line">    async: true,</span><br><span class="line">    success: function(responseText)&#123;</span><br><span class="line">        console.log(responseText)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="异步的形式"><a href="#异步的形式" class="headerlink" title="异步的形式"></a>异步的形式</h3><p>一般有两种方式拿到异步结果</p><ol><li>傻逼方法：轮训<br> 老板叫你去买土豆，然后他就隔1分钟问一次买到土豆了吗？</li><li>正规方法：回调<br> 老板叫你去买土豆并告诉你回来之后通知他，20分钟后你回来了告诉老板是否买到了土豆</li></ol><h3 id="回调的形式"><a href="#回调的形式" class="headerlink" title="回调的形式"></a>回调的形式</h3><ol><li>Node.js 的 error-first 形式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&apos;./1.txt&apos;, (error, content)=&gt;&#123;</span><br><span class="line">    if(error)&#123;</span><br><span class="line">        // 失败</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        // 成功</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>jQuery 的 success / error 形式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:&apos;/xxx&apos;,</span><br><span class="line">    success:()=&gt;&#123;&#125;,</span><br><span class="line">    error: ()=&gt;&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>jQuery 的 done / fail / always 形式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:&apos;/xxx&apos;,</span><br><span class="line">&#125;).done( ()=&gt;&#123;&#125; ).fail( ()=&gt;&#123;&#125; ).always( ()=&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>Prosmise 的 then 形式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//成功调第一个函数，失败调用第二个函数</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:&apos;/xxx&apos;,</span><br><span class="line">&#125;).then( ()=&gt;&#123;&#125;, ()=&gt;&#123;&#125; ).then( ()=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li>ajax的 Prosmise跟真正的Promise有点不同</li><li>它也可以一直.then().then().then() 这样链式操作</li></ul><p>Promise只是一种回调的形式</p><h3 id="Promise规范"><a href="#Promise规范" class="headerlink" title="Promise规范"></a>Promise规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url:&apos;xxx&apos;</span><br><span class="line">&#125;).then(s1,e1)</span><br><span class="line">  .then(s2,e2)</span><br><span class="line">  .then(s3,e3)</span><br></pre></td></tr></table></figure><blockquote><p>如果是jquery,成功只会走进成功的分支   </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 ==&gt; s2 ==&gt; s3 </span><br><span class="line">e1 ==&gt; e2 ==&gt; e3</span><br></pre></td></tr></table></figure><blockquote><h4 id="Promise规范是责任制"><a href="#Promise规范是责任制" class="headerlink" title="Promise规范是责任制"></a>Promise规范是责任制</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 e1 是第一责任人</span><br><span class="line">s2 e2 是第二责任人</span><br><span class="line">s3 e3 是第三责任人</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url:&apos;/aaa&apos;</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;成功1&apos;)</span><br><span class="line">    alert(xxxxx)  //xxxxx 没有定义</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;失败1&apos;)        </span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;成功2&apos;)</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;失败2&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>s1 执行过程不够顺利报错了(就会产生错误的结果)</li><li>于是第二责任人接收到的是一个烂尾工程 </li><li>当做错误处理 走进e2</li></ol><blockquote><p>如果没有 e2 就会报错到浏览器显示给开发者</p></blockquote><h5 id="帮你兜底的两种写法"><a href="#帮你兜底的两种写法" class="headerlink" title="帮你兜底的两种写法"></a>帮你兜底的两种写法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url:&apos;/aaa&apos;</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;成功1&apos;)</span><br><span class="line">    alert(xxxxx)  //xxxxx 没有定义</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;失败1&apos;)        </span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;成功2&apos;)</span><br><span class="line">&#125;).catch((err)=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    url:&apos;/aaa&apos;</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;成功1&apos;)</span><br><span class="line">    alert(xxxxx)  //xxxxx 没有定义</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">    console.log(&apos;失败1&apos;)        </span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;成功2&apos;)</span><br><span class="line">&#125;).then(undefined,(err)=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="自己返回-Promise"><a href="#自己返回-Promise" class="headerlink" title="自己返回 Promise"></a>自己返回 Promise</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function buyApple()&#123;</span><br><span class="line">    var fn =(succ,err)=&gt;&#123;</span><br><span class="line">        var rnd = Math.random()</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            if(rnd&gt;0.5)&#123;</span><br><span class="line">                succ(&apos;买到了苹果&apos;)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                err(&apos;没买到苹果&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,2000)</span><br><span class="line">    &#125;</span><br><span class="line">    return new Promise(fn)   //fn.call(undefined,success,err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var promise = buyApple();</span><br><span class="line">promise.then(</span><br><span class="line">    (data)=&gt;&#123;console.log(data)&#125;,</span><br><span class="line">    (err)=&gt;&#123;console.log(err)&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function ajax()&#123;</span><br><span class="line">    return new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">        做事</span><br><span class="line">        如果成功就调用 resolve</span><br><span class="line">        如果失败就调用 reject</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var promise = ajax()</span><br><span class="line">promise.then(successFn, errorFn)</span><br></pre></td></tr></table></figure><p>Promise 深入阅读：<a href="http://www.cnblogs.com/hustskyking/p/promise.html" target="_blank" rel="noopener">http://www.cnblogs.com/hustskyking/p/promise.html</a><br>Promise/A+ 规范：<a href="https://segmentfault.com/a/1190000002452115" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002452115</a></p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h3><h5 id="await"><a href="#await" class="headerlink" title="await"></a>await</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function buyApple()&#123;</span><br><span class="line">    var fn =(succ,err)=&gt;&#123;</span><br><span class="line">        var rnd = Math.random()</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            if(rnd&gt;0.5)&#123;</span><br><span class="line">                succ(&apos;买到了苹果&apos;)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                err(&apos;没买到苹果&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,10000)</span><br><span class="line">    &#125;</span><br><span class="line">    return new Promise(fn)   //fn.call(undefined,success,err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result = await buyApple();</span><br><span class="line">console.log(2)</span><br></pre></td></tr></table></figure><blockquote><p>10秒之后返回买苹果的结果(成功/失败)<br>打印2</p></blockquote><ul><li>await相当于 用异步的方式写同步的代码</li><li>直到异步代码结果回来才把值赋给 result</li></ul><blockquote><h4 id="await的用法就是-后面接一个返回Promise对象的函数"><a href="#await的用法就是-后面接一个返回Promise对象的函数" class="headerlink" title="await的用法就是 后面接一个返回Promise对象的函数"></a>await的用法就是 后面接一个返回Promise对象的函数</h4></blockquote><h5 id="async"><a href="#async" class="headerlink" title="async"></a>async</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function buyApple()&#123;</span><br><span class="line">    var fn =(succ,err)=&gt;&#123;</span><br><span class="line">        var rnd = Math.random()</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            if(rnd&gt;0.5)&#123;</span><br><span class="line">                succ(&apos;买到了苹果&apos;)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                err(&apos;没买到苹果&apos;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,10000)</span><br><span class="line">    &#125;</span><br><span class="line">    return new Promise(fn)   //fn.call(undefined,success,err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function fn()&#123;</span><br><span class="line">    var result = await buyApple()</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var r = await fn().then(</span><br><span class="line">                    (data)=&gt;&#123;console.log(data)&#125;,</span><br><span class="line">                    (err)=&gt;&#123;console.log(err)&#125;)</span><br><span class="line">console.log(1)</span><br></pre></td></tr></table></figure><blockquote><p>分析1 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var r = await fn().then(</span><br><span class="line">                    (data)=&gt;&#123;console.log(data)&#125;,</span><br><span class="line">                    (err)=&gt;&#123;console.log(err)&#125;)</span><br><span class="line">console.log(2)</span><br><span class="line">/*</span><br><span class="line">1.会直接打印2</span><br><span class="line">2. 10秒后打印  买苹果的结果</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><blockquote><p>分析2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var r = await fn().then(</span><br><span class="line">                    (data)=&gt;&#123;console.log(data)&#125;,</span><br><span class="line">                    (err)=&gt;&#123;console.log(err)&#125;)</span><br><span class="line">console.log(2)</span><br><span class="line">/*</span><br><span class="line">10秒后打印  买苹果的结果</span><br><span class="line">然后打印2</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS不知深浅 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你真的懂函数吗</title>
      <link href="/2018/04/15/JS002%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%87%82%E5%87%BD%E6%95%B0%E5%90%97/"/>
      <url>/2018/04/15/JS002%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%87%82%E5%87%BD%E6%95%B0%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><h4 id="匿名函数-就是声明的时候不给名字"><a href="#匿名函数-就是声明的时候不给名字" class="headerlink" title="匿名函数 就是声明的时候不给名字"></a>匿名函数 就是声明的时候不给名字</h4><blockquote><p>function(){ return 1 ;} 你声明了它 但是又不能引用到它</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// function()&#123; return 1 ;&#125;  匿名函数 相当于废话    会报错   你只有给了引用才能使用</span><br><span class="line">//fn 记录的是函数的地址 ==&gt;引用</span><br><span class="line">var fn = function()&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125; </span><br><span class="line">console.log(fn.name) //fn</span><br><span class="line">var fn2 = fn;  //这里不是把function()&#123; return 1 ;&#125; 复制给fn2 而是把地址复制给fn2</span><br><span class="line">console.log(fn2.name) //fn</span><br></pre></td></tr></table></figure><hr><h4 id="具名函数"><a href="#具名函数" class="headerlink" title="具名函数"></a>具名函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fn3()&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">console.log(fn3); //可以访问   fn3它是一个变量  作用域是整个区域</span><br></pre></td></tr></table></figure><blockquote><p>将具名函数赋值给一个变量  它的作用域就变了 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var fn4 = function fn5()&#123;return 1;&#125;</span><br><span class="line">console.log(fn4.name)  //fn5</span><br><span class="line">// 这个具名函数的作用域就是他函数本身那部分  外部访问不到</span><br><span class="line">// console.log(fn5) //fn5 is not defined</span><br><span class="line">// console.log(fn5.name) //报错</span><br></pre></td></tr></table></figure><blockquote><p>全局作用域的函数 赋值给变量他的作用域不受影响</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fn6()&#123;return 1;&#125;</span><br><span class="line">var fn7 = fn6;</span><br><span class="line">console.log(fn6.name) //fn6</span><br><span class="line">console.log(fn7.name) //fn6</span><br><span class="line">console.log(fn7) //function fn6()&#123;return 1;&#125;</span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var fn8 = ()=&gt;1; //无参数 返回1</span><br><span class="line">var fn9 = i=&gt;i+1; //有参数返回   参数+1；</span><br><span class="line">var fn10 =(i,j)=&gt;&#123;</span><br><span class="line">console.log(i)</span><br><span class="line">console.log(j)</span><br><span class="line">return i+j</span><br><span class="line">&#125; //有参数  并且函数内部有多条语句    </span><br><span class="line">console.log(fn8.name) //fn8 </span><br><span class="line">// 箭头函数和  匿名函数 具名函数唯一的区别就是  this(口诀：箭头函数内外this不变)</span><br></pre></td></tr></table></figure><blockquote><p>fn1 调用的时候不会立即执行<br>而是会生成一个抽象语法树<br>校验里面的每句话  如果有错误就停止执行<br>没错再从头开始执行 </p></blockquote><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><h4 id="一个函数能访问那些变量-在做词法分析的时候就确定了"><a href="#一个函数能访问那些变量-在做词法分析的时候就确定了" class="headerlink" title="一个函数能访问那些变量 在做词法分析的时候就确定了"></a>一个函数能访问那些变量 在做词法分析的时候就确定了</h4><blockquote><p>词法树分析的是语义<br>只能确认a就是这个函数内部的a<br>不能确定的是“值”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var global = 1;</span><br><span class="line">function fn1(param1)&#123;</span><br><span class="line">var local1 = &apos;local1&apos;;</span><br><span class="line">var local2 = &apos;local2&apos;;</span><br><span class="line">function fn2(param2)&#123;</span><br><span class="line">    var local2 = &apos;fn2 local2&apos;;</span><br><span class="line">    console.log(local1);</span><br><span class="line">    console.log(local2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn3()&#123;</span><br><span class="line">    var local2 = &apos;fn3 local2&apos;;</span><br><span class="line">    fn2(local2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function b()&#123;</span><br><span class="line">console.log(a)  // a一定是1吗？</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>你在看看</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a =1;</span><br><span class="line">function b()&#123;</span><br><span class="line">console.log(a);</span><br><span class="line">&#125;</span><br><span class="line">...若干代码后 突然一句</span><br><span class="line">a = 2;</span><br><span class="line">b();  //打出来的一定是1吗？</span><br></pre></td></tr></table></figure><blockquote><p>词法作用域只能确定这个a是不是那个a,不能确定a的值是不是那个值</p></blockquote><h3 id="call-stack-调用栈"><a href="#call-stack-调用栈" class="headerlink" title="call stack 调用栈"></a>call stack 调用栈</h3><blockquote><p>以后再更新。。。(没人考)</p></blockquote><h3 id="this-amp-arguments"><a href="#this-amp-arguments" class="headerlink" title="this &amp; arguments"></a>this &amp; arguments</h3><ul><li><p>重要[参考链接]<br>(<a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/23804247</a>)</p></li><li><p>this 是隐藏的第一个参数，且必须是对象</p></li></ul><blockquote><ul><li>call的第一个参数就是this</li><li>call的第的哥参数后面的就是arguments(伪数组)</li><li>fn() 等同于 fn.call() </li><li>非严格模式下,fn()和fn.call() this会转变为window</li><li>fn()是阉割版的fn.call()</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">    console.log(arguments)</span><br><span class="line">&#125;</span><br><span class="line">f.call() // window</span><br><span class="line">f.call(&#123;name:&apos;aaa&apos;&#125;) // &#123;name: &apos;aaa&apos;&#125;, []</span><br><span class="line">f.call(&#123;name:&apos;aaa&apos;&#125;,1) // &#123;name: &apos;aaa&apos;&#125;, [1]</span><br><span class="line">f.call(&#123;name:&apos;aaa&apos;&#125;,1,2) // &#123;name: &apos;aaa&apos;&#125;, [1,2]</span><br></pre></td></tr></table></figure><blockquote><h4 id="尽可能避免使用fn-的调用形式，因为会让你产生不知道this是谁的恐慌"><a href="#尽可能避免使用fn-的调用形式，因为会让你产生不知道this是谁的恐慌" class="headerlink" title="尽可能避免使用fn()的调用形式，因为会让你产生不知道this是谁的恐慌"></a>尽可能避免使用fn()的调用形式，因为会让你产生不知道this是谁的恐慌</h4></blockquote><ul><li>this 为什么必须是对象<br>因为 this 就是函数与对象之间的羁绊</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 第一步思考</span><br><span class="line">var person = &#123;</span><br><span class="line">            name: &apos;frank&apos;,</span><br><span class="line">            sayHi: function(person)&#123;</span><br><span class="line">                console.log(&apos;Hi, I am&apos; + person.name)</span><br><span class="line">            &#125;,</span><br><span class="line">            sayBye: function(person)&#123;</span><br><span class="line">                console.log(&apos;Bye, I am&apos; + person.name)</span><br><span class="line">            &#125;,</span><br><span class="line">            say: function(person, word)&#123;</span><br><span class="line">                console.log(word + &apos;, I am&apos; + person.name)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这样写法很恶心每次都要把person传进去</span><br><span class="line">person.sayHi(person)</span><br><span class="line">person.sayBye(person)</span><br><span class="line">person.say(person, &apos;How are you&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 第二步思考</span><br><span class="line">// 能不能变成这样调用</span><br><span class="line">person.sayHi()</span><br><span class="line">person.sayBye()</span><br><span class="line">person.say(&apos;How are you&apos;)</span><br><span class="line"></span><br><span class="line">// 那么源代码就要改了</span><br><span class="line">var person = &#123;</span><br><span class="line">    name: &apos;frank&apos;,</span><br><span class="line">    sayHi: function()&#123;</span><br><span class="line">        console.log(&apos;Hi, I am&apos; + this.name)</span><br><span class="line">    &#125;,</span><br><span class="line">    sayBye: function()&#123;</span><br><span class="line">        console.log(&apos;Bye, I am&apos; + this.name)</span><br><span class="line">    &#125;,</span><br><span class="line">    say: function(word)&#123;</span><br><span class="line">        console.log(word + &apos;, I am&apos; + this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 如果你不想吃语法糖</span><br><span class="line">person.sayHi.call(person)</span><br><span class="line">person.sayBye.call(person)</span><br><span class="line">person.say.call(person, &apos;How are you&apos;)</span><br><span class="line"></span><br><span class="line">// 还是回到那句话：this 是 call 的第一个参数</span><br><span class="line">// this 是参数，所以，只有在调用的时候才能确定</span><br><span class="line">person.sayHi.call(&#123;name:&apos;haha&apos;&#125;)  // 这时 sayHi 里面的 this 就不是 person 了</span><br><span class="line">// this 真的很不靠谱</span><br><span class="line"></span><br><span class="line">// 新手疑惑的两种写法</span><br><span class="line">var fn = person.sayHi</span><br><span class="line">person.sayHi() // this === person</span><br><span class="line">fn()  // this === window</span><br></pre></td></tr></table></figure><blockquote><p>person.sayHi() 等价于 person.sayHi(person)<br>fn() 等价于 fn.call()</p></blockquote><h4 id="call-apply"><a href="#call-apply" class="headerlink" title="call / apply"></a>call / apply</h4><ul><li>第一原则call的第一个参数是this</li><li>apply是另一版本的call</li></ul><blockquote><p>apply的使用场景就是在你不知道要传递的参数有多少个的情况</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn.call(asThis, p1,p2) 是函数的正常调用方式</span><br><span class="line">当你不确定参数的个数时，就使用 apply</span><br><span class="line">fn.apply(asThis, params)</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><blockquote><p>call 和 apply 是直接调用函数，而 bind 则是返回一个新函数（并没有调用原来的函数），这个新函数会 call 原来的函数，call 的参数由你指定。</p></blockquote><blockquote><p>待更新。。。。。</p></blockquote><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>返回函数的函数</p><ul><li><p>柯里化：将 f(x,y) 变成 f(x=1)(y) 或 f(y=1)x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//柯里化之前</span><br><span class="line">function sum(x,y)&#123;</span><br><span class="line">    return x+y</span><br><span class="line">&#125;</span><br><span class="line">//柯里化之后</span><br><span class="line">function addOne(y)&#123;</span><br><span class="line">    return sum(1, y)</span><br><span class="line">&#125;</span><br><span class="line">//柯里化之前</span><br><span class="line">function Handlebar(template, data)&#123;</span><br><span class="line">    return template.replace(&apos;&#123;&#123;name&#125;&#125;&apos;, data.name)</span><br><span class="line">&#125;</span><br><span class="line">//柯里化之后</span><br><span class="line">function Handlebar(template)&#123;</span><br><span class="line">    return function(data)&#123;</span><br><span class="line">        return template.replace(&apos;&#123;&#123;name&#125;&#125;&apos;, data.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  柯里化可以将真实计算拖延到最后再做<br>  关于柯里化的高级文章：</p><ul><li><a href="http://www.yinwang.org/blog-cn/2013/04/02/currying" target="_blank" rel="noopener">http://www.yinwang.org/blog-cn/2013/04/02/currying</a></li><li><a href="https://zhuanlan.zhihu.com/p/31271179" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31271179</a></li></ul></li></ul><blockquote><p>柯里化唯一的好处就是惰性求值</p></blockquote><h3 id="高阶函数："><a href="#高阶函数：" class="headerlink" title="高阶函数："></a>高阶函数：</h3><blockquote><p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：<br>接受一个或多个函数作为输入：forEach sort map filter reduce</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//接收一个函数</span><br><span class="line"></span><br><span class="line">[3,1,2].sort(function(a,b)&#123;return a-b&#125;)   [3,1,2].sort.call([3,1,2],fn)</span><br><span class="line">[1,2,3].forEach(function(val,idx,arr)&#123;&#125;)  [3,1,2].forEach.call([3,1,2],fn)</span><br><span class="line">[1,2,3].map(function(val,idx,arr)&#123;&#125;)      [3,1,2].map.call([3,1,2],fn)</span><br><span class="line">[1,2,3].filter(function(val,idx,arr)&#123;&#125;)   [3,1,2].filter.call([3,1,2],fn)</span><br><span class="line">[1,2,3].reduce(function()&#123;&#125;)              [3,1,2].reduce.call([3,1,2],fn)</span><br><span class="line"></span><br><span class="line">//输出一个函数</span><br><span class="line">function sum(a,b)&#123;return a+b&#125;</span><br><span class="line">function addOne(b)&#123;</span><br><span class="line">    return sum(1,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输入一个函数，输出一个函数</span><br><span class="line">fn.bind.call(fn,&#123;&#125;,1,2,3);</span><br></pre></td></tr></table></figure><ul><li>输出一个函数：lodash.curry</li><li>不过它也可以同时满足两个条件：</li><li>Function.prototype.bind</li></ul><blockquote><p>高阶函数的好处就是任意组合</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5,6,7,8];</span><br><span class="line">var sum = 0;</span><br><span class="line">//求偶数和</span><br><span class="line">for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    if(arr[i]%2===0)&#123;</span><br><span class="line">        sum+=arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 高阶写法1</span><br><span class="line">arr.filter(function(n)&#123;</span><br><span class="line">    return n%2===0</span><br><span class="line">&#125;).reduce(function(prev,next)&#123;</span><br><span class="line">    return prev+next</span><br><span class="line">&#125;,0)</span><br><span class="line"></span><br><span class="line">//高阶写法2</span><br><span class="line">reduce(filter(arr,function(n)&#123;return n%2&#125;),function(prev,next)&#123;return prev+next&#125;,0)</span><br><span class="line">sort(filter(arr,function(n)&#123;return n%2===1&#125;),function(a,b)&#123;return a-b&#125;)</span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><ul><li>名词形式：被当做参数的函数就是回调</li><li>动词形式：调用这个回调</li><li>注意回调跟异步没有任何关系</li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>返回对象的函数就是构造函数</li><li>一般首字母大写</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var n = new Number(1)</span><br><span class="line">var bool = new Boolean(true)</span><br><span class="line">var s = new String(&apos;xxx&apos;);</span><br><span class="line">var obj = new Object();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Animal()&#123;</span><br><span class="line">    this.name = &apos;动物&apos;</span><br><span class="line">    //return this;  // 自动帮你返回一个对象</span><br><span class="line">&#125;</span><br><span class="line">// 只要你new一个函数  就会帮你返回一个对象</span><br><span class="line">var animal = new Animal();  //Animal.call(&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="箭头函数-1"><a href="#箭头函数-1" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function fn(x,y)&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var fn = (x,y)=&gt;x+y</span><br><span class="line">var fn = (x,y)=&gt;&#123;</span><br><span class="line">    //多句话要执行的时候</span><br><span class="line">    console.log(x)</span><br><span class="line">    return x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>箭头函数没有this</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">&#125;.bind(&#123;name:&apos;aaa&apos;&#125;),1000)</span><br><span class="line">//打印出  &#123;name:&apos;aaa&apos;&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">    &#125;,1000)</span><br><span class="line">&#125;.bind(&#123;name:&apos;aaa&apos;&#125;),1000)</span><br><span class="line">//第一秒  &#123;name:&apos;aaa&apos;&#125;</span><br><span class="line">//第二秒  window  第二个延时器相当于 fn.call()</span><br><span class="line">//call里没传递this就是 window</span><br><span class="line"></span><br><span class="line">//如果想两次都打印 &#123;name:&apos;aaa&apos;&#125;就要这样</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">    &#125;.bind(this),1000)</span><br><span class="line">&#125;.bind(&#123;name:&apos;aaa&apos;&#125;),1000)</span><br><span class="line">//第二个延时器里的bind(this)  this就是 &#123;name:&apos;aaa&apos;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>箭头函数干掉了this</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">    &#125;,1000)</span><br><span class="line">&#125;.bind(&#123;name:&apos;aaa&apos;&#125;),1000)</span><br></pre></td></tr></table></figure><blockquote><p>js的漏洞 function(){} 等价于 function(){}.call()<br>call的第一个参数就是this<br>call不传递参数就是window</p></blockquote><blockquote><h3 id="强迫症就是要给箭头函数加this？"><a href="#强迫症就是要给箭头函数加this？" class="headerlink" title="强迫症就是要给箭头函数加this？"></a>强迫症就是要给箭头函数加this？</h3></blockquote><p>答案是不行  会被忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var fn =()=&gt;&#123;console.log(this)&#125;</span><br><span class="line">fn.call(&#123;name:&apos;aaa&apos;&#125;)</span><br><span class="line"></span><br><span class="line">//打印window</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JS不知深浅 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue组件间通信</title>
      <link href="/2018/04/12/N058_vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2018/04/12/N058_vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="vue-父子通信"><a href="#vue-父子通信" class="headerlink" title="vue 父子通信"></a>vue 父子通信</h4><blockquote><p>爸爸是咋叫儿子的！</p></blockquote><ul><li>父组件在使用子组件时   绑定属性  :xxx=”你定义的值”</li><li><p>子组件设置props属性,可以在页面上插值</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    props:[&apos;xxx&apos;],</span><br><span class="line">    template:`&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt; `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;child :msg=&quot;data&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;child&apos;,&#123;</span><br><span class="line">  props:[&apos;msg&apos;],</span><br><span class="line">  template:`&lt;div&gt;</span><br><span class="line">              &lt;div&gt;子组件==&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;`</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&apos;#app&apos;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    data:&apos;我是父组件的数据&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>儿子是怎样叫爸爸的！</p></blockquote><ul><li>子组件向上要通过emit(‘xxx’),xxx是事件名称</li><li>父组件使用子组件时，在子组件上监听事件 @xxx=”相应处理”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- html如下 --&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;child @close=&quot;show=false&quot; v-show=&quot;show&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//js如下</span><br><span class="line">Vue.component(&apos;child&apos;,&#123;</span><br><span class="line">  template:`&lt;div&gt;</span><br><span class="line">              &lt;div&gt;子组件&lt;/div&gt;</span><br><span class="line">              &lt;button @click=&quot;$emit(&apos;close&apos;)&quot;&gt;close&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;`</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&apos;#app&apos;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    msg:&apos;父组件的数据&apos;,</span><br><span class="line">    show:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="爷孙通信"><a href="#爷孙通信" class="headerlink" title="爷孙通信"></a>爷孙通信</h4><blockquote><p>如果是爷孙？</p></blockquote><p>vue是不支持的，需要儿子叫爸爸，爸爸叫爷爷，这样层层传递</p><ul><li>所以在vue里爷孙通信是很麻烦的</li><li>不过你可以使用单一事件管理组件eventHub来解决</li><li><p>这里用使用最通俗的方式，你也可以挂载在Vue原型上</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$eventHub = new Vue()</span><br></pre></td></tr></table></figure></li><li><p>重新构造一个Vue对象  专门用来负责管理通信</p></li><li>在嵌套的组件内部的created()里 eventHub.$on(‘xxx’,()=&gt;{相关逻辑处理})</li><li>在子组件里eventHub.$emit(‘xxx’)触发<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- html --&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;father&gt;&lt;/father&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//js部分</span><br><span class="line"></span><br><span class="line">// 单一事件管理组件 vuex的前身</span><br><span class="line">var eventHub =new Vue();</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;son&apos;,&#123;</span><br><span class="line">  template:`&lt;div&gt;</span><br><span class="line">              &lt;div&gt;我是子组件</span><br><span class="line">                 &lt;button @click=&quot;callFather&quot;&gt;发送给爸爸&lt;/button&gt;</span><br><span class="line">                 &lt;button @click=&quot;callGrandPa&quot;&gt;发送给爷爷&lt;/button&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;`,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    callFather()&#123;</span><br><span class="line">      eventHub.$emit(&apos;father&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    callGrandPa()&#123;</span><br><span class="line">      eventHub.$emit(&apos;grandpa&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;father&apos;,&#123;</span><br><span class="line">  template:`&lt;div&gt;</span><br><span class="line">              &lt;div&gt;父组件div&gt;</span><br><span class="line">              &lt;son&gt;&lt;/son&gt;</span><br><span class="line">            &lt;/div&gt;`,</span><br><span class="line">  created()&#123;</span><br><span class="line">      eventHub.$on(&apos;father&apos;,()=&gt;&#123;alert(&apos;儿子叫爸爸&apos;)&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&apos;#app&apos;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    data:&apos;我是爷爷&apos;,</span><br><span class="line">   </span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    eventHub.$on(&apos;grandpa&apos;,()=&gt;&#123;alert(&apos;儿子叫爷爷&apos;)&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-cli使用</title>
      <link href="/2018/04/11/Vue_200_vue%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/04/11/Vue_200_vue%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="如果你从零开始构建vue-cli项目"><a href="#如果你从零开始构建vue-cli项目" class="headerlink" title="如果你从零开始构建vue-cli项目"></a>如果你从零开始构建vue-cli项目</h4><ol><li>你需要安装node环境</li></ol><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node官网</a> 下载对应版本(建议下载LTS版本相对稳定)</p><blockquote><p>一路next千万别手欠把add to path 默认选中的取消了</p></blockquote><ol start="2"><li>windows用户请打开cmd 输入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看node 版本 我的是8.9.4</span><br><span class="line">node -v </span><br><span class="line"></span><br><span class="line"># 查看npm版本 我的是5.6.0 </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><ol start="3"><li>终于你有了node的命令行环境这样你就可以安装前端相关依赖了</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install 包名</span><br><span class="line"></span><br><span class="line"># eg 这些只是例子</span><br><span class="line">npm install jquery</span><br><span class="line">npm install vue</span><br><span class="line">npm install ...</span><br></pre></td></tr></table></figure><h4 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h4><ol><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue官网</a></li><li>点击「起步」如果是英文 「get stared」</li><li>左侧菜单栏点击 安装</li><li><p>找到命令行工具(CLI) </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 vue-cli</span><br><span class="line">$ npm install --global vue-cli</span><br><span class="line"># 创建一个基于 webpack 模板的新项目</span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"># 安装依赖，走你</span><br><span class="line">$ cd my-project</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure></li><li><p>以上命令你就可以本地初始化一个 vue的官方模板了 </p></li></ol><h4 id="如果是别人构建好的项目"><a href="#如果是别人构建好的项目" class="headerlink" title="如果是别人构建好的项目"></a>如果是别人构建好的项目</h4><p>给你一个项目目录(注意给别人项目的时候是不要连带node_modules的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 项目目录</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>注意下载的时候由于是国外的包可能会出现丢包的情况</li><li>一旦丢包或者报错，就把整个node_modules目录删除</li><li>再次运行 npm install</li></ul><h4 id="其实你可以使用淘宝镜像"><a href="#其实你可以使用淘宝镜像" class="headerlink" title="其实你可以使用淘宝镜像"></a>其实你可以使用淘宝镜像</h4><p>使用说明 <a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像如何设置</a></p><blockquote><p>你可以使用 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack</title>
      <link href="/2018/02/13/N045_webpack/"/>
      <url>/2018/02/13/N045_webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p><a href="https://zhuanlan.zhihu.com/p/30701816" target="_blank" rel="noopener">webpack：从入门到真实项目配置</a></p><p><a href="https://www.zhihu.com/question/266788138" target="_blank" rel="noopener">关于 webpack 的面试题有哪些？</a></p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note045_01.png" alt="什么是工程化"></p><h3 id="回到之前的项目"><a href="#回到之前的项目" class="headerlink" title="回到之前的项目"></a>回到之前的项目</h3><p><a href="https://sltrust.github.io/cv/cv030/030mycv.html" target="_blank" rel="noopener">基础版本项目地址</a></p><ol><li><p>安装node-sass  </p><blockquote><p>github 搜索 node-sass</p></blockquote><blockquote><h3 id="cnpm-install-node-sass-g"><a href="#cnpm-install-node-sass-g" class="headerlink" title="cnpm install node-sass -g"></a>cnpm install node-sass -g</h3></blockquote><blockquote><p>-g 这样你就可以任何目录都能执行自动化工具</p></blockquote><ul><li>如果你安装node-sass出错 直接google搜索 node-sass安装失败(window通常会失败)</li></ul></li><li><p>安装成功</p><ul><li><p>如何使用node-sass</p><ol><li>修改后缀。直接把你的main.css修改为  main.scss</li><li><p>查看文档发现如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node-sass src/style.scss dest/style.css</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>sass语法</p><ul><li><p>嵌套</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">css写法</span><br><span class="line">.topNavBar nav &#123;padding:5px;&#125;</span><br><span class="line">.topNavBar nav ul&#123; list-style:none;margin:0;padding:0;&#125;</span><br><span class="line"></span><br><span class="line">scss写法 是不是简洁了很多</span><br><span class="line"></span><br><span class="line">.topNavBar&#123;</span><br><span class="line">    nav &#123;</span><br><span class="line">        padding:5px;</span><br><span class="line">        ul&#123;</span><br><span class="line">            list-style:none;</span><br><span class="line">            margin:0;</span><br><span class="line">            padding:0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>sass和scss的区别</p><blockquote><h4 id="ruby社区写了sass规则比scss更简洁，但是前端大多数看不懂"><a href="#ruby社区写了sass规则比scss更简洁，但是前端大多数看不懂" class="headerlink" title="ruby社区写了sass规则比scss更简洁，但是前端大多数看不懂"></a>ruby社区写了sass规则比scss更简洁，但是前端大多数看不懂</h4></blockquote><p> aa.sass</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body</span><br><span class="line"> p</span><br><span class="line">  a</span><br><span class="line">   background : red</span><br></pre></td></tr></table></figure><p> aa.css</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body p a &#123;</span><br><span class="line">  background: red; &#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>sass可以自动加“{}” 和“;” 但是前端小菜看不懂啊。。。那你就吃土吧！&gt; 于是出现了 scssaa.scss<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    p&#123;</span><br><span class="line">        a&#123;</span><br><span class="line">            background:red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&gt; 前端一看： 懂了。。。</code></pre><ol start="5"><li><p>但是即使这样我们引用的却不能是scss文件，而是转化后的css文件</p><blockquote><h3 id="改个背景色还要重新编译一次才能看到效果-？-484傻"><a href="#改个背景色还要重新编译一次才能看到效果-？-484傻" class="headerlink" title="改个背景色还要重新编译一次才能看到效果 ？ 484傻"></a>改个背景色还要重新编译一次才能看到效果 ？ 484傻</h3></blockquote><ul><li><p>google node sass watch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node-sass  main.scss main.css -w main.scss</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><blockquote><h4 id="我们自己写项目可以大量使用ES6-而真实项目可能需要在IE上运行"><a href="#我们自己写项目可以大量使用ES6-而真实项目可能需要在IE上运行" class="headerlink" title="我们自己写项目可以大量使用ES6,而真实项目可能需要在IE上运行"></a>我们自己写项目可以大量使用ES6,而真实项目可能需要在IE上运行</h4></blockquote><ol><li><p><a href="http://babeljs.io/" target="_blank" rel="noopener">babel</a></p><ol><li>第一步<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装官方提示的步骤</span><br><span class="line">npm install --save-dev babel-cli babel-preset-env</span><br></pre></td></tr></table></figure></li></ol></li></ol><pre><code>2. 第二步 新建.babelrc<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>3. 第三步点击 向导 点击cli下&gt; ![](https://raw.githubusercontent.com/slTrust/note/master/img/note045_02.png)&gt; ![](https://raw.githubusercontent.com/slTrust/note/master/img/note045_03.png)4. 继续按照步骤<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>5. 由于我们没有pageage.json<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init 一直回车回车回车</span><br></pre></td></tr></table></figure>6. 因为 npm install --save-dev babel-cli的时候我们还没有 pageage.json7. 再次运行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>&gt; 你会发现增加了一行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">+   &quot;babel-cli&quot;: &quot;^6.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>8. 在pageage.json里添加如下代码 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;my-project&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">+   &quot;scripts&quot;: &#123;</span><br><span class="line">+     &quot;build&quot;: &quot;babel src -d lib&quot;</span><br><span class="line">+   &#125;,</span><br><span class="line">    &quot;devDependencies&quot;: &#123;</span><br><span class="line">      &quot;babel-cli&quot;: &quot;^6.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>&gt; ![](https://raw.githubusercontent.com/slTrust/note/master/img/note045_04.png)&gt; ![](https://raw.githubusercontent.com/slTrust/note/master/img/note045_05.png)9. 这个时候提示你可以运行 npm run build &gt; 此时报错了   ！ 因为命令行已经发展到了非常变态的地步，就算你是个老手也会报错    - 因为npm run bulid 实际运行的是 script里的 &quot;babel src -d lib&quot;    - 而&quot;babel src -d lib&quot;会优先寻找./node_modules/.bin/目录    - 此时你就要知道全局安装和局部安装的区别了&gt; ### 由于我们是局部安装 所以我们要这样运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/babel src -d lib</span><br></pre></td></tr></table></figure>10. 我们肯定也要时时修改，而不是边保存边编译<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/babel src -d lib --watch</span><br></pre></td></tr></table></figure></code></pre><h3 id="以上叫自动化"><a href="#以上叫自动化" class="headerlink" title="以上叫自动化"></a>以上叫自动化</h3><blockquote><p>但是有一个问题 CSS自动化要开一个命令行，JS也要开一个，这样无形中多了好多窗口</p></blockquote><h4 id="实际开发中如下图"><a href="#实际开发中如下图" class="headerlink" title="实际开发中如下图"></a>实际开发中如下图</h4><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note045_06.png" alt=""></p><blockquote><p>改变目录解构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--|app</span><br><span class="line">----|src</span><br><span class="line">------|css</span><br><span class="line">--------|a.scss</span><br><span class="line">--------|b.scss</span><br><span class="line">--------|c.scss</span><br><span class="line">------|js</span><br><span class="line">--------|a.js</span><br><span class="line">--------|b.js</span><br><span class="line">--------|c.js</span><br><span class="line">------|img</span><br><span class="line">--------|a.jpg</span><br><span class="line">--------|b.jpg</span><br><span class="line">--------|c.jpg</span><br><span class="line">------|index.html</span><br><span class="line"></span><br><span class="line">------|dist</span><br><span class="line">//这个目录是根据src里生成的</span><br><span class="line"></span><br><span class="line">------|node_modules 第三方包</span><br><span class="line">------|vendors 第三方文件</span><br></pre></td></tr></table></figure><ol><li><p>node-sass 命令的变化监听目录</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node-sass src/css/ -o dist/css/  -w src/css/</span><br></pre></td></tr></table></figure></li><li><p>babel 变化</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/babel src/js -d dist/js --watch</span><br></pre></td></tr></table></figure></li></ol><h4 id="而我们不仅仅会修改js-css还会修改-html-img文件-这个时候又怎么办呢？"><a href="#而我们不仅仅会修改js-css还会修改-html-img文件-这个时候又怎么办呢？" class="headerlink" title="而我们不仅仅会修改js/css还会修改 html/img文件 这个时候又怎么办呢？"></a>而我们不仅仅会修改js/css还会修改 html/img文件 这个时候又怎么办呢？</h4><h4 id="于是我们又发现了watch-cli一个命令行工具可以监听文件变化"><a href="#于是我们又发现了watch-cli一个命令行工具可以监听文件变化" class="headerlink" title="于是我们又发现了watch-cli一个命令行工具可以监听文件变化"></a>于是我们又发现了watch-cli一个命令行工具可以监听文件变化</h4><p><a href="https://github.com/doowb/watch-cli" target="_blank" rel="noopener">watch-cli</a></p><blockquote><p>监听html文件的变化</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -p &quot;src/index.html&quot; -c &quot;cp src/index.html  dist/index.html&quot;</span><br></pre></td></tr></table></figure><blockquote><p>监听img文件的变化</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -p &quot;src/img/**/*&quot; -c &quot;cp src/img  dist/img&quot;</span><br></pre></td></tr></table></figure><h3 id="经过如上步骤-我们每次开发一个项目就要开四个命令行工具"><a href="#经过如上步骤-我们每次开发一个项目就要开四个命令行工具" class="headerlink" title="经过如上步骤 我们每次开发一个项目就要开四个命令行工具"></a>经过如上步骤 我们每次开发一个项目就要开四个命令行工具</h3><blockquote><p>在node诞生之后 前端想尽办法代替上面的四个命令行</p></blockquote><ul><li>grunt 不用学了 已经过时了 被gulp替代了  gulp比它快</li><li>gulp 也不用学了 被webpack替代了</li></ul><h3 id="webpack-1"><a href="#webpack-1" class="headerlink" title="webpack"></a>webpack</h3><p><a href="https://github.com/slTrust/webpack-demo" target="_blank" rel="noopener">我的webpack示例仓库</a></p><h3 id="parcel代替webpack-依然不稳定，需要时间去磨合，建议还是webpack虽然快死了"><a href="#parcel代替webpack-依然不稳定，需要时间去磨合，建议还是webpack虽然快死了" class="headerlink" title="parcel代替webpack(依然不稳定，需要时间去磨合，建议还是webpack虽然快死了)"></a>parcel代替webpack(依然不稳定，需要时间去磨合，建议还是webpack虽然快死了)</h3><blockquote><p>尝试去试一下这个 秒杀webpack啊简直！</p></blockquote><hr><h4 id="webpack就是干-实践webpack加入es6-加入sass"><a href="#webpack就是干-实践webpack加入es6-加入sass" class="headerlink" title="webpack就是干(实践webpack加入es6 加入sass)"></a>webpack就是干(实践webpack加入es6 加入sass)</h4><blockquote><p>不知有多少人想说 fack webpack</p></blockquote><h3 id="google-搜索-webpack"><a href="#google-搜索-webpack" class="headerlink" title="google 搜索  webpack"></a>google 搜索  webpack</h3><blockquote><p>进入官网 点击github</p></blockquote><blockquote><p>提示你安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 建议安装 webpack@3.10.0 因为我用的是这个 这步骤可以先跳过因为你还没有package.json</span><br><span class="line">npm i --save-dev webpack</span><br></pre></td></tr></table></figure><p>继续往下看，发现毫无线索，…. 发 现get started 点击</p><h4 id="step1-新建目录"><a href="#step1-新建目录" class="headerlink" title="step1 新建目录"></a>step1 新建目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack_simple</span><br><span class="line">cd webpack_simple</span><br><span class="line"># 你想使用webpack安装进入你的依赖一定要先保证你有package.json文件</span><br><span class="line"></span><br><span class="line">npm init </span><br><span class="line">...  一路回车 你有了自己的package.json</span><br><span class="line"></span><br><span class="line"># 安装webpack依赖   --save-dev是添加到package.json里 这样别人拿到你的这个文件直接  npm i就可以直接安装依赖了</span><br><span class="line">npm i webpack@3.10.0 --save-dev</span><br></pre></td></tr></table></figure><h4 id="step2-我们的目录结构如下"><a href="#step2-我们的目录结构如下" class="headerlink" title="step2 我们的目录结构如下"></a>step2 我们的目录结构如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> webpack_simple</span><br><span class="line">  |- package.json</span><br><span class="line">+ |- index.html</span><br><span class="line">+ |- /src</span><br><span class="line">+   |- index.js</span><br></pre></td></tr></table></figure><h4 id="step3-webpack的命令需要一个配置文件-改变目录如下"><a href="#step3-webpack的命令需要一个配置文件-改变目录如下" class="headerlink" title="step3 webpack的命令需要一个配置文件 改变目录如下"></a>step3 webpack的命令需要一个配置文件 改变目录如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line">+ |- webpack.config.js</span><br><span class="line">  |- /dist</span><br><span class="line">    |- index.html</span><br><span class="line">  |- /src</span><br><span class="line">    |- index.js</span><br></pre></td></tr></table></figure><h4 id="step4-webpack-config-js的编写"><a href="#step4-webpack-config-js的编写" class="headerlink" title="step4 webpack.config.js的编写"></a>step4 webpack.config.js的编写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./src/index.js&apos;,   //入口文件</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;bundle.js&apos;,</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;)  //打包后的目录</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="step5-好了-在确保你有node的情况下"><a href="#step5-好了-在确保你有node的情况下" class="headerlink" title="step5 好了  在确保你有node的情况下"></a>step5 好了  在确保你有node的情况下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注意是 webpack_simple目录下运行如下命令</span><br><span class="line">webpack</span><br></pre></td></tr></table></figure><h4 id="step6-大功告成-你发现-多了一个dist目录"><a href="#step6-大功告成-你发现-多了一个dist目录" class="headerlink" title="step6 大功告成 你发现 多了一个dist目录"></a>step6 大功告成 你发现 多了一个dist目录</h4><h4 id="小小细节-提交的时候千万不要提交如下目录的东西"><a href="#小小细节-提交的时候千万不要提交如下目录的东西" class="headerlink" title="小小细节 提交的时候千万不要提交如下目录的东西"></a>小小细节 提交的时候千万不要提交如下目录的东西</h4><p>你该新建 .gitignore 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">/dist/</span><br></pre></td></tr></table></figure><blockquote><p>你需要新建.gitignore文件 内容如上</p></blockquote><blockquote><p>现在你已经成功的实现打包js</p></blockquote><h3 id="现在都ES8了-我们至少得使用ES6吧！"><a href="#现在都ES8了-我们至少得使用ES6吧！" class="headerlink" title="现在都ES8了   我们至少得使用ES6吧！"></a>现在都ES8了   我们至少得使用ES6吧！</h3><blockquote><p>目标引入 babel-loader</p></blockquote><h3 id="github里搜索-babel-loader"><a href="#github里搜索-babel-loader" class="headerlink" title="github里搜索  babel-loader"></a>github里搜索  babel-loader</h3><h4 id="看文档-注意看你当前依赖的webpack的版本-它会有对应的跳转链接"><a href="#看文档-注意看你当前依赖的webpack的版本-它会有对应的跳转链接" class="headerlink" title="看文档 注意看你当前依赖的webpack的版本 它会有对应的跳转链接"></a>看文档 注意看你当前依赖的webpack的版本 它会有对应的跳转链接</h4><h4 id="看文档-注意看你当前依赖的webpack的版本-它会有对应的跳转链接-1"><a href="#看文档-注意看你当前依赖的webpack的版本-它会有对应的跳转链接-1" class="headerlink" title="看文档 注意看你当前依赖的webpack的版本 它会有对应的跳转链接"></a>看文档 注意看你当前依赖的webpack的版本 它会有对应的跳转链接</h4><h4 id="看文档-注意看你当前依赖的webpack的版本-它会有对应的跳转链接-2"><a href="#看文档-注意看你当前依赖的webpack的版本-它会有对应的跳转链接-2" class="headerlink" title="看文档 注意看你当前依赖的webpack的版本 它会有对应的跳转链接"></a>看文档 注意看你当前依赖的webpack的版本 它会有对应的跳转链接</h4><blockquote><p>知道为啥说三次吗？ 因为你不点这个链接估计卡你一宿都不知道为啥错了</p></blockquote><h4 id="进入对应版本链接说明文档"><a href="#进入对应版本链接说明文档" class="headerlink" title="进入对应版本链接说明文档"></a>进入对应版本链接说明文档</h4><blockquote><p>webpack 3.x babel-loader 7.x | babel 6.x 我选择了这个  376 于是点击了  7.x branch</p></blockquote><h4 id="继续看-7-x版本对应的安装依赖文档"><a href="#继续看-7-x版本对应的安装依赖文档" class="headerlink" title="继续看 7.x版本对应的安装依赖文档"></a>继续看 7.x版本对应的安装依赖文档</h4><blockquote><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2></blockquote><blockquote><p>webpack 1.x | babel-loader &lt;= 6.x</p></blockquote><blockquote><p>webpack 2.x | babel-loader &gt;= 7.x (recommended) (^6.2.10 will also work, but with deprecation warnings)</p></blockquote><blockquote><p>webpack 3.x | babel-loader &gt;= 7.1</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-loader babel-core babel-preset-env webpack --dev</span><br><span class="line">We recommend using yarn, but you can also still use npm:</span><br><span class="line"></span><br><span class="line"># 我用的npm所以用这个</span><br><span class="line">npm install --save-dev babel-loader babel-core babel-preset-env </span><br><span class="line"># 安装之后你肯定心急了  运行下webpack</span><br><span class="line">webpack</span><br></pre></td></tr></table></figure><h4 id="你可能发现npm下载好慢-那是因为是从国外下载所以慢"><a href="#你可能发现npm下载好慢-那是因为是从国外下载所以慢" class="headerlink" title="你可能发现npm下载好慢 那是因为是从国外下载所以慢"></a>你可能发现npm下载好慢 那是因为是从国外下载所以慢</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置淘宝镜像 cnpm</span><br><span class="line"> npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">以后你就可以用  cnpm i 包名</span><br><span class="line">的方式下载国内的资源镜像</span><br></pre></td></tr></table></figure><h4 id="根据babel-loader的文档提示-它说有个module参数-你可以试试"><a href="#根据babel-loader的文档提示-它说有个module参数-你可以试试" class="headerlink" title="根据babel-loader的文档提示 它说有个module参数  你可以试试"></a>根据babel-loader的文档提示 它说有个module参数  你可以试试</h4><blockquote><p>自行脑补然后把module 结构添加到你的webpack.config.js里</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./src/js/index.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;bundle.js&apos;,</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist/js/&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /(node_modules|bower_components)/,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: &apos;babel-loader&apos;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [&apos;env&apos;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在你可以写一写ES6语法了</p><h4 id="我们还有scss"><a href="#我们还有scss" class="headerlink" title="我们还有scss"></a>我们还有scss</h4><h3 id="github里搜索-sass-loader"><a href="#github里搜索-sass-loader" class="headerlink" title="github里搜索  sass-loader"></a>github里搜索  sass-loader</h3><h4 id="看文档-安装依赖"><a href="#看文档-安装依赖" class="headerlink" title="看文档 安装依赖"></a>看文档 安装依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-loader node-sass webpack --save-dev</span><br></pre></td></tr></table></figure><h4 id="添加模块-rules是个数组-脑补添加该对象"><a href="#添加模块-rules是个数组-脑补添加该对象" class="headerlink" title="添加模块  rules是个数组  脑补添加该对象"></a>添加模块  rules是个数组  脑补添加该对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">...</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.scss$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: &quot;style-loader&quot; // creates style nodes from JS strings</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: &quot;css-loader&quot; // translates CSS into CommonJS</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &apos;./src/js/index.js&apos;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;bundle.js&apos;,</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist/js/&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /(node_modules|bower_components)/,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: &apos;babel-loader&apos;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [&apos;env&apos;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.scss$/,</span><br><span class="line">        use: [&#123;</span><br><span class="line">            loader: &quot;style-loader&quot; // creates style nodes from JS strings</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: &quot;css-loader&quot; // translates CSS into CommonJS</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            loader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="然后写对应的scss文件"><a href="#然后写对应的scss文件" class="headerlink" title="然后写对应的scss文件"></a>然后写对应的scss文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在index.js里引入</span><br><span class="line">import &apos;../css/main.scss&apos;</span><br><span class="line"></span><br><span class="line">... 命令行输入 webpack</span><br><span class="line">报错  说没有style-loader</span><br></pre></td></tr></table></figure><h4 id="诀窍-只要报错一般提示少什么东西-然后-你就-cnpm-install-提示的文件名"><a href="#诀窍-只要报错一般提示少什么东西-然后-你就-cnpm-install-提示的文件名" class="headerlink" title="诀窍 只要报错一般提示少什么东西  然后   你就 cnpm install 提示的文件名"></a>诀窍 只要报错一般提示少什么东西  然后   你就 cnpm install 提示的文件名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm i style-loader  --save-dev</span><br><span class="line">cnpm i css-loader --save-dev</span><br></pre></td></tr></table></figure><h4 id="突然性的报错-有可能是依赖包下载有问题"><a href="#突然性的报错-有可能是依赖包下载有问题" class="headerlink" title="突然性的报错  有可能是依赖包下载有问题"></a>突然性的报错  有可能是依赖包下载有问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最佳实践就是  rm -rf node_modules</span><br><span class="line">然后 cnpm i 重新安装依赖</span><br></pre></td></tr></table></figure><h4 id="千万别参考别人的配置然后一路查"><a href="#千万别参考别人的配置然后一路查" class="headerlink" title="千万别参考别人的配置然后一路查"></a>千万别参考别人的配置然后一路查</h4><blockquote><p>这样你就会陷入绝境，因为别人的配置也不知道是从哪里copy来的他能跑通你就不一定了。出了错你就哭吧！</p></blockquote><blockquote><h4 id="最佳实践就是照着官方demo写，因为你发现错了，别人还可能跟你遇到同样的问题，这样你还可以参考，一旦你去用了别人的配置，webpack配置这么繁琐，有经验的前端还会翻车呢？更何况你呢？而且你英文不一定很好！"><a href="#最佳实践就是照着官方demo写，因为你发现错了，别人还可能跟你遇到同样的问题，这样你还可以参考，一旦你去用了别人的配置，webpack配置这么繁琐，有经验的前端还会翻车呢？更何况你呢？而且你英文不一定很好！" class="headerlink" title="最佳实践就是照着官方demo写，因为你发现错了，别人还可能跟你遇到同样的问题，这样你还可以参考，一旦你去用了别人的配置，webpack配置这么繁琐，有经验的前端还会翻车呢？更何况你呢？而且你英文不一定很好！"></a>最佳实践就是照着官方demo写，因为你发现错了，别人还可能跟你遇到同样的问题，这样你还可以参考，一旦你去用了别人的配置，webpack配置这么繁琐，有经验的前端还会翻车呢？更何况你呢？而且你英文不一定很好！</h4></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cache_Control</title>
      <link href="/2018/02/10/N044_02_Cache_Control/"/>
      <url>/2018/02/10/N044_02_Cache_Control/</url>
      
        <content type="html"><![CDATA[<h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache Control"></a>Cache Control</h3><p>稍微有点相关web性能优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">node.js后台</span><br><span class="line">//缓存30秒</span><br><span class="line">response.setHeader(&apos;Cache-Control&apos;,&apos;max-age=30&apos;)</span><br><span class="line"></span><br><span class="line">//这样你访问对应资源的时候就会多了一个响应头</span><br><span class="line">Cache-Control：max-age=30</span><br><span class="line">//意思是30秒内不要再次请求</span><br><span class="line"></span><br><span class="line">30秒内下载资源的时间为 0ms 是从内存里或者磁盘上读取</span><br><span class="line"></span><br><span class="line">30秒后再次请求就会重新下载资源</span><br></pre></td></tr></table></figure><h3 id="更新缓存"><a href="#更新缓存" class="headerlink" title="更新缓存"></a>更新缓存</h3><p>如main.js你缓存了10年但是，你更新后修改了main.js的内容</p><blockquote><p>缓存的策略就是url一致，如果你想更新缓存那就更改url</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;main.js?v=1&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//更新版本</span><br><span class="line">&lt;script src=&quot;main.js?v=2&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 文件上加一个随机字符串，这个如果你是webpack会帮你自动生成</span><br><span class="line">&lt;script src=&quot;main.fdaslj312ljkklj321.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样就实现了更新缓存</p><h3 id="什么是Expire"><a href="#什么是Expire" class="headerlink" title="什么是Expire"></a>什么是Expire</h3><ul><li>它与 Cache Control 效果一样</li><li>出现在 Cache Control之前</li><li>现在被Cache Control替代了</li></ul><p>区别就是：</p><ul><li>Cache Control 是多长时间过期</li><li>Expire 是 某年某月某日几时几分几秒过期</li><li>Expire 的时间指的是本地时间</li></ul><blockquote><p>如果你系统时间是2050年，而缓存时间是2020年,你就没法缓存了</p></blockquote><h3 id="什么是-ETag"><a href="#什么是-ETag" class="headerlink" title="什么是 ETag"></a>什么是 ETag</h3><blockquote><p>这样不得不提 MD5(摘要算法)</p></blockquote><p>假如你下载一个linux系统400MB 下载过程中如何检测你下载的对不对呢？</p><ul><li>MD5就是为了这个场景出现的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果网上的 linux系统 400MB  MD5值是 XXXXXXXX</span><br><span class="line">自己下载的 linux系统 400MB  你的MD5值和网上的一致才说明下载的是正确的</span><br></pre></td></tr></table></figure><p>每个文件对应一个 MD5值<br>文件改动越小MD5差异越大</p><ol><li>应用ETag</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">引入MD5模块算出 文件对应的MD5值</span><br><span class="line"></span><br><span class="line">let fileMd5 = md5(文件资源字符串)</span><br><span class="line">response.setHeader(&apos;ETag&apos;,fileMd5)</span><br></pre></td></tr></table></figure><ol start="2"><li>这样你访问资源的时候响应头里就有了一个ETag头</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">形如</span><br><span class="line">ETag:440c53453212aac08c2321sd</span><br></pre></td></tr></table></figure><ol start="3"><li>以后你在访问同一资源的时候，请求头里会有一个「if-None-Match」头</li></ol><p>「if-None-Match」就是如果不匹配，就是如果你的MD5跟我一样就不需要下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if-None-Match:440c53453212aac08c2321sd</span><br></pre></td></tr></table></figure><h3 id="ETag-和-Cache-Control的区别"><a href="#ETag-和-Cache-Control的区别" class="headerlink" title="ETag 和 Cache Control的区别"></a>ETag 和 Cache Control的区别</h3><ul><li>用 Cache Control是直接不请求，从盘符里读取资源</li><li>用 ETag 是直接不下载，但是仍然会发请求</li></ul><h4 id="结论就是使用-Cache-Control"><a href="#结论就是使用-Cache-Control" class="headerlink" title="结论就是使用  Cache Control"></a>结论就是使用  Cache Control</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Session</title>
      <link href="/2018/02/10/N044__01_Session/"/>
      <url>/2018/02/10/N044__01_Session/</url>
      
        <content type="html"><![CDATA[<h3 id="Cookie存在的问题"><a href="#Cookie存在的问题" class="headerlink" title="Cookie存在的问题"></a>Cookie存在的问题</h3><blockquote><p>用户可以篡改，假如是多个用户，我只要知道他的Cookie就能冒充他，访问他的隐私信息</p></blockquote><h3 id="Session的出现"><a href="#Session的出现" class="headerlink" title="Session的出现"></a>Session的出现</h3><p>Session实质就是服务器的一小块内存——哈希</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//node.js服务器</span><br><span class="line">step000 session定义实际就是一个哈希</span><br><span class="line">let sessions = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">//step001 设置一个随机数的session_id</span><br><span class="line">let session_id = Math.random()*100000;</span><br><span class="line"></span><br><span class="line">//step002 将用户信息存入sessions里</span><br><span class="line">sessions[session_id] = &#123;sign_in_email:emaiil&#125;</span><br><span class="line"></span><br><span class="line">//ste003 在你登录的一瞬间 设置Cookie的值为session_id</span><br><span class="line">response.setHeader(&apos;Set-Cookie&apos;, `session_id=$&#123;session_id&#125;`)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//你登录成功后，访问自己的资源时候会传递cookie</span><br><span class="line">//假如你的 session如下 cookie:session_id=54342.312312312</span><br><span class="line"></span><br><span class="line">//*我这里就不进行是否传递cookie的校验了，你自己干掉cookie那就重新登录呗</span><br><span class="line">//*我这里就不进行是否传递cookie的校验了，你自己干掉cookie那就重新登录呗</span><br><span class="line">//*我这里就不进行是否传递cookie的校验了，你自己干掉cookie那就重新登录呗</span><br><span class="line"></span><br><span class="line">let hash = &#123;&#125;;</span><br><span class="line">//可能有多个cookie</span><br><span class="line">let cookies = request.headers.cookie.split(&apos;;&apos;);</span><br><span class="line">for(let i=0;i&lt;cookies.length;i++)&#123;</span><br><span class="line">    //每个cookie形如 session_id=54342.312312312</span><br><span class="line">    let current = cookies[i].split(&apos;=&apos;);</span><br><span class="line">    let key = current[0]; // session_id</span><br><span class="line">    let value = current[1]; //54342.312312312</span><br><span class="line">    hash[key] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据你登录时存的session_id 查询出 email</span><br><span class="line">let email = sessions[hash[&apos;session&apos;]][&apos;sign_in_email&apos;];</span><br></pre></td></tr></table></figure><h4 id="重回公园实例"><a href="#重回公园实例" class="headerlink" title="重回公园实例"></a>重回公园实例</h4><blockquote><p>公园系统升级了，因为他发现有人拿着别人的票混进去</p></blockquote><ul><li><p>于是你每次购票的时候发给你一个票，票上有一个「id号」 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//比如 购票者   </span><br><span class="line"> 12386 : 猴哥</span><br><span class="line"> 12903 : 八戒</span><br><span class="line"> 12982 : 沙师弟</span><br><span class="line"></span><br><span class="line"> 其实就是 服务器里的一小块内存</span><br><span class="line"> sessions = &#123;</span><br><span class="line">    &quot;12386&quot; : User(&quot;猴哥&quot;),</span><br><span class="line">    &quot;12903&quot; : User(&quot;八戒&quot;),</span><br><span class="line">    &quot;12982&quot; : User(&quot;沙师弟&quot;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">sessions的 key就是一个「随机数」绝不是流水号那样别人就能轻易冒充你</span><br></pre></td></tr></table></figure></li><li><p>第二天猴哥去公园了，公园就会说 「欢迎你！猴哥」</p></li></ul><h4 id="什么是session"><a href="#什么是session" class="headerlink" title="什么是session"></a>什么是session</h4><ol><li>服务器通过cookie给用户一个session_id</li><li>session_id对应服务器里的一小块内存</li><li>每次用户访问服务器的时候，服务器通过session_id读取用户信息，识别用户是谁</li></ol><h4 id="为什么session-id是一个随机数"><a href="#为什么session-id是一个随机数" class="headerlink" title="为什么session_id是一个随机数"></a>为什么session_id是一个随机数</h4><p>假如你的session_id = 321341.31239089089054</p><blockquote><h5 id="请问用户2的session-id是什么-我怎么知道用户2的随机数是啥"><a href="#请问用户2的session-id是什么-我怎么知道用户2的随机数是啥" class="headerlink" title="请问用户2的session_id是什么?我怎么知道用户2的随机数是啥"></a>请问用户2的session_id是什么?我怎么知道用户2的随机数是啥</h5></blockquote><blockquote><h5 id="那我要是删了cookie呢？"><a href="#那我要是删了cookie呢？" class="headerlink" title="那我要是删了cookie呢？"></a>那我要是删了cookie呢？</h5></blockquote><ul><li>你自己把票扔了，公园让你进去？</li><li>你说可以翻墙进公园啊，那我还说啥啊，你咋不开坦克碾过去呢</li></ul><p>当然是重新买票了，或者重新登录喽</p><blockquote><h5 id="为啥是随机数"><a href="#为啥是随机数" class="headerlink" title="为啥是随机数"></a>为啥是随机数</h5></blockquote><p>因为如果是流水号你按顺序排下去就知道别人的session_id了</p><blockquote><h5 id="暴力穷举呢？"><a href="#暴力穷举呢？" class="headerlink" title="暴力穷举呢？"></a>暴力穷举呢？</h5></blockquote><p>有点难啊！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">假如session_id是16位随机数字</span><br><span class="line"></span><br><span class="line">那你可能要试10的16次方那就是 10,000,000,000,000,000</span><br><span class="line"></span><br><span class="line">假如是session_id是16位随机的数字和字母</span><br><span class="line"></span><br><span class="line">那你可能要试36的16次方那就是 。。。。</span><br><span class="line"></span><br><span class="line">一天时间是86400秒 你够快1秒来一次 你去算吧！</span><br></pre></td></tr></table></figure><blockquote><h5 id="一个用户大约占据多少内存"><a href="#一个用户大约占据多少内存" class="headerlink" title="一个用户大约占据多少内存"></a>一个用户大约占据多少内存</h5></blockquote><p>如果1M一个用户 1000个用户就是1G内存了<br>但是实际上每个用户给个 「几K」就够了</p><h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><h4 id="什么是-Cookie"><a href="#什么是-Cookie" class="headerlink" title="什么是 Cookie"></a>什么是 Cookie</h4><ol><li>服务器通过Set-Cookie 头给客户端的一串字符串</li><li>客户端每次访问相同域名的网页时，必须带上这段字符串</li><li>客户端要在一段时间内保存这个Cookie</li><li>Cookie 在用户关闭用户的时候就失效(后台代码可以任意设置过期时间)</li></ol><h4 id="什么是-Session"><a href="#什么是-Session" class="headerlink" title="什么是 Session"></a>什么是 Session</h4><ol><li>将 SessionID 通过Cookie发送给客户端</li><li>客户端访问服务器时,服务器读取 SessionID</li><li>服务器有一块内存(哈希表)保存了所有 session</li><li>通过 SessionID 我们可以得到对应的用户隐私信息，如id/email</li><li>这块内存(哈希表)就是服务器上的所有 session</li></ol><h4 id="什么是-LocalStorage"><a href="#什么是-LocalStorage" class="headerlink" title="什么是 LocalStorage"></a>什么是 LocalStorage</h4><blockquote><p>html5 提供的api</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//注意只能存 string 即使你存一个对象它也会调用对象的 obj.toString()</span><br><span class="line">window.localStorage.setItem(&apos;a&apos;,&apos;1&apos;)</span><br><span class="line">windwo.localStorage.getItem(&apos;a&apos;)</span><br><span class="line"></span><br><span class="line">//如果你想存复杂数据类型只能通过序列化</span><br><span class="line">let a = &#123;name:&quot;aaa&quot;,age:18&#125;</span><br><span class="line">window.localStorage.setItem(&apos;a&apos;,JSON.stringify(a))</span><br></pre></td></tr></table></figure><blockquote><p>session最大问题就是耗内存，因为存在服务器</p></blockquote><blockquote><p>localStorage存在客户端的盘符里——数据的持久化存储</p></blockquote><p>答案如下</p><ol><li>LocalStorage 跟 HTTP 无关</li><li>HTTP 不会带上 LocalStorage 的值</li><li>只有相同域名的页面才能相互读取 LocalStorage(没有同源那么严格)</li><li>每个域名 LocalStorage 最大存储量不同为 5M左右(每个浏览器不一样)</li><li>常用场景：提示信息（没有用的信息,不能记录密码）</li><li>LocalStorage 永久有效，除非用户自己清理缓存</li></ol><h4 id="什么是-SessionStorage"><a href="#什么是-SessionStorage" class="headerlink" title="什么是 SessionStorage"></a>什么是 SessionStorage</h4><p>1,2,3,4 同 LocalStorage</p><ol start="5"><li>SessionStorage 在用户关闭用户的时候就失效 </li></ol><h4 id="请问session和cookie什么关系"><a href="#请问session和cookie什么关系" class="headerlink" title="请问session和cookie什么关系"></a>请问session和cookie什么关系</h4><blockquote><p>session是基于cookie实现的因为session_id必须放到cookie里发给客户端,没有cookie就没有session,<br>cookie是session的基石</p></blockquote><h4 id="请问-Cookie-和-LocalStorage-的区别是什么"><a href="#请问-Cookie-和-LocalStorage-的区别是什么" class="headerlink" title="请问 Cookie 和 LocalStorage 的区别是什么"></a>请问 Cookie 和 LocalStorage 的区别是什么</h4><blockquote><p>Cookie 是每次请求都带给服务器<br>Cookie 只有4K</p></blockquote><blockquote><p>LocalStorage 跟HTTP无关不会被携带到服务器<br>LocalStorage 有5M</p></blockquote><h4 id="LocalStorage-和-SessionStorage-的区别"><a href="#LocalStorage-和-SessionStorage-的区别" class="headerlink" title="LocalStorage 和 SessionStorage 的区别"></a>LocalStorage 和 SessionStorage 的区别</h4><blockquote><p>SessionStorage 在用户关闭用户的时候就失效 (会话结束)</p></blockquote><h3 id="不基于-Cookie-的-Session"><a href="#不基于-Cookie-的-Session" class="headerlink" title="不基于 Cookie 的 Session"></a>不基于 Cookie 的 Session</h3><p>实现如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">后端</span><br><span class="line">1.登录的时候不传递cookie</span><br><span class="line">2.通过json传递给前端</span><br><span class="line">response.write(`&#123;&quot;session_id&quot;:$&#123;session_id&#125;&#125;`)</span><br><span class="line"></span><br><span class="line">前端</span><br><span class="line">1.登录的时候通过响应的第四部分也就是json解析传递的session_id</span><br><span class="line">2.存入到localStorage</span><br><span class="line"></span><br><span class="line">localStorage.setItem(&apos;session_id&apos;,obj.session_id) </span><br><span class="line"></span><br><span class="line">当访问用户信息的时候通过url参数传递session_id</span><br><span class="line"></span><br><span class="line">window.location.href = `/?session_id=$&#123;obj.session_id&#125;`</span><br></pre></td></tr></table></figure><blockquote><h4 id="session大部分时间是基于cookie来存储id的，也可以通过localStorage-查询参数传递"><a href="#session大部分时间是基于cookie来存储id的，也可以通过localStorage-查询参数传递" class="headerlink" title="session大部分时间是基于cookie来存储id的，也可以通过localStorage + 查询参数传递"></a>session大部分时间是基于cookie来存储id的，也可以通过localStorage + 查询参数传递</h4></blockquote><h3 id="Cookie-的问题-localStorage出来之前"><a href="#Cookie-的问题-localStorage出来之前" class="headerlink" title="Cookie 的问题(localStorage出来之前)"></a>Cookie 的问题(localStorage出来之前)</h3><blockquote><p>前端那时无法持久化数据所以跨页面数据有时就使用了 Cookie</p></blockquote><blockquote><h5 id="问题来了-Cookie每次请求是会被带到服务器的"><a href="#问题来了-Cookie每次请求是会被带到服务器的" class="headerlink" title="问题来了 Cookie每次请求是会被带到服务器的"></a>问题来了 Cookie每次请求是会被带到服务器的</h5></blockquote><p>假设你有1K的cookie这样每个请求就要多携带1K的cookie到服务器，而服务器的数据可能只有 200B (请求就慢了)</p><h5 id="前端永远不要读-写-Cookie-这些都是后端的事"><a href="#前端永远不要读-写-Cookie-这些都是后端的事" class="headerlink" title="前端永远不要读/写 Cookie,这些都是后端的事"></a>前端永远不要读/写 Cookie,这些都是后端的事</h5><p>就像公园卖票一样，前端就相当于游客，你自己造票？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cookie</title>
      <link href="/2018/02/09/N043_Cookie/"/>
      <url>/2018/02/09/N043_Cookie/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie"></a>什么是Cookie</h3><p><a href="https://zh.wikipedia.org/wiki/Cookie" target="_blank" rel="noopener">Cookie维基百科</a></p><p><a href="https://zhuanlan.zhihu.com/p/22396872?refer=study-fe" target="_blank" rel="noopener">方大文章</a></p><h3 id="出现场景"><a href="#出现场景" class="headerlink" title="出现场景"></a>出现场景</h3><p>登陆注册</p><ol><li>在你登录成功的一瞬间，后台设置cookie</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// node.js后端设置响应头</span><br><span class="line">// 假如你的登录邮箱是 </span><br><span class="line">let email = &apos;trustfor@sian.cn&apos;;</span><br><span class="line">//登录成功设置响应头</span><br><span class="line">response.setHeader(&apos;Set-Cookie&apos;:&apos;sign_in_email=$&#123;email&#125;&apos;)</span><br></pre></td></tr></table></figure><p>你可以在浏览器里看到你设置的响应头 (Response Headers)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie:sign_in_email=trustfor@sian.cn</span><br></pre></td></tr></table></figure><ol start="2"><li><p>只有被设置了Cookie,你每次访问同一域名下资源都会在请求头里传递 Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie:sign_in_email=trustfor@sian.cn</span><br></pre></td></tr></table></figure></li><li><p>后台得到Cookie就知道用户是谁了</p><blockquote><h4 id="将Cookie映射到生活中"><a href="#将Cookie映射到生活中" class="headerlink" title="将Cookie映射到生活中"></a>将Cookie映射到生活中</h4></blockquote></li></ol><blockquote><ul><li>你去公园，公园给你发了个票，票的有效期是2天 </li><li>假设你中途离开了公园，下午再次进入你就需要提供你的门票<ul><li>即使你是去看公园里的狗，也得有门票才行</li></ul></li></ul></blockquote><h3 id="Cookie的特点"><a href="#Cookie的特点" class="headerlink" title="Cookie的特点"></a>Cookie的特点</h3><ol><li>服务器通过Set-Cookie 响应头设置 Cookie</li><li>浏览器得到Cookie之后，每次请求都要带上Cookie</li><li>服务器读取Cookie 就知道登录用户的信息(email)</li></ol><blockquote><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3></blockquote><p>我在Chrome登录了并得到了Cookie,用Safari访问Safari会带上Cookie吗？</p><blockquote><h5 id="No，北京动物园和天津动物园的门票你觉得能一样吗？"><a href="#No，北京动物园和天津动物园的门票你觉得能一样吗？" class="headerlink" title="No，北京动物园和天津动物园的门票你觉得能一样吗？"></a>No，北京动物园和天津动物园的门票你觉得能一样吗？</h5></blockquote><blockquote><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3></blockquote><blockquote><h5 id="Cookie-存在哪，你的硬盘上-如果是票当然是你的口袋里"><a href="#Cookie-存在哪，你的硬盘上-如果是票当然是你的口袋里" class="headerlink" title="Cookie 存在哪，你的硬盘上(如果是票当然是你的口袋里)"></a>Cookie 存在哪，你的硬盘上(如果是票当然是你的口袋里)</h5></blockquote><blockquote><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3></blockquote><p>票能作假吗？</p><blockquote><h5 id="可以，只要你稍微有一点前端知识就可以伪造Cookie"><a href="#可以，只要你稍微有一点前端知识就可以伪造Cookie" class="headerlink" title="可以，只要你稍微有一点前端知识就可以伪造Cookie"></a>可以，只要你稍微有一点前端知识就可以伪造Cookie</h5><h5 id="如果是Chrome你可以F12–-gt-Application–-gt-Cookies就能修改了"><a href="#如果是Chrome你可以F12–-gt-Application–-gt-Cookies就能修改了" class="headerlink" title="如果是Chrome你可以F12–&gt;Application–&gt;Cookies就能修改了"></a>如果是Chrome你可以F12–&gt;Application–&gt;Cookies就能修改了</h5></blockquote><blockquote><h3 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h3></blockquote><p>Cookie 有有效期吗？</p><blockquote><h5 id="当然有了，你见过7天免登陆吗？"><a href="#当然有了，你见过7天免登陆吗？" class="headerlink" title="当然有了，你见过7天免登陆吗？"></a>当然有了，你见过7天免登陆吗？</h5><h5 id="默认有效期20分钟，防止别人拿着你的票查看你隐私信息，"><a href="#默认有效期20分钟，防止别人拿着你的票查看你隐私信息，" class="headerlink" title="默认有效期20分钟，防止别人拿着你的票查看你隐私信息，"></a>默认有效期20分钟，防止别人拿着你的票查看你隐私信息，</h5></blockquote><blockquote><h3 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h3></blockquote><p>Cookie 遵守同源策略吗？</p><blockquote><h5 id="也有，不过跟-AJAX-的同源策略稍微有些不同。"><a href="#也有，不过跟-AJAX-的同源策略稍微有些不同。" class="headerlink" title="也有，不过跟 AJAX 的同源策略稍微有些不同。"></a>也有，不过跟 AJAX 的同源策略稍微有些不同。</h5><h5 id="当请求-qq-com-下的资源时，浏览器会默认带上-qq-com-对应的-Cookie，不会带上-baidu-com-对应的-Cookie"><a href="#当请求-qq-com-下的资源时，浏览器会默认带上-qq-com-对应的-Cookie，不会带上-baidu-com-对应的-Cookie" class="headerlink" title="当请求 qq.com 下的资源时，浏览器会默认带上 qq.com 对应的 Cookie，不会带上 baidu.com 对应的 Cookie"></a>当请求 qq.com 下的资源时，浏览器会默认带上 qq.com 对应的 Cookie，不会带上 baidu.com 对应的 Cookie</h5><h5 id="当请求-v-qq-com-下的资源时，浏览器不仅会带上-v-qq-com-的Cookie，还会带上-qq-com-的-Cookie"><a href="#当请求-v-qq-com-下的资源时，浏览器不仅会带上-v-qq-com-的Cookie，还会带上-qq-com-的-Cookie" class="headerlink" title="当请求 v.qq.com 下的资源时，浏览器不仅会带上 v.qq.com 的Cookie，还会带上 qq.com 的 Cookie"></a>当请求 v.qq.com 下的资源时，浏览器不仅会带上 v.qq.com 的Cookie，还会带上 qq.com 的 Cookie</h5><h5 id="另外-Cookie-还可以根据路径做限制，请自行了解，这个功能用得比较少。"><a href="#另外-Cookie-还可以根据路径做限制，请自行了解，这个功能用得比较少。" class="headerlink" title="另外 Cookie 还可以根据路径做限制，请自行了解，这个功能用得比较少。"></a>另外 Cookie 还可以根据路径做限制，请自行了解，这个功能用得比较少。</h5></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><p>这里的场景是非常非常简单的，后台设置cookie肯定不会拿你的邮箱，这样太好冒充了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面向对象编程</title>
      <link href="/2017/12/10/N038_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2017/12/10/N038_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript" target="_blank" rel="noopener">面向对象 MDN</a></p><p>JavaScript面向对象编程</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><h4 id="如果你在公司-var-a-1-是要被离职的"><a href="#如果你在公司-var-a-1-是要被离职的" class="headerlink" title="如果你在公司 var a = 1;是要被离职的"></a>如果你在公司 var a = 1;是要被离职的</h4><blockquote><p>因为你不知道 a以前是什么</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 全局命名空间</span><br><span class="line">var MYAPP = MYAPP || &#123;&#125;;</span><br><span class="line">//等价于</span><br><span class="line">if(MYAPP)&#123;</span><br><span class="line">    var MYAPP = MYAPP</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    var MYAPP = &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码技巧  先看看表达式的值是什么</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1 || 2     //1</span><br><span class="line"> </span><br><span class="line">1 &amp;&amp; 2 &amp;&amp; 3  //3</span><br><span class="line"></span><br><span class="line">0||null||undefined||1  //1</span><br></pre></td></tr></table></figure><blockquote><h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a || b </span><br><span class="line"></span><br><span class="line">c &amp;&amp; d</span><br><span class="line"></span><br><span class="line">//它们的值基本不可能是 true / false</span><br><span class="line">//五个falsy值</span><br><span class="line"></span><br><span class="line">//  0 NaN &apos;&apos;  null undefined</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1 &amp;&amp; 0  // 0</span><br><span class="line"></span><br><span class="line">1 &amp;&amp; 0 &amp;&amp; 2  // 0</span><br><span class="line"></span><br><span class="line">1 &amp;&amp; 0 &amp;&amp; console.log(3)  //打印3不会执行  会返回  0</span><br><span class="line"></span><br><span class="line">1 &amp;&amp; 2 &amp;&amp; 3  // 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 || undefined || null || 1   // 1</span><br><span class="line"></span><br><span class="line">0 || undefined || null || 1 || 0 || null  // 1</span><br></pre></td></tr></table></figure><blockquote><h3 id="回到之前的命名空间写法"><a href="#回到之前的命名空间写法" class="headerlink" title="回到之前的命名空间写法"></a>回到之前的命名空间写法</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var app = &#123;&#125;//危险代码</span><br><span class="line"></span><br><span class="line">if(app)&#123;</span><br><span class="line">    //app = app 这句可以不写 是废话</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    app = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 安全写法</span><br><span class="line"></span><br><span class="line">var app2 = app2 || &#123;&#125;</span><br><span class="line"></span><br><span class="line">if(app2)&#123;</span><br><span class="line">    app2 = app2</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    app2 = &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this复习"><a href="#this复习" class="headerlink" title="this复习"></a>this复习</h3><blockquote><p>待更新。。。。</p></blockquote><h3 id="new是做啥的"><a href="#new是做啥的" class="headerlink" title="new是做啥的"></a>new是做啥的</h3><blockquote><h3 id="当我们需要100个士兵-就要写100次"><a href="#当我们需要100个士兵-就要写100次" class="headerlink" title="当我们需要100个士兵 就要写100次"></a>当我们需要100个士兵 就要写100次</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var 士兵们 = [];</span><br><span class="line">var 士兵 ;</span><br><span class="line">for(var i=0;i&lt;100;i++)&#123;</span><br><span class="line">    士兵 = &#123;</span><br><span class="line">      ID: i, // 用于区分每个士兵</span><br><span class="line">      兵种:&quot;美国大兵&quot;,</span><br><span class="line">      攻击力:5,</span><br><span class="line">      生命值:42, </span><br><span class="line">      行走:function()&#123; /*走俩步的代码*/&#125;,</span><br><span class="line">      奔跑:function()&#123; /*狂奔的代码*/  &#125;,</span><br><span class="line">      死亡:function()&#123; /*Go die*/    &#125;,</span><br><span class="line">      攻击:function()&#123; /*糊他熊脸*/   &#125;,</span><br><span class="line">      防御:function()&#123; /*护脸*/       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    士兵们.push(士兵)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>这样是很耗内存的因为 每个士兵自己都有 这些方法  但这些方法内容是一样的 就会出现500个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行走:function()&#123; /*走俩步的代码*/&#125;,</span><br><span class="line">奔跑:function()&#123; /*狂奔的代码*/  &#125;,</span><br><span class="line">死亡:function()&#123; /*Go die*/    &#125;,</span><br><span class="line">攻击:function()&#123; /*糊他熊脸*/   &#125;,</span><br><span class="line">防御:function()&#123; /*护脸*/       &#125;</span><br></pre></td></tr></table></figure></p><h4 id="士兵共有属性"><a href="#士兵共有属性" class="headerlink" title="士兵共有属性"></a>士兵共有属性</h4><blockquote><p><strong> </strong>proto__ __ 这样</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var 士兵共有属性 = &#123;</span><br><span class="line">    兵种:&quot;美国大兵&quot;,</span><br><span class="line">    攻击力:5,</span><br><span class="line">    行走:function()&#123; /*走俩步的代码*/&#125;,</span><br><span class="line">    奔跑:function()&#123; /*狂奔的代码*/  &#125;,</span><br><span class="line">    死亡:function()&#123; /*Go die*/    &#125;,</span><br><span class="line">    攻击:function()&#123; /*糊他熊脸*/   &#125;,</span><br><span class="line">    防御:function()&#123; /*护脸*/       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var 士兵们 = [];</span><br><span class="line">var 士兵 ;</span><br><span class="line">for(var i=0;i&lt;100;i++)&#123;</span><br><span class="line">    士兵 = &#123;</span><br><span class="line">      ID: i, // 用于区分每个士兵</span><br><span class="line">      生命值:42</span><br><span class="line">    &#125;</span><br><span class="line">    /*实际工作中不要这样写__proto__ 不是标准属性*/</span><br><span class="line">    </span><br><span class="line">    士兵.__proto__ = 士兵共有属性</span><br><span class="line">    </span><br><span class="line">    士兵们.push(士兵)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样你会感觉士兵和 士兵共有属性很松散</p></blockquote><h4 id="使用函数把-士兵-和-士兵共有属性-包裹起来"><a href="#使用函数把-士兵-和-士兵共有属性-包裹起来" class="headerlink" title="使用函数把 士兵 和 士兵共有属性 包裹起来"></a>使用函数把 士兵 和 士兵共有属性 包裹起来</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var 士兵共有属性 = &#123;</span><br><span class="line">    兵种:&quot;美国大兵&quot;,</span><br><span class="line">    攻击力:5,</span><br><span class="line">    行走:function()&#123; /*走俩步的代码*/&#125;,</span><br><span class="line">    奔跑:function()&#123; /*狂奔的代码*/  &#125;,</span><br><span class="line">    死亡:function()&#123; /*Go die*/    &#125;,</span><br><span class="line">    攻击:function()&#123; /*糊他熊脸*/   &#125;,</span><br><span class="line">    防御:function()&#123; /*护脸*/       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function create士兵(id)&#123;</span><br><span class="line">    var 士兵 = &#123;</span><br><span class="line">        ID:i,//</span><br><span class="line">        生命值:42</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    士兵.__proto__ = 士兵共有属性</span><br><span class="line">    </span><br><span class="line">    return 士兵 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建士兵</span><br><span class="line">var 士兵们 = [];</span><br><span class="line">var 士兵 ;</span><br><span class="line">for(var i=0;i&lt;100;i++)&#123;</span><br><span class="line">    士兵们.push( create士兵(i) )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="这样-create士兵-和-士兵共有属性还是没太大关联性"><a href="#这样-create士兵-和-士兵共有属性还是没太大关联性" class="headerlink" title="这样 create士兵 和 士兵共有属性还是没太大关联性"></a>这样 create士兵 和 士兵共有属性还是没太大关联性</h3></blockquote><h4 id="把-“士兵的共有属性”-放到-“create士兵”-的属性-里"><a href="#把-“士兵的共有属性”-放到-“create士兵”-的属性-里" class="headerlink" title="把 “士兵的共有属性” 放到 “create士兵” 的属性 里"></a>把 “士兵的共有属性” 放到 “create士兵” 的属性 里</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function create士兵(id)&#123;</span><br><span class="line">    var 士兵 = &#123;</span><br><span class="line">        ID:i,//</span><br><span class="line">        生命值:42</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    士兵.__proto__ = create士兵.士兵共有属性</span><br><span class="line">    </span><br><span class="line">    return 士兵 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">create士兵.士兵共有属性 = &#123;</span><br><span class="line">    兵种:&quot;美国大兵&quot;,</span><br><span class="line">    攻击力:5,</span><br><span class="line">    行走:function()&#123; /*走俩步的代码*/&#125;,</span><br><span class="line">    奔跑:function()&#123; /*狂奔的代码*/  &#125;,</span><br><span class="line">    死亡:function()&#123; /*Go die*/    &#125;,</span><br><span class="line">    攻击:function()&#123; /*糊他熊脸*/   &#125;,</span><br><span class="line">    防御:function()&#123; /*护脸*/       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JS之父的关怀"><a href="#JS之父的关怀" class="headerlink" title="JS之父的关怀"></a>JS之父的关怀</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function 士兵(id)&#123;</span><br><span class="line">    //step1</span><br><span class="line">    //var temp = &#123;&#125;</span><br><span class="line">    //step2</span><br><span class="line">    //this = temp </span><br><span class="line">    //step3</span><br><span class="line">    //this.__proto__ = create士兵.prototype</span><br><span class="line">    this.ID = id;</span><br><span class="line">    this.生命值 = 42</span><br><span class="line">    //step4</span><br><span class="line">    //return this </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">士兵.prototype = &#123;</span><br><span class="line">    constructor:士兵,</span><br><span class="line">    兵种:&quot;美国大兵&quot;,</span><br><span class="line">    攻击力:5,</span><br><span class="line">    行走:function()&#123; /*走俩步的代码*/&#125;,</span><br><span class="line">    奔跑:function()&#123; /*狂奔的代码*/  &#125;,</span><br><span class="line">    死亡:function()&#123; /*Go die*/    &#125;,</span><br><span class="line">    攻击:function()&#123; /*糊他熊脸*/   &#125;,</span><br><span class="line">    防御:function()&#123; /*护脸*/       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 你要做的事情 就是 加个new</span><br><span class="line"></span><br><span class="line">var 士兵 = new 士兵(id);</span><br></pre></td></tr></table></figure><blockquote><h3 id="原理-new-士兵-之后"><a href="#原理-new-士兵-之后" class="headerlink" title="原理 new 士兵()之后"></a>原理 new 士兵()之后</h3></blockquote><ol><li>生成一个临时对象 temp</li><li>然后用 this指向 这个临时对象 temp</li><li>然后让this的原型 等于这个函数的prototype</li><li>而且也不用return 这个事 也帮你做了 帮你返回this </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var obj =new Object()</span><br><span class="line"></span><br><span class="line">自有属性  空</span><br><span class="line">obj.__proto__ === Object.prototype</span><br><span class="line"></span><br><span class="line">var array = new Array(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;)</span><br><span class="line">自有属性  0:&apos;a&apos; 1:&apos;b&apos; 2:&apos;c&apos; length:3</span><br><span class="line">array.__proto__ === Array.prototype</span><br><span class="line">Array.prototype.__proto__ === Object.prototype</span><br><span class="line"></span><br><span class="line">var fn =new Function(&apos;x&apos;,&apos;y&apos;,&apos;return x+y&apos;)</span><br><span class="line">自有属性 length:2 不可见函数体: &apos;return x+y&apos;</span><br><span class="line">fn.__proto__ === Function.prototype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Array is  a Function</span><br><span class="line">Array = function()&#123;...&#125;</span><br><span class="line">Array.__proto__ === Function.prototype</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CRM之从零搭建一个数据库系统</title>
      <link href="/2017/12/09/N037_CRM%E4%B9%8B%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
      <url>/2017/12/09/N037_CRM%E4%B9%8B%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="引入LeanCloud"><a href="#引入LeanCloud" class="headerlink" title="引入LeanCloud"></a>引入LeanCloud</h3><p>在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a> 上注册一个账户。</p><blockquote><p>前端很少涉及数据库 把数据永久的保存在一个地方 跨设备访问数据</p></blockquote><blockquote><p>阿里云最低配的30元/月</p></blockquote><blockquote><h3 id="leancloud这是一个将服务器能力免费给你用的网站"><a href="#leancloud这是一个将服务器能力免费给你用的网站" class="headerlink" title="leancloud这是一个将服务器能力免费给你用的网站"></a>leancloud这是一个将服务器能力免费给你用的网站</h3></blockquote><h4 id="注册的时候有一点要注意-至少8位密码-包含数字大写小写字母"><a href="#注册的时候有一点要注意-至少8位密码-包含数字大写小写字母" class="headerlink" title="注册的时候有一点要注意 至少8位密码 包含数字大写小写字母"></a>注册的时候有一点要注意 至少8位密码 包含数字大写小写字母</h4><h4 id="一个自带数据库和增删改查（CRUD）功能的后台系统。"><a href="#一个自带数据库和增删改查（CRUD）功能的后台系统。" class="headerlink" title="一个自带数据库和增删改查（CRUD）功能的后台系统。"></a>一个自带数据库和增删改查（CRUD）功能的后台系统。</h4><p>拥有：</p><ol><li>登录注册、手机验证码功能（收费）</li><li>存储任意信息</li><li>读取任意信息</li><li>搜索任意信息</li><li>删除任意信息</li><li>更新任意信息</li></ol><p>等功能。</p><h4 id="没有见过的东西？！"><a href="#没有见过的东西？！" class="headerlink" title="没有见过的东西？！"></a>没有见过的东西？！</h4><blockquote><p>不要慌，使用 Copy-Run-Modify 套路即可。</p></blockquote><blockquote><p>演示如何使用 LeanCloud 存一个 Hello World</p></blockquote><ol><li>创建一个应用 cv-20180128</li><li>引入 av-min.js，得到 window.AV</li><li>初始化 AV 对象（代码直接拷）</li><li>新建一条数据（代码直接拷）</li></ol><ul><li>创建你的应用之后</li><li>点击右上角帮助/快速入门  </li><li>选择我们的语言 js</li><li>然后开始看文档 copy</li></ul><h4 id="先引入cdn-验证是否成功"><a href="#先引入cdn-验证是否成功" class="headerlink" title="先引入cdn 验证是否成功"></a>先引入cdn 验证是否成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn1.lncld.net/static/js/3.5.0/av-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">//F12 </span><br><span class="line">console.log(AV) //不报错代表成功</span><br></pre></td></tr></table></figure><h3 id="注意每个应用有自己的key-不要使用我的key"><a href="#注意每个应用有自己的key-不要使用我的key" class="headerlink" title="注意每个应用有自己的key 不要使用我的key"></a>注意每个应用有自己的key 不要使用我的key</h3><blockquote><p>加入留言模块</p></blockquote><h4 id="message-js"><a href="#message-js" class="headerlink" title="message.js"></a>message.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var APP_ID = &apos;fqJwht8RtYXK5nVQ1uaDjUc5-gzGzoHsz&apos;;</span><br><span class="line">var APP_KEY = &apos;rLVeL79CM0mAVV6GNa27xDpb&apos;;</span><br><span class="line"></span><br><span class="line">AV.init(&#123;</span><br><span class="line">  appId: APP_ID,</span><br><span class="line">  appKey: APP_KEY</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;ok&apos;) //成功打印代表成功了</span><br></pre></td></tr></table></figure><h4 id="验证-你的应用跟我不一样"><a href="#验证-你的应用跟我不一样" class="headerlink" title="验证 你的应用跟我不一样"></a>验证 你的应用跟我不一样</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping &quot;fqjwht8r.api.lncld.net&quot;</span><br></pre></td></tr></table></figure><h4 id="ping成功后在继续测试"><a href="#ping成功后在继续测试" class="headerlink" title="ping成功后在继续测试"></a>ping成功后在继续测试</h4><blockquote><p>然后在项目中编写如下测试代码：</p></blockquote><h4 id="message-js-1"><a href="#message-js-1" class="headerlink" title="message.js"></a>message.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//创建了  TestObject表</span><br><span class="line">var TestObject = AV.Object.extend(&apos;TestObject&apos;);</span><br><span class="line">// 在表中创建一行数据</span><br><span class="line">var testObject = new TestObject();</span><br><span class="line">// 数据的内容是 words:&apos;Hello World&apos; 保存</span><br><span class="line">// 如果保存成功，则允许alert</span><br><span class="line">testObject.save(&#123;</span><br><span class="line">  words: &apos;Hello World!&apos;</span><br><span class="line">&#125;).then(function(object) &#123;</span><br><span class="line">  alert(&apos;LeanCloud Rocks!&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://leancloud.cn/dashboard/data.html?appid=fqJwht8RtYXK5nVQ1uaDjUc5-gzGzoHsz#/TestObject" target="_blank" rel="noopener">控制台 &gt; 存储 &gt; 数据 &gt; TestObject</a>你会看到变化</p></blockquote><h4 id="CRM之-M"><a href="#CRM之-M" class="headerlink" title="CRM之 M"></a>CRM之 M</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var hjx = AV.Object.extend(&apos;Hjx&apos;);</span><br><span class="line">var obj = new hjx();</span><br><span class="line">obj.save(&#123;</span><br><span class="line">  words: &apos;hi&apos;</span><br><span class="line">&#125;).then(function(object) &#123;</span><br><span class="line">  alert(&apos;LeanCloud Rocks!&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>刷新你会发现多了个Hjx的表</p></blockquote><h4 id="再次修改"><a href="#再次修改" class="headerlink" title="再次修改"></a>再次修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var hjx = AV.Object.extend(&apos;Hjx&apos;);</span><br><span class="line">var obj = new hjx();</span><br><span class="line">obj.save(&#123;</span><br><span class="line">  words: &apos;hi&apos;,</span><br><span class="line">  xxxx:&apos;sdfjklsdjflsdjkfadklas&apos;,</span><br><span class="line">&#125;).then(function(object) &#123;</span><br><span class="line">  alert(&apos;LeanCloud Rocks!&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>刷新之后你会发现 Hjx里 多了一列 xxxx 这就是数据库</p></blockquote><h4 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h4><ol><li>创建一个应用 cv-20180128</li><li>引入av-main.js得到window.AV</li><li>初始化 AV 对象 (代码直接拷)</li><li>新建一条数据(代码直接拷)</li></ol><h4 id="添加section留言模块"><a href="#添加section留言模块" class="headerlink" title="添加section留言模块"></a>添加section留言模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;section&gt;</span><br><span class="line">    &lt;h2&gt;留言&lt;/h2&gt;</span><br><span class="line">    &lt;form id=&quot;postMessageForm&quot; style=&quot;width:700px;margin:50px auto;&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;content&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var APP_ID = &apos;fqJwht8RtYXK5nVQ1uaDjUc5-gzGzoHsz&apos;;</span><br><span class="line">var APP_KEY = &apos;rLVeL79CM0mAVV6GNa27xDpb&apos;;</span><br><span class="line"></span><br><span class="line">AV.init(&#123;</span><br><span class="line">  appId: APP_ID,</span><br><span class="line">  appKey: APP_KEY</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let myForm = document.querySelector(&apos;#postMessageForm&apos;)</span><br><span class="line"></span><br><span class="line">myForm.addEventListener(&apos;submit&apos;,function(e)&#123;</span><br><span class="line">    e.preventDefault(); //防止刷新页面</span><br><span class="line">    let content = myForm.querySelector(&apos;input[name=content]&apos;).value;</span><br><span class="line">    var Message = AV.Object.extend(&apos;Message&apos;);</span><br><span class="line">    var message = new Message();</span><br><span class="line">    message.save(&#123;</span><br><span class="line">        &apos;content&apos;:content,</span><br><span class="line">    &#125;).then(function(object) &#123;</span><br><span class="line">        alert(&apos;存入成功&apos;)</span><br><span class="line">        console.log(object)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// var hjx = AV.Object.extend(&apos;Hjx&apos;);</span><br><span class="line">// var obj = new hjx();</span><br><span class="line">// obj.save(&#123;</span><br><span class="line">//   words: &apos;hi&apos;,</span><br><span class="line">//   xxxx:&apos;sdfjklsdjflsdjkfadklas&apos;,</span><br><span class="line">// &#125;).then(function(object) &#123;</span><br><span class="line">//   console.log(object)</span><br><span class="line">// &#125;)</span><br></pre></td></tr></table></figure><h5 id="技术细节-监听submit同时能监听用户点回车"><a href="#技术细节-监听submit同时能监听用户点回车" class="headerlink" title="技术细节 监听submit同时能监听用户点回车"></a>技术细节 监听submit同时能监听用户点回车</h5><blockquote><p>如果你不这么写就要这样写</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let btn = myForm.querySelector(&apos;input[type=submit]&apos;)</span><br><span class="line">btn.addEventListener(&apos;click&apos;,function()&#123;&#125;);</span><br><span class="line">let input = myForm.querySelector(&apos;input[name=content]&apos;)</span><br><span class="line">input.addEventListener(&apos;keypress&apos;,function(e)&#123;</span><br><span class="line">    if(e.keyCode === 13)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://sltrust.github.io/cv/028mycv.html" target="_blank" rel="noopener">MVC版简历message模块为mvc分离的</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MVC之VC</title>
      <link href="/2017/12/08/N036_MVC%E4%B9%8BVC/"/>
      <url>/2017/12/08/N036_MVC%E4%B9%8BVC/</url>
      
        <content type="html"><![CDATA[<h2 id="项目引入链接如下"><a href="#项目引入链接如下" class="headerlink" title="项目引入链接如下"></a>项目引入链接如下</h2><p><a href="https://sltrust.github.io/cv/017mycv_show_animate.html" target="_blank" rel="noopener">基础版代码</a></p><p><a href="https://sltrust.github.io/cv/020mycv.html" target="_blank" rel="noopener">引入轮播后</a></p><p><a href="https://sltrust.github.io/cv/021mycv.html" target="_blank" rel="noopener">模块化之后</a></p><p><a href="https://sltrust.github.io/cv/022mycv_mvc.html" target="_blank" rel="noopener">立即执行函数的使用避免全局污染</a></p><p><a href="https://sltrust.github.io/cv/023mycv_mvc.html" target="_blank" rel="noopener">模块间通信与闭包的使用</a></p><p><a href="https://sltrust.github.io/cv/024mycv_mvc.html" target="_blank" rel="noopener">初步提取view和controller</a></p><p><a href="https://sltrust.github.io/cv/025mycv_mvc.html" target="_blank" rel="noopener">进阶后的vc</a></p><h3 id="引入轮播"><a href="#引入轮播" class="headerlink" title="引入轮播"></a>引入轮播</h3><blockquote><p>在啥都不清楚下引入 swiper </p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note036_1.png" alt=""></p><p><a href="http://idangero.us/swiper/demos/" target="_blank" rel="noopener">swiper插件</a></p><h4 id="get-Started"><a href="#get-Started" class="headerlink" title="get Started"></a>get Started</h4><ol><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install swiper //安装这个swiper 或者直接用cdn的链接</span><br></pre></td></tr></table></figure></li><li><p>引入相关文件</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;path/to/swiper.min.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;script src=&quot;path/to/swiper.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>添加页面模板html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Slider main container --&gt;</span><br><span class="line">&lt;div class=&quot;swiper-container&quot;&gt;</span><br><span class="line">    &lt;!-- Additional required wrapper --&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">        &lt;!-- Slides --&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-slide&quot;&gt;Slide 1&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-slide&quot;&gt;Slide 2&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-slide&quot;&gt;Slide 3&lt;/div&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- If we need pagination --&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- If we need navigation buttons --&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- If we need scrollbar --&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-scrollbar&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>加入样式文件</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.swiper-container &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    height: 300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>初始化JS代码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var mySwiper = new Swiper (&apos;.swiper-container&apos;, &#123;</span><br><span class="line">    // Optional parameters</span><br><span class="line">    direction: &apos;vertical&apos;,</span><br><span class="line">    loop: true,</span><br><span class="line"></span><br><span class="line">    // If we need pagination</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: &apos;.swiper-pagination&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // Navigation arrows</span><br><span class="line">    navigation: &#123;</span><br><span class="line">        nextEl: &apos;.swiper-button-next&apos;,</span><br><span class="line">        prevEl: &apos;.swiper-button-prev&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // And if we need scrollbar</span><br><span class="line">    scrollbar: &#123;</span><br><span class="line">        el: &apos;.swiper-scrollbar&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="美化你的作品集-肯定不能直接截图你的作品除非很好看"><a href="#美化你的作品集-肯定不能直接截图你的作品除非很好看" class="headerlink" title="美化你的作品集 肯定不能直接截图你的作品除非很好看"></a>美化你的作品集 肯定不能直接截图你的作品除非很好看</h4><blockquote><p><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a>  去这里搜你作品的关键字 一定能找到你要的精美图片</p></blockquote><blockquote><p>注意图片的比例 如果是轮播要一致</p></blockquote><blockquote><p>不要吝惜你原来无用的代码直接删掉</p></blockquote><blockquote><p>不断的调修磨你的作品集样式 调到你觉得满意为止</p></blockquote><p><a href="https://sltrust.github.io/cv/020mycv.html" target="_blank" rel="noopener">代码链接</a></p><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><ol><li><p>将style里的CSS放到一个地方 main.css</p></li><li><p>将如下的各个功能独立成对应的js模块</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.1.0/js/swiper.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/tween.js/17.1.1/Tween.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">     var mySwiper = new Swiper (&apos;.swiper-container&apos;, &#123;</span><br><span class="line">        // Optional parameters</span><br><span class="line">        //direction: &apos;vertical&apos;,</span><br><span class="line">        loop: true,</span><br><span class="line"></span><br><span class="line">        // If we need pagination</span><br><span class="line">        pagination: &#123;</span><br><span class="line">        el: &apos;.swiper-pagination&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // Navigation arrows</span><br><span class="line">        navigation: &#123;</span><br><span class="line">        nextEl: &apos;.swiper-button-next&apos;,</span><br><span class="line">        prevEl: &apos;.swiper-button-prev&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    siteWelcome.classList.remove(&apos;active&apos;);</span><br><span class="line">    // setTimeout(function()&#123;</span><br><span class="line">    //     siteWelcome.classList.remove(&apos;active&apos;);</span><br><span class="line">    // &#125;,100);</span><br><span class="line"></span><br><span class="line">    //给每个模块添加偏移距离的样式    然后当页面滚到对应模块时 去除该样式</span><br><span class="line">    let specialTags = document.querySelectorAll(&apos;[data-x]&apos;);</span><br><span class="line">    for(let i=0;i&lt;specialTags.length;i++)&#123;</span><br><span class="line">        specialTags[i].classList.add(&apos;offset&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        yyy();</span><br><span class="line">    &#125;, 0);</span><br><span class="line"></span><br><span class="line">    window.onscroll = function()&#123;</span><br><span class="line">        //console.log(window.scrollY)</span><br><span class="line">        // 添加粘性导航</span><br><span class="line">        if(window.scrollY&gt;0)&#123;</span><br><span class="line">            topNavBar.classList.add(&apos;sticky&apos;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            topNavBar.classList.remove(&apos;sticky&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        yyy();</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function yyy()&#123;</span><br><span class="line">        //滚动到对应位置  高亮对应标签      </span><br><span class="line">        let specialTags = document.querySelectorAll(&apos;[data-x]&apos;);</span><br><span class="line">        //找到现在位置距离顶部最近的那个</span><br><span class="line">        let minIndex = 0; </span><br><span class="line">        for(let i=1;i&lt;specialTags.length;i++)&#123;</span><br><span class="line">            //console.log(specialTags[i].offsetTop)</span><br><span class="line">            if(Math.abs(specialTags[i].offsetTop -window.scrollY) &lt; Math.abs(specialTags[minIndex].offsetTop -window.scrollY))&#123;</span><br><span class="line">                minIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //每个出现的模块添加过渡效果   该元素就是离顶部最近的模块  移除偏移的样式</span><br><span class="line">        specialTags[minIndex].classList.remove(&apos;offset&apos;);</span><br><span class="line">        </span><br><span class="line">        //选中当前模块对应的a标签</span><br><span class="line">        let id = specialTags[minIndex].id;</span><br><span class="line">        let aTag = document.querySelector(&apos;a[href=&quot;#&apos;+id+&apos;&quot;]&apos;);</span><br><span class="line">        //找到aTag的爸爸 就是 li 给它加 active 同时去除其他li的active</span><br><span class="line">        let li = aTag.parentNode;</span><br><span class="line">        let aLi = li.parentNode.children;</span><br><span class="line">        for(var i=0;i&lt;aLi.length;i++)&#123;</span><br><span class="line">            // aLi[i].classList.remove(&apos;active&apos;);</span><br><span class="line">            //操作两个 样式</span><br><span class="line">            aLi[i].classList.remove(&apos;highlight&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        //li.classList.add(&apos;active&apos;);</span><br><span class="line">        li.classList.add(&apos;highlight&apos;);</span><br><span class="line">        // **解决bug的关键在于不要让两个不相干的动作操作同一个样式</span><br><span class="line">        //此时已经有bug了  </span><br><span class="line">        //  当前位置高亮了 但是 鼠标移入移出后  就不高亮了  因为移入移出和 滚动都是操作一个active</span><br><span class="line">        //滚动到技能时候 虽然选中了  但是他的列表出现了</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //这样找只有子菜单的li有 边框效果  ==》找所有li</span><br><span class="line">    // let liTags = document.getElementsByClassName(&apos;menuTigger&apos;);</span><br><span class="line">    let liTags = document.querySelectorAll(&apos;nav.menu &gt; ul &gt; li&apos;);</span><br><span class="line">    //监听含有子菜单的topNavBar menu</span><br><span class="line">    for(let i=0;i&lt;liTags.length;i++)&#123;</span><br><span class="line">        liTags[i].onmouseenter = function(e)&#123;</span><br><span class="line">            let li = e.currentTarget;</span><br><span class="line">            li.classList.add(&apos;active&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        liTags[i].onmouseleave = function(e)&#123;</span><br><span class="line">            let li = e.currentTarget;</span><br><span class="line">            li.classList.remove(&apos;active&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function animate(time) &#123;</span><br><span class="line">        requestAnimationFrame(animate);</span><br><span class="line">        TWEEN.update(time);</span><br><span class="line">    &#125;</span><br><span class="line">    requestAnimationFrame(animate);</span><br><span class="line"></span><br><span class="line">    //监听导航菜单定位到对应位置</span><br><span class="line">    let aTags = document.querySelectorAll(&apos;nav.menu &gt; ul &gt; li &gt; a&apos;);</span><br><span class="line">    for(let i=0;i&lt;aTags.length;i++)&#123;</span><br><span class="line">        aTags[i].onclick = function(e)&#123;</span><br><span class="line">            //阻止默认行为  就是a标签的 锚点</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            let a = e.currentTarget;</span><br><span class="line">            let href = a.getAttribute(&apos;href&apos;);</span><br><span class="line">            let element = document.querySelector(href);</span><br><span class="line">           </span><br><span class="line">            let top = element.offsetTop;</span><br><span class="line">            //当前位置</span><br><span class="line">            let currentTop = window.scrollY;</span><br><span class="line">            //目标点</span><br><span class="line">            let targetTop = top - 80;</span><br><span class="line">            //总路程</span><br><span class="line">            let s = targetTop - currentTop;</span><br><span class="line">            //总时间   因为路程可能是负数  但是 时间不能是负的</span><br><span class="line">            let t = Math.abs((s/100)*300);</span><br><span class="line">            t = t&gt;500?500:t;</span><br><span class="line">            var coords = &#123; x:currentTop&#125;; </span><br><span class="line">            var tween = new TWEEN.Tween(coords) </span><br><span class="line">                    .to(&#123; x: targetTop &#125;,t) </span><br><span class="line">                    .easing(TWEEN.Easing.Quadratic.Out) </span><br><span class="line">                    .onUpdate(function() &#123; </span><br><span class="line">                        window.scrollTo(0,coords.x);</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="模块化之后"><a href="#模块化之后" class="headerlink" title="模块化之后"></a>模块化之后</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.1.0/js/swiper.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/tween.js/17.1.1/Tween.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/init-swiper.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/auto-slide-up.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/sticky-topbar.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js/smoothly-navigation.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="https://sltrust.github.io/cv/021mycv.html" target="_blank" rel="noopener">代码链接</a></p><h4 id="立即执行函数的使用"><a href="#立即执行函数的使用" class="headerlink" title="立即执行函数的使用"></a>立即执行函数的使用</h4><h3 id="auto-slide-up-js"><a href="#auto-slide-up-js" class="headerlink" title="auto-slide-up.js"></a>auto-slide-up.js</h3><blockquote><p>里有这样一个变量 specialTags  只要在其他js里重新赋值这个js里的代码就有问题了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let specialTags = document.querySelectorAll(&apos;[data-x]&apos;);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>其他js文件里  specialTags = ‘我偏手贱改这个值’ 上面就废了</p></blockquote><h3 id="错误示范使用花括号包裹你的代码-gt-这是错的-js里没有块级作用域"><a href="#错误示范使用花括号包裹你的代码-gt-这是错的-js里没有块级作用域" class="headerlink" title="错误示范使用花括号包裹你的代码 ==&gt;这是错的 js里没有块级作用域"></a>错误示范使用花括号包裹你的代码 ==&gt;这是错的 js里没有块级作用域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    var mySwiper = new Swiper (&apos;.swiper-container&apos;, &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用函数作用域"><a href="#使用函数作用域" class="headerlink" title="使用函数作用域"></a>使用函数作用域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function xxx()&#123;</span><br><span class="line">    模块的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xxx.call();</span><br></pre></td></tr></table></figure><h3 id="新的问题是-这个函数”xxx”又成了全局变量也是会被污染"><a href="#新的问题是-这个函数”xxx”又成了全局变量也是会被污染" class="headerlink" title="新的问题是  这个函数”xxx”又成了全局变量也是会被污染"></a>新的问题是  这个函数”xxx”又成了全局变量也是会被污染</h3><blockquote><p>匿名函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 这样会报错  这样会报错  这样会报错 </span><br><span class="line">function()&#123;</span><br><span class="line">    模块的代码</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">  模块的代码</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><ol><li>我们不想要全局变量</li><li>我们要使用局部变量</li><li>ES5里，只有函数有局部变量</li><li>于是我们声明了一个 function xxx,然后xxx.call()</li><li>这个时候xxx是全局变量(全局函数)</li><li>所以我们不能给这个函数名字</li><li>function(){}.call() </li><li>但是chrome不支持直接这样调用会报错</li><li><p>试出来一个方法可以不报错 </p><h4 id="推荐第一种"><a href="#推荐第一种" class="headerlink" title="推荐第一种"></a>推荐第一种</h4><ul><li>(1) !function(){}.call() 用来改变函数的返回值但是我们根本不在乎这个返回值</li><li><p>(2) (function(){}).call() 在函数外面加个()</p><blockquote><p>第二种有bug   </p></blockquote></li><li><p>(3) fn31231231231231212.call() 不推荐  随机数的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a  </span><br><span class="line">()</span><br><span class="line"></span><br><span class="line">// 等价于  a()</span><br><span class="line"></span><br><span class="line">xxx </span><br><span class="line">(function()&#123;&#125;).call() 相当于调用xxx 报错  所以不推荐</span><br></pre></td></tr></table></figure></li></ul></li></ol><p><a href="https://sltrust.github.io/cv/022mycv_mvc.html" target="_blank" rel="noopener">立即执行函数的使用避免全局污染</a></p><h3 id="闭包的使用"><a href="#闭包的使用" class="headerlink" title="闭包的使用"></a>闭包的使用</h3><blockquote><h3 id="模块间通信-mod1想访问-mod2的变量"><a href="#模块间通信-mod1想访问-mod2的变量" class="headerlink" title="模块间通信  mod1想访问 mod2的变量"></a>模块间通信  mod1想访问 mod2的变量</h3></blockquote><blockquote><p>js引入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;./js3/module_1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;./js3/module_2.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="module-1-js"><a href="#module-1-js" class="headerlink" title="module_1.js"></a>module_1.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">    var person = window.person = &#123;</span><br><span class="line">        name:&apos;hjx&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><h4 id="module-2-js"><a href="#module-2-js" class="headerlink" title="module_2.js"></a>module_2.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">    var person = window.person;</span><br><span class="line">    console.log(person);</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><h4 id="闭包的使用-1"><a href="#闭包的使用-1" class="headerlink" title="闭包的使用"></a>闭包的使用</h4><blockquote><h3 id="module-1-1-js"><a href="#module-1-1-js" class="headerlink" title="module_1_1.js"></a>module_1_1.js</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">    var person = window.person = &#123;</span><br><span class="line">        name:&apos;hjx&apos;,</span><br><span class="line">        age:18</span><br><span class="line">    &#125;</span><br><span class="line">    window.personAgeGrowUp = function()&#123;</span><br><span class="line">        person.age += 1;</span><br><span class="line">        return person.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><blockquote><h3 id="module-2-2-js"><a href="#module-2-2-js" class="headerlink" title="module_2_2.js"></a>module_2_2.js</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">    var newAge = window.personAgeGrowUp();</span><br><span class="line">    console.log(newAge)</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><ol><li>立即执行函数使得 person 无法被外部访问</li><li>闭包使得匿名函数可以操作 person</li><li>window.personAgeGrowUp 保存了匿名函数的地址</li><li>任何地方都可以使用 window.personAgeGrowUp<br>=&gt;任何地方都可以使用 window.personAgeGrowUp 操作person<br> ，但是不能直接访问person</li></ol><p><a href="https://sltrust.github.io/cv/023mycv_mvc.html" target="_blank" rel="noopener">代码链接</a></p><h3 id="MVC的V和C"><a href="#MVC的V和C" class="headerlink" title="MVC的V和C"></a>MVC的V和C</h3><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note036_2.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--作品集的轮播   这就是view --&gt;</span><br><span class="line">&lt;div id=&quot;mySlides&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-container&quot;&gt;</span><br><span class="line">        &lt;!-- Additional required wrapper --&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">            &lt;!-- Slides --&gt;</span><br><span class="line">            &lt;img src=&quot;./images/nav-page.jpg&quot; class=&quot;swiper-slide&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;./images/canvas.png&quot; class=&quot;swiper-slide&quot; alt=&quot;&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;./images/slides.png&quot; class=&quot;swiper-slide&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- If we need pagination --&gt;</span><br><span class="line">        &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">    //提取view</span><br><span class="line">    var view = document.querySelector(&apos;#mySlides&apos;);</span><br><span class="line">    var mySwiper = new Swiper (view.querySelector(&apos;.swiper-container&apos;), &#123;</span><br><span class="line">            loop: true,</span><br><span class="line">            pagination: &#123;</span><br><span class="line">            el: &apos;.swiper-pagination&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        navigation: &#123;</span><br><span class="line">            nextEl: &apos;.swiper-button-next&apos;,</span><br><span class="line">            prevEl: &apos;.swiper-button-prev&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><blockquote><p>其他的模块同样提取view </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">    var view = document.querySelector(&apos;#topNavBar&apos;);</span><br><span class="line">    window.addEventListener(&apos;scroll&apos;,function()&#123;</span><br><span class="line">        if(window.scrollY&gt;0)&#123;</span><br><span class="line">            view.classList.add(&apos;sticky&apos;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            view.classList.remove(&apos;sticky&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><h3 id="添加controller"><a href="#添加controller" class="headerlink" title="添加controller"></a>添加controller</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">    var view = document.querySelector(&apos;#topNavBar&apos;);</span><br><span class="line">    var controller = function(view)&#123;</span><br><span class="line">        window.addEventListener(&apos;scroll&apos;,function()&#123;</span><br><span class="line">            if(window.scrollY&gt;0)&#123;</span><br><span class="line">                view.classList.add(&apos;sticky&apos;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                view.classList.remove(&apos;sticky&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    controller.call(null,view)</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><blockquote><p>其余模块同上</p></blockquote><p><a href="https://sltrust.github.io/cv/024mycv_mvc.html" target="_blank" rel="noopener">代码链接</a></p><h4 id="sticky-topbar-js"><a href="#sticky-topbar-js" class="headerlink" title="sticky-topbar.js"></a>sticky-topbar.js</h4><blockquote><p>初级版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">    var view = document.querySelector(&apos;#topNavBar&apos;);</span><br><span class="line">    var controller = function(view)&#123;</span><br><span class="line">        window.addEventListener(&apos;scroll&apos;,function()&#123;</span><br><span class="line">            if(window.scrollY&gt;0)&#123;</span><br><span class="line">                view.classList.add(&apos;sticky&apos;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                view.classList.remove(&apos;sticky&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    controller.call(null,view);</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>进阶一点</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var controller = &#123;</span><br><span class="line">    view:null,</span><br><span class="line">    init:function(view)&#123;</span><br><span class="line">        this.view = view;</span><br><span class="line">        window.addEventListener(&apos;scroll&apos;,function()&#123;</span><br><span class="line">            if(window.scrollY&gt;0)&#123;</span><br><span class="line">                view.classList.add(&apos;sticky&apos;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                view.classList.remove(&apos;sticky&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">controller.init.call(null,view);</span><br></pre></td></tr></table></figure><blockquote><p>再次进阶一点点 bindEvents里面的this有问题传递的是window</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var controller = &#123;</span><br><span class="line">    view:null,</span><br><span class="line">    init:function(view)&#123;</span><br><span class="line">        this.view = view;</span><br><span class="line">        this.bindEvents();</span><br><span class="line">        //this.bindEvents.call(this)</span><br><span class="line">    &#125;,</span><br><span class="line">    bindEvents:function()&#123;</span><br><span class="line">        var view = this.view;</span><br><span class="line">        window.addEventListener(&apos;scroll&apos;,function()&#123;</span><br><span class="line">            if(window.scrollY&gt;0)&#123;</span><br><span class="line">                view.classList.add(&apos;sticky&apos;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                view.classList.remove(&apos;sticky&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">controller.init.call(null,view);</span><br></pre></td></tr></table></figure><blockquote><p>再次进阶一点点2 bindEvents里面的this有问题传递的是window</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">!function()&#123;</span><br><span class="line">    var view = document.querySelector(&apos;#topNavBar&apos;);</span><br><span class="line">    var controller = &#123;</span><br><span class="line">        view:null,</span><br><span class="line">        init:function(view)&#123;</span><br><span class="line">            this.view = view;</span><br><span class="line">            this.bindEvents();</span><br><span class="line">            //this.bindEvents.call(this)</span><br><span class="line">        &#125;,</span><br><span class="line">        bindEvents:function()&#123;</span><br><span class="line">            var view = this.view;</span><br><span class="line">            window.addEventListener(&apos;scroll&apos;,function()&#123;</span><br><span class="line">                console.log(this)</span><br><span class="line">                var view = this.view;</span><br><span class="line">                if(window.scrollY&gt;0)&#123;</span><br><span class="line">                    this.active();</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    this.deactive();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).bind(this);</span><br><span class="line">            //箭头函数没有this</span><br><span class="line">        &#125;,</span><br><span class="line">        active:function()&#123;</span><br><span class="line">            this.view.classList.add(&apos;sticky&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        deactive:function()&#123;</span><br><span class="line">            view.classList.remove(&apos;sticky&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    controller.init(view);</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure><h4 id="解决this问题-使用箭头函数"><a href="#解决this问题-使用箭头函数" class="headerlink" title="解决this问题 使用箭头函数"></a>解决this问题 使用箭头函数</h4><blockquote><p>示例代码 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var f = ()=&gt; console.log(this);</span><br><span class="line"></span><br><span class="line">f() //window</span><br><span class="line">f.call(&#123;name:&apos;hjx&apos;&#125;) // window</span><br></pre></td></tr></table></figure><h3 id="箭头函数内外this不变"><a href="#箭头函数内外this不变" class="headerlink" title="箭头函数内外this不变"></a>箭头函数内外this不变</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bindEvents:function()&#123;</span><br><span class="line">    var view = this.view;</span><br><span class="line">    window.addEventListener(&apos;scroll&apos;,()=&gt;&#123;</span><br><span class="line">        if(window.scrollY&gt;0)&#123;</span><br><span class="line">            this.active();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            this.deactive();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    //箭头函数没有this</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://sltrust.github.io/cv/025mycv_mvc.html" target="_blank" rel="noopener">代码链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自己实现AJAX</title>
      <link href="/2017/12/07/N035_%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0AJAX/"/>
      <url>/2017/12/07/N035_%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0AJAX/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let request = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">request.open(&apos;get&apos;,&apos;/xxx&apos;);</span><br><span class="line"></span><br><span class="line">request.send();</span><br><span class="line"></span><br><span class="line">request.onreadystatechange = function()&#123;</span><br><span class="line">    if(request.readyState === 4)&#123;</span><br><span class="line">        if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">            console.log(request.responseText);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(request.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="request-open-‘请求方式’-url-可选参数"><a href="#request-open-‘请求方式’-url-可选参数" class="headerlink" title="request.open(‘请求方式’,url,[可选参数]);"></a>request.open(‘请求方式’,url,[可选参数]);</h3><blockquote><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.open(&apos;get&apos;,&apos;/xxx&apos;);</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="post"><a href="#post" class="headerlink" title="post"></a>post</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.open(&apos;post&apos;,&apos;/xxx&apos;);</span><br></pre></td></tr></table></figure></blockquote><h3 id="request-setHeaders-key-value"><a href="#request-setHeaders-key-value" class="headerlink" title="request.setHeaders(key,value);"></a>request.setHeaders(key,value);</h3><blockquote><h4 id="自己设置请求第二部分"><a href="#自己设置请求第二部分" class="headerlink" title="自己设置请求第二部分"></a>自己设置请求第二部分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let request = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">request.open(&apos;get&apos;,&apos;/xxx&apos;);</span><br><span class="line"></span><br><span class="line">request.setRequestHeader(&apos;name&apos;,&apos;hjx&apos;);</span><br><span class="line">request.setRequestHeader(&apos;Content-Type&apos;,&apos;x-www-form-urlencoded&apos;);</span><br><span class="line"></span><br><span class="line">request.send();</span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note035_1.png" alt=""></p><h3 id="request-send-‘你设置的内容’"><a href="#request-send-‘你设置的内容’" class="headerlink" title="request.send(‘你设置的内容’);"></a>request.send(‘你设置的内容’);</h3><blockquote><h4 id="设置请求的第四部分"><a href="#设置请求的第四部分" class="headerlink" title="设置请求的第四部分"></a>设置请求的第四部分</h4></blockquote><blockquote><h4 id="注意-如果是get方式-第四部分是不可见的"><a href="#注意-如果是get方式-第四部分是不可见的" class="headerlink" title="注意:如果是get方式  第四部分是不可见的"></a>注意:如果是get方式  第四部分是不可见的</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let request = new XMLHttpRequest();</span><br><span class="line">            </span><br><span class="line">request.open(&apos;post&apos;,&apos;/xxx&apos;);</span><br><span class="line">request.setRequestHeader(&apos;name&apos;,&apos;hjx&apos;);</span><br><span class="line">request.setRequestHeader(&apos;Content-Type&apos;,&apos;x-www-form-urlencoded&apos;);</span><br><span class="line"></span><br><span class="line">request.send(&apos;我偏要设置请求的第四部分&apos;);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note035_2.png" alt=""></p><h3 id="客户端获取服务器的响应部分"><a href="#客户端获取服务器的响应部分" class="headerlink" title="客户端获取服务器的响应部分"></a>客户端获取服务器的响应部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">request.onreadystatechange = function()&#123;</span><br><span class="line">    if(request.readyState === 4)&#123;</span><br><span class="line">        if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">            console.log(request.status);</span><br><span class="line">            console.log(request.statusText);</span><br><span class="line">            console.log(request.getAllResponseHeaders());</span><br><span class="line">            console.log(request.responseText);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(request.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>JS可以任意设置请求 Header 吗？<ul><li>第一部分 request.open(‘get’,’/xxx’)</li><li>第二部分 request.setRequestHeader(‘name’,’hjx’);</li><li>第四部分 request.send(‘a=1&amp;b=2’);</li></ul></li><li>JS可以获取响应的所有部分 吗？<ul><li>第一部分 request.status/request.statusText</li><li>第二部分 request.getResponseHeader()/request.getAllResponseHeaders()</li><li>第四部分 request.responseText</li></ul></li></ol><h4 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax()"></a>jQuery.ajax()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">window.jQyery = function(nodeOrSelector)&#123;</span><br><span class="line">    let nodes = &#123;&#125;; </span><br><span class="line">    /************省略非本次知识的重点*************/</span><br><span class="line">    &#125;</span><br><span class="line">    return nodes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.jQuery.ajax = function()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.$ = window.jQuery;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note035_3.png" alt=""></p><h3 id="先搞出ajax的函数体"><a href="#先搞出ajax的函数体" class="headerlink" title="先搞出ajax的函数体"></a>先搞出ajax的函数体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery.ajax = function(url,method,body,successFn,failFn)&#123;</span><br><span class="line"></span><br><span class="line">    let request = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">    request.open(method,url);</span><br><span class="line">    </span><br><span class="line">    request.send(body);</span><br><span class="line"></span><br><span class="line">    request.onreadystatechange = function()&#123;</span><br><span class="line">        if(request.readyState === 4)&#123;</span><br><span class="line">            if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">                successFn.call(undefined,request.responseText)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                failFn.call(undefined,request)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    window.jQuery.ajax(</span><br><span class="line">        &apos;/xxx&apos;,</span><br><span class="line">        &apos;get&apos;,</span><br><span class="line">        &apos;a=1&amp;b=2&apos;,</span><br><span class="line">        (res)=&gt;&#123;console.log(res)&#125;,</span><br><span class="line">        (err)=&gt;&#123;console.log()&#125;</span><br><span class="line">    );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="你睡了一晚上，第二天基本ajax里的参数你基本就忘光了"><a href="#你睡了一晚上，第二天基本ajax里的参数你基本就忘光了" class="headerlink" title="你睡了一晚上，第二天基本ajax里的参数你基本就忘光了"></a>你睡了一晚上，第二天基本ajax里的参数你基本就忘光了</h3><blockquote><p>优化一下</p></blockquote><h4 id="提取参数"><a href="#提取参数" class="headerlink" title="提取参数"></a>提取参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery.ajax = function(options)&#123;</span><br><span class="line">    let url = options.url;</span><br><span class="line">    let method = options.method;</span><br><span class="line">    let body = options.body;</span><br><span class="line">    let successFn = options.successFn;</span><br><span class="line">    let failFn = options.failFn;</span><br><span class="line">    let request = new XMLHttpRequest();</span><br><span class="line">    request.open(method,url);</span><br><span class="line">    request.send(body);</span><br><span class="line">    request.onreadystatechange = function()&#123;</span><br><span class="line">        if(request.readyState === 4)&#123;</span><br><span class="line">            if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">                successFn.call(undefined,request.responseText)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                failFn.call(undefined,request.status)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    window.jQuery.ajax(&#123;</span><br><span class="line">        url:&apos;/xxx&apos;,</span><br><span class="line">        method:&apos;get&apos;,</span><br><span class="line">        body:&apos;a=1&amp;b=2&apos;,</span><br><span class="line">        successFn:(res)=&gt;&#123;console.log(res)&#125;,</span><br><span class="line">        failFn:(err)=&gt;&#123;console.log()&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="如果我想设置请求头咋办？"><a href="#如果我想设置请求头咋办？" class="headerlink" title="如果我想设置请求头咋办？"></a>如果我想设置请求头咋办？</h4><blockquote><p>继续添加往options上挂载key就好了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery.ajax = function(options)&#123;</span><br><span class="line">    let url = options.url;</span><br><span class="line">    let method = options.method;</span><br><span class="line">    //继续设置参数</span><br><span class="line">    let headers = options.headers;</span><br><span class="line">    let body = options.body;</span><br><span class="line">    let successFn = options.successFn;</span><br><span class="line">    let failFn = options.failFn;</span><br><span class="line">    let request = new XMLHttpRequest();</span><br><span class="line">    request.open(method,url);</span><br><span class="line">    for(let key in headers)&#123;</span><br><span class="line">        let value = headers[key];</span><br><span class="line">        request.setRequestHeader(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">    request.send(body);</span><br><span class="line">    request.onreadystatechange = function()&#123;</span><br><span class="line">        if(request.readyState === 4)&#123;</span><br><span class="line">            if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">                successFn.call(undefined,request.responseText)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                failFn.call(undefined,request.status)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    window.jQuery.ajax(&#123;</span><br><span class="line">        url:&apos;/xxx&apos;,</span><br><span class="line">        method:&apos;get&apos;,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            &apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;,</span><br><span class="line">            &apos;name&apos;:&apos;hjx&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        body:&apos;a=1&amp;b=2&apos;,</span><br><span class="line">        successFn:(res)=&gt;&#123;console.log(res)&#125;,</span><br><span class="line">        failFn:(err)=&gt;&#123;console.log()&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="借鉴jQuery-ajax-url-settings-接受一个或者两个参数"><a href="#借鉴jQuery-ajax-url-settings-接受一个或者两个参数" class="headerlink" title="借鉴jQuery.ajax(url[,settings])　接受一个或者两个参数"></a>借鉴jQuery.ajax(url[,settings])　接受一个或者两个参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery.ajax = function(options)&#123;</span><br><span class="line">    let url;</span><br><span class="line">    if(arguments.length===1)&#123;</span><br><span class="line">        url = options.url;</span><br><span class="line">       </span><br><span class="line">    &#125;else if(arguments.length===2)&#123;</span><br><span class="line">        url = arguments[0];</span><br><span class="line">        options = arguments[1];</span><br><span class="line">    &#125;</span><br><span class="line">    let method = options.method;</span><br><span class="line">    let headers = options.headers;</span><br><span class="line">    let body = options.body;</span><br><span class="line">    let successFn = options.successFn;</span><br><span class="line">    let failFn = options.failFn;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    window.jQuery.ajax(</span><br><span class="line">        &apos;/xxx&apos;,</span><br><span class="line">        &#123;</span><br><span class="line">            method:&apos;get&apos;,</span><br><span class="line">            headers:&#123;</span><br><span class="line">                &apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;,</span><br><span class="line">                &apos;name&apos;:&apos;hjx&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            body:&apos;a=1&amp;b=2&apos;,</span><br><span class="line">            successFn:(res)=&gt;&#123;console.log(res)&#125;,</span><br><span class="line">            failFn:(err)=&gt;&#123;console.log()&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="ES6的方式写以上代码"><a href="#ES6的方式写以上代码" class="headerlink" title="ES6的方式写以上代码"></a>ES6的方式写以上代码</h4><blockquote><p>恢复只接收一个参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery.ajax = function(options)&#123;</span><br><span class="line">    //ES6解构赋值</span><br><span class="line">    let &#123;url,method,body,successFn,failFn,headers&#125; = options;</span><br><span class="line"></span><br><span class="line">    let request = new XMLHttpRequest();</span><br><span class="line">    request.open(method,url);</span><br><span class="line">    for(let key in headers)&#123;</span><br><span class="line">        let value = headers[key];</span><br><span class="line">        request.setRequestHeader(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">    request.send(body);</span><br><span class="line">    request.onreadystatechange = function()&#123;</span><br><span class="line">        if(request.readyState === 4)&#123;</span><br><span class="line">            if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">                successFn.call(undefined,request.responseText)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                failFn.call(undefined,request.status)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更进一步的优化"><a href="#更进一步的优化" class="headerlink" title="更进一步的优化"></a>更进一步的优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    //ES6解构赋值</span><br><span class="line">window.jQuery.ajax = function( &#123;url,method,body,successFn,failFn,headers&#125;)&#123;</span><br><span class="line">    let request = new XMLHttpRequest();</span><br><span class="line">    request.open(method,url);</span><br><span class="line">    for(let key in headers)&#123;</span><br><span class="line">        let value = headers[key];</span><br><span class="line">        request.setRequestHeader(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">    request.send(body);</span><br><span class="line">    request.onreadystatechange = function()&#123;</span><br><span class="line">        if(request.readyState === 4)&#123;</span><br><span class="line">            if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">                successFn.call(undefined,request.responseText)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                failFn.call(undefined,request.status)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ES6方式交换a和b的值"><a href="#ES6方式交换a和b的值" class="headerlink" title="ES6方式交换a和b的值"></a>ES6方式交换a和b的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//以前的方式</span><br><span class="line">var a = 1;</span><br><span class="line">var b = 2;</span><br><span class="line">var temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">//ES6方式</span><br><span class="line">var x = 1;</span><br><span class="line">var y = 2;</span><br><span class="line">[x,y] = [y,x];</span><br></pre></td></tr></table></figure><h4 id="ES6-把x的值当作key"><a href="#ES6-把x的值当作key" class="headerlink" title="ES6 把x的值当作key"></a>ES6 把x的值当作key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//以前</span><br><span class="line">var x = &apos;???&apos;;</span><br><span class="line">var o = &#123;&#125;;</span><br><span class="line">o[x]= true;</span><br><span class="line"></span><br><span class="line">//ES6</span><br><span class="line">var x = &apos;???&apos;;</span><br><span class="line">var o = &#123;</span><br><span class="line">    [x]:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise规范"><a href="#Promise规范" class="headerlink" title="Promise规范"></a>Promise规范</h3><blockquote><p>jQuery已经实现的方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:&apos;/xxx&apos;,</span><br><span class="line">    method:&apos;get&apos;</span><br><span class="line">&#125;).then(</span><br><span class="line">        (res)=&gt;&#123;console.log(res) return &apos;成功&apos;;&#125;,</span><br><span class="line">        (err)=&gt;&#123;console.log(err)&#125; return &apos;失败&apos;;&#125;)</span><br><span class="line">  .then(</span><br><span class="line">        (res)=&gt;&#123;console.log(res)&#125;, //这里的res就是 如果上一个成功了 它的返回值</span><br><span class="line">        (err)=&gt;&#123;console.log(err)&#125;) // 同上</span><br></pre></td></tr></table></figure><h3 id="Promise版本的ajax"><a href="#Promise版本的ajax" class="headerlink" title="Promise版本的ajax"></a>Promise版本的ajax</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery.ajax = function(&#123;url,method,body,headers&#125;)&#123;</span><br><span class="line">    return new Promise(function(resolve,reject)&#123;</span><br><span class="line">        //ES6解构赋值</span><br><span class="line">        let request = new XMLHttpRequest();</span><br><span class="line">        request.open(method,url);</span><br><span class="line">        for(let key in headers)&#123;</span><br><span class="line">            let value = headers[key];</span><br><span class="line">            request.setRequestHeader(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        request.send(body);</span><br><span class="line">        request.onreadystatechange = function()&#123;</span><br><span class="line">            if(request.readyState === 4)&#123;</span><br><span class="line">                if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">                    resolve.call(undefined,request.responseText)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    reject.call(undefined,request.status)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    window.jQuery.ajax(&#123;</span><br><span class="line">            url:&apos;/xxx&apos;,</span><br><span class="line">            method:&apos;get&apos;,</span><br><span class="line">            headers:&#123;</span><br><span class="line">                &apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;,</span><br><span class="line">                &apos;name&apos;:&apos;hjx&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            body:&apos;a=1&amp;b=2&apos;</span><br><span class="line">        &#125;).then(</span><br><span class="line">                (res)=&gt;&#123;console.log(res)&#125;,</span><br><span class="line">                (err)=&gt;&#123;console.log(err)&#125;</span><br><span class="line">            )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AJAX是什么鬼</title>
      <link href="/2017/12/05/N034_AJAX%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC/"/>
      <url>/2017/12/05/N034_AJAX%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><h3 id="请先确保你有node-或自己开一个wamp服务器否则别往下看了-浪费时间"><a href="#请先确保你有node-或自己开一个wamp服务器否则别往下看了-浪费时间" class="headerlink" title="请先确保你有node 或自己开一个wamp服务器否则别往下看了 浪费时间"></a>请先确保你有node 或自己开一个wamp服务器否则别往下看了 浪费时间</h3><blockquote><p>if(你有node)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装请用</span><br><span class="line">npm install  -g http-server     </span><br><span class="line">卸载请用</span><br><span class="line">npm uninstall  -g http-server</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir demo 创建目录</span><br><span class="line">cd demo    切换目录</span><br><span class="line">touch index.html  创建一个html文件</span><br></pre></td></tr></table></figure><h4 id="如何发请求"><a href="#如何发请求" class="headerlink" title="如何发请求"></a>如何发请求</h4><blockquote><p>form发请求</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;xxx&quot; method=&quot;get&quot; target=&quot;aa&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;password&quot; value=&quot;222&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt; </span><br><span class="line">&lt;iframe src=&quot;&quot; name=&quot;aa&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><blockquote></blockquote><ol><li><p>开启你的服务器 </p><ul><li><p>如果安装了 http-server  你就在demo目录  ！ demo目录 ! demo目录 ! 打开终端 </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server -c-1</span><br></pre></td></tr></table></figure></li><li><p>如果是wamp 你就开启服务器就行了 在你指定的端口 demo要放在wamp指定的www文件夹里</p></li></ul></li><li><p>把给你的url 在 chrome 里打开 </p></li><li>请按F12 / 打开调试</li><li>点击 Network</li><li>点击提交按钮</li><li><p>你会看到出现如下一行内容  请点击<br><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note034_1.png" alt=""></p></li><li><p>点击之后 会看到前后台联调必不可少的几个部分</p></li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note034_2.png" alt=""></p><ol start="8"><li><p>分别展开列表  </p><blockquote><p>点击view source</p></blockquote><blockquote><p>点击view source</p></blockquote><blockquote><p>点击view source</p></blockquote></li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note034_3.png" alt=""></p><ol start="9"><li>get请求的四部分</li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note034_4.png" alt=""></p><ol start="10"><li>修改form里的 method=”post” 我知道你不会改的 所以看代码吧！</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;xxx&quot; method=&quot;post&quot; target=&quot;aa&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;password&quot; value=&quot;22&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt; </span><br><span class="line">&lt;iframe src=&quot;&quot; name=&quot;aa&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note034_5.png" alt=""></p></blockquote><h3 id="form发请求"><a href="#form发请求" class="headerlink" title="form发请求"></a>form发请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;xxx&quot; method=&quot;get&quot; target=&quot;aa&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;password&quot; value=&quot;222&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt; </span><br><span class="line">&lt;iframe src=&quot;&quot; name=&quot;aa&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="a标签发请求"><a href="#a标签发请求" class="headerlink" title="a标签发请求"></a>a标签发请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a id=&quot;link&quot; href=&quot;/xxx&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    link.click();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="img发请求"><a href="#img发请求" class="headerlink" title="img发请求"></a>img发请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/xxx&quot; alt=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="link发请求"><a href="#link发请求" class="headerlink" title="link发请求"></a>link发请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var link = document.createElement(&apos;link&apos;);</span><br><span class="line">    link.rel = &apos;stylesheet&apos;;</span><br><span class="line">    link.href = &apos;/xxx&apos;;</span><br><span class="line">    document.head.appendChild(link);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="script发请求"><a href="#script发请求" class="headerlink" title="script发请求"></a>script发请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var script = document.createElement(&apos;script&apos;);</span><br><span class="line">    script.src = &apos;/xxx&apos;;</span><br><span class="line">    document.head.appendChild(script);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>用 form 发请求，但是会刷新页面或新开页面</li><li>用 a 发 get 请求，但是也会刷新页面或新开页面</li><li>用 img 发 get 请求，但是只能以图片的形式展示</li><li>用 link 发 get 请求，但是只能以css/favicon的形式展示</li><li>用 script 发 get 请求，但是只能以脚本的形式运行</li></ul><h5 id="有没有什么方式可以实现"><a href="#有没有什么方式可以实现" class="headerlink" title="有没有什么方式可以实现"></a>有没有什么方式可以实现</h5><ol><li>get / post / put / delete 请求都行</li><li>想以什么形式展示就以什么形式展示</li></ol><h4 id="微软的突破"><a href="#微软的突破" class="headerlink" title="微软的突破"></a>微软的突破</h4><blockquote><p>IE 5 率先在 JS 中引入 ActiveX 对象（API），使得 JS 可以直接发起 HTTP 请求。<br>随后 Mozilla、 Safari、 Opera 也跟进（抄袭）了，取名 XMLHttpRequest，并被纳入 W3C 规范</p></blockquote><blockquote><p>IE6当时全球90%的市场份额于是做了愚蠢的决定：他以为自己的在浏览器已经天下无敌了没必要那么多人去维护了就留了两个人做日常维护,把其他人都开除了，然后chrome看准了这个时机异军突起，2年就占据了40%的市场份额，现在IE是人人喊打</p></blockquote><blockquote><h3 id="前端的起源就是因为IE发明了ajax"><a href="#前端的起源就是因为IE发明了ajax" class="headerlink" title="前端的起源就是因为IE发明了ajax"></a>前端的起源就是因为IE发明了ajax</h3></blockquote><h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><blockquote><p>Jesse James Garrett 讲如下技术取名叫做 AJAX：async JavaScript and XML</p></blockquote><ol><li>使用 XMLHttpRequest 发请求</li><li>服务器返回 XML 格式的字符串</li><li>JS 解析 XML，并更新局部页面</li></ol><h4 id="如何使用-XMLHttpRequest"><a href="#如何使用-XMLHttpRequest" class="headerlink" title="如何使用 XMLHttpRequest"></a>如何使用 XMLHttpRequest</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">myButton.addEventListener(&apos;click&apos;, (e)=&gt;&#123;</span><br><span class="line">  let request = new XMLHttpRequest()</span><br><span class="line">  request.open(&apos;get&apos;, &apos;/xxx&apos;) // 配置request</span><br><span class="line">  request.send()</span><br><span class="line">  request.onreadystatechange = ()=&gt;&#123;</span><br><span class="line">    if(request.readyState === 4)&#123;</span><br><span class="line">      console.log(&apos;请求响应都完毕了&apos;)</span><br><span class="line">      console.log(request.status)</span><br><span class="line">      if(request.status &gt;= 200 &amp;&amp; request.status &lt; 300)&#123;</span><br><span class="line">        console.log(&apos;说明请求成功&apos;)</span><br><span class="line">        console.log(typeof request.responseText) // &apos;string&apos;</span><br><span class="line">        console.log(request.responseText)</span><br><span class="line">        let string = request.responseText</span><br><span class="line">        // 把符合 JSON 语法的字符串</span><br><span class="line">        // 转换成 JS 对应的值</span><br><span class="line">        let object = window.JSON.parse(string)   </span><br><span class="line">        // JSON.parse 是浏览器提供的</span><br><span class="line">        console.log(typeof object)</span><br><span class="line">        console.log(object)</span><br><span class="line">        console.log(&apos;object.note&apos;)</span><br><span class="line">        console.log(object.note)</span><br><span class="line"></span><br><span class="line">      &#125;else if(request.status &gt;= 400)&#123;</span><br><span class="line">        console.log(&apos;说明请求失败&apos;) </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 后端代码</span><br><span class="line">if(path===&apos;/xxx&apos;)&#123;</span><br><span class="line">    response.statusCode = 200</span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;, &apos;text/json;charset=utf-8&apos;)</span><br><span class="line">    response.write(`</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;note&quot;:&#123;</span><br><span class="line">        &quot;to&quot;: &quot;aaa&quot;,</span><br><span class="line">        &quot;from&quot;: &quot;hjx&quot;,</span><br><span class="line">        &quot;heading&quot;: &quot;打招呼&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;hello&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    `)</span><br><span class="line">response.end()</span><br></pre></td></tr></table></figure><h3 id="注意readStaus有五种状态"><a href="#注意readStaus有五种状态" class="headerlink" title="注意readStaus有五种状态"></a>注意readStaus有五种状态</h3><ul><li>0    open()方法还未被调用.</li><li>1    open()方法已经被调用.</li><li>2    send()方法已经被调用, 响应头和响应状态已经返回.</li><li>3    响应体下载中; responseText中已经获取了部分数据.</li><li>4    整个请求过程已经完毕.</li></ul><blockquote><p>如何验证状态码经过了 01234 ？ 请按以下代码顺序书写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let request = new XMLHttpRequest();</span><br><span class="line">// open未调用</span><br><span class="line">console.log(request.readyState)</span><br><span class="line">request.onreadystatechange = function()&#123;</span><br><span class="line">    console.log(request.readyState)</span><br><span class="line">    if(request.readyState === 4)&#123;</span><br><span class="line">        if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">            console.log(request.responseText);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(request.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">request.open(&apos;get&apos;,&apos;/xxx&apos;);</span><br><span class="line">request.send();</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="考点-请使用原生JS实现AJAX"><a href="#考点-请使用原生JS实现AJAX" class="headerlink" title="考点:请使用原生JS实现AJAX"></a>考点:请使用原生JS实现AJAX</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let request = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">request.open(&apos;get&apos;,&apos;/xxx&apos;);</span><br><span class="line"></span><br><span class="line">request.send();</span><br><span class="line"></span><br><span class="line">request.onreadystatechange = function()&#123;</span><br><span class="line">    if(request.readyState === 4)&#123;</span><br><span class="line">        if(request.status &gt;= 200 &amp;&amp; request.status &lt;300)&#123;</span><br><span class="line">            console.log(request.responseText);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(request.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-是一门语言-抄袭的JS"><a href="#JSON-是一门语言-抄袭的JS" class="headerlink" title="JSON 是一门语言 (抄袭的JS)"></a>JSON 是一门语言 (抄袭的JS)</h3><blockquote><p>{name:’aa’}是对象 JS里这种方式叫做 对象字面量表达式</p></blockquote><blockquote><p>{“name”:”aa”} key必须是字符串 必须以 “ 开头 ， 以 “ 结尾</p></blockquote><h3 id="JS-VS-JSON"><a href="#JS-VS-JSON" class="headerlink" title="JS VS JSON"></a>JS VS JSON</h3><table><thead><tr><th>JS</th><th>JSON</th></tr></thead><tbody><tr><td>undefined</td><td>没有</td></tr><tr><td>null</td><td>null</td></tr><tr><td>[‘a’,’b’]</td><td>[“a”,”b”]</td></tr><tr><td>function(){}</td><td>没有</td></tr><tr><td>{name:’hjx’}</td><td>{“name”:”hjx”}</td></tr><tr><td>‘hjx’</td><td>“hjx”</td></tr><tr><td>var a = { }; a.self = a</td><td>搞不定没有变量</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. JSON没有抄袭 function和 undefined ，也没有抄袭symbol因为 symbol是最近出来的</span><br><span class="line">2. JSON 的字符串必须是 &quot;</span><br><span class="line">3. obj.__proto__   没有原型链</span><br></pre></td></tr></table></figure><h3 id="请看下面的后台返回"><a href="#请看下面的后台返回" class="headerlink" title="请看下面的后台返回"></a>请看下面的后台返回</h3><blockquote><h3 id="返回的是符合JSON对象类型语法的字符串-，-绝对不是JS的“对象”"><a href="#返回的是符合JSON对象类型语法的字符串-，-绝对不是JS的“对象”" class="headerlink" title="返回的是符合JSON对象类型语法的字符串 ， 绝对不是JS的“对象”"></a>返回的是符合JSON对象类型语法的字符串 ， 绝对不是JS的“对象”</h3></blockquote><blockquote><p>你才返回”对象” ,你全家才返回”对象”</p></blockquote><blockquote><p>后台是无法返回”对象” 给前端的 ，他只能返回字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">response.write(`</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;note&quot;:&#123;</span><br><span class="line">        &quot;to&quot;: &quot;aaa&quot;,</span><br><span class="line">        &quot;from&quot;: &quot;hjx&quot;,</span><br><span class="line">        &quot;heading&quot;: &quot;打招呼&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;hello&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><blockquote><h3 id="为什么form表单提交没有跨域问题，但ajax提交有跨域问题？"><a href="#为什么form表单提交没有跨域问题，但ajax提交有跨域问题？" class="headerlink" title="为什么form表单提交没有跨域问题，但ajax提交有跨域问题？"></a>为什么form表单提交没有跨域问题，但ajax提交有跨域问题？</h3></blockquote><blockquote></blockquote><ul><li>因为原页面用 form 提交到另一个域名之后，原页面的脚本无法获取新页面中的内容。所以浏览器认为这是安全的。</li><li>而 AJAX 是可以读取响应内容的，因此浏览器不能允许你这样做。如果你细心的话你会发现，其实请求已经发送出去了，   你只是拿不到响应而已。</li><li>所以浏览器这个策略的本质是，一个域名的JS，在未经允许的情况下，不得读取另一个域名的内容。但浏览器并不阻止你向另一个域名发送请求。</li></ul><h3 id="只有-协议-端口-域名-一模一样才允许发-AJAX-请求"><a href="#只有-协议-端口-域名-一模一样才允许发-AJAX-请求" class="headerlink" title="只有 协议+端口+域名 一模一样才允许发 AJAX 请求"></a>只有 协议+端口+域名 一模一样才允许发 AJAX 请求</h3><blockquote><p>一模一样！一模一样！一模一样！一模一样！一模一样！一模一样！一模一样！一模一样！一模一样！</p></blockquote><blockquote><p><a href="http://12306.cn" target="_blank" rel="noopener">http://12306.cn</a>  和 <a href="http://www.12306.cn" target="_blank" rel="noopener">http://www.12306.cn</a> 是不同域名</p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><blockquote><h3 id="http-baidu-com-可以向-http-www-baidu-com-发AJAX请求吗"><a href="#http-baidu-com-可以向-http-www-baidu-com-发AJAX请求吗" class="headerlink" title="http://baidu.com 可以向 http://www.baidu.com 发AJAX请求吗  ?"></a><a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a> 可以向 <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> 发AJAX请求吗  ?</h3></blockquote><blockquote><h3 id="http-www-baidu-com-可以向-http-baidu-com-发AJAX请求吗"><a href="#http-www-baidu-com-可以向-http-baidu-com-发AJAX请求吗" class="headerlink" title="http://www.baidu.com 可以向 http://baidu.com 发AJAX请求吗  ?"></a><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> 可以向 <a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a> 发AJAX请求吗  ?</h3></blockquote><h4 id="如果没有同源策略的限制"><a href="#如果没有同源策略的限制" class="headerlink" title="如果没有同源策略的限制"></a>如果没有同源策略的限制</h4><blockquote><p>任何一个网站都可以访问你支付宝的余额，QQ空间，你写的私密博客。</p></blockquote><blockquote><p>没有同源策略的浏览器就会让你的所有隐私泄露。</p></blockquote><h4 id="如果-A站的前端实在想访问B站的内容"><a href="#如果-A站的前端实在想访问B站的内容" class="headerlink" title="如果 A站的前端实在想访问B站的内容"></a>如果 A站的前端实在想访问B站的内容</h4><blockquote><p>可以 B站后台设置一个参数 Accept-Control-Allow-Origin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//我允许这个域名访问</span><br><span class="line">response.setHeader(&apos;Accept-Control-Allow-Origin&apos;, &apos;http://A.com:8001&apos;)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="浏览器必须保证"><a href="#浏览器必须保证" class="headerlink" title="浏览器必须保证"></a>浏览器必须保证</h4><ul><li>协议+端口+域名 一模一样才允许发AJAX请求</li><li>CORS 可以告诉浏览器 我俩是一家的别阻止他</li></ul><h3 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h3><blockquote><h3 id="Cross-Origin-Resource-Sharing"><a href="#Cross-Origin-Resource-Sharing" class="headerlink" title="Cross-Origin Resource Sharing"></a>Cross-Origin Resource Sharing</h3></blockquote><h2 id="谨记"><a href="#谨记" class="headerlink" title="谨记"></a>谨记</h2><ol><li>你才返回”对象”，你全家才返回 “对象”</li><li>JS是一门语言，JSON是另一门语言，JSON 这门语言抄袭了JS</li><li>AJAX就是用JS发请求</li><li>响应的第四部分是字符串，可以用JSON语法表示一个对象，也可以用JSON语法表示一个数组，还可以用XML语法，还可以用HTML语法，还可以用CSS语法，还可以用JS语法，还可以用你自创的语法。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSONP是什么鬼</title>
      <link href="/2017/12/03/N033_JSONP%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC/"/>
      <url>/2017/12/03/N033_JSONP%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是jsonp"><a href="#什么是jsonp" class="headerlink" title="什么是jsonp"></a>什么是jsonp</h1><h2 id="从零开始构建"><a href="#从零开始构建" class="headerlink" title="从零开始构建"></a>从零开始构建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir jsonp_demo  //创建目录 jsonp_demo</span><br><span class="line">cd jsonp_demo     //切换目录到 json_demo</span><br><span class="line">touch server001.js</span><br><span class="line">touch index001.html</span><br></pre></td></tr></table></figure><h2 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h2><blockquote><h3 id="server001-js"><a href="#server001-js" class="headerlink" title="server001.js"></a>server001.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;)</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line">var url = require(&apos;url&apos;)</span><br><span class="line">var port = process.argv[2]</span><br><span class="line"></span><br><span class="line">if(!port)&#123;</span><br><span class="line">  console.log(&apos;请指定端口号好不啦？\nnode server.js 8888 这样不会吗？&apos;)</span><br><span class="line">  process.exit(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var server = http.createServer(function(request, response)&#123;</span><br><span class="line">  var parsedUrl = url.parse(request.url, true)</span><br><span class="line">  var pathWithQuery = request.url </span><br><span class="line">  var queryString = &apos;&apos;</span><br><span class="line">  if(pathWithQuery.indexOf(&apos;?&apos;) &gt;= 0)&#123; queryString = pathWithQuery.substring(pathWithQuery.indexOf(&apos;?&apos;)) &#125;</span><br><span class="line">  var path = parsedUrl.pathname</span><br><span class="line">  var query = parsedUrl.query</span><br><span class="line">  var method = request.method</span><br><span class="line"></span><br><span class="line">  /******** 从这里开始看，上面不要看 ************/</span><br><span class="line"></span><br><span class="line">  console.log(&apos;被请求后：含查询字符串的路径\n&apos; + pathWithQuery)</span><br><span class="line"></span><br><span class="line">  if(path==&apos;/&apos;)&#123;</span><br><span class="line">    var string = fs.readFileSync(&apos;./index001.html&apos;,&apos;utf8&apos;);</span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class="line">    response.write(string);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    response.statusCode = 404;</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /******** 代码结束，下面不要看 ************/</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port)</span><br><span class="line">console.log(&apos;监听 &apos; + port + &apos; 成功\n请在浏览器输入 http://localhost:&apos; + port)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>当前目录下 新建index.html main.js style.css (main.js/style.css内容为空暂时不需要)</p><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;100&lt;/span&gt; &lt;/h5&gt;</span><br><span class="line">    &lt;button id=&quot;btn&quot;&gt;付款1块钱&lt;/button&gt;</span><br><span class="line">    &lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        btn.addEventListener(&apos;click&apos;,()=&gt;&#123;</span><br><span class="line">            let n = amount.innerText;</span><br><span class="line">            let number = parseInt(n,10);</span><br><span class="line">            let newNumber = number - 1;</span><br><span class="line">            amount.innerText = newNumber;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="运行-server001-js-所在目录-打开命令行运行"><a href="#运行-server001-js-所在目录-打开命令行运行" class="headerlink" title="运行 server001.js 所在目录  打开命令行运行"></a>运行 server001.js 所在目录  打开命令行运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node server001.js 9999</span><br><span class="line">//你会看到</span><br><span class="line">监听 9999 成功</span><br><span class="line">请在浏览器输入 http://localhost:9999</span><br></pre></td></tr></table></figure><blockquote><p>打开浏览器输入 <a href="http://localhost:9999" target="_blank" rel="noopener">http://localhost:9999</a></p></blockquote><blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note033_0.png" alt="运行后"></p></blockquote><blockquote><p>点击按钮后你会看到  余额变动如下</p></blockquote><blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note033_1.png" alt="点击付款"></p></blockquote><h4 id="问题1-每次点击按钮都会把余额减1-但是浏览器只要刷新就会重新显示100"><a href="#问题1-每次点击按钮都会把余额减1-但是浏览器只要刷新就会重新显示100" class="headerlink" title="问题1 每次点击按钮都会把余额减1 但是浏览器只要刷新就会重新显示100"></a>问题1 每次点击按钮都会把余额减1 但是浏览器只要刷新就会重新显示100</h4><blockquote><p>如何长久的保存用户的数据呢？不可能你的余额永远是100吧  那岂不是有花不完的钱</p></blockquote><h4 id="长久的保存用户数据-保存到文件里"><a href="#长久的保存用户数据-保存到文件里" class="headerlink" title="长久的保存用户数据  保存到文件里"></a>长久的保存用户数据  保存到文件里</h4><blockquote><p>文件系统 将数据保存到服务器的文件里 这个文件专门为这个用户服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch db //创建 db 文件  </span><br><span class="line"></span><br><span class="line">vi db //打开之后写入100</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h2><h4 id="修改html里写死的100-换用一个‘匹配’字符替换-gt-“-amp-amp-amp-amount-amp-amp-amp-”"><a href="#修改html里写死的100-换用一个‘匹配’字符替换-gt-“-amp-amp-amp-amount-amp-amp-amp-”" class="headerlink" title="修改html里写死的100  换用一个‘匹配’字符替换 ==&gt; “&amp;&amp;&amp;amount&amp;&amp;&amp;”"></a>修改html里写死的100  换用一个‘匹配’字符替换 ==&gt; “&amp;&amp;&amp;amount&amp;&amp;&amp;”</h4><blockquote><p>index002.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//将这一行</span><br><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;100&lt;/span&gt; &lt;/h5&gt;</span><br><span class="line">//修改为</span><br><span class="line">//自己定义替换的匹配字符串 &quot;&amp;&amp;&amp;amount&amp;&amp;&amp;&quot; </span><br><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt; &amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt; &lt;/h5&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>server002.js 修改如下内容  从db读取 用户余额<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if(path==&apos;/&apos;)&#123;</span><br><span class="line">   var string = fs.readFileSync(&apos;./index002.html&apos;,&apos;utf8&apos;);</span><br><span class="line">   //读取db文件里用户余额</span><br><span class="line">   var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); //100</span><br><span class="line">   //替换 index002.html 里定义的 匹配字符 为 用户余额</span><br><span class="line">   string = string.replace(&apos;&amp;&amp;&amp;amount&amp;&amp;&amp;&apos;,amount);</span><br><span class="line">   response.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class="line">   response.write(string);</span><br><span class="line">   response.end();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这样做了之后你会发现 一刷新 数据还是100 </p></blockquote><h4 id="解决长久保存"><a href="#解决长久保存" class="headerlink" title="解决长久保存"></a>解决长久保存</h4><blockquote><p>我们点击付款的时候  告诉服务器 请把数据库里的余额给我</p></blockquote><blockquote><p>所以我们点击付款的时候不能单独修改本地了 要去给服务器发 post请求</p></blockquote><blockquote><h3 id="为什么不是get-付款啊！这么重要的操作你敢用get"><a href="#为什么不是get-付款啊！这么重要的操作你敢用get" class="headerlink" title="为什么不是get 付款啊！这么重要的操作你敢用get?"></a>为什么不是get 付款啊！这么重要的操作你敢用get?</h3></blockquote><h2 id="版本三"><a href="#版本三" class="headerlink" title="版本三"></a>版本三</h2><h4 id="index003-html"><a href="#index003-html" class="headerlink" title="index003.html"></a>index003.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;form action=&quot;/pay&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;付款1块钱&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="server003-js"><a href="#server003-js" class="headerlink" title="server003.js"></a>server003.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if(path==&apos;/&apos;)&#123;</span><br><span class="line">  var string = fs.readFileSync(&apos;./index003.html&apos;,&apos;utf8&apos;);</span><br><span class="line">  var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); //100</span><br><span class="line">  string = string.replace(&apos;&amp;&amp;&amp;amount&amp;&amp;&amp;&apos;,amount);</span><br><span class="line">  response.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class="line">  response.write(string);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;else if(path==&apos;/pay&apos;&amp;&amp; method.toUpperCase() === &apos;POST&apos;)&#123;</span><br><span class="line">  //读取 db中用户余额</span><br><span class="line">  var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">  var newAmount = amount - 1;  //余额减1</span><br><span class="line">  fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额 </span><br><span class="line">  response.write(&apos;success&apos;);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  response.statusCode = 404;</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="再去开启你的服务器"><a href="#再去开启你的服务器" class="headerlink" title="再去开启你的服务器"></a>再去开启你的服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server003.js 9999</span><br><span class="line">//在浏览器打开  http://localhost:9999</span><br></pre></td></tr></table></figure><p><a href="http://localhost:9999" target="_blank" rel="noopener">http://localhost:9999</a></p><ul><li>点击付款按钮</li><li>跳到 <a href="http://localhost:9999/pay" target="_blank" rel="noopener">http://localhost:9999/pay</a> 页面显示 success</li><li>点击浏览器返回   **注意：此时浏览器返回的是缓存页面  你要手动刷新一下</li><li>用户余额减少了</li></ul><blockquote><p>你去打开db文件 发现余额改变了</p></blockquote><h4 id="以上就是最最简单、最最原始的数据库的展示"><a href="#以上就是最最简单、最最原始的数据库的展示" class="headerlink" title="以上就是最最简单、最最原始的数据库的展示"></a>以上就是最最简单、最最原始的数据库的展示</h4><h4 id="再次修改一下server003-js里的代码"><a href="#再次修改一下server003-js里的代码" class="headerlink" title="再次修改一下server003.js里的代码"></a>再次修改一下server003.js里的代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">else if(path==&apos;/pay&apos;&amp;&amp; method.toUpperCase() === &apos;POST&apos;)&#123;</span><br><span class="line">    //读取 db中用户余额</span><br><span class="line">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">    var newAmount = amount - 1;  //余额减1</span><br><span class="line">    if(Math.random()&gt;0.5)&#123;</span><br><span class="line">        fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额 </span><br><span class="line">        response.write(&apos;success&apos;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        response.write(&apos;fail&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="以上是：旧时代的前后端配合"><a href="#以上是：旧时代的前后端配合" class="headerlink" title="以上是：旧时代的前后端配合"></a>以上是：旧时代的前后端配合</h3><blockquote><p>操作数据库成功返回success 失败返回fail</p></blockquote><h3 id="在一个2018年的今天"><a href="#在一个2018年的今天" class="headerlink" title="在一个2018年的今天"></a>在一个2018年的今天</h3><blockquote><p>用户怎么可能忍受</p><ul><li>点击付款 </li><li>进入成功/失败页面</li><li>点击返回</li><li>点击刷新才看到你最新的数据</li></ul></blockquote><h3 id="form表单一旦提交不管成功还是失败一定会刷新当前页面"><a href="#form表单一旦提交不管成功还是失败一定会刷新当前页面" class="headerlink" title="form表单一旦提交不管成功还是失败一定会刷新当前页面"></a>form表单一旦提交不管成功还是失败一定会刷新当前页面</h3><h3 id="古老方式-优化一下用户体验"><a href="#古老方式-优化一下用户体验" class="headerlink" title="古老方式-优化一下用户体验"></a>古老方式-优化一下用户体验</h3><blockquote><p>用iframe承载这个form的提交 后的 success/fail响应  但是I现在已经没人用啦！</p></blockquote><h2 id="版本四"><a href="#版本四" class="headerlink" title="版本四"></a>版本四</h2><h4 id="index004-html"><a href="#index004-html" class="headerlink" title="index004.html"></a>index004.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">    &lt;form action=&quot;/pay&quot; method=&quot;post&quot; target=&quot;result&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;付款1块钱&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;iframe name=&quot;result&quot; src=&quot;about:blank&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="前端的高度洁癖-不用form向后台发送一个请求"><a href="#前端的高度洁癖-不用form向后台发送一个请求" class="headerlink" title="前端的高度洁癖 不用form向后台发送一个请求"></a>前端的高度洁癖 不用form向后台发送一个请求</h4><h2 id="版本五"><a href="#版本五" class="headerlink" title="版本五"></a>版本五</h2><h4 id="index005-html"><a href="#index005-html" class="headerlink" title="index005.html"></a>index005.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打钱&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        let img = document.createElement(&apos;img&apos;);</span><br><span class="line">        img.src = &apos;/pay&apos;;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>点击按钮的时候 会创建一个img标签 设置它的 src = ‘你的请求路径’ 就会触发请求</p></blockquote><h4 id="这样的缺陷就是-它无法post-它只能get"><a href="#这样的缺陷就是-它无法post-它只能get" class="headerlink" title="这样的缺陷就是 它无法post 它只能get"></a>这样的缺陷就是 它无法post 它只能get</h4><h4 id="问题来了？-我们如何知道它成功or失败呢？"><a href="#问题来了？-我们如何知道它成功or失败呢？" class="headerlink" title="问题来了？ 我们如何知道它成功or失败呢？"></a>问题来了？ 我们如何知道它成功or失败呢？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打钱&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        let img = document.createElement(&apos;img&apos;);</span><br><span class="line">        img.src = &apos;/pay&apos;;</span><br><span class="line">        //我们如何知道请求成功or失败呢？ </span><br><span class="line">        img.onload = function()&#123;</span><br><span class="line">            alert(&apos;打钱成功&apos;)</span><br><span class="line">            //我们帮用户刷新  但是会重绘整个页面</span><br><span class="line">            //window.location.reload();</span><br><span class="line">            //因为知道固定减1 所以我帮用户减1</span><br><span class="line">            amount.innerText = amount.innerText - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror = function()&#123;</span><br><span class="line">            alert(&apos;打钱失败&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="server005-js"><a href="#server005-js" class="headerlink" title="server005.js"></a>server005.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">else if(path==&apos;/pay&apos;)&#123;</span><br><span class="line">    //读取 db中用户余额</span><br><span class="line">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">    var newAmount = amount - 1;  //余额减1</span><br><span class="line">    if(Math.random()&gt;0.5)&#123;</span><br><span class="line">        fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额</span><br><span class="line">        //设置响应头 </span><br><span class="line">        response.setHeader(&apos;Content-Type&apos;,&apos;image/png&apos;);</span><br><span class="line">        //设置状态码</span><br><span class="line">        response.statusCode = 200;</span><br><span class="line">        //返回响应的图片  不然 会走入img.onerror 事件里</span><br><span class="line">        response.write(fs.readFileSync(&apos;./dog.jpg&apos;));</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        response.statusCode = 400;</span><br><span class="line">        response.write(&apos;fail&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="这样我们就完成了-无刷新的发送请求-俗称-image发请求法"><a href="#这样我们就完成了-无刷新的发送请求-俗称-image发请求法" class="headerlink" title="这样我们就完成了 无刷新的发送请求  俗称 image发请求法"></a>这样我们就完成了 无刷新的发送请求  俗称 image发请求法</h4><h3 id="改良-script发请求法"><a href="#改良-script发请求法" class="headerlink" title="改良 script发请求法"></a>改良 script发请求法</h3><blockquote><h4 id="注意动态创建script-同时设置src-必须把script添加到body里才会生效"><a href="#注意动态创建script-同时设置src-必须把script添加到body里才会生效" class="headerlink" title="注意动态创建script 同时设置src 必须把script添加到body里才会生效"></a>注意动态创建script 同时设置src 必须把script添加到body里才会生效</h4></blockquote><h2 id="版本六"><a href="#版本六" class="headerlink" title="版本六"></a>版本六</h2><h4 id="server006-js"><a href="#server006-js" class="headerlink" title="server006.js"></a>server006.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/******** 从这里开始看，上面不要看 ************/</span><br><span class="line"></span><br><span class="line">console.log(&apos;被请求后：含查询字符串的路径\n&apos; + pathWithQuery)</span><br><span class="line"></span><br><span class="line">if(path==&apos;/&apos;)&#123;</span><br><span class="line">  var string = fs.readFileSync(&apos;./index006.html&apos;,&apos;utf8&apos;);</span><br><span class="line">  var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); //100</span><br><span class="line">  string = string.replace(&apos;&amp;&amp;&amp;amount&amp;&amp;&amp;&apos;,amount);</span><br><span class="line">  response.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class="line">  response.write(string);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;else if(path==&apos;/pay&apos;)&#123;</span><br><span class="line">  //读取 db中用户余额</span><br><span class="line">  var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">  var newAmount = amount - 1;  //余额减1</span><br><span class="line">  if(Math.random()&gt;0.5)&#123;</span><br><span class="line">      fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额</span><br><span class="line">      //设置响应头 </span><br><span class="line">      response.setHeader(&apos;Content-Type&apos;,&apos;application/javascript&apos;);</span><br><span class="line">      //设置状态码</span><br><span class="line">      response.statusCode = 200;</span><br><span class="line">      //返回响应内容</span><br><span class="line">      response.write(&apos;&apos;);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">      response.statusCode = 400;</span><br><span class="line">      response.write(&apos;fail&apos;);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  response.end();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  response.statusCode = 404;</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/******** 代码结束，下面不要看 ************/</span><br></pre></td></tr></table></figure><h4 id="index006-html"><a href="#index006-html" class="headerlink" title="index006.html"></a>index006.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打钱&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        let script = document.createElement(&apos;script&apos;);</span><br><span class="line">        script.src = &apos;/pay&apos;;</span><br><span class="line">        document.body.appendChild(script);</span><br><span class="line">        //我们如何知道请求成功or失败呢？ </span><br><span class="line">        script.onload = function()&#123;</span><br><span class="line">            alert(&apos;打钱成功&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">        script.onerror = function()&#123;</span><br><span class="line">            alert(&apos;打钱失败&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这样每次点击会生成一个script </p></blockquote><h4 id="我们知道-script里的代码是会执行的"><a href="#我们知道-script里的代码是会执行的" class="headerlink" title="我们知道 script里的代码是会执行的"></a>我们知道 script里的代码是会执行的</h4><blockquote><p>所以我们就不需要在 server006.js里写失败的情况 它会自动进入 script.onerror里</p></blockquote><h4 id="step1修改server006-js"><a href="#step1修改server006-js" class="headerlink" title="step1修改server006.js"></a>step1修改server006.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">else if(path==&apos;/pay&apos;)&#123;</span><br><span class="line">    //读取 db中用户余额</span><br><span class="line">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">    var newAmount = amount - 1;  //余额减1</span><br><span class="line"> </span><br><span class="line">    fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额</span><br><span class="line">    //设置响应头 </span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;application/javascript&apos;);</span><br><span class="line">    //设置状态码</span><br><span class="line">    response.statusCode = 200;</span><br><span class="line">    //返回响应内容</span><br><span class="line">    response.write(&apos;alert(&quot;pay&quot;)&apos;);</span><br><span class="line">   </span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行发现如果成功了 就会 弹出pay  然后再弹出‘打钱成功’</p></blockquote><h4 id="不用监听script-onload了"><a href="#不用监听script-onload了" class="headerlink" title="不用监听script.onload了"></a>不用监听script.onload了</h4><blockquote><p>因为 成功自然会在server006.js 里 写入并执行 response.write(‘alert(“pay”)’);</p></blockquote><h2 id="版本七"><a href="#版本七" class="headerlink" title="版本七"></a>版本七</h2><h4 id="index007-html"><a href="#index007-html" class="headerlink" title="index007.html"></a>index007.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打钱&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        let script = document.createElement(&apos;script&apos;);</span><br><span class="line">        script.src = &apos;/pay&apos;;</span><br><span class="line">        document.body.appendChild(script);</span><br><span class="line">        script.onerror = function()&#123;</span><br><span class="line">            alert(&apos;打钱失败&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="server007-js"><a href="#server007-js" class="headerlink" title="server007.js"></a>server007.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">else if(path==&apos;/pay&apos;)&#123;</span><br><span class="line">    //读取 db中用户余额</span><br><span class="line">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">    var newAmount = amount - 1;  //余额减1</span><br><span class="line"> </span><br><span class="line">    fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额</span><br><span class="line">    //设置响应头 </span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;application/javascript&apos;);</span><br><span class="line">    //设置状态码</span><br><span class="line">    response.statusCode = 200;</span><br><span class="line">    //返回响应内容</span><br><span class="line">    response.write(</span><br><span class="line">      `</span><br><span class="line">      amount.innerText = amount.innerText - 1;</span><br><span class="line">      `</span><br><span class="line">    );</span><br><span class="line">   </span><br><span class="line">    response.end();</span><br></pre></td></tr></table></figure><h4 id="优化上面运行后每次点击按钮页面都会多一个script标签"><a href="#优化上面运行后每次点击按钮页面都会多一个script标签" class="headerlink" title="优化上面运行后每次点击按钮页面都会多一个script标签"></a>优化上面运行后每次点击按钮页面都会多一个script标签</h4><blockquote><p>成功或者失败后干掉script</p></blockquote><h2 id="版本八"><a href="#版本八" class="headerlink" title="版本八"></a>版本八</h2><h4 id="index008-html"><a href="#index008-html" class="headerlink" title="index008.html"></a>index008.html</h4><blockquote><p>注意:server里文件路径</p></blockquote><blockquote><p>所以我们还是得监听onload事件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打钱&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        let script = document.createElement(&apos;script&apos;);</span><br><span class="line">        script.src = &apos;/pay&apos;;</span><br><span class="line">        document.body.appendChild(script);</span><br><span class="line">        script.onload = function(e)&#123;</span><br><span class="line">            alert(&apos;打钱成功&apos;)</span><br><span class="line">            e.currentTarget.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        script.onerror = function(e)&#123;</span><br><span class="line">            alert(&apos;打钱失败&apos;)</span><br><span class="line">            e.currentTarget.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意：不管成功还是失败script都会移除-但是script还在内存里只是从页面移除了"><a href="#注意：不管成功还是失败script都会移除-但是script还在内存里只是从页面移除了" class="headerlink" title="注意：不管成功还是失败script都会移除 但是script还在内存里只是从页面移除了"></a>注意：不管成功还是失败script都会移除 但是script还在内存里只是从页面移除了</h4></blockquote><h4 id="这个方案就叫-SRJ-Server-rendered-javascript-服务器返回的-javascript"><a href="#这个方案就叫-SRJ-Server-rendered-javascript-服务器返回的-javascript" class="headerlink" title="这个方案就叫 SRJ  (Server rendered javascript)服务器返回的 javascript"></a>这个方案就叫 SRJ  (Server rendered javascript)服务器返回的 javascript</h4><blockquote><p>无刷新局部更新页面内容的方案 在ajax之前</p></blockquote><h3 id="script是不受域名限制的-这跟跨域没关系"><a href="#script是不受域名限制的-这跟跨域没关系" class="headerlink" title="script是不受域名限制的 这跟跨域没关系"></a>script是不受域名限制的 这跟跨域没关系</h3><blockquote><p>aa.com:9999的前端 是可以访问  bb.com:8888的后台接口的 这就是SRJ</p></blockquote><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><h4 id="查看后端代码-发现–-后端要对前端代码非常了解"><a href="#查看后端代码-发现–-后端要对前端代码非常了解" class="headerlink" title="查看后端代码 发现– 后端要对前端代码非常了解"></a>查看后端代码 发现– 后端要对前端代码非常了解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">else if(path==&apos;/pay&apos;)&#123;</span><br><span class="line">    //读取 db中用户余额</span><br><span class="line">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">    var newAmount = amount - 1;  //余额减1</span><br><span class="line"> </span><br><span class="line">    fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额</span><br><span class="line">    //设置响应头 </span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;application/javascript&apos;);</span><br><span class="line">    //设置状态码</span><br><span class="line">    response.statusCode = 200;</span><br><span class="line">    //返回响应内容</span><br><span class="line">    response.write(</span><br><span class="line">      `</span><br><span class="line">      amount.innerText = amount.innerText - 1;</span><br><span class="line">      `</span><br><span class="line">    );</span><br><span class="line">   </span><br><span class="line">    response.end();</span><br></pre></td></tr></table></figure><blockquote><p>bb.com:8888的后端居然要对 aa.com:9999的页面如此清楚</p></blockquote><h4 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h4><h4 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h4><h2 id="版本九"><a href="#版本九" class="headerlink" title="版本九"></a>版本九</h2><h4 id="index009-html"><a href="#index009-html" class="headerlink" title="index009.html"></a>index009.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打钱&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //某域名下的前端  bb.com:9999的前端</span><br><span class="line">    window.xxx = function(result)&#123;</span><br><span class="line">        alert(`得到了结果是$&#123;result&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        let script = document.createElement(&apos;script&apos;);</span><br><span class="line">        script.src = &apos;/pay&apos;;</span><br><span class="line">        document.body.appendChild(script);</span><br><span class="line">        script.onload = function(e)&#123;</span><br><span class="line">            e.currentTarget.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        script.onerror = function(e)&#123;</span><br><span class="line">            alert(&apos;打钱失败&apos;)</span><br><span class="line">            e.currentTarget.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="server009-js"><a href="#server009-js" class="headerlink" title="server009.js"></a>server009.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">else if(path==&apos;/pay&apos;)&#123;</span><br><span class="line">    //读取 db中用户余额</span><br><span class="line">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">    var newAmount = amount - 1;  //余额减1</span><br><span class="line"> </span><br><span class="line">    fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额</span><br><span class="line">    //设置响应头 </span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;application/javascript&apos;);</span><br><span class="line">    //设置状态码</span><br><span class="line">    response.statusCode = 200;</span><br><span class="line">    //返回响应内容</span><br><span class="line">    response.write(</span><br><span class="line">      `</span><br><span class="line">      xxx.call(undefined,&apos;success&apos;) //执行xxx方法并返回  字符串</span><br><span class="line">      `</span><br><span class="line">    );</span><br><span class="line">   </span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="这样的好处是什么"><a href="#这样的好处是什么" class="headerlink" title="这样的好处是什么"></a>这样的好处是什么</h3><ul><li>后端不需要知道任何细节，只调用xxx.call()返回结果</li><li>这样两个网站之间就可以无缝的沟通</li></ul><h4 id="xxx-call-是不是很丑？"><a href="#xxx-call-是不是很丑？" class="headerlink" title="xxx.call()是不是很丑？"></a>xxx.call()是不是很丑？</h4><ul><li>于是传递一个参数callback=xxx </li><li>callback =’你自己定义的方法名’</li></ul><h2 id="版本十"><a href="#版本十" class="headerlink" title="版本十"></a>版本十</h2><h4 id="index010-html"><a href="#index010-html" class="headerlink" title="index010.html"></a>index010.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打钱&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //某域名下的前端  bb.com:9999的前端</span><br><span class="line">    window.yyy = function(result)&#123;</span><br><span class="line">        alert(`得到了结果是$&#123;result&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        let script = document.createElement(&apos;script&apos;);</span><br><span class="line">        //传递自己定义的方法名</span><br><span class="line">        script.src = &apos;/pay?callback=yyy&apos;;</span><br><span class="line">        document.body.appendChild(script);</span><br><span class="line">        script.onload = function(e)&#123;</span><br><span class="line">            e.currentTarget.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        script.onerror = function(e)&#123;</span><br><span class="line">            alert(&apos;打钱失败&apos;)</span><br><span class="line">            e.currentTarget.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="server010-js"><a href="#server010-js" class="headerlink" title="server010.js"></a>server010.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">else if(path==&apos;/pay&apos;)&#123;</span><br><span class="line">    //读取 db中用户余额</span><br><span class="line">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">    var newAmount = amount - 1;  //余额减1</span><br><span class="line"> </span><br><span class="line">    fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额</span><br><span class="line">    //设置响应头 </span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;application/javascript&apos;);</span><br><span class="line">    //设置状态码</span><br><span class="line">    response.statusCode = 200;</span><br><span class="line">    //返回响应内容</span><br><span class="line">    response.write(</span><br><span class="line">      `</span><br><span class="line">      $&#123;query.callback&#125;.call(undefined,&apos;success&apos;)</span><br><span class="line">      `</span><br><span class="line">    );</span><br><span class="line">   </span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="JSONP解决的问题是什么-两个网站之间如何交流"><a href="#JSONP解决的问题是什么-两个网站之间如何交流" class="headerlink" title="JSONP解决的问题是什么  两个网站之间如何交流"></a>JSONP解决的问题是什么  两个网站之间如何交流</h4><ul><li>因为script是不受域名限制的 ajax是受域名限制的</li><li>由于不受域名限制,我就告诉对方的网站 我要请求一个数据，</li><li>请你把数据给我 </li><li>你给我之后调用我的xxx </li><li>然后把参数给我 xxx.call(undefined,参数)</li></ul><h4 id="传递的参数不仅仅是字符串还可以是json"><a href="#传递的参数不仅仅是字符串还可以是json" class="headerlink" title="传递的参数不仅仅是字符串还可以是json"></a>传递的参数不仅仅是字符串还可以是json</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response.write(</span><br><span class="line">     `</span><br><span class="line">     $&#123;query.callback&#125;.call(undefined,&#123;</span><br><span class="line">         &quot;success&quot;:true,</span><br><span class="line">         &quot;data&quot;:99</span><br><span class="line">     &#125;)</span><br><span class="line">     `</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><blockquote><p>json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;success&quot;:true,</span><br><span class="line">    &quot;data&quot;:99</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>json的左边是 左padding : ${query.callback}.call(undefined,</p></blockquote><blockquote><p>json的右边是 右padding : )</p></blockquote><blockquote><p>于是乎   JSON + padding = JSONP</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note033_2.png" alt="jsonp"></p><h2 id="版本十一"><a href="#版本十一" class="headerlink" title="版本十一"></a>版本十一</h2><h3 id="index011-html"><a href="#index011-html" class="headerlink" title="index011.html"></a>index011.html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打钱&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        let script = document.createElement(&apos;script&apos;);</span><br><span class="line"></span><br><span class="line">        //生成无重复的方法名</span><br><span class="line">        let fnName = &apos;hjx&apos;+parseInt(Math.random()*100000,10);</span><br><span class="line">        window[fnName] = function(result)&#123;</span><br><span class="line">            //根据接收的json结果做处理</span><br><span class="line">            if(result === &apos;success&apos;)&#123;</span><br><span class="line">                amount.innerText = amount.innerText - 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //传递自己定义的方法名</span><br><span class="line">        script.src = &apos;/pay?callback=&apos; + fnName;</span><br><span class="line">        document.body.appendChild(script);</span><br><span class="line">        script.onload = function(e)&#123;</span><br><span class="line">            e.currentTarget.remove();</span><br><span class="line">            //不管成功失败都要删除生成的fnName属性</span><br><span class="line">            delete window[fnName];</span><br><span class="line">        &#125;</span><br><span class="line">        script.onerror = function(e)&#123;</span><br><span class="line">            alert(&apos;打钱失败&apos;)</span><br><span class="line">            e.currentTarget.remove();</span><br><span class="line">            //不管成功失败都要删除生成的fnName属性</span><br><span class="line">            delete window[fnName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="server011-js"><a href="#server011-js" class="headerlink" title="server011.js"></a>server011.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;)</span><br><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line">var url = require(&apos;url&apos;)</span><br><span class="line">var port = process.argv[2]</span><br><span class="line"></span><br><span class="line">if(!port)&#123;</span><br><span class="line">  console.log(&apos;请指定端口号好不啦？\nnode server.js 8888 这样不会吗？&apos;)</span><br><span class="line">  process.exit(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var server = http.createServer(function(request, response)&#123;</span><br><span class="line">  var parsedUrl = url.parse(request.url, true)</span><br><span class="line">  var pathWithQuery = request.url </span><br><span class="line">  var queryString = &apos;&apos;</span><br><span class="line">  if(pathWithQuery.indexOf(&apos;?&apos;) &gt;= 0)&#123; queryString = pathWithQuery.substring(pathWithQuery.indexOf(&apos;?&apos;)) &#125;</span><br><span class="line">  var path = parsedUrl.pathname</span><br><span class="line">  var query = parsedUrl.query</span><br><span class="line">  var method = request.method</span><br><span class="line"></span><br><span class="line">  /******** 从这里开始看，上面不要看 ************/</span><br><span class="line"></span><br><span class="line">  console.log(&apos;被请求后：含查询字符串的路径\n&apos; + pathWithQuery)</span><br><span class="line"></span><br><span class="line">  if(path==&apos;/&apos;)&#123;</span><br><span class="line">    var string = fs.readFileSync(&apos;./index011.html&apos;,&apos;utf8&apos;);</span><br><span class="line">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); //100</span><br><span class="line">    string = string.replace(&apos;&amp;&amp;&amp;amount&amp;&amp;&amp;&apos;,amount);</span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;text/html;charset=utf-8&apos;);</span><br><span class="line">    response.write(string);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;else if(path==&apos;/style.css&apos;)&#123;</span><br><span class="line">    var string = fs.readFileSync(&apos;./style.css&apos;,&apos;utf8&apos;);</span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;text/css&apos;);</span><br><span class="line">    response.write(string);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;else if(path==&apos;/main.js&apos;)&#123;</span><br><span class="line">    var string = fs.readFileSync(&apos;./main.js&apos;,&apos;utf8&apos;);</span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;text/javascript&apos;);</span><br><span class="line">    response.write(string);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;else if(path==&apos;/pay&apos;)&#123;</span><br><span class="line">    //读取 db中用户余额</span><br><span class="line">    var amount = fs.readFileSync(&apos;./db&apos;,&apos;utf8&apos;); </span><br><span class="line">    var newAmount = amount - 1;  //余额减1</span><br><span class="line"> </span><br><span class="line">    fs.writeFileSync(&apos;./db&apos;,newAmount);  //更新余额</span><br><span class="line">    //设置响应头 </span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;application/javascript&apos;);</span><br><span class="line">    //设置状态码</span><br><span class="line">    response.statusCode = 200;</span><br><span class="line">    //返回响应内容</span><br><span class="line">    response.write(</span><br><span class="line">      `</span><br><span class="line">      $&#123;query.callback&#125;.call(undefined,&apos;success&apos;)</span><br><span class="line">      `</span><br><span class="line">    );</span><br><span class="line">   </span><br><span class="line">    response.end();</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    response.statusCode = 404;</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /******** 代码结束，下面不要看 ************/</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port)</span><br><span class="line">console.log(&apos;监听 &apos; + port + &apos; 成功\n请在浏览器输入 http://localhost:&apos; + port)</span><br></pre></td></tr></table></figure><h4 id="写了那么多-其实你可以使用jQuery-几句话就能搞定"><a href="#写了那么多-其实你可以使用jQuery-几句话就能搞定" class="headerlink" title="写了那么多  其实你可以使用jQuery 几句话就能搞定"></a>写了那么多  其实你可以使用jQuery 几句话就能搞定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;h5&gt;您的账户余额是 &lt;span id=&quot;amount&quot;&gt;&amp;&amp;&amp;amount&amp;&amp;&amp;&lt;/span&gt;&lt;/h5&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打钱&lt;/button&gt;</span><br><span class="line">&lt;script src=&quot;//code.jquery.com/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    btn.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&quot;http://localhost:9999/pay&quot;,</span><br><span class="line">            dataType:&quot;jsonp&quot;,</span><br><span class="line">            success:function(res)&#123;</span><br><span class="line">                console.log(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)            </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="注意：-ajax-只是把jsonp归纳到-jq里-而它不是ajax"><a href="#注意：-ajax-只是把jsonp归纳到-jq里-而它不是ajax" class="headerlink" title="注意： $.ajax()只是把jsonp归纳到 jq里  而它不是ajax"></a>注意： $.ajax()只是把jsonp归纳到 jq里  而它不是ajax</h4><h3 id="考点1-：请问JSONP为什么不支持POST请求"><a href="#考点1-：请问JSONP为什么不支持POST请求" class="headerlink" title="考点1 ：请问JSONP为什么不支持POST请求"></a>考点1 ：请问JSONP为什么不支持POST请求</h3><ul><li>因为JSONP是通过动态创建script实现的</li><li>我们动态创建script的时候只能用get 没有办法用post</li></ul><h3 id="考点2-：-什么是-JSONP？"><a href="#考点2-：-什么是-JSONP？" class="headerlink" title="考点2 ： 什么是 JSONP？"></a>考点2 ： 什么是 JSONP？</h3><ul><li>1请求方创建一个script标签src指向响应方，并传递callback =回调函数名</li><li>2响应方根据callback查询参数构造一个 xxx.call(undefined,传递的内容)</li><li>3浏览器接到响应，就会执行 xxx.call(undefined,传递的内容)</li><li>4请求方得到他想要的数据</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DOM事件</title>
      <link href="/2017/12/01/N032_DOM%E4%BA%8B%E4%BB%B6/"/>
      <url>/2017/12/01/N032_DOM%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="事件模型应用-点击显示浮层-点击其它地方关闭浮层"><a href="#事件模型应用-点击显示浮层-点击其它地方关闭浮层" class="headerlink" title="事件模型应用 点击显示浮层 点击其它地方关闭浮层"></a>事件模型应用 点击显示浮层 点击其它地方关闭浮层</h3><blockquote><p>问题1 点击按钮浮层不出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;wrapper&quot; class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;button id=&quot;clickMe&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">    &lt;div id=&quot;popover&quot; class=&quot;popover&quot;&gt;</span><br><span class="line">      浮层</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //点击显示浮层 </span><br><span class="line">    clickMe.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class="line">        popover.style.display = &apos;block&apos;;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    document.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class="line">        popover.style.display = &apos;none&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>点击按钮的时候浮层确实出现了 </p></blockquote><blockquote><p>但是addEventListener(‘事件’,fn,布尔值) 第三个参数不传代表false 代表冒泡</p></blockquote><blockquote><p>冒泡到document  </p></blockquote><blockquote><p>document 发现事件队列里有 fn于是执行   popover.style.display = ‘none’</p></blockquote><h3 id="如何解决-gt-event-stopPropagation"><a href="#如何解决-gt-event-stopPropagation" class="headerlink" title="如何解决 ==&gt; event.stopPropagation();"></a>如何解决 ==&gt; event.stopPropagation();</h3><blockquote><p>Prevents further propagation of the current event in the capturing and bubbling phases.</p></blockquote><blockquote><p>防止当前事件在捕获和冒泡阶段的进一步传播。</p></blockquote><blockquote><h5 id="早一点的前端肯定会认为还有一个方法阻止冒泡-event-cancelBubble-true-不好意思-该属性已废弃"><a href="#早一点的前端肯定会认为还有一个方法阻止冒泡-event-cancelBubble-true-不好意思-该属性已废弃" class="headerlink" title="早一点的前端肯定会认为还有一个方法阻止冒泡 event.cancelBubble = true ;不好意思 该属性已废弃"></a>早一点的前端肯定会认为还有一个方法阻止冒泡 event.cancelBubble = true ;不好意思 该属性已废弃</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//点击显示浮层 </span><br><span class="line">clickMe.addEventListener(&apos;click&apos;, function(event)&#123;</span><br><span class="line">    popover.style.display = &apos;block&apos;;</span><br><span class="line">    event.stopPropagation(); //这样冒泡阶段就被禁止了 </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">document.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class="line">    popover.style.display = &apos;none&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="问题2-虽然解决了阻止冒泡-但是当你点击浮层时-浮层也会消失"><a href="#问题2-虽然解决了阻止冒泡-但是当你点击浮层时-浮层也会消失" class="headerlink" title="问题2 虽然解决了阻止冒泡 但是当你点击浮层时  浮层也会消失"></a>问题2 虽然解决了阻止冒泡 但是当你点击浮层时  浮层也会消失</h3><blockquote><p>这样就不能在按钮上阻止冒泡 因为点击浮层也会冒泡到wrapper</p><ul><li>因为btn会冒泡到 wrapper </li><li>popover会冒泡到 wrapper</li><li>所以在它们的父节点做阻止冒泡</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;wrapper&quot; class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;button id=&quot;clickMe&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">    &lt;div id=&quot;popover&quot; class=&quot;popover&quot;&gt;</span><br><span class="line">        浮层</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">clickMe.addEventListener(&apos;click&apos;, function(e)&#123;</span><br><span class="line">    popover.style.display = &apos;block&apos;;</span><br><span class="line">&#125;)</span><br><span class="line">wrapper.addEventListener(&apos;click&apos;,function(e)&#123;</span><br><span class="line">    //解决点击浮层触发的冒泡</span><br><span class="line">    e.stopPropagation()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">document.addEventListener(&apos;click&apos;, function()&#123;</span><br><span class="line">    popover.style.display = &apos;none&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="问题3-现在点击按钮浮层出现-点击浮层浮层浮层不消失-但是有性能问题"><a href="#问题3-现在点击按钮浮层出现-点击浮层浮层浮层不消失-但是有性能问题" class="headerlink" title="问题3 现在点击按钮浮层出现  点击浮层浮层浮层不消失 但是有性能问题"></a>问题3 现在点击按钮浮层出现  点击浮层浮层浮层不消失 但是有性能问题</h3><ul><li>100个浮层就是100个事件队列  10000个呢？</li></ul><blockquote><p>现在我们先换jq来实现刚刚的效果</p></blockquote><blockquote><h3 id="jq提供了一个非常方便的方法-node-on-‘click’-false-第二个参数代表-阻止默认事件-和阻止传播"><a href="#jq提供了一个非常方便的方法-node-on-‘click’-false-第二个参数代表-阻止默认事件-和阻止传播" class="headerlink" title="jq提供了一个非常方便的方法  $(node).on(‘click’,false) 第二个参数代表 阻止默认事件 和阻止传播"></a>jq提供了一个非常方便的方法  $(node).on(‘click’,false) 第二个参数代表 阻止默认事件 和阻止传播</h3></blockquote><h3 id="又偶生出一个bug-就是-on-‘事件’-false-你在checkbox外的任何一层-阻止默认事件-这个checkbox就无法选中"><a href="#又偶生出一个bug-就是-on-‘事件’-false-你在checkbox外的任何一层-阻止默认事件-这个checkbox就无法选中" class="headerlink" title="又偶生出一个bug 就是.on(‘事件’,false) 你在checkbox外的任何一层 阻止默认事件 这个checkbox就无法选中"></a>又偶生出一个bug 就是.on(‘事件’,false) 你在checkbox外的任何一层 阻止默认事件 这个checkbox就无法选中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;wrapper&quot; class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;button id=&quot;clickMe&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">    &lt;div id=&quot;popover&quot; class=&quot;popover&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot;&gt;浮层</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(clickMe).on(&apos;click&apos;,function()&#123;</span><br><span class="line">    $(popover).show();</span><br><span class="line">&#125;);</span><br><span class="line">// 这样会再次出bug就是  如果浮层里有checkbox就无法选中 因为阻止了默认事件 </span><br><span class="line">$(wrapper).on(&apos;click&apos;,false)  </span><br><span class="line"></span><br><span class="line">$(document).on(&apos;click&apos;,function()&#123;</span><br><span class="line">    $(popover).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>所以我们还是单独阻止传播 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(clickMe).on(&apos;click&apos;,function()&#123;</span><br><span class="line">    $(popover).show();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(wrapper).on(&apos;click&apos;,function(e)&#123;</span><br><span class="line">    e.stopPropagation(); //阻止冒泡</span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">$(document).on(&apos;click&apos;,function()&#123;</span><br><span class="line">    $(popover).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解决问题3-性能问题"><a href="#解决问题3-性能问题" class="headerlink" title="解决问题3 性能问题"></a>解决问题3 性能问题</h3><ul><li>点击按钮的时候显示浮层 同时添加一个document监听</li><li>为什么监听不会触发 因为 wrapper哪里阻止了 冒泡<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(clickMe).on(&apos;click&apos;,function()&#123;</span><br><span class="line">    $(popover).show();</span><br><span class="line">    //只有显示的时候监听一次 但是不会触发  因为 wrapper上阻止了冒泡</span><br><span class="line">    //这样我只监听一次 click 同时马上干掉这个监听事件   </span><br><span class="line">    $(document).one(&apos;click&apos;,function()&#123;</span><br><span class="line">      console.log(&apos;doc&apos;)</span><br><span class="line">      $(popover).hide();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//所以只能这样写  单独阻止它的冒泡 不阻止默认事件</span><br><span class="line">$(wrapper).on(&apos;click&apos;,function(e)&#123;</span><br><span class="line">    e.stopPropagation(); //阻止冒泡</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="问题4-如果不在wrapper上不阻止冒泡-点击btn为什么浮层不显示"><a href="#问题4-如果不在wrapper上不阻止冒泡-点击btn为什么浮层不显示" class="headerlink" title="问题4 如果不在wrapper上不阻止冒泡 点击btn为什么浮层不显示"></a>问题4 如果不在wrapper上不阻止冒泡 点击btn为什么浮层不显示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(clickMe).on(&apos;click&apos;,function()&#123;</span><br><span class="line">    $(popover).show();</span><br><span class="line">    //只有显示的时候监听一次 但是不会触发  因为 wrapper上阻止了冒泡</span><br><span class="line">    //这样我只监听一次 click 同时马上干掉这个监听事件   </span><br><span class="line">    $(document).one(&apos;click&apos;,function()&#123;</span><br><span class="line">      console.log(&apos;doc&apos;)</span><br><span class="line">      $(popover).hide();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在你点击btn的时候它会做两件事</li><li>1 浮层显示出来</li><li>2 document的事件队列里 添加一个函数</li><li>3 事件开始冒泡</li><li>4 开始发现 document的事件队列里有一个函数</li><li>5 执行 document事件队列里的函数</li><li>6 浮层隐藏了</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DOM事件初识</title>
      <link href="/2017/12/01/N030_DOM%E4%BA%8B%E4%BB%B6%E5%88%9D%E8%AF%86/"/>
      <url>/2017/12/01/N030_DOM%E4%BA%8B%E4%BB%B6%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h3><p>如果你想深挖请google搜索「dom spec」 <a href="https://www.w3.org/DOM/DOMTR" target="_blank" rel="noopener">dom spec</a></p><ul><li>Document Object Model (DOM) Level 1 只对基本的事件进行了汇总</li><li>Document Object Model (DOM) Level 2 增加了 Events 对事件的详细说明</li><li>Document Object Model (DOM) Level 3 并没有增加 Events 的相关修订</li><li>Document Object Model (DOM) Level 4 还在草案阶段</li></ul><blockquote><p>结论目前我们使用事件最新最广泛的标准是  dom level 2 (2000年11月3号)</p></blockquote><h4 id="dom-1-的一个经典问题"><a href="#dom-1-的一个经典问题" class="headerlink" title="dom 1 的一个经典问题"></a>dom 1 的一个经典问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function print()&#123;console.log(&apos;Hi&apos;)&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;button id=&quot;x&quot; onclick=&quot;print&quot;&gt;A&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;y&quot; onclick=&quot;print()&quot;&gt;B&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;z&quot; onclick=&quot;print.call()&quot;&gt;C&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    x.onclick = print;</span><br><span class="line">    y.onclick = print();</span><br><span class="line">    z.onclick = print.call();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>当把事件写在标签上的时候那个是正确调用 「B C」</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">写在标签上的事件</span><br><span class="line">onclick=&quot;要执行的代码&quot;</span><br><span class="line">一旦用户点击，浏览器就eval(&quot;要执行的代码&quot;)</span><br></pre></td></tr></table></figure><p>当把事件写在JS上的时候那个是正确调用 「x」</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">写在JS里的事件</span><br><span class="line">onclick=&quot;函数&quot;</span><br><span class="line">一旦用户点击，浏览器就 x.onclick.call(x,函数)</span><br></pre></td></tr></table></figure><h4 id="dom2-事件队列"><a href="#dom2-事件队列" class="headerlink" title="dom2 事件队列"></a>dom2 事件队列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>你肯定问怎么比 onclick更麻烦了</p></blockquote><ul><li>onclick是唯一的</li><li>出现两次onclick就会发生覆盖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xxx.onclick = function()&#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">&#125;</span><br><span class="line">// 第一个onclick被覆盖了  只会打印2</span><br><span class="line">xxx.onclick = function()&#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="事件队列的好处-eventListeners"><a href="#事件队列的好处-eventListeners" class="headerlink" title="事件队列的好处 eventListeners"></a>事件队列的好处 eventListeners</h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xxx.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">&#125;) </span><br><span class="line">xxx.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">当xxx被点击 打印 1 和 2</span><br></pre></td></tr></table></figure><h4 id="事件的移除"><a href="#事件的移除" class="headerlink" title="事件的移除"></a>事件的移除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">&#125;</span><br><span class="line">function f2()&#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;</span><br><span class="line">xxx.addEventListener(&apos;click&apos;,f1)</span><br><span class="line">xxx.addEventListener(&apos;click&apos;,f2)</span><br><span class="line">//移除事件队列里的 f1</span><br><span class="line">xxx.removeEventListener(&apos;click&apos;,f1)</span><br><span class="line"></span><br><span class="line">点击xxx后 打印 2</span><br></pre></td></tr></table></figure><blockquote><p>如何实现只监听one一次的效果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">    //移除事件队列里的 f1</span><br><span class="line">    xxx.removeEventListener(&apos;click&apos;,f1)</span><br><span class="line">&#125;</span><br><span class="line">xxx.addEventListener(&apos;click&apos;,f1)</span><br></pre></td></tr></table></figure><h4 id="问题1-当我点击儿子的时候，我是否点击了-爸爸和爷爷-》yes"><a href="#问题1-当我点击儿子的时候，我是否点击了-爸爸和爷爷-》yes" class="headerlink" title="问题1  当我点击儿子的时候，我是否点击了 爸爸和爷爷 ==》yes"></a>问题1  当我点击儿子的时候，我是否点击了 爸爸和爷爷 ==》yes</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;grand1&quot;&gt;</span><br><span class="line">    爷爷</span><br><span class="line">    &lt;div id=&quot;parent1&quot;&gt;</span><br><span class="line">        爸爸</span><br><span class="line">        &lt;div id=&quot;child1&quot;&gt;</span><br><span class="line">            儿子</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="问题2-当我点击儿子的时候，三个函数是否调用-gt-yes"><a href="#问题2-当我点击儿子的时候，三个函数是否调用-gt-yes" class="headerlink" title="问题2 当我点击儿子的时候，三个函数是否调用 ==&gt; yes"></a>问题2 当我点击儿子的时候，三个函数是否调用 ==&gt; yes</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grand1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;爷爷&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">parent1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;爸爸&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">child1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;儿子&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="问题3-三个函数的执行顺序-gt-1-2-3-or-3-2-1-答案是都可以"><a href="#问题3-三个函数的执行顺序-gt-1-2-3-or-3-2-1-答案是都可以" class="headerlink" title="问题3 三个函数的执行顺序 ==&gt; 1 2 3 or 3 2 1 答案是都可以"></a>问题3 三个函数的执行顺序 ==&gt; 1 2 3 or 3 2 1 答案是都可以</h4><blockquote><p>addEventListener(‘事件’,函数,可选参数) </p></blockquote><blockquote><p>第三个参数是 boolean值  不传代表false : 0 NaN undefined null false ‘’</p></blockquote><blockquote><p>false的话 顺序从内到外 儿子  爸爸  爷爷</p></blockquote><blockquote><p>true 的话 顺序从外到内 爷爷  爸爸  儿子</p></blockquote><blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note032_0.png" alt="推荐"></p></blockquote><blockquote><p>爷爷设置true 其他设置false </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">grand1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;爷爷&apos;)</span><br><span class="line">&#125;,true)</span><br><span class="line"></span><br><span class="line">parent1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;爸爸&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">child1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;儿子&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">// 爷爷  儿子  爸爸</span><br></pre></td></tr></table></figure><h4 id="考点-如果-儿子节点既有捕获又有冒泡执行顺序是什么"><a href="#考点-如果-儿子节点既有捕获又有冒泡执行顺序是什么" class="headerlink" title="考点 如果  儿子节点既有捕获又有冒泡执行顺序是什么"></a>考点 如果  儿子节点既有捕获又有冒泡执行顺序是什么</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">child1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;儿子捕获&apos;)</span><br><span class="line">&#125;,true)</span><br><span class="line"></span><br><span class="line">child1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;儿子冒泡&apos;)</span><br><span class="line">&#125;,false)</span><br><span class="line"></span><br><span class="line">// 儿子捕获</span><br><span class="line">// 儿子冒泡</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">child1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;儿子冒泡&apos;)</span><br><span class="line">&#125;,false)</span><br><span class="line"></span><br><span class="line">child1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">  console.log(&apos;儿子捕获&apos;)</span><br><span class="line">&#125;,true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 儿子冒泡</span><br><span class="line">// 儿子捕获</span><br></pre></td></tr></table></figure><blockquote><p>答案是 谁写在前面谁先触发</p></blockquote><p>如果触发在元素本身上是不区分捕获和冒泡的</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端的自我修养</title>
      <link href="/2017/11/30/N029_02%E5%89%8D%E7%AB%AF%E8%AF%A5%E9%81%B5%E5%AE%88%E7%9A%84%E5%8E%9F%E5%88%99/"/>
      <url>/2017/11/30/N029_02%E5%89%8D%E7%AB%AF%E8%AF%A5%E9%81%B5%E5%AE%88%E7%9A%84%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML-CSS-JS-内容、样式和行为分离原则"><a href="#HTML-CSS-JS-内容、样式和行为分离原则" class="headerlink" title="HTML/CSS/JS 内容、样式和行为分离原则"></a>HTML/CSS/JS 内容、样式和行为分离原则</h3><p>如果你去面试可能会被问道如下问题</p><blockquote><h4 id="请你说一下你对前端内容样式行为分离的原则"><a href="#请你说一下你对前端内容样式行为分离的原则" class="headerlink" title="请你说一下你对前端内容样式行为分离的原则?"></a>请你说一下你对前端内容样式行为分离的原则?</h4></blockquote><blockquote><p>如果你初出茅庐可能会这样回答 html负责内容css负责样式js负责行为</p></blockquote><p>但是这是大家都认可的真理，我为什么要解释原因呢！</p><blockquote><h4 id="正确做法！！！-你该这样用初中几何常用套路「反证法」"><a href="#正确做法！！！-你该这样用初中几何常用套路「反证法」" class="headerlink" title="正确做法！！！ 你该这样用初中几何常用套路「反证法」"></a>正确做法！！！ 你该这样用初中几何常用套路「反证法」</h4></blockquote><p>请看解题思路(如果你是程序员这就是「伪代码」)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">问：人类为什么吃饭</span><br><span class="line">答: 如果不吃饭人类就会死，所以人类需要吃饭</span><br></pre></td></tr></table></figure><p>你该这样回答</p><ol><li>如果html负责样式</li></ol><ul><li>会让html变得很复杂</li><li>很难区分这些标签的逻辑结构</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body bgcolor=red&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">        &lt;font color=red&gt;你好&lt;/font&gt;</span><br><span class="line">    &lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>用css表示内容</li></ol><ul><li>人类选不中</li><li>JS取不到  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div::after&#123;content:&apos;你好你好你好&apos;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        console.log(xxx.innerText) // 啥都没</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>用JS控制样式</li></ol><blockquote><p>你该避免使用jQuery的 show/hide方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line">     &lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">       </span><br><span class="line">       $(&quot;#xxx&quot;).hide() // display:none; 隐藏没有任何问题</span><br><span class="line"></span><br><span class="line">       $(&quot;#xxx&quot;).show() // 但是 show就有问题了</span><br><span class="line">       /*</span><br><span class="line">       display:inline-block;</span><br><span class="line">       display:flex;</span><br><span class="line">       display:inline;</span><br><span class="line">       */</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>show()之后你很难定位 div隐藏之前是什么 可能是flex也可能是 block</p></blockquote><p>因为jQuery为了让你使用它的库，就特殊处理了</p><ul><li>在你hide的时候把display这个值存起来</li><li>当你show的时候把display这个值赋回去</li></ul><blockquote><h4 id="问题来了，如果div一开始display-none"><a href="#问题来了，如果div一开始display-none" class="headerlink" title="问题来了，如果div一开始display:none"></a>问题来了，如果div一开始display:none</h4></blockquote><p>show() 之后会是什么呢？ 经过测试竟然是block<br>凭啥?凭啥?凭啥?</p><h4 id="JS该这样使用"><a href="#JS该这样使用" class="headerlink" title="JS该这样使用"></a>JS该这样使用</h4><blockquote><p>通过class样式 来表示不同的状态去切换</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;#xxx&quot;).addClass(&apos;active&apos;)</span><br><span class="line">$(&quot;#xxx&quot;).removeClass(&apos;active&apos;)</span><br></pre></td></tr></table></figure><h4 id="人在江湖"><a href="#人在江湖" class="headerlink" title="人在江湖"></a>人在江湖</h4><p>有的时候需要你迫不得已的用JS去操作样式，那就只能违反原则，但是你不该总是违反原则</p><blockquote><p>追溯到故事情节：天龙八部有一集阿紫被打伤乔峰各种救，去寻医，但是药店伙计告诉他没救了，此时突然一个地主家伙计来了说他家老爷不行了有没有办法，老掌柜的说快去拿“人参”，而此时纵是大侠气概的乔峰也「迫不得已」抢走了人参</p></blockquote><h3 id="基本的职业素养"><a href="#基本的职业素养" class="headerlink" title="基本的职业素养"></a>基本的职业素养</h3><h4 id="不要让「img」变形"><a href="#不要让「img」变形" class="headerlink" title="不要让「img」变形"></a>不要让「img」变形</h4><ul><li>你可以指定宽高,或者强行要求UI给你指定尺寸的图</li></ul><h4 id="关于「img」的坑"><a href="#关于「img」的坑" class="headerlink" title="关于「img」的坑"></a>关于「img」的坑</h4><p>因为「img」是一个可替换元素,所以当图片下载失败的时候就会显示alt里的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;xxx.jpg&quot;  alt=&quot;图片1&quot;&gt;</span><br></pre></td></tr></table></figure><p>由于你没有指定宽高，假如是三个并排的img(不出意外是float或者flex-start)</p><p>由于第一张图加载速度慢，后面的img就不得不挤过来，直到图1 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">正常加载</span><br><span class="line">|--------| |--------||--------|</span><br><span class="line">|--------| |--------||--------|</span><br><span class="line">|   图1  | |   图2  ||   图3   |</span><br><span class="line">|--------| |--------||--------|</span><br><span class="line"></span><br><span class="line">图1还没加载过来 没指定宽高导致后面的img补位</span><br><span class="line">|图1||--------||--------|</span><br><span class="line">     |--------||--------|</span><br><span class="line">     |   图2  ||   图3   |</span><br><span class="line">     |--------||--------|</span><br><span class="line">图1回来了</span><br><span class="line">|--------| |--------||--------|</span><br><span class="line">|--------| |--------||--------|</span><br><span class="line">|   图1  | |   图2  ||   图3   |</span><br><span class="line">|--------| |--------||--------|</span><br></pre></td></tr></table></figure><p>就是因为你没有指定宽高所以在图片没回来的时候占据很小的空间，而当图1正常加载后 图2图3就必须给图1退出位置</p><blockquote><p>这样的结果就会导致「重排」</p></blockquote><blockquote><h4 id="重排是很耗性能的，页面性能优化的注意点就是"><a href="#重排是很耗性能的，页面性能优化的注意点就是" class="headerlink" title="重排是很耗性能的，页面性能优化的注意点就是"></a>重排是很耗性能的，页面性能优化的注意点就是</h4></blockquote><p>如果你已知图片的宽高你最好写在上面避免图片未加载的「让位」(腾地)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS之使用局部变量</title>
      <link href="/2017/11/30/N029_01_JS%E9%81%BF%E5%85%8D%E7%9B%B8%E4%BA%92%E5%BD%B1%E5%93%8D%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2017/11/30/N029_01_JS%E9%81%BF%E5%85%8D%E7%9B%B8%E4%BA%92%E5%BD%B1%E5%93%8D%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="全局变量的危害"><a href="#全局变量的危害" class="headerlink" title="全局变量的危害"></a>全局变量的危害</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">html里有一个id=&quot;parent&quot;的div</span><br><span class="line">&lt;div id=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var parent = document.getElementById(&apos;xxx&apos;);</span><br><span class="line">    //这句已经有问题了  你无意之间把window.parent覆盖了</span><br><span class="line">    console.log(parent)  //现在parent已经是那个id=&quot;xxx&quot;的div了</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>所以你应该避免使用全局变量，使用局部变量</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><blockquote><p>JS里的var声明只有在函数内才有块级作用域</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function x()&#123;</span><br><span class="line">    var parent = document.getElementById(&apos;xxx&apos;);</span><br><span class="line">    console.log(parent) //这里的是 id=&quot;xxx&quot;的div</span><br><span class="line">&#125;</span><br><span class="line">x.call();</span><br><span class="line">console.log(parent) //这里的parent是window的属性</span><br></pre></td></tr></table></figure><h4 id="立即调用函数"><a href="#立即调用函数" class="headerlink" title="立即调用函数"></a>立即调用函数</h4><blockquote><p>如上节代码所示，立即调用函数就是声明一个函数然后立刻调用</p></blockquote><p>因为避免使用全局变量所以你不该声明这个「x」的函数，因为这样已经产生了一个全局变量「x」</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function()&#123;</span><br><span class="line">    var parent = document.getElementById(&apos;xxx&apos;);</span><br><span class="line">    console.log(parent) //这里的是 id=&quot;xxx&quot;的div</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><blockquote><p>但是这样会报错，原因是如果你直接声明一个「匿名函数 」并调用，浏览器里会直接报错说语法错误</p></blockquote><p>我们可以使用如下小技巧</p><ol><li><p>直接把匿名函数加调用的整体用 「括号」括起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">    function()&#123;</span><br><span class="line">        //相关处理</span><br><span class="line">    &#125;()</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>直接把匿名函数用「括号」括起来，然后再调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">        //相关处理    </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>加减号或者取反(「+」「-」「!」「~」)</p></li></ol><p>这些运算符是告诉浏览器我不是再声明一个函数而是在求值，但是这个值我不关心(爱是多少是多少)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+function()&#123;&#125;()</span><br><span class="line"></span><br><span class="line">-function()&#123;&#125;()</span><br><span class="line"></span><br><span class="line">!function()&#123;&#125;()</span><br><span class="line"></span><br><span class="line">~function()&#123;&#125;()</span><br></pre></td></tr></table></figure><ol start="4"><li>因为这个局部变量问题的使用太过麻烦,ES6终于狠心给JS升级了</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    let parent = document.getElementById(&apos;xxx&apos;);</span><br><span class="line">    let a = 1;</span><br><span class="line">&#125;</span><br><span class="line">console.log(parent) // 全局变量的window的parent属性</span><br><span class="line">console.log(a) //报错  因为 a是局部变量</span><br></pre></td></tr></table></figure><blockquote><p>{ } 左大括号右大括号之内的内容代表块级作用域，但是你不能用var</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    var parent = 1;</span><br><span class="line">&#125;</span><br><span class="line">console.log(parent)  // 1 又把window.parent给覆盖了</span><br></pre></td></tr></table></figure><blockquote><p>因为var会变量提升，所以实际的代码是这个效果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var parent; //变量提升</span><br><span class="line">&#123;</span><br><span class="line">    parent = 1;</span><br><span class="line">&#125;</span><br><span class="line">console.log(parent)</span><br></pre></td></tr></table></figure><blockquote><p>所以在ES6出来之前也就是2015年以前如果你想用局部变量就要这样</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~function()&#123;&#125;()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自己实现一个jQuery</title>
      <link href="/2017/11/29/N028_%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAjQuery/"/>
      <url>/2017/11/29/N028_%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAjQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="What-is-jQuery"><a href="#What-is-jQuery" class="headerlink" title="What is jQuery?"></a>What is jQuery?</h1><blockquote><p>核心就是一句话 The Write Less,Do More（写更少，做更多）  ， ok ， let’s go！</p></blockquote><ul><li>addClass( )功能  （最渣版）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li id=&quot;item1&quot;&gt;选项1&lt;/li&gt;</span><br><span class="line">    &lt;li id=&quot;item2&quot;&gt;选项2&lt;/li&gt;</span><br><span class="line">    &lt;li id=&quot;item3&quot;&gt;选项3&lt;/li&gt;</span><br><span class="line">    &lt;li id=&quot;item4&quot;&gt;选项4&lt;/li&gt;</span><br><span class="line">    &lt;li id=&quot;item5&quot;&gt;选项5&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如何给id=”item3” 添加样式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function addClass(node,classArr)&#123;</span><br><span class="line">    var len = classArr.length;</span><br><span class="line">    for(let i = 0 ;i &lt; len ; i++)&#123;</span><br><span class="line">        node.classList.add(classArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// item3 通过id名可以直接获取元素</span><br><span class="line">addClass(item3,[&apos;red&apos;]); </span><br><span class="line">// 你也可以这样</span><br><span class="line">addClass(document.getElementById(&apos;item4&apos;),[&apos;red&apos;])</span><br></pre></td></tr></table></figure><blockquote><p>注意：通过id获取元素不是100%没问题的，你要是非 id=”parent”  这样就不好使,你可以打印看看parent是啥</p></blockquote><hr><blockquote><p>这样只是初步封装了方法,但是方法是还在全局作用域,你叫addClass 到时候别人也叫addClass 你可能就被覆盖了  我们是有版权的   来来来 来个帅气签名！</p></blockquote><h3 id="addClass-签名版"><a href="#addClass-签名版" class="headerlink" title="addClass( ) (签名版)"></a>addClass( ) (签名版)</h3><blockquote><p>命名空间：给全局对象挂载一个对象 window.myDom = { }<br>然后在你挂载的myDom 对象上挂载你的属性 、方法</p></blockquote><blockquote><p>这比之前好在哪里？</p></blockquote><blockquote><p>好在有“从属”关系而不是“零散“的变量<br>（至少在阿里没落前）我是阿里的前端  相比 我是一个前端 那个更有份量呢？ </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.myDom = &#123;&#125;;</span><br><span class="line">myDom.addClass = function (node,classArr)&#123;</span><br><span class="line">    var len = classArr.length;</span><br><span class="line">    for(let i = 0 ;i &lt; len ; i++)&#123;</span><br><span class="line">        node.classList.add(classArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myDom.addClass(item3,[&apos;red&apos;]);</span><br></pre></td></tr></table></figure><ul><li>你肯定会不爽因为还不如之前用着爽了  每次还得加命名前缀<br>  myDom.fn(param)<br>  myDom.fn2(param)<br>  直接 item3.addClass([‘red’]) 才爽 有需求就会有改进</li></ul><h3 id="反正都是Node的api-我直接改原型不就好了-于是乎！你又挖了个坑"><a href="#反正都是Node的api-我直接改原型不就好了-于是乎！你又挖了个坑" class="headerlink" title="反正都是Node的api 我直接改原型不就好了 于是乎！你又挖了个坑"></a>反正都是Node的api 我直接改原型不就好了 于是乎！你又挖了个坑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Node.prototype.addClass =  function (node,classArr)&#123;</span><br><span class="line">    var len = classArr.length;</span><br><span class="line">    for(let i = 0 ;i &lt; len ; i++)&#123;</span><br><span class="line">        this.classList.add(classArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> item3.addClass([&apos;red&apos;]);  //你遂了心意了</span><br></pre></td></tr></table></figure><ul><li>这样的后果是别人也这样改原型，而且也添加个addClass<br>是不是心好累！  为啥？此乃优良传统<br>山寨一下 改改加点“我想出”的功能 我就敢说我的比你好！ （王者荣耀 与 dota ）<br>why?你用上了爱迪生的电灯泡 我就问你，你是自己发明一个还是在借鉴他？<br>看得远是因为我站在巨人的肩膀上！</li></ul><h3 id="我们是讲版权的我的就是我的"><a href="#我们是讲版权的我的就是我的" class="headerlink" title="我们是讲版权的我的就是我的"></a>我们是讲版权的我的就是我的</h3><h4 id="我自创一个Node2行不行-以后可能还有Node3"><a href="#我自创一个Node2行不行-以后可能还有Node3" class="headerlink" title="我自创一个Node2行不行 以后可能还有Node3"></a>我自创一个Node2行不行 以后可能还有Node3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">window.Node2 = function(node)&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                addClass:function(classArr)&#123;</span><br><span class="line">                    var len = classArr.length;</span><br><span class="line">                    for(let i = 0 ;i &lt; len ; i++)&#123;</span><br><span class="line">                        node.classList.add(classArr[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">var node2 = Node2(item4);</span><br><span class="line">node2.addClass([&apos;red&apos;]);  //完美</span><br><span class="line">// Node2(item5).addClass([&apos;red&apos;])   是不是有种似曾相识的感觉</span><br></pre></td></tr></table></figure><h3 id="说好的jQuery呢？-你把Node2替换成jQuery-在试试"><a href="#说好的jQuery呢？-你把Node2替换成jQuery-在试试" class="headerlink" title="说好的jQuery呢？ 你把Node2替换成jQuery  在试试"></a>说好的jQuery呢？ 你把Node2替换成jQuery  在试试</h3><blockquote><p>是不是有点感觉了   这是最简单版  以后会慢慢高大上的</p></blockquote><h3 id="jQuery最强大的莫过于选择器-Selector"><a href="#jQuery最强大的莫过于选择器-Selector" class="headerlink" title="jQuery最强大的莫过于选择器 Selector"></a>jQuery最强大的莫过于选择器 Selector</h3><blockquote><p>你肯定听说过一句话  “选择大于能力” (啊！没听过？  现在听过了！)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">window.jQyery = function(nodeOrSelector)&#123;</span><br><span class="line">            let node ; </span><br><span class="line">            if(typeof nodeOrSelector ===&apos;string&apos;)&#123;</span><br><span class="line">                node = document.querySelector(nodeOrSelector);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                node = nodeOrSelector;</span><br><span class="line">            &#125;</span><br><span class="line">            return &#123;</span><br><span class="line">                addClass:function(classArr)&#123;</span><br><span class="line">                    var len = classArr.length;</span><br><span class="line">                    for(let i = 0 ;i &lt; len ; i++)&#123;</span><br><span class="line">                        node.classList.add(classArr[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">var jqyery = jQyery(item4);</span><br><span class="line">jqyery.addClass([&apos;red&apos;]);</span><br></pre></td></tr></table></figure><h3 id="如果用过的人肯定知道jQuery选择器返回的是个伪数组才对"><a href="#如果用过的人肯定知道jQuery选择器返回的是个伪数组才对" class="headerlink" title="如果用过的人肯定知道jQuery选择器返回的是个伪数组才对"></a>如果用过的人肯定知道jQuery选择器返回的是个伪数组才对</h3><blockquote><p>我们使用querySelectorAll()它返回的是一个节点数组（伪数组）</p></blockquote><blockquote><p>然后给我们内部声明的 nodes 复制获取的每个节点</p></blockquote><blockquote><p>如果是节点数组就挨个拷贝  如果是一个 我也把你搞成伪数组哪怕就一个甚至没有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">window.jQyery = function(nodeOrSelector)&#123;</span><br><span class="line">            let nodes = &#123;&#125;; </span><br><span class="line">            if(typeof nodeOrSelector ===&apos;string&apos;)&#123;</span><br><span class="line">                let temp = document.querySelectorAll(nodeOrSelector);</span><br><span class="line">                for(let i=0;i&lt;temp.length;i++)&#123;</span><br><span class="line">                    nodes[i] = temp[i];</span><br><span class="line">                &#125;   </span><br><span class="line">                nodes.length = temp.length;</span><br><span class="line">            &#125;else if(nodeOrSelector instanceof Node)&#123;</span><br><span class="line">                nodes = &#123;</span><br><span class="line">                    0:nodeOrSelector,</span><br><span class="line">                    length:1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nodes.addClass = function(classes)&#123;</span><br><span class="line">                for(let i=0;i&lt;classes.length;i++)&#123;</span><br><span class="line">                    for(let j=0;j&lt;nodes.length;j++)&#123;</span><br><span class="line">                        nodes[j].classList.add(classes[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return nodes;</span><br><span class="line">            &#125; </span><br><span class="line">            return nodes;</span><br><span class="line">        &#125;</span><br><span class="line">//这样我们就可以用$(选择器)调用了</span><br><span class="line">window.$ = jQyery;</span><br><span class="line">//$(item3).addClass([&apos;red&apos;]);</span><br><span class="line">$(&apos;ul li&apos;).addClass([&apos;red&apos;])</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="你肯定会疑惑-为啥每次都-return-nodes-gt-答案就是链式操作"><a href="#你肯定会疑惑-为啥每次都-return-nodes-gt-答案就是链式操作" class="headerlink" title="你肯定会疑惑 为啥每次都 return nodes ==&gt; 答案就是链式操作"></a>你肯定会疑惑 为啥每次都 return nodes ==&gt; 答案就是链式操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;ul li&apos;).addClass([&apos;red&apos;]).Text(&apos;hi&apos;); //Text 我们还没有实现  ok 马上开始</span><br></pre></td></tr></table></figure><blockquote><p>在内部继续挂载方法   Text( ) 你传递参数就代表设置text你不传递就代表get</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nodes.Text = function (text)&#123;</span><br><span class="line">    if(text === undefined)&#123;</span><br><span class="line">        var texts = [];</span><br><span class="line">        for(let i=0;i&lt;nodes.length;i++)&#123;</span><br><span class="line">            texts.push(nodes[i].textContent);</span><br><span class="line">        &#125;</span><br><span class="line">        return texts;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        for(let i=0;i&lt;nodes.length;i++)&#123;</span><br><span class="line">            nodes[i].textContent = text;</span><br><span class="line">        &#125;</span><br><span class="line">        return nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>欢迎批评指正！ </p></blockquote><h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DOM_API</title>
      <link href="/2017/11/27/N027_DOM_API/"/>
      <url>/2017/11/27/N027_DOM_API/</url>
      
        <content type="html"><![CDATA[<h3 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM_API"></a>DOM_API</h3><blockquote><p>我们写HTML时会先写一个文档头&lt;!Doctype html&gt; 然后html head body</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!Doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>head/body是可以省略的，这其实就是一棵树 </p></blockquote><p><img src="https://sltrust.github.io/note/img/note027_0.png" alt="1"></p><p>这是我们大脑中对html的理解，而不是内存中的理解 </p><p><img src="https://sltrust.github.io/note/img/note027_1.png" alt="2"></p><p>内存里是DOM（Document Object Model）文档对象模型</p><p><img src="https://sltrust.github.io/note/img/note027_2.png" alt="3"><br><img src="https://sltrust.github.io/note/img/note027_3.png" alt="4"></p><ul><li>页面上所有标签都有跟它对应的构造函数</li><li>浏览器只要看到一个标签就会给给它构造出来一个对应的内存中的对象</li><li>页面中的节点通过（构造函数）==&gt; 对象</li></ul><blockquote><p>这就是DOM api 如果你想操作一个节点就可以操作这个对象对应的api</p></blockquote><p>Node接口</p><p>1.属性</p><blockquote><p>childNodes,firstChild,innerText,lastChild,nextSibling,nodeName,nodeType,nodeValue,outerText,ownerDocument,parentElement,parentNode,previousSibling,textContent</p></blockquote><ul><li>document //  document</li><li>document.documentElement //html</li><li>document.body  // 代表body</li></ul><h4 id="childNodes-amp-amp-children"><a href="#childNodes-amp-amp-children" class="headerlink" title="childNodes &amp;&amp; children"></a>childNodes &amp;&amp; children</h4><blockquote><p>如果是节点是包含回车的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.body.childNodes //获取body下所有子节点 (注意子节点不是子元素,回车也是文本节点)</span><br><span class="line">document.body.children //获取body下所有子元素</span><br></pre></td></tr></table></figure><h4 id="firstChild-lastChild-amp-amp-firstElementChild-lastElementChild"><a href="#firstChild-lastChild-amp-amp-firstElementChild-lastElementChild" class="headerlink" title="firstChild/lastChild &amp;&amp; firstElementChild lastElementChild"></a>firstChild/lastChild &amp;&amp; firstElementChild lastElementChild</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.body.firstChild  //body的第一个子节点  注意是子节点  回车也是文本节点</span><br><span class="line">document.body.lastChild   //body的最后一个子节点  注意是子节点  回车也是文本节点</span><br><span class="line"></span><br><span class="line">document.body.firstElementChild  //body的第一个子节点  注意是子节点  回车也是文本节点</span><br><span class="line">document.body.lastElementChild   //body的最后一个子节点  注意是子节点  回车也是文本节点</span><br></pre></td></tr></table></figure><h4 id="previousSibling-nextSibling-amp-amp-previousElementSibling-nextElementSibling"><a href="#previousSibling-nextSibling-amp-amp-previousElementSibling-nextElementSibling" class="headerlink" title="previousSibling nextSibling &amp;&amp; previousElementSibling nextElementSibling"></a>previousSibling nextSibling &amp;&amp; previousElementSibling nextElementSibling</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//兄弟节点 与 兄弟元素</span><br><span class="line">document.head.previousSibling  //head前一个节点</span><br><span class="line">document.head.nextSibling      //head后一个节点</span><br><span class="line"></span><br><span class="line">document.head.previousElementSibling  //head前一个元素</span><br><span class="line">document.head.nextElementSibling      //head后一个元素</span><br></pre></td></tr></table></figure><h4 id="nodeName"><a href="#nodeName" class="headerlink" title="nodeName"></a>nodeName</h4><blockquote><p>只有svg元素 返回的是小写”svg” 其他标签返回的都是大写</p></blockquote><h4 id="nodeType"><a href="#nodeType" class="headerlink" title="nodeType"></a>nodeType</h4><ul><li>返回节点的节点类型 是数值（为啥是数值，因为以前的内存紧张 节省内存 8M是豪华配置 ）</li><li>1代表元素节点</li><li>3代表文本节点 </li><li>除了这个 1、3它还存了一个常量 用来表示节点类型 Node.ELEMENT_NODE &gt;</li></ul><blockquote><p>自行MDN</p></blockquote><ul><li>1 元素节点</li><li>3 文本节点</li><li>7</li><li>8 注释节点</li><li>9 Document节点</li><li>11 DocumentFragment 节点</li></ul><h4 id="innerText-amp-amp-textContent"><a href="#innerText-amp-amp-textContent" class="headerlink" title="innerText &amp;&amp; textContent"></a>innerText &amp;&amp; textContent</h4><blockquote><p>在IE发明innerText之前 前端想要获取htmk代码的文本需要这样写</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    1&lt;span&gt;2&lt;/span&gt;3&lt;span&gt;&lt;/span&gt;4</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var text =&apos;&apos;;</span><br><span class="line">for(var i=0;i&lt;div.childNodes.length;i++)&#123;</span><br><span class="line">    if(div.childNodes[i].nodeType === 3)&#123;</span><br><span class="line">        text += div.childNodes[i].nodeValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>于是IE发明了 innerText 你爱用不用我自己觉得很爽</p></blockquote><blockquote><p>FF说了 你IE又搞特殊 于是FF出了个 textContent</p></blockquote><p>innerText &amp;&amp; textContent区别</p><ul><li>textContent 会获取所有元素的内容，包括 script 和 style 元素，然而 innerText 不会。</li><li>innerText意识到样式，并且不会返回隐藏元素的文本，而textContent会。</li><li>由于 innerText 受 CSS 样式的影响，它会触发重排（reflow），但textContent 不会。</li><li>与 textContent 不同的是, 在 Internet Explorer (对于小于等于 IE11 的版本) 中对 innerText 进行修改， 不仅会移除当前元素的子节点，而且还会永久性地破坏所有后代文本节点（所以不可能再次将节点再次插入到任何其他元素或同一元素中）。</li></ul><h4 id="到底用谁"><a href="#到底用谁" class="headerlink" title="到底用谁"></a>到底用谁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;textContent&apos; in document.body ? document.body.textContent : document.body.innerText</span><br></pre></td></tr></table></figure><p>2.方法（如果一个属性是函数，那么这个属性就也叫做方法；换言之，方法是函数属性）</p><ul><li>createElement()  //创建节点</li><li>appendChild()  </li><li>cloneNode()   //复制一个节点   有一个参数[param] true/false 默认false true代表深拷贝</li><li>contains()    //Node.contains()返回的是一个布尔值，来表示传入的节点是否为该节点的后代节点。</li><li>hasChildNodes() //判断一个节点是否有后代节点</li><li>insertBefore() </li><li>isEqualNode()  //节点是否相等 div2 = div1.cloneNode(true);   div2.isEqualNode(div1) 返回true</li><li>isSameNode()   //判断是否相同(就是是不是同一个)  你与你自己肯定是同一个人  1===1</li><li>removeChild()  //移除一个节点，但是这个节点不是真的没了，还在内存里 只是从页面移除了</li><li>replaceChild() //替换一个节点，但是这个节点不是真的没了，还在内存里 只是从页面移除了</li><li>normalize() // 常规化 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var wrapper = document.createElement(&quot;div&quot;);</span><br><span class="line"></span><br><span class="line">wrapper.appendChild(document.createTextNode(&quot;Part 1 &quot;));</span><br><span class="line">wrapper.appendChild(document.createTextNode(&quot;Part 2 &quot;));</span><br><span class="line"></span><br><span class="line">// 这时(规范化之前),wrapper.childNodes.length === 2</span><br><span class="line">// wrapper.childNodes[0].textContent === &quot;Part 1 &quot;</span><br><span class="line">// wrapper.childNodes[1].textContent === &quot;Part 2 &quot;</span><br><span class="line"></span><br><span class="line">wrapper.normalize();</span><br><span class="line">// 现在(规范化之后), wrapper.childNodes.length === 1</span><br><span class="line">// wrapper.childNodes[0].textContent === &quot;Part 1 Part 2&quot;</span><br></pre></td></tr></table></figure><blockquote><p>搞清楚英文单词的意思就知道用法</p></blockquote><p>如果发现知道英文后依然不明白用法，看 MDN 的例子即可，如 normalize</p><blockquote><p>DOM APi 无外乎「增删改查」</p></blockquote><h3 id="Document-接口"><a href="#Document-接口" class="headerlink" title="Document 接口"></a>Document 接口</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>anchors  //废弃 详情mdn 返回a标签 集合</li><li>body </li><li>characterSet  //返回字符集</li><li>childElementCount  //返回元素个数</li><li>children //返回子元素 伪数组</li><li>doctype //返回文档头</li><li>documentElement //返回页面根元素 html</li><li>domain  //返回域名</li><li>fullscreen</li><li>head</li><li>hidden</li><li>images </li><li>links</li><li>location</li><li>onxxxxxxxxx  //监听事件</li><li>origin   </li><li>plugins //安装的插件 静态集合</li><li>readyState </li><li>referrer  //你访问一个网址  浏览器会问你的引荐者是谁  不然就会被拒之门外</li><li>scripts </li><li>scrollingElement</li><li>styleSheets</li><li>title</li><li>visibilityState</li></ul><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><ul><li>close()</li><li>createDocumentFragment()</li><li>createElement()</li><li>createTextNode()</li><li>execCommand()</li><li>exitFullscreen()</li><li>getElementById()</li><li>getElementsByClassName()</li><li>getElementsByName()</li><li>getElementsByTagName()</li><li>getSelection()</li><li>hasFocus()</li><li>open()</li><li>querySelector()</li><li>querySelectorAll()</li><li>registerElement()</li><li>write()</li><li>writeln()</li></ul><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><ol><li>previousSibling nextSibling </li><li>innerText 和 textContent 的区别</li><li>nodeType  1代表元素节点  3代表文本节点</li><li>cloneNode() 设置参数可以深拷贝</li><li>isEqualNode isSameNode 的区别  isEqualNode是两个节点是否一个样 isSameNode 是 是否是同一个  </li><li>normalize() 主要体现mdn的作用</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS里的Function</title>
      <link href="/2017/11/25/N026_JS%E9%87%8C%E7%9A%84Function/"/>
      <url>/2017/11/25/N026_JS%E9%87%8C%E7%9A%84Function/</url>
      
        <content type="html"><![CDATA[<h4 id="函数的基本结构"><a href="#函数的基本结构" class="headerlink" title="函数的基本结构"></a>函数的基本结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fn(参数1，参数2)&#123;</span><br><span class="line">  //不写return  它会自动返回 undefined  </span><br><span class="line">  return undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数的五种声明方式"><a href="#函数的五种声明方式" class="headerlink" title="函数的五种声明方式"></a>函数的五种声明方式</h4><p>1.第一种  具名函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function x(a,b)&#123;</span><br><span class="line">  return a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.第二种 声明一个匿名函数 但是不能单独使用，会报错<br>需要赋值给一个变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// function (a,b)&#123;return a+b&#125; 报错</span><br><span class="line">var fn = function(a,b)&#123;return a+b&#125;</span><br></pre></td></tr></table></figure></p><p>3.第三种 具名的函数赋值给一个变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x = function y(a,b)&#123;return a+b;&#125;</span><br><span class="line">//console.log(y) 报错 y没有定义</span><br><span class="line">//但是单独定义一个函数  function x()&#123;&#125;  </span><br><span class="line">//然后console.log(x) 不会报错</span><br><span class="line">//js又一垃圾之处  不一致性  语法没有错误   原因在于作用域 </span><br><span class="line">// function x()&#123;&#125; 全局作用域</span><br><span class="line">// var x = function y()&#123; //作用域在函数里面&#125;</span><br></pre></td></tr></table></figure></p><p>4.第四种 window.Function 全局对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var f = new Function(&apos;a&apos;,&apos;b&apos;,&apos;return a+b&apos;);</span><br><span class="line"></span><br><span class="line">//面试题  假定n=1</span><br><span class="line">var f = new Function(&apos;a&apos;,&apos;b&apos;,&apos;return a+&apos;+n+&apos;b&apos;)</span><br><span class="line">f(1,2)  //4</span><br></pre></td></tr></table></figure></p><p>5.第五种 箭头函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var f = (x,y)=&gt;&#123;return x+y&#125;</span><br><span class="line">var f2 = (x,y) =&gt;x+y;</span><br><span class="line">var f3 = x=&gt;x*2;</span><br><span class="line">var f4 = (x,y)=&gt;&#123;var a = 1; var b =2; return a+b+x+y;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="函数的name属性"><a href="#函数的name属性" class="headerlink" title="函数的name属性"></a>函数的name属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;&#125;</span><br><span class="line">f.name // &quot;f&quot;</span><br><span class="line">var f2 = function()&#123;&#125;</span><br><span class="line">f2.name // &quot;f2&quot;</span><br><span class="line">var f3 =function f4()&#123;&#125;</span><br><span class="line">f3.name // &quot;f4&quot;</span><br><span class="line">f5 = new Function(&apos;x&apos;,&apos;y&apos;,&apos;return x+y&apos;);</span><br><span class="line">f5.name //&quot;anonymous&quot;</span><br></pre></td></tr></table></figure><h4 id="函数的本质"><a href="#函数的本质" class="headerlink" title="函数的本质"></a>函数的本质</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sum(x,y)&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> sum(1,2)      &lt;==&gt;     sum.call(undefined,1,2)</p></blockquote><blockquote><p> 小白都这样用 sum(1,2)   sum(2,5)  这个是语法糖 但是对你深入没有任何帮助<br> 硬核玩家这样用  sum.call(undefined,1,2)  </p></blockquote><blockquote><h4 id="只有sum-call-调用的方式-你才能真正理解-this"><a href="#只有sum-call-调用的方式-你才能真正理解-this" class="headerlink" title="只有sum.call()调用的方式  你才能真正理解  this"></a>只有sum.call()调用的方式  你才能真正理解  this</h4></blockquote><h3 id="this-amp-amp-arguments"><a href="#this-amp-amp-arguments" class="headerlink" title="this &amp;&amp; arguments"></a>this &amp;&amp; arguments</h3><ul><li>f.call(undefined,1,2) 的第一个参数是 this</li><li>f.call(undefined,1,2) 第一个后面的参数是 arguments<blockquote><p><img src="https://sltrust.github.io/note/img/note026_1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var f = function()&#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">&#125;</span><br><span class="line">f.call(1)    //1</span><br><span class="line">f.call(&apos;sss&apos;) //&apos;sss&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 潜规则   普通模式下 如果this是undefined 浏览器会自动把this变成window</span><br><span class="line">f.call(undefined)   // window</span><br><span class="line"></span><br><span class="line">//如果是严格模式  this就是原本的值</span><br><span class="line">var f2 = function()&#123;</span><br><span class="line">    &apos;use strict&apos;</span><br><span class="line">    console.log(this)</span><br><span class="line">&#125;</span><br><span class="line">f2.call(undefined);  // undefined</span><br></pre></td></tr></table></figure></blockquote></li></ul><h6 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var f = function()&#123;</span><br><span class="line">    console.log(arguments);</span><br><span class="line">&#125;</span><br><span class="line">f.call(undefined,1,2,3)    </span><br><span class="line">/*</span><br><span class="line">&#123;</span><br><span class="line">0:1,</span><br><span class="line">1:2,</span><br><span class="line">2:3,</span><br><span class="line">length:3</span><br><span class="line">callee:f()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><blockquote><p>arguments 不是数组 它的原型链中没有Array.prototype</p></blockquote><h4 id="call-stack-调用栈"><a href="#call-stack-调用栈" class="headerlink" title="call stack 调用栈"></a>call stack 调用栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="作用域面试题"><a href="#作用域面试题" class="headerlink" title="作用域面试题"></a>作用域面试题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function f1()&#123;</span><br><span class="line">    var a  = 2;</span><br><span class="line">    f2.call();</span><br><span class="line">    console.log(a);</span><br><span class="line">    </span><br><span class="line">    function f2()&#123;</span><br><span class="line">        var a =3;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">f1.call();</span><br><span class="line">console.log(a);</span><br><span class="line">// 3</span><br><span class="line">// 2</span><br><span class="line">// 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function f1()&#123;</span><br><span class="line">    f2.call();</span><br><span class="line">    console.log(a);</span><br><span class="line">    var a= 2 ; //变量提升</span><br><span class="line">    </span><br><span class="line">    function f2()&#123;</span><br><span class="line">        var a =3;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">f1.call();</span><br><span class="line">console.log(a);</span><br><span class="line">// 3</span><br><span class="line">// undefined</span><br><span class="line">// 1</span><br></pre></td></tr></table></figure><blockquote><p>注意分析时要把所有变量提升</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">function f1()&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">    var a= 2 ; //变量提升</span><br><span class="line">    f4.call();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function f4()&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">&#125;</span><br><span class="line">f1.call();</span><br><span class="line">console.log(a);</span><br><span class="line">//   undefined</span><br><span class="line">//   1</span><br><span class="line">//   1</span><br></pre></td></tr></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a  = 1;</span><br><span class="line">function f4()&#123;</span><br><span class="line">  console.log(a);</span><br><span class="line">&#125;</span><br><span class="line">//如果一个函数，使用了它范围外的变量，那么这个就叫闭包</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS里的Array</title>
      <link href="/2017/11/23/N025_JS%E9%87%8C%E7%9A%84Array/"/>
      <url>/2017/11/23/N025_JS%E9%87%8C%E7%9A%84Array/</url>
      
        <content type="html"><![CDATA[<h3 id="基本类型-amp-amp-复杂类型"><a href="#基本类型-amp-amp-复杂类型" class="headerlink" title="基本类型 &amp;&amp; 复杂类型"></a>基本类型 &amp;&amp; 复杂类型</h3><blockquote><p>复杂类型的对象使用不使用new都会返回对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Objcet(1)  // 返回一个Number对象</span><br><span class="line">Object(&apos;sss&apos;) //返回一个String对象</span><br><span class="line">Object(true)  //返回一个 Boolean对象</span><br><span class="line">Object() // 返回一个对象 &#123;&#125;</span><br><span class="line">new Object() //返回一个对象&#123;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String(1) //  &apos;1&apos;</span><br><span class="line">String(true)  // &apos;true&apos;</span><br><span class="line">String(null)  //  &apos;null&apos;</span><br><span class="line"></span><br><span class="line">new String(1)  // String对象</span><br><span class="line">new String(&apos;sss&apos;)  //String对象</span><br><span class="line"></span><br><span class="line">Number(1)  //  数值类型  1</span><br><span class="line">Number(&apos;sss&apos;)  // 数值类型  NaN</span><br><span class="line"></span><br><span class="line">new Number(1)  // Number对象</span><br><span class="line"></span><br><span class="line">Boolean(1)  // true</span><br><span class="line">new Boolean(1)  //Boolean对象</span><br><span class="line">new Boolean(&apos;   &apos;) //Boolean对象</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://sltrust.github.io/note/img/note025_2.png" alt=""></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//不一致性的一个恶心的问题</span><br><span class="line">var arr = new Array(3); //这个数组的length为3</span><br><span class="line">//arr[0]未指定 arr[1]未指定 arr[2] 未指定</span><br><span class="line">console.log(0 in arr) //false</span><br><span class="line">console.log(1 in arr) //false</span><br><span class="line">console.log(2 in arr) //false</span><br></pre></td></tr></table></figure><blockquote></blockquote><h4 id="JS七种数据类型"><a href="#JS七种数据类型" class="headerlink" title="JS七种数据类型"></a>JS七种数据类型</h4><blockquote><p>number   string   boolean   symbol   null   undefined   object</p></blockquote><h4 id="五个falsy值"><a href="#五个falsy值" class="headerlink" title="五个falsy值"></a>五个falsy值</h4><blockquote><p>0 NaN 空字符 null undefined</p></blockquote><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><blockquote><p>用法</p></blockquote><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a1 = [&apos;a&apos;,&apos;b&apos;];   //推荐使用</span><br><span class="line">var a2 = new Array(&apos;a&apos;,&apos;b&apos;)</span><br><span class="line">// 两种方式没区别</span><br></pre></td></tr></table></figure><h4 id="不一致性-Array-3-和-Array-3-3-坑爹之处"><a href="#不一致性-Array-3-和-Array-3-3-坑爹之处" class="headerlink" title="不一致性 Array(3) 和 Array(3,3) (坑爹之处)"></a>不一致性 Array(3) 和 Array(3,3) (坑爹之处)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a1 = Array(3) //单个参数  声明了length = 3 的数组 每个值是undefined</span><br><span class="line">var a2 = Array(2,3) // 声明了 length = 2 的数组  [2,3]</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://sltrust.github.io/note/img/note025_01.png" alt=""></p></blockquote><h4 id="function-amp-amp-Function"><a href="#function-amp-amp-Function" class="headerlink" title="function &amp;&amp; Function"></a>function &amp;&amp; Function</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//function 是关键字  </span><br><span class="line">//Function是全局对象</span><br><span class="line"></span><br><span class="line">//声明方式  </span><br><span class="line">//具名函数</span><br><span class="line">function fn ()&#123; &#125;</span><br><span class="line"></span><br><span class="line">// 匿名函数</span><br><span class="line">function()&#123; &#125;   </span><br><span class="line"></span><br><span class="line">var f2 = new Function(&apos;a&apos;,&apos;b&apos;,&apos;return a+b&apos;);   //闲的蛋疼才用   很极限的情况下才会应用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var f = function ()&#123;return &apos;a&apos;;&#125;</span><br><span class="line">// var a = 1的变体  只不过  function存在堆里 f 存的是引用</span><br></pre></td></tr></table></figure><h4 id="继续研究数组"><a href="#继续研究数组" class="headerlink" title="继续研究数组"></a>继续研究数组</h4><blockquote><p><img src="https://sltrust.github.io/note/img/note025_03.png" alt=""></p></blockquote><h4 id="Array-amp-amp-伪数组"><a href="#Array-amp-amp-伪数组" class="headerlink" title="Array &amp;&amp; 伪数组"></a>Array &amp;&amp; 伪数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">  console.log(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//伪数组</span><br><span class="line">var obj = &#123;0:1,1:2,2:3,length:3&#125;</span><br><span class="line">for(var i=0;i&lt;obj.length;i++)&#123;</span><br><span class="line">  console.log(obj[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组与伪数组的区别就是  伪数组的原型链里没有Array.prototype这一层<br><img src="https://sltrust.github.io/note/img/note025_04.png" alt=""></p></blockquote><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a =[1,2,3]</span><br><span class="line">a.forEach(function(val,idx,arr)&#123; </span><br><span class="line">  //遍历方法要接受一个函数</span><br><span class="line">  //函数有三个参数  val是值 idx是索引  arr就是这个数组对象</span><br><span class="line">  console.log(val,idx,arr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//接受一个函数并执行</span><br><span class="line">function myExe( fn)&#123;</span><br><span class="line">  fn(666);</span><br><span class="line">&#125;</span><br><span class="line">myExe(function(xxx)&#123;</span><br><span class="line">                console.log(xxx)</span><br><span class="line">            &#125;)</span><br><span class="line">// 666</span><br></pre></td></tr></table></figure><blockquote><p>简化版forEach<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function forEach(arr,fn)&#123;</span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        fn(arr[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</span><br><span class="line">forEach(arr,function(v,i)&#123;console.log(v,i)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//数组的forEach</span><br><span class="line">arr.forEach(function(v,i)&#123;</span><br><span class="line">                     console.log(v,i)</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>疑惑 为什么a.forEach() 没有像我们的forEach一样传递 arr呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(function()&#123;&#125;) </span><br><span class="line">//等价于下面的形式</span><br><span class="line">arr.forEach.call(arr,function()&#123;&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>再看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;0:&apos;a&apos;,1:&apos;b&apos;,2:&apos;c&apos;,length:2&#125;;</span><br><span class="line">obj.forEach = function(fn)&#123;</span><br><span class="line">    for(var i=0;i&lt;this.length;i++)&#123;</span><br><span class="line">        fn(this[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//forEach实际上接收了 obj 就是用this来接收</span><br><span class="line">// js蛋疼之处</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h5><p>它内置的排序一般是快排<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = [5,3,2,1,4];</span><br><span class="line">a.sort(); // 1,2,3,4,5 默认升序</span><br><span class="line">//你也可以传递一个函数 函数的返回值为正数、0或负数</span><br><span class="line">a.sort(function(x,y)&#123;return x-y;&#125;)  //1,2,3,4,5</span><br><span class="line">a.sort(function(x,y)&#123;function y-x&#125;;) //5,4,3,2,1</span><br></pre></td></tr></table></figure></p><h3 id="复杂的排序"><a href="#复杂的排序" class="headerlink" title="复杂的排序"></a>复杂的排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;</span><br><span class="line">    &apos;马云&apos;:167.22,</span><br><span class="line">    &apos;马化腾&apos;:379,</span><br><span class="line">    &apos;李彦宏&apos;:229.11</span><br><span class="line">&#125;;</span><br><span class="line">//按资产排序 倒序</span><br><span class="line">var a = [&apos;马云&apos;,&apos;马化腾&apos;,&apos;李彦宏&apos;]</span><br><span class="line">a.sort(function(x,y)&#123;</span><br><span class="line">    return hash[y] - hash[x]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="join"><a href="#join" class="headerlink" title="join"></a>join</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3];</span><br><span class="line">a.join() ; //1,2,3</span><br><span class="line">a.join(&apos;--&apos;) //1--2--3</span><br></pre></td></tr></table></figure><h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><blockquote><p>concat会返回一个新的数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3]</span><br><span class="line">var b = [4,5,6]</span><br><span class="line">var c = a.concat(b);</span><br><span class="line">// 返回一个新的数组  [1,2,3,4,5,6]  </span><br><span class="line"></span><br><span class="line">// 非常厉害的用法快速复制一个数组</span><br><span class="line">var d =a.concat([]) // 新数组 [1,2,3]</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><blockquote><p>跟forEach的区别</p><ul><li>forEach没有返回值</li><li>map有返回值<br>map的含义 是映射<br><img src="https://sltrust.github.io/note/img/note025_5.png" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3]</span><br><span class="line">a.map(function()&#123;return value*2&#125;) // [2,3,6]</span><br><span class="line">//箭头函数的写法</span><br><span class="line">a.map(value=&gt;value*2)</span><br></pre></td></tr></table></figure></li></ul></blockquote><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><blockquote><p>过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">a.filter(function(value)&#123;</span><br><span class="line">    return value%2===0;</span><br><span class="line">&#125;)</span><br><span class="line">// [2,4,6,8,10]</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><blockquote><p>减少 降<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">//第一个参数是一个函数 函数有两个参数 第一个参数 之前的结果 当前的值</span><br><span class="line">//第二个参数代表初始值</span><br><span class="line">a.reduce(function(sum,n)&#123;</span><br><span class="line">  return sum+n</span><br><span class="line">&#125;,0) </span><br><span class="line">// 55</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">a.reduce((sum,n)=&gt;sum+n,0);</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="map用reduce代替"><a href="#map用reduce代替" class="headerlink" title="map用reduce代替"></a>map用reduce代替</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a  = [1,2,3];</span><br><span class="line">a.reduce(function(arr,n)&#123;</span><br><span class="line">  arr.push(n*2);</span><br><span class="line">  return arr</span><br><span class="line">&#125;,[])  //[2,4,6]</span><br></pre></td></tr></table></figure><h5 id="filter用reduce代替"><a href="#filter用reduce代替" class="headerlink" title="filter用reduce代替"></a>filter用reduce代替</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a  = [1,2,3,4,5,6,7,8,9,10];</span><br><span class="line">a.reduce(function(arr,n)&#123;</span><br><span class="line">  if(n%2===0)&#123;</span><br><span class="line">    arr.push(n)</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;,[])  //[2,4,6,8,10]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS里的对象</title>
      <link href="/2017/11/21/N022_JS%E9%87%8C%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/11/21/N022_JS%E9%87%8C%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="全局对象global-浏览器上叫window"><a href="#全局对象global-浏览器上叫window" class="headerlink" title="全局对象global (浏览器上叫window)"></a>全局对象global (浏览器上叫window)</h3><blockquote><p>不管你在哪个网页都可以访问到这个对象—window<br>它有很多属性<br>global.parseInt()<br>golbal.parseFloat()<br>…</p></blockquote><p>假设浏览器分给js一部分内存   如果内存里空空如也我们就什么也调用不了</p><blockquote><p>每次浏览器生成的时候就生成一个global<br><img src="https://sltrust.github.io/note/img/note022_1.png" alt=""><br><img src="https://sltrust.github.io/note/img/note022_2.png" alt=""></p></blockquote><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var n = 1;</span><br><span class="line">var n2 = new Number(1);</span><br><span class="line">// n2是  Number对象  提供很多方法  可以 n2.toString() n2.toFixed(2)</span><br><span class="line">//但是  n 也可以  n.toString()   n.toFixed(2) 但是 n是一个基本类型 没有方法</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://sltrust.github.io/note/img/note022_3.png" alt=""><br>JS设计之初因为BOSS要求JS要像JAVA 作者为了满足老板的需求“长得像JAVA”<br>所以出现了 var n2 = new Number() 但实际上没有人用<br>JS实际用法 是 var  n  = 1;</p></blockquote><h5 id="但是它是怎么解决基本类型-调用方法的呢？"><a href="#但是它是怎么解决基本类型-调用方法的呢？" class="headerlink" title="但是它是怎么解决基本类型 调用方法的呢？"></a>但是它是怎么解决基本类型 调用方法的呢？</h5><p> 妙计：临时转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var n  = 1;</span><br><span class="line"> n.toString() </span><br><span class="line">// 调用toString()的时候 产生一个临时的对象  temp</span><br></pre></td></tr></table></figure></p><ul><li>step1  temp  = new Number(n);</li><li>step2  temp.toSrring();</li><li>step3  方法调用结束后销毁 temp对象</li></ul><p>这样我就永远不用使用new Number()去创建一个number对象 并调用其相关方法</p><blockquote><p>调用过程<br><img src="https://sltrust.github.io/note/img/note022_4.png" alt=""><br>基本类型的xxx是多少<br><img src="https://sltrust.github.io/note/img/note022_5.png" alt=""></p></blockquote><h5 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slice() // 切片方法  &apos;hello&apos;.slice(1,3)  输出  el   口诀包头不包尾</span><br><span class="line">concat() //字符串拼接  </span><br><span class="line">trim() //去除首尾空格</span><br></pre></td></tr></table></figure><h5 id="Boolean对象"><a href="#Boolean对象" class="headerlink" title="Boolean对象"></a>Boolean对象</h5><blockquote><p>一个“坑”点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var b1 = false;</span><br><span class="line">var b2 = new Boolean(false);</span><br><span class="line">if(b1)&#123;console.log(1)&#125;  //不会打印1</span><br><span class="line">if(b2)&#123;console.log(2)&#125;  //打印2  因为所有对象转换为boolean值都是true</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var o1  = &#123; &#125;;</span><br><span class="line">var o2 = new Object();</span><br><span class="line">// o1和o2没区别  都是对象</span><br><span class="line">//注意一点 凡是新声明的对象  都是不相等的  o1 !== o2</span><br></pre></td></tr></table></figure><h4 id="共有属性-prototype"><a href="#共有属性-prototype" class="headerlink" title="共有属性 prototype"></a>共有属性 prototype</h4><blockquote><p>不同类型对象都有一个toString() 和valueOf()<br><img src="https://sltrust.github.io/note/img/note022_6.png" alt=""></p></blockquote><blockquote><p>如果方法挂载到 对象上就会要出现很多的key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__proto__ //隐藏在对象里 特定的指向 该类型的共有属性</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://sltrust.github.io/note/img/note022_7.png" alt=""><br><img src="https://sltrust.github.io/note/img/note022_8.png" alt=""><br>原型链 ==&gt; 这样一层一层向上指的过程 形成了一个链条<br><img src="https://sltrust.github.io/note/img/note022_9.png" alt=""></p></blockquote><h3 id="prototype-就是共有属性"><a href="#prototype-就是共有属性" class="headerlink" title="prototype 就是共有属性"></a>prototype 就是共有属性</h3><blockquote><p><img src="https://sltrust.github.io/note/img/note022_10.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String.prototype是 String的共有属性 （这里是防止它没有，系统生成的）</span><br><span class="line">s.__proto__ 是String共有属性的引用 (这个是实际使用的)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="烧脑部分"><a href="#烧脑部分" class="headerlink" title="烧脑部分"></a>烧脑部分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__proto__与 prototype</span><br><span class="line">// var n = new Number()</span><br><span class="line">// var b = new Boolean()</span><br><span class="line">// var s = new String()</span><br><span class="line">// var o = new Object()</span><br></pre></td></tr></table></figure><p><img src="https://sltrust.github.io/note/img/note022_11.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var 对象 = new 函数()</span><br><span class="line">对象.__proto__  === 函数.prototype</span><br><span class="line">//烧脑的来了</span><br><span class="line">// 函数.prototype也是一个对象</span><br><span class="line">函数.prototype.__proto__ === Object.prototype</span><br><span class="line"></span><br><span class="line">//再次烧脑 函数是不是一个对象  ==》是</span><br><span class="line">//  var obj2 = 函数</span><br><span class="line">//  obj2.__proto__ === Function.prototype</span><br><span class="line">函数.__proto__ === Function.prototype</span><br><span class="line">Function.__proto__ === Function.prototype</span><br><span class="line">// Function.prototype也是一个对象</span><br><span class="line"> Function.prototype.__proto__ === Object.prototype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function.__proto__ =-= Function.prototype //true</span><br></pre></td></tr></table></figure></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.__proto__  === 函数.prototype</span><br></pre></td></tr></table></figure><p><img src="https://sltrust.github.io/note/img/note022_12.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS里的类型</title>
      <link href="/2017/11/19/N021_JS%E9%87%8C%E7%9A%84%E7%B1%BB%E5%9E%8B/"/>
      <url>/2017/11/19/N021_JS%E9%87%8C%E7%9A%84%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">var b = true;</span><br><span class="line">var c = &#123;&#125;;</span><br><span class="line">var d = null;</span><br><span class="line">var e = undefined;</span><br><span class="line">a.toString() // &quot;1&quot;</span><br><span class="line">b.toString() // &quot;true&quot;</span><br><span class="line">c.toString() // &quot;[object Object]&quot;</span><br><span class="line">d.toString() // 报错</span><br><span class="line">e.toString() // 报错</span><br><span class="line">//老司机怎么把不同类型变成字符串的</span><br><span class="line">a + &apos;&apos;   //  &quot;1&quot;</span><br><span class="line">b + &apos;&apos;  //  &quot;true&quot;</span><br><span class="line">c + &apos;&apos;  //  &quot;[object Object]&quot;</span><br><span class="line">d + &apos;&apos;  //  &quot;null&quot; </span><br><span class="line">e + &apos;&apos;  //  &quot;undefined&quot;</span><br><span class="line"></span><br><span class="line">//智障写法  不同类型是不能 + 的  </span><br><span class="line">// + 如果发现左右任意一边有字符串  就会把另一边转为字符串</span><br><span class="line">1 + &apos;1&apos;    //  字符 &quot;11&quot;    相当于  (1).toString() + &apos;1&apos;</span><br><span class="line">1 + 1  // 数字 2</span><br><span class="line"></span><br><span class="line">//变成字符串常用的方法是 与空字符串相加  ‘’+</span><br><span class="line">//除此之外 你可以 window.String(一个变量)   与  ‘’+ 一样</span><br></pre></td></tr></table></figure><h4 id="Boolean-方法"><a href="#Boolean-方法" class="headerlink" title="Boolean()方法"></a>Boolean()方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Boolean(1) // true</span><br><span class="line">Boolean(2) // true</span><br><span class="line">Boolean(0) // false</span><br><span class="line">Boolean(&apos;&apos;) //  false</span><br><span class="line">Boolean(&apos;  &apos;) // true</span><br><span class="line">Boolean(&apos;21321&apos;) // true</span><br><span class="line">Boolean(&#123;a:11,b:22&#125;)  // true</span><br><span class="line">Boolean(&#123;&#125;) // true</span><br><span class="line">//老司机</span><br><span class="line">!! true   //true</span><br><span class="line">!! 1  // true</span><br><span class="line">!! 0  // false</span><br><span class="line">!! &apos;&apos; // false</span><br><span class="line">!! &apos; &apos; //true</span><br><span class="line">!! &#123;&#125; //true</span><br><span class="line">!! null // false</span><br><span class="line">!! undefined //false</span><br></pre></td></tr></table></figure><p><img src="https://github.com/slTrust/note/raw/master/img/note021_0.png" alt="类型转换"></p><h4 id="5个特殊值-Falsy"><a href="#5个特殊值-Falsy" class="headerlink" title="5个特殊值 Falsy"></a>5个特殊值 Falsy</h4><table><thead><tr><th>number</th><th>string</th><th>boolean</th><th>symbol</th><th>null</th><th>undefined</th><th>object</th></tr></thead><tbody><tr><td>0   NaN</td><td>‘’</td><td></td><td></td><td>null</td><td>undefined</td></tr></tbody></table><h4 id="转为number类型"><a href="#转为number类型" class="headerlink" title="转为number类型"></a>转为number类型</h4><blockquote><p>5种方式如图<br><img src="https://github.com/slTrust/note/raw/master/img/note021_1.png" alt="类型转换"></p></blockquote><h4 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h4><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;011&apos;)  // 11</span><br><span class="line">parseInt(&apos;011&apos;,8)  // 9</span><br><span class="line">parseInt(&apos;011&apos;,10)  // 11</span><br><span class="line">parseInt(&apos;s&apos;)  // NaN</span><br><span class="line">parseInt(&apos;1s&apos;)  // 1</span><br></pre></td></tr></table></figure><h3 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h3><blockquote><p>内存分为代码区和数据区<br><img src="https://github.com/slTrust/note/raw/master/img/note021_2.png" alt="chrome为程序划分100M内存"></p></blockquote><blockquote><p>数据区</p><h3 id="栈-amp-amp-堆"><a href="#栈-amp-amp-堆" class="headerlink" title="栈 &amp;&amp; 堆"></a>栈 &amp;&amp; 堆</h3><p><img src="https://github.com/slTrust/note/raw/master/img/note021_3.png" alt="数据区"></p></blockquote><blockquote><p>简单示例<br><img src="https://github.com/slTrust/note/raw/master/img/note021_5.png" alt="内存分配过程"></p></blockquote><blockquote><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><img src="https://github.com/slTrust/note/raw/master/img/note021_6.png" alt="复杂类型存的是引用"></p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p><img src="https://github.com/slTrust/note/raw/master/img/note021_7.png" alt="测试1"></p></blockquote><blockquote><p><img src="https://github.com/slTrust/note/raw/master/img/note021_8.png" alt="测试2"><br><img src="https://github.com/slTrust/note/raw/master/img/note021_9.png" alt="测试3"></p></blockquote><blockquote><p>self 指向自己<br><img src="https://github.com/slTrust/note/raw/master/img/note021_10.png" alt="测试4"></p></blockquote><h4 id="很贱很贱的面试题"><a href="#很贱很贱的面试题" class="headerlink" title="很贱很贱的面试题"></a>很贱很贱的面试题</h4><blockquote><p><img src="https://github.com/slTrust/note/raw/master/img/note021_11.png" alt="面试题"></p></blockquote><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><blockquote><p>GC 如果一个变量没有被引用==&gt;它就是垃圾 ==&gt; 将被回收<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;name : &apos;a&apos;&#125;   // 分配内存地址 33</span><br><span class="line">var b = &#123;name : &apos;b&apos;&#125;   // 分配内存地址 60</span><br><span class="line">a = b  // a 的内存地址  = b 的内存地址 ==&gt; 60</span><br><span class="line">// a原来的地址 33所占用的内存空间  就是  垃圾</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="深拷贝-amp-amp-浅拷贝"><a href="#深拷贝-amp-amp-浅拷贝" class="headerlink" title="深拷贝 &amp;&amp; 浅拷贝"></a>深拷贝 &amp;&amp; 浅拷贝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">var b = a;</span><br><span class="line"> b = 2 ;//  b变 a 不变  就是深拷贝（基本类型的赋值都是深拷贝）</span><br></pre></td></tr></table></figure><h4 id="要考虑的是-复杂类型-的深拷贝"><a href="#要考虑的是-复杂类型-的深拷贝" class="headerlink" title="要考虑的是 复杂类型 的深拷贝"></a>要考虑的是 复杂类型 的深拷贝</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a =&#123; name :&apos;a&apos;&#125;</span><br><span class="line">var b = a ;</span><br><span class="line">b.name = &apos;b&apos;;   //这导致   a.name也变了  （浅拷贝）</span><br></pre></td></tr></table></figure><blockquote><p>复杂类型深拷贝的概念（这里没有实现）<br> <img src="https://github.com/slTrust/note/raw/master/img/note021_12.png" alt="面试题"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS里的数据</title>
      <link href="/2017/11/17/N020_JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
      <url>/2017/11/17/N020_JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="JS如何学习"><a href="#JS如何学习" class="headerlink" title="JS如何学习"></a>JS如何学习</h3><h4 id="JS作者的评价"><a href="#JS作者的评价" class="headerlink" title="JS作者的评价"></a>JS作者的评价</h4><ul><li>原创之处并不优秀</li><li>优秀之处并非原创</li></ul><blockquote><p>从简单到复杂<br><img src="https://sltrust.github.io/note/img/note020_1.png" alt="示意图"><br><img src="https://sltrust.github.io/note/img/note020_2.png" alt="示意图"></p></blockquote><h3 id="ES6一图概括（90-）"><a href="#ES6一图概括（90-）" class="headerlink" title="ES6一图概括（90%）"></a>ES6一图概括（90%）</h3><p><img src="https://github.com/slTrust/note/raw/master/img/note020_3.png" alt="示意图"></p><h3 id="期待纳入规范的方法"><a href="#期待纳入规范的方法" class="headerlink" title="期待纳入规范的方法"></a>期待纳入规范的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">obj.a.b.c.name</span><br><span class="line">//如果 obj.a 是 undefined</span><br><span class="line">// obj.a.b  &lt;==&gt; undefined.b ==&gt;报错</span><br><span class="line">//更何况 obj.a.b.c呢？</span><br><span class="line">//现在的js是怎样写的</span><br><span class="line">if(obj.a!==undefined&amp;&amp;obj.a.b!==undefined&amp;&amp;obj.a.b.c!==undefined&amp;&amp;obj.a.b.c.name!==undefined)&#123;</span><br><span class="line">  //终于无错的打印了变量</span><br><span class="line"> console.log(obj.a.b.c.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//optional chain语法</span><br><span class="line">obj?.a?.b?.c?.name </span><br><span class="line">//如果 obj.a是undefined就不往下走了 之间返回 undefined 写法也简洁很多</span><br></pre></td></tr></table></figure><h3 id="7种数据类型"><a href="#7种数据类型" class="headerlink" title="7种数据类型"></a>7种数据类型</h3><table><thead><tr><th>Number</th><th>boolean</th><th>string</th><th>symbol</th><th>undefined</th><th>null</th><th>object</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p><img src="https://github.com/slTrust/note/raw/master/img/note020_4.png" alt="示意图"></p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p><img src="https://github.com/slTrust/note/raw/master/img/note020_5.png" alt="示意图"></p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><img src="https://github.com/slTrust/note/raw/master/img/note020_6.png" alt="示意图"></p><blockquote><p>处理字符串折行问题</p><ol><li>“\”转义 但是后面必须是”回车” 但是如果是 空格  你也看不出来 容易出错</li><li>‘1233’ +<br>‘456’</li><li>ES6 反引号” ` “ 换行要顶头写<br><img src="https://github.com/slTrust/note/raw/master/img/note020_7.png" alt="示意图"></li></ol></blockquote><h3 id="boolean-两个值-true-false"><a href="#boolean-两个值-true-false" class="headerlink" title="boolean 两个值 true | false"></a>boolean 两个值 true | false</h3><table><thead><tr><th>布尔</th><th>true</th><th>false</th></tr></thead><tbody><tr><td></td><td>真</td><td>假</td></tr></tbody></table><h4 id="amp-amp-与-或-运算"><a href="#amp-amp-与-或-运算" class="headerlink" title="&amp;&amp; 与  || 或 运算"></a>&amp;&amp; 与  || 或 运算</h4><blockquote><p>a&amp;&amp;b</p></blockquote><table><thead><tr><th>a\b</th><th>真</th><th>假</th></tr></thead><tbody><tr><td>真</td><td>√</td><td>×</td></tr><tr><td>假</td><td>×</td><td>×</td></tr></tbody></table><blockquote><p>a||b</p></blockquote><table><thead><tr><th>a\b</th><th>真</th><th>假</th></tr></thead><tbody><tr><td>真</td><td>√</td><td>√</td></tr><tr><td>假</td><td>√</td><td>×</td></tr></tbody></table><h4 id="symbol-略过-…"><a href="#symbol-略过-…" class="headerlink" title="symbol 略过 …"></a>symbol 略过 …</h4><blockquote><p>null  （只有一个值 null）</p></blockquote><blockquote><p>undefined (只有一个值 undefined )</p></blockquote><p>都表示什么也没有 （JS之父的bug）</p><h4 id="null和-undefined的区别"><a href="#null和-undefined的区别" class="headerlink" title="null和 undefined的区别"></a>null和 undefined的区别</h4><blockquote><p>1.一个变量没有赋值 ==&gt; undefined<br>2.我想有一个对象 obj 但是现在还不想给值 所以推荐给他一个 null值 &lt;==&gt;空对象<br>有一个非对象 不想给值  undefined &lt;==&gt; 空非对象<img src="https://github.com/slTrust/note/raw/master/img/note020_8.png" alt="示意图"></p></blockquote><h4 id="什么是object"><a href="#什么是object" class="headerlink" title="什么是object"></a>什么是object</h4><blockquote><p>就是由基本类型组成的复杂类型<br><img src="https://github.com/slTrust/note/raw/master/img/note020_9.png" alt="示意图"></p></blockquote><h4 id="person-name-’hjx’-age-18-self-person-可以吗？"><a href="#person-name-’hjx’-age-18-self-person-可以吗？" class="headerlink" title="person = {name:’hjx’,age:18,self:person}可以吗？"></a>person = {name:’hjx’,age:18,self:person}可以吗？</h4><blockquote><p>对象还没有初始化完成就自己指向自己<br>这样是对的  但是 person.self = undefined<br><img src="https://github.com/slTrust/note/raw/master/img/note020_10.png" alt="示意图"></p></blockquote><h4 id="key的值可以是-‘’空字符吗？"><a href="#key的值可以是-‘’空字符吗？" class="headerlink" title="key的值可以是 ‘’空字符吗？"></a>key的值可以是 ‘’空字符吗？</h4><p><img src="https://github.com/slTrust/note/raw/master/img/note020_11.png" alt="示意图"></p><h4 id="delete-amp-amp-for-in"><a href="#delete-amp-amp-for-in" class="headerlink" title="delete &amp;&amp; for in"></a>delete &amp;&amp; for in</h4><p><img src="https://github.com/slTrust/note/raw/master/img/note020_12.png" alt="示意图"></p><h4 id="typeof-amp-amp-BUG"><a href="#typeof-amp-amp-BUG" class="headerlink" title="typeof &amp;&amp; BUG"></a>typeof &amp;&amp; BUG</h4><p><img src="https://github.com/slTrust/note/raw/master/img/note020_13.png" alt="示意图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代码封装的技巧</title>
      <link href="/2017/11/01/N017%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"/>
      <url>/2017/11/01/N017%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="代码封装的技巧"><a href="#代码封装的技巧" class="headerlink" title="代码封装的技巧"></a>代码封装的技巧</h3><h4 id="拷贝一坨代码起个名字法"><a href="#拷贝一坨代码起个名字法" class="headerlink" title="拷贝一坨代码起个名字法"></a>拷贝一坨代码起个名字法</h4><blockquote><p>如下代码，明显是线性的(面向过程的)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:&apos;xxxx&apos;,</span><br><span class="line">        data:&#123;farmId:&apos;xxxx&apos;&#125;,</span><br><span class="line">        success:function(res)&#123;</span><br><span class="line">            // 假设 res = [1,2,3,4,5]</span><br><span class="line">            //数据处理  如生成列表</span><br><span class="line">            var arr = res;</span><br><span class="line">            var oUl = document.createElement(&apos;ul&apos;);</span><br><span class="line">            for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">                var oLi =document.createElement(&apos;li&apos;);</span><br><span class="line">                oLi.textContent = arr[i];</span><br><span class="line">                //监听点击事件</span><br><span class="line">                oLi.onclick = function()&#123;</span><br><span class="line">                    alert(this.textContent)</span><br><span class="line">                &#125;</span><br><span class="line">                oUl.appendChild(oLi)</span><br><span class="line">            &#125;</span><br><span class="line">            document.body.appendChild(oUl)</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        error:function()&#123;</span><br><span class="line">            alert(&apos;error&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>优化后如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//1.请求数据</span><br><span class="line"> getData(fnSucc,fnFail);</span><br><span class="line">//2.事件监听(委托)</span><br><span class="line">libindEvent();</span><br><span class="line"></span><br><span class="line">//获取请求数据</span><br><span class="line">function getData(fnSucc,fnFail)&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url:&apos;xxx&apos;,</span><br><span class="line">    success:fnSucc,</span><br><span class="line">    error:fnFail</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fnSucc(res)&#123;</span><br><span class="line">    //假设 res = [1,2,3,4,5]</span><br><span class="line">    var oUl = createTag(&apos;ul&apos;);</span><br><span class="line">    for(var i=0;i&lt;res.length;i++)&#123;</span><br><span class="line">        var oLi = createLiAndSetText(res[i]);</span><br><span class="line">        oUl.appendChild(oLi);</span><br><span class="line">    &#125;</span><br><span class="line">    document.body.appendChild(oUl)</span><br><span class="line">&#125;</span><br><span class="line">function fnFail(err)&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建标签</span><br><span class="line">function createTag(tagName)&#123;</span><br><span class="line">    var tag = document.createElement(tagName);</span><br><span class="line">    return tag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建li并设置 文本</span><br><span class="line">function createLiAndSetText(text)&#123;</span><br><span class="line">    var oLi = createTag(&apos;li&apos;);</span><br><span class="line">    oLi.textContent = text;</span><br><span class="line">    return oLi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//li点击事件监听</span><br><span class="line">function libindEvent()&#123;</span><br><span class="line">    document.onclick = function(e)&#123;</span><br><span class="line">        var target = e.target;</span><br><span class="line">        if(target.tagName===&apos;LI&apos;)&#123;</span><br><span class="line">            alert(target.tagName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>改良后的代码为树状的(分层的)</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note017_01.png" alt=""></p><ol><li>当出现错误的时候我们只需要看请求是否正确</li><li>当没有出现li的时候,我们先去看数据是否回来,再去看创建li是否成功，不需要关心li的事件监听</li><li>当li点击事件出现问题时,我们只需要查看事件监听的代码</li></ol><p>代码从线型的转换为树形结构，即使出现了bug只需要查看对应节点的代码</p><blockquote><h5 id="仔细回想二分排序算法-它每次都会帮我们筛掉一半的数据-以上代码就是很好的实现"><a href="#仔细回想二分排序算法-它每次都会帮我们筛掉一半的数据-以上代码就是很好的实现" class="headerlink" title="仔细回想二分排序算法,它每次都会帮我们筛掉一半的数据,以上代码就是很好的实现"></a>仔细回想二分排序算法,它每次都会帮我们筛掉一半的数据,以上代码就是很好的实现</h5></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS常见布局及各种居中</title>
      <link href="/2017/10/24/N012_02_CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E5%92%8C%E5%B1%85%E4%B8%AD/"/>
      <url>/2017/10/24/N012_02_CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E5%92%8C%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="左右布局"><a href="#左右布局" class="headerlink" title="左右布局"></a>左右布局</h3><blockquote><p>左侧固定，右侧自适应</p></blockquote><p><a href="http://js.jirengu.com/yifunusogi/1/edit" target="_blank" rel="noopener">预览链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* css*/</span><br><span class="line">.left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: gray;</span><br><span class="line">    margin-right: -100%;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.right-content &#123;</span><br><span class="line">    height: 300px;</span><br><span class="line">    margin-left: 310px;</span><br><span class="line">    background-color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*html*/</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;right-content&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="左中右布局"><a href="#左中右布局" class="headerlink" title="左中右布局"></a>左中右布局</h3><blockquote><p>左右固定，中间自适应</p></blockquote><p><a href="http://js.jirengu.com/wijucoqivu/1/edit?html,output" target="_blank" rel="noopener">预览链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/*css*/</span><br><span class="line"></span><br><span class="line">#container&#123;  </span><br><span class="line">    position:relative;  </span><br><span class="line">    margin:20px;  </span><br><span class="line">    height:400px;  </span><br><span class="line">&#125;  </span><br><span class="line">#left_side&#123;  </span><br><span class="line">    position:absolute;  </span><br><span class="line">    top:0px;  </span><br><span class="line">    left:0px;  </span><br><span class="line">    border:solid 1px #0000FF;  </span><br><span class="line">    width:170px;  </span><br><span class="line">    height:100%;  </span><br><span class="line">&#125;  </span><br><span class="line">#content&#123;  </span><br><span class="line">    margin:0px 190px 0px 190px;  </span><br><span class="line">    border:solid 1px #0000FF;  </span><br><span class="line">    height:100%;  </span><br><span class="line">&#125;  </span><br><span class="line">#right_side&#123;  </span><br><span class="line">    position:absolute;  </span><br><span class="line">    top:0px;  </span><br><span class="line">    right:0px;  </span><br><span class="line">    border:solid 1px #0000FF;  </span><br><span class="line">    width:170px;  </span><br><span class="line">    height:100%;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*html*/</span><br><span class="line">&lt;div id=&quot;container&quot;&gt;  </span><br><span class="line">    &lt;div id=&quot;left_side&quot;&gt;left_side&lt;/div&gt;  </span><br><span class="line">    &lt;div id=&quot;content&quot;&gt;content&lt;/div&gt;  </span><br><span class="line">    &lt;div id=&quot;right_side&quot;&gt;right-side&lt;/div&gt;  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ul><li>块级元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin:0 auto;</span><br></pre></td></tr></table></figure><ul><li>行内元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align:center</span><br></pre></td></tr></table></figure><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ul><li>行内元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  padding-top: 30px;</span><br><span class="line">  padding-bottom: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="等其他小技巧"><a href="#等其他小技巧" class="headerlink" title="等其他小技巧"></a>等其他小技巧</h3><blockquote><p>各种居中请搜索google 关键字 css center tricks</p></blockquote><p>你会得到这个链接 <a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="noopener">各种居中的解决方案</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS伪元素和技巧</title>
      <link href="/2017/10/23/N012CSS%E4%BC%AA%E5%85%83%E7%B4%A0%E5%92%8C%E6%8A%80%E5%B7%A7/"/>
      <url>/2017/10/23/N012CSS%E4%BC%AA%E5%85%83%E7%B4%A0%E5%92%8C%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是伪元素"><a href="#什么是伪元素" class="headerlink" title="什么是伪元素"></a>什么是伪元素</h3><p>如果有一个div</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;hi&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div::before&#123;content:&apos;「&apos;&#125;</span><br><span class="line">dis::after&#123;content:&apos;」&apos;&#125;</span><br></pre></td></tr></table></figure><p>添加如下css,你会发现生成为 「hi」，这就是伪元素，你也可以改变伪元素的display为block那样它就变成了一个块元素</p><h3 id="用CSS实现各种图形"><a href="#用CSS实现各种图形" class="headerlink" title="用CSS实现各种图形"></a>用CSS实现各种图形</h3><blockquote><p>如果你会用google就搜索「css tricks shape」</p></blockquote><p><a href="https://css-tricks.com/examples/ShapesOfCSS/" target="_blank" rel="noopener">css tricks shape</a></p><h3 id="如何实现颜色渐变"><a href="#如何实现颜色渐变" class="headerlink" title="如何实现颜色渐变"></a>如何实现颜色渐变</h3><blockquote><p>如果你会用google就搜索「css3 linear gradient generator」</p></blockquote><p><a href="http://www.colorzilla.com/gradient-editor/" target="_blank" rel="noopener">css线性渐变生成器</a></p><h3 id="生成动画"><a href="#生成动画" class="headerlink" title="生成动画"></a>生成动画</h3><blockquote><p>如果你会用google就搜索「css3 animation generator」</p></blockquote><blockquote><p>可能你没搜到那就搜索「anmiation mdn」肯定有代码给你抄</p></blockquote><h3 id="生成阴影"><a href="#生成阴影" class="headerlink" title="生成阴影"></a>生成阴影</h3><blockquote><p>如果你会用google就搜索「css shadow generator」</p></blockquote><p><a href="https://www.cssmatic.com/box-shadow" target="_blank" rel="noopener">css阴影生成器</a></p><h3 id="画出太极"><a href="#画出太极" class="headerlink" title="画出太极"></a>画出太极</h3><p>如果你第一次画肯定是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#taiji&#123;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    background: linear-gradient(to bottom, rgba(255,255,255,1) 0%,rgba(255,255,255,1) 50%,rgba(0,0,0,1) 50%,rgba(0,0,0,1) 100%); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#taiji .lbox,#taiji .rbox&#123;</span><br><span class="line">    float:left;</span><br><span class="line">    width:100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background: #fff;</span><br><span class="line">    margin-top:50px;</span><br><span class="line">&#125; </span><br><span class="line">#taiji .rbox&#123;</span><br><span class="line">    float:left;</span><br><span class="line">    background: black;</span><br><span class="line">&#125;</span><br><span class="line">#taiji .lson,#taiji .rson&#123;</span><br><span class="line">    height: 30px;</span><br><span class="line">    width: 30px;</span><br><span class="line">    background: #000;</span><br><span class="line">    margin:35px auto;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">&#125;</span><br><span class="line">#taiji .rson&#123;</span><br><span class="line">    background:#fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;taiji&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;lbox&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lson&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;rbox&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;rson&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果你喜欢深挖css</p><p>预览我做的 <a href="https://sltrust.github.io/learnCss/taiji3.html" target="_blank" rel="noopener">https://sltrust.github.io/learnCss/taiji3.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#taiji&#123;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    background: linear-gradient(to bottom, rgba(255,255,255,1) 0%,rgba(255,255,255,1) 50%,rgba(0,0,0,1) 50%,rgba(0,0,0,1) 100%); </span><br><span class="line">    position: relative;</span><br><span class="line">    animation-duration:3s;</span><br><span class="line">    animation-name:circlearount;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">    animation-timing-function: linear;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes circlearount&#123;</span><br><span class="line">    from&#123;</span><br><span class="line">        transform: rotate(0deg);</span><br><span class="line">    &#125;</span><br><span class="line">    to&#123;</span><br><span class="line">        transform: rotate(360deg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div#taiji::before&#123;</span><br><span class="line">    content:&apos;&apos;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    height:  30px;</span><br><span class="line">    width: 30px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background: #fff;</span><br><span class="line">    border:35px solid #000;</span><br><span class="line">    top:50px;</span><br><span class="line">    left:0;</span><br><span class="line">&#125;</span><br><span class="line">div#taiji::after&#123;</span><br><span class="line">    content:&apos;&apos;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    height: 30px;</span><br><span class="line">    width: 30px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background: #000;</span><br><span class="line">    border:35px solid #fff;</span><br><span class="line">    top:50px;</span><br><span class="line">    right:0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;taiji&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS布局与定位</title>
      <link href="/2017/10/22/N011CSS%E5%B8%83%E5%B1%80%E4%B8%8E%E5%AE%9A%E4%BD%8D/"/>
      <url>/2017/10/22/N011CSS%E5%B8%83%E5%B1%80%E4%B8%8E%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS布局与定位"><a href="#CSS布局与定位" class="headerlink" title="CSS布局与定位"></a>CSS布局与定位</h2><p>题外话如果你想要一个高清的背景图你可以去 <a href="https://alpha.wallhaven.cc/" target="_blank" rel="noopener">wallhaven</a></p><h4 id="div的高度由谁决定-核心知识点"><a href="#div的高度由谁决定-核心知识点" class="headerlink" title="div的高度由谁决定(核心知识点)"></a>div的高度由谁决定(核心知识点)</h4><blockquote><p>div的高度由其内部文档流元素的高度总和决定</p></blockquote><h4 id="文档流是什么-核心知识点"><a href="#文档流是什么-核心知识点" class="headerlink" title="文档流是什么(核心知识点)"></a>文档流是什么(核心知识点)</h4><blockquote><p>文档内元素的流动方向</p></blockquote><ol><li>如果你是一个内联元素,就是从左往右流动,如果宽度不够(流动遇到阻碍,它就换行继续从左往右)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;文字&lt;/span&gt;</span><br><span class="line">&lt;span&gt;文字&lt;/span&gt;</span><br><span class="line">&lt;span&gt;文字&lt;/span&gt;</span><br><span class="line">...</span><br><span class="line">&lt;span&gt;文字&lt;/span&gt;</span><br><span class="line">&lt;span&gt;文字&lt;/span&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>如果你是一个块级元素,就是从上往下,每个块级元素另起一行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;文字&lt;/div&gt;</span><br><span class="line">&lt;div&gt;文字&lt;/div&gt;</span><br><span class="line">&lt;div&gt;文字&lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">&lt;div&gt;文字&lt;/div&gt;</span><br><span class="line">&lt;div&gt;文字&lt;/div&gt;</span><br><span class="line">&lt;div&gt;文字&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如图</p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_01.png" alt=""></p><h4 id="热干面的笑话"><a href="#热干面的笑话" class="headerlink" title="热干面的笑话"></a>热干面的笑话</h4><p>外语认为单词的不可分割性导致 老外学中文 “热干面” 他会连续的把字向英语单词一样读出来</p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_02.png" alt=""></p><p>答案是因为文化差异「haaaaaaaaaaaaaaaaa」 会被当作一个单词而不像汉字一样可以分开</p><blockquote><p>你想分开它怎么办</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">span&#123;word-break:break-all&#125;</span><br></pre></td></tr></table></figure><h4 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h4><p>想要块级元素 变成一行 </p><blockquote><p>本来可以float实现,但是很多人不会于是css3推出 inline-block</p></blockquote><p>但是这是个触发很多问题的属性,会导致很多恶心的问题(建议float)</p><h4 id="内联元素的高度由什么决定-很难很难的知识点"><a href="#内联元素的高度由什么决定-很难很难的知识点" class="headerlink" title="内联元素的高度由什么决定(很难很难的知识点)"></a>内联元素的高度由什么决定(很难很难的知识点)</h4><p>这要从与前端不相关的问题说起</p><blockquote><p>回忆起你上小学学汉语拼音的时候「四线谱」</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_03.png" alt=""></p><blockquote><p>你写汉字会中线对齐吗？ 明显不会<br>你写第二行的时候你会紧贴着第一行吗？明显也不会(多少都会留一些空隙表示分割)</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_04.png" alt=""></p><blockquote><p>即使在我们知道了字有「建议行高」的存在，但是内联元素的高度仍然是不确定的</p></blockquote><ul><li>因为不同字体设计的建议行高不同 </li></ul><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_05.png" alt=""></p><blockquote><h4 id="结论就是：多个span在一起的时候，它的高度由字体建议行高最高的那个span决定"><a href="#结论就是：多个span在一起的时候，它的高度由字体建议行高最高的那个span决定" class="headerlink" title="结论就是：多个span在一起的时候，它的高度由字体建议行高最高的那个span决定"></a>结论就是：多个span在一起的时候，它的高度由字体建议行高最高的那个span决定</h4></blockquote><h4 id="我们怎么避免内联元素这些奇怪的问题"><a href="#我们怎么避免内联元素这些奇怪的问题" class="headerlink" title="我们怎么避免内联元素这些奇怪的问题"></a>我们怎么避免内联元素这些奇怪的问题</h4><p>假设需求是 span 16px 高度40px</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    span&#123;font-size:16px;&#125;</span><br><span class="line">    div&#123;</span><br><span class="line">        line-height:24px;</span><br><span class="line">        padding:6px 0;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;你好&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>在font-size比较小的时候，可以用line-height控制</li><li>建议设置的行高稍大于字体的大小</li></ul><h4 id="迫不得已的-height-最容易出bug的属性"><a href="#迫不得已的-height-最容易出bug的属性" class="headerlink" title="迫不得已的 height (最容易出bug的属性)"></a>迫不得已的 height (最容易出bug的属性)</h4><blockquote><p>初学前端的你是不是经常看到设计图之后立刻一个 height:300px;</p></blockquote><ul><li>一定不要写height,我们刚已经说了div的高度由其内部文档流元素的高度总和决定</li><li><p>你上来一个 height:300px; 万一div里面文档流高度301你怎么办？</p></li><li><p>不到情非得已千万不要写高度</p></li></ul><h4 id="脱离文档流"><a href="#脱离文档流" class="headerlink" title="脱离文档流"></a>脱离文档流</h4><blockquote><p>请问 .main的高度是多少？ 300px</p></blockquote><ol><li>div1 脱离了文档流</li><li>.main的高度由其内部文档流元素的高度总和决定</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;div1&quot; style=&quot;position:fixed;height:40px;&quot;&gt;222&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;div2&quot; style=&quot;height:300px&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果一个元素它是fixed定位，它的宽度就不会向外扩展</p></blockquote><ul><li>如果你fixed的元素原来是宽度占满的，通常要设置 width:100%;</li></ul><h4 id="width-100-bug的根源"><a href="#width-100-bug的根源" class="headerlink" title="width:100%(bug的根源)"></a>width:100%(bug的根源)</h4><ul><li>如果你没什么事，千万不要加width:100%;</li></ul><blockquote><p>如果你fixed定位的元素有padding:20px; 再加上width:100%;那么它就比它爸爸的宽度还要大</p></blockquote><p>div1的宽度已经比 main大了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;div1&quot; style=&quot;position:fixed;height:40px;padding:20px;width:100%&quot;&gt;222&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;div2&quot; style=&quot;height:300px&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>套路</p></blockquote><ul><li>移除fixed元素的padding</li><li>在fixed元素内部在包含一个div,让这个div有padding</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;div1&quot; style=&quot;position:fixed;height:40px;width:100%&quot;&gt;</span><br><span class="line">        &lt;div style=&quot;padding:20px;&quot;&gt;222&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;div2&quot; style=&quot;height:300px&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="背景图自适应"><a href="#背景图自适应" class="headerlink" title="背景图自适应"></a>背景图自适应</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    background-img:url(./img/aa.png);</span><br><span class="line">    background-position:center center;</span><br><span class="line">    background-size:cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="宽度自适应"><a href="#宽度自适应" class="headerlink" title="宽度自适应"></a>宽度自适应</h4><ul><li>不要写 width:1000px 这样你怎么拖拽网页它都是1000px</li></ul><blockquote><p>max-width:940px; 网页宽度小于940的时候它也跟着缩小</p></blockquote><h4 id="div水平居中的套路"><a href="#div水平居中的套路" class="headerlink" title="div水平居中的套路"></a>div水平居中的套路</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    margin-left:auto;</span><br><span class="line">    margin-right:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不接受宽高设置的-span"><a href="#不接受宽高设置的-span" class="headerlink" title="不接受宽高设置的 span"></a>不接受宽高设置的 span</h4><ul><li>因为span是内联元素(display:inline)设置宽高是无效的</li><li>通常你要设置 display:inline-block</li></ul><blockquote><p>需求一个span 内容是 hello 宽70 高30你会怎么办</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*新手*/</span><br><span class="line">span&#123;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    height:30px;</span><br><span class="line">    width:70px;</span><br><span class="line">    line-height:30px;</span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*老司机   </span><br><span class="line">1.先看不设置样式时hello会占据多少的宽高</span><br><span class="line">2.经发现宽38px高22px</span><br><span class="line">3.设置line-height:22px因为不同机器上字体表现的高度有所差异</span><br><span class="line">*/</span><br><span class="line">span&#123;</span><br><span class="line">    display:inline-block;</span><br><span class="line">    padding:4px 16px;</span><br><span class="line">    line-height:22px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="css画三角形"><a href="#css画三角形" class="headerlink" title="css画三角形"></a>css画三角形</h4><ul><li>border属性的使用</li></ul><ol><li><p>先画个带边框的盒子</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    border:10px solid red;</span><br><span class="line">    height:50px;</span><br><span class="line">    width:50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给四个边框四个颜色</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    border:10px solid red;</span><br><span class="line">    height:50px;</span><br><span class="line">    width:50px;</span><br><span class="line">    border-top-color:black;</span><br><span class="line">    border-right-color:red;</span><br><span class="line">    border-bottom-color:green;</span><br><span class="line">    border-left-color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>把div高度和宽度设置为0，四个三角出现了</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    border:10px solid red;</span><br><span class="line">    height:0px;</span><br><span class="line">    width:0px;</span><br><span class="line">    border-top-color:black;</span><br><span class="line">    border-right-color:red;</span><br><span class="line">    border-bottom-color:green;</span><br><span class="line">    border-left-color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将上边框宽度设置为0</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    border:10px solid red;</span><br><span class="line">    height:0px;</span><br><span class="line">    width:0px;</span><br><span class="line">    border-top-color:black;</span><br><span class="line">    border-right-color:red;</span><br><span class="line">    border-bottom-color:green;</span><br><span class="line">    border-left-color:blue;</span><br><span class="line">    border-top-width:0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将其他方向的border颜色设置为透明</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    border:10px solid transparent;</span><br><span class="line">    height:0px;</span><br><span class="line">    width:0px;</span><br><span class="line">    border-left-color:blue;</span><br><span class="line">    border-top-width:0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="iconfont-字体图标的使用"><a href="#iconfont-字体图标的使用" class="headerlink" title="iconfont 字体图标的使用"></a>iconfont 字体图标的使用</h4><p><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a></p><ol><li>建议你先登录一下，有好几种那种都可以</li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_06.png" alt=""></p><ol start="2"><li>搜搜你需要的图标然后添加购物车</li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_07.png" alt=""></p><ol start="3"><li>点击购物车,添加新项目.如xxx</li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_08.png" alt=""></p><ol start="4"><li>添加项目成功后,你可以看到如下内容</li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_09.png" alt=""></p><ol start="5"><li>点击查看在线链接然后生成文件,然后引入到项目中,然后点击使用帮助对着文档抄</li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_10.png" alt=""></p><ol start="6"><li>以下是步骤</li></ol><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note011_11.png" alt=""></p><blockquote><p>以上步骤后你就可以使用 svg了</p></blockquote><ul><li>如何控制svg的大小 height/width</li><li>如何控制svg的背景色 fill</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">svg&#123;</span><br><span class="line">    height:30px;</span><br><span class="line">    width:30px;</span><br><span class="line">    fill:#0089e1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS</title>
      <link href="/2017/10/21/N010_CSS/"/>
      <url>/2017/10/21/N010_CSS/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-Cascading-Style-Sheets"><a href="#CSS-Cascading-Style-Sheets" class="headerlink" title="CSS (Cascading Style Sheets)"></a>CSS (Cascading Style Sheets)</h2><h3 id="CSS历史"><a href="#CSS历史" class="headerlink" title="CSS历史"></a>CSS历史</h3><p><a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets#History" target="_blank" rel="noopener">英文维基百科</a></p><blockquote><p>凯斯kei丁(如果你实在不知道第一个咋读)注意！中文维基已经落后很久了</p></blockquote><ol><li><p>两个人合作发明了 CSS<br>1994年哈肯·维姆·莱提出了CSS的最初建议。伯特·波斯（Bert Bos）当时正在设计一个叫做“Argo”的浏览器，他们决定一起合作设计CSS。</p></li><li><p>W3C 开始接管 CSS<br>1997年初，W3C内组织了专门管CSS的工作组，其负责人是克里斯·里雷。</p></li><li><p>CSS 2.1<br>1998年5月W3C发表了CSS2<br>CSS2.1修改了CSS2中的一些错误，删除了其中基本不被支持的内容和增加了一些已有的浏览器的扩展内容。</p></li><li><p>CSS 3<br>从 2011 年开始 CSS 被分为多个模块单独升级，统称为 CSS 3。这些模块有：<br>CSS 选择器 level 3<br>CSS 媒体查询 level 3<br>CSS Color level 3<br>更多请 google 搜索 CSS spec <a href="https://www.w3.org/Style/CSS/specs.en.html" target="_blank" rel="noopener">你可以看看</a></p></li><li><p>CSS 4?<br>不好意思，没有 CSS 4，只有各个模块的 level 4(每个功能独立写文档)</p></li></ol><blockquote><p>ps 文档很多 学海无涯生命有限，所以我们要先用在学，碰到了再去细究</p></blockquote><p>周边工具</p><ul><li>LESS CSS<br>一种简化、功能更多的 CSS 语言 中文官网 英文官网</li><li>SASS<br>一种简化、功能更多的 CSS 语言（请自行搜索中英文官网）</li><li>PostCSS<br>一种 CSS 处理程序</li></ul><blockquote><p>建议是，先不要看周边工具，学好最朴素的 CSS，然后升级就很容易了。</p></blockquote><h3 id="CSS-学习资源"><a href="#CSS-学习资源" class="headerlink" title="CSS 学习资源"></a>CSS 学习资源</h3><ol><li>Google: 关键词 MDN</li><li><a href="https://css-tricks.com/" target="_blank" rel="noopener">CSS Tricks</a>（ 「居中」搜索 center css tricks）</li><li>Google: 阮一峰 css</li><li>张鑫旭的 240 多篇 CSS 博客</li><li><a href="https://tympanus.net/codrops/category/playground/" target="_blank" rel="noopener">Codrops 炫酷 CSS 效果</a></li><li>CSS揭秘 (如果买书只推荐这一本,你买前端书千万别买中国人写的。。。)</li><li><a href="http://cndevdocs.com/" target="_blank" rel="noopener">CSS 2.1 中文 spec</a></li><li><a href="http://adamschwartz.co/magic-of-css/" target="_blank" rel="noopener">Magic of CSS 免费在线书</a>(如果你三天8h看完直接成为CSS大神)</li></ol><blockquote><p>建议是：中文学习资源只看大 V 的（毕竟他们要维护形象不能瞎写），英文资源看 CSS Tricks、MDN 和 Codrops。书的话作用不大，最权威的书其实是文档。</p></blockquote><ul><li>如果你想快速上手，就先写小 demo 再学理论。</li><li>如果你想一鸣惊人，就仔细看 CSS 规范文档。</li></ul><h3 id="开始写-CSS"><a href="#开始写-CSS" class="headerlink" title="开始写 CSS"></a>开始写 CSS</h3><ol><li>引入 CSS 的三/四种方式</li><li>从最小的东西开始入手</li><li>逐渐变大</li><li>学会组织 CSS（以后再说）</li><li>自己写 CSS UI 库</li></ol><h4 id="引入CSS的四种方式"><a href="#引入CSS的四种方式" class="headerlink" title="引入CSS的四种方式"></a>引入CSS的四种方式</h4><ol><li><p>行间样式(内联样式)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;color:red;&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>style标签 (内嵌样式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        p&#123;color:red;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li><li><p>link引入</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;mystyle.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>import导入</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt; @import url(./b.css)&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="li-的小圆点问题"><a href="#li-的小圆点问题" class="headerlink" title="li 的小圆点问题"></a>li 的小圆点问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">li&#123;list-style:none;&#125;</span><br></pre></td></tr></table></figure><h4 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h4><blockquote><p>除了div和span其他所有标签都有默认样式（css一个问题就是要清除默认样式）具体你可以搜 base.css/reset.css</p></blockquote><h4 id="float-一定会出问题"><a href="#float-一定会出问题" class="headerlink" title="float 一定会出问题"></a>float 一定会出问题</h4><blockquote><p>如果你非要深究为什么那你就回答我为啥 color:red;字会变红</p></blockquote><p>解决 float 的bug 业界已经同一有了一个规范就是 .clearfix</p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note010_01.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::after&#123;</span><br><span class="line">    content:&apos;&apos;,</span><br><span class="line">    display:block;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>口诀</p><ol><li>子集浮动父级要清浮动(class=”clearfix”)</li><li>同级一个浮动其他都浮动</li></ol><h4 id="选择器-“-gt-”加与不加的区别"><a href="#选择器-“-gt-”加与不加的区别" class="headerlink" title="选择器 “&gt;”加与不加的区别"></a>选择器 “&gt;”加与不加的区别</h4><p>直接子集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* 匹配.topNavBar的儿子nav nav的儿子ul */</span><br><span class="line">.topNavBar &gt; nav &gt; ul</span><br></pre></td></tr></table></figure><h4 id="默认字体大小-16px"><a href="#默认字体大小-16px" class="headerlink" title="默认字体大小 16px"></a>默认字体大小 16px</h4><p>工具使用</p><blockquote><p>chrome ==&gt; F12 ==&gt;Elements==&gt; styles/computed</p></blockquote><h4 id="a标签默认样式"><a href="#a标签默认样式" class="headerlink" title="a标签默认样式"></a>a标签默认样式</h4><p>text-decoration:underline</p><blockquote><p>如果你实在不知道用法，搜索 mdn text-decoration</p></blockquote><h4 id="ul里li-鼠标滑过有边框的效果"><a href="#ul里li-鼠标滑过有边框的效果" class="headerlink" title="ul里li 鼠标滑过有边框的效果"></a>ul里li 鼠标滑过有边框的效果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .clearfix::after&#123;</span><br><span class="line">      content:&apos;&apos;;</span><br><span class="line">      display:block;</span><br><span class="line">      clear:both;</span><br><span class="line">    &#125;</span><br><span class="line">    ul&#123;border:1px solid red;&#125;</span><br><span class="line">    li&#123;list-style:none;&#125;</span><br><span class="line">    li&#123;float:left; ;&#125;</span><br><span class="line">    li:hover&#123;border:1px solid red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul class=&quot;clearfix&quot;&gt;</span><br><span class="line">    &lt;li&gt;111&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;222&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;333&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>你会发现鼠标滑过的时候字在发抖</p><blockquote><p>套路就是在li一开始就设置边框，只不过颜色是透明的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li&#123;border:1px solid transparent;&#125;</span><br><span class="line">li:hover:&#123;border:1px solid red;&#125;</span><br></pre></td></tr></table></figure><h4 id="li里的a标签为什么有时候比li大"><a href="#li里的a标签为什么有时候比li大" class="headerlink" title="li里的a标签为什么有时候比li大"></a>li里的a标签为什么有时候比li大</h4><p>答案是因为a是 display:inline</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a&#123;display:block;&#125;</span><br><span class="line"></span><br><span class="line">&lt;li&gt;</span><br><span class="line">    &lt;a href=&quot;javascrip:;&quot;&gt;关于&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><h4 id="inherit-值啥意思"><a href="#inherit-值啥意思" class="headerlink" title="inherit 值啥意思"></a>inherit 值啥意思</h4><p>inherit意思是继承的意思就是你爸爸什么样你就继承过来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">body&#123;color:#333;&#125;</span><br><span class="line">a&#123;color:inherit;&#125;</span><br></pre></td></tr></table></figure><p>如果你不写a{color:inherit;} a标签有默认样式就会是蓝色的</p><p>清除a的默认样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#123;color:inherit;text-decoration:none;&#125;</span><br></pre></td></tr></table></figure><h4 id="span之间有什么"><a href="#span之间有什么" class="headerlink" title="span之间有什么"></a>span之间有什么</h4><p>如果你回车了不管你空了多少行，span直接都会有一个空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;aaa&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span&gt;bbb&lt;/span&gt;</span><br><span class="line">&lt;span&gt;ccc&lt;/span&gt;</span><br><span class="line">&lt;span&gt;ddd&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>你应该这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;bbb&lt;/span&gt;</span><br></pre></td></tr></table></figure><h4 id="给你个需求"><a href="#给你个需求" class="headerlink" title="给你个需求"></a>给你个需求</h4><blockquote><p>我需要一个 div 高30px，div 里有一行字垂直居中，字的大小为 14px，应该怎么写 CSS?</p></blockquote><ul><li>给 div 的样式为 font-size: 14px; line-height: 20px; padding: 5px 0;</li><li>给 div 的样式为 font-size: 14px; line-height: 24px; padding: 3px 0;</li><li>给 div 的样式为 font-size: 14px; line-height: 30px; </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML续2</title>
      <link href="/2017/10/19/N009_1_HTML%E7%BB%AD2/"/>
      <url>/2017/10/19/N009_1_HTML%E7%BB%AD2/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML续"><a href="#HTML续" class="headerlink" title="HTML续"></a>HTML续</h2><p>一些标签总结</p><h3 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h3><ul><li>a 发起get请求</li><li>form 发起post请求(默认get但是谁这么无聊)</li></ul><blockquote><p>回忆知识点：get是获取内容，post是上传内容</p></blockquote><h3 id="form-标签"><a href="#form-标签" class="headerlink" title="form 标签"></a>form 标签</h3><ul><li>如果form 里没有提交按钮就无法提交，除非你用JS</li><li>method 请求方式(没人用get)只有两个值 get/post</li><li>action 请求路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;index2.html&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>如上你点击提交后我们在chrome里点击Network</p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note009_01.png" alt=""></p><blockquote><p>如果提交的是中文,就把对应字符的UTF-8编码每个字节分开并加一个%</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note009_02.png" alt=""></p><h4 id="问题1-form-标签在哪些情况下可以被用户提交"><a href="#问题1-form-标签在哪些情况下可以被用户提交" class="headerlink" title="问题1 form 标签在哪些情况下可以被用户提交"></a>问题1 form 标签在哪些情况下可以被用户提交</h4><ol><li>form 标签里面有一个 input type=submit 的元素</li><li>form 标签里面有一个 button 元素，button 的 type 属性为空</li></ol><p>详细讲一下第二种</p><blockquote><p>form里存在一个button它会升级为提交按钮</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;index2.html&quot; method=&quot;post&quot;&gt;</span><br><span class="line">     &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">     &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li>如果你添加了 type=”button” 就无法提交</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot;&gt;提交&lt;/button&gt;</span><br></pre></td></tr></table></figure><ul><li>如果你是 input的button也是无法提交的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;button&quot; value=&quot;提交&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="问题2-form-标签里面的-input-加不加-name-属性由什么区别？"><a href="#问题2-form-标签里面的-input-加不加-name-属性由什么区别？" class="headerlink" title="问题2 form 标签里面的 input 加不加 name 属性由什么区别？"></a>问题2 form 标签里面的 input 加不加 name 属性由什么区别？</h4><blockquote><p>如果 input 不加 name，那么在表单提交时，input 的值就不会出现在请求里</p></blockquote><h4 id="form与-a标签一样-也有target属性"><a href="#form与-a标签一样-也有target属性" class="headerlink" title="form与 a标签一样 也有target属性"></a>form与 a标签一样 也有target属性</h4><p>行为同 a标签一样  具体看上一篇博客</p><ul><li>_blank</li><li>_slef</li><li>_parent</li><li>_top</li></ul><h3 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h3><blockquote><p>问题1 有时候你想点击「免单」也会勾选此时发现无法勾选</p></blockquote><ul><li>给input添加id=”xxx” </li><li>给触发的文本套上 label标签并指定 for=”xxx”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot;&gt;免单</span><br><span class="line"></span><br><span class="line">&lt;!-- 你应该这样 --&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; id=&quot;free&quot;&gt;</span><br><span class="line">&lt;label for=&quot;free&quot;&gt;免单&lt;/label&gt;</span><br></pre></td></tr></table></figure><blockquote><p>老司机应该这样,直接用label把整体包起来</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;账号&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/label&gt;</span><br><span class="line">&lt;label&gt;密码&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;免单&lt;/label&gt;</span><br></pre></td></tr></table></figure><blockquote><p>问题2 如果是多个复选框</p></blockquote><p>你应该让它们的name相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;fruit&quot; value=&quot;apple&quot;&gt;苹果&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;fruit&quot; value=&quot;banana&quot;&gt;香蕉&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">提交后参数会形如  fruit=apple&amp;fruir=banana</span><br></pre></td></tr></table></figure><h3 id="radio-单选框"><a href="#radio-单选框" class="headerlink" title="radio 单选框"></a>radio 单选框</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;man&quot;&gt;男&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;woman&quot;&gt;女&lt;/label&gt;</span><br></pre></td></tr></table></figure><h3 id="select-下拉选"><a href="#select-下拉选" class="headerlink" title="select 下拉选"></a>select 下拉选</h3><blockquote><p>如果想多选请添加 multiple属性</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=&quot;local&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;1&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;2&quot;&gt;天津&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="textarea-文本域"><a href="#textarea-文本域" class="headerlink" title="textarea 文本域"></a>textarea 文本域</h3><ol><li>默认它可以拖动的  要用style控制 resize:none;</li><li>建议用CSS控制它的宽高</li><li>它提供的cols和rows是不准的 列和行设置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=&quot;&quot; cols=&quot;30&quot; style=&quot;resize:none;&quot;rows=&quot;10&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><h3 id="table-标签-用的很少"><a href="#table-标签-用的很少" class="headerlink" title="table 标签 (用的很少)"></a>table 标签 (用的很少)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;班级&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;hjx&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;aaa&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;tfoot&gt;&lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h4 id="table之慎用标签-colgroup-col"><a href="#table之慎用标签-colgroup-col" class="headerlink" title="table之慎用标签 colgroup col"></a>table之慎用标签 colgroup col</h4><blockquote><p>之所以慎用，就因为2017年11月某天我知道它的用法然后就用了，结果导致一个bug(firefox里不支持这个标签#仅对应2017年11月那个我使用的firefox版本)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=1&gt;</span><br><span class="line">    &lt;colgroup&gt;</span><br><span class="line">      &lt;col width=100&gt;</span><br><span class="line">      &lt;col width=200&gt;</span><br><span class="line">    &lt;/colgroup&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;班级&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;hjx&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;aaa&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;2&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;tfoot&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;xxx&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;22&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><blockquote><p>PS建议控制 td 样式还是追随大众使用 class</p></blockquote><h4 id="thead-tbody-tfoot如果顺序错了会咋样"><a href="#thead-tbody-tfoot如果顺序错了会咋样" class="headerlink" title="thead tbody tfoot如果顺序错了会咋样"></a>thead tbody tfoot如果顺序错了会咋样</h4><blockquote><p>不管你怎样放置它们的顺序，即使F12里查到对应标签顺序是你写的顺序，但是浏览器会自动纠错依然会以thead tbody tfoot的顺序展现在表格上</p></blockquote><h4 id="不写thead-tfoot-会咋样"><a href="#不写thead-tfoot-会咋样" class="headerlink" title="不写thead/tfoot 会咋样"></a>不写thead/tfoot 会咋样</h4><blockquote><p>没有问题</p></blockquote><h4 id="不写tbody会咋样"><a href="#不写tbody会咋样" class="headerlink" title="不写tbody会咋样"></a>不写tbody会咋样</h4><blockquote><p>它会自动帮你生成tbody 并把 tr放在里面</p></blockquote><h4 id="最后说一下默认表格设置了边框是很丑的，一般要设置边框融合"><a href="#最后说一下默认表格设置了边框是很丑的，一般要设置边框融合" class="headerlink" title="最后说一下默认表格设置了边框是很丑的，一般要设置边框融合"></a>最后说一下默认表格设置了边框是很丑的，一般要设置边框融合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table&#123;border-collapse:collapse&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML续</title>
      <link href="/2017/10/18/N009_0_HTML%E7%BB%AD/"/>
      <url>/2017/10/18/N009_0_HTML%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="html一些标签总结"><a href="#html一些标签总结" class="headerlink" title="html一些标签总结"></a>html一些标签总结</h3><h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><p>通常用来嵌套一个页面如百度</p><ul><li>它的宽高是由自己决定的，而且你只能设置宽度100%，高度100%是没用的(CSS蛋疼之处)</li><li>如果你用iframe会明显感觉页面变卡了</li><li>它一般会出现在五年前的项目里</li><li>frameborder=”0”是去除iframe的边框的(3d边框)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;http://www.baidu.com&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h5 id="iframe-和-a标签一起使用时会发生什么？"><a href="#iframe-和-a标签一起使用时会发生什么？" class="headerlink" title="iframe 和 a标签一起使用时会发生什么？"></a>iframe 和 a标签一起使用时会发生什么？</h5><ul><li>给iframe 加上name属性  如name=”xxx”</li><li>给a 加上target属性    如target=”xxx”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe name=&quot;xxx&quot; src=&quot;#&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;a target=&quot;xxx&quot; href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</span><br><span class="line">&lt;a target=&quot;xxx&quot; href=&quot;http://www.qq.com&quot;&gt;QQ&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>这样页面上你点击「百度」iframe就会显示百度的网页，点击「QQ」就会显示qq的网页</p><h5 id="iframe的src属性也可以写相对路径，包含页面"><a href="#iframe的src属性也可以写相对路径，包含页面" class="headerlink" title="iframe的src属性也可以写相对路径，包含页面"></a>iframe的src属性也可以写相对路径，包含页面</h5><p>前提你至少得开一个本地服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;./index2.html&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h4 id="a-标签"><a href="#a-标签" class="headerlink" title="a 标签"></a>a 标签</h4><p>我们分别写四个target它们都会在哪里打开呢？</p><p>建立如下文件 </p><p>index3.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index3页面</span><br><span class="line">&lt;a target=&quot;_blank&quot; href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</span><br><span class="line">&lt;a target=&quot;_self&quot; href=&quot;http://www.qq.com&quot;&gt;QQ&lt;/a&gt;</span><br><span class="line">&lt;a target=&quot;_parent&quot; href=&quot;http://www.jd.com&quot;&gt;京东&lt;/a&gt;</span><br><span class="line">&lt;a target=&quot;_top&quot; href=&quot;http://www.taobao.com&quot;&gt;淘宝&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>index2.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index2页面</span><br><span class="line">&lt;iframe src=&quot;./index3.html&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index页面</span><br><span class="line">&lt;iframe src=&quot;./index2.html&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><blockquote><p>你可以 http-server的工具 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#全局安装</span><br><span class="line">npm install http-server -g  </span><br><span class="line">#开启本地服务 </span><br><span class="line">http-server -c-1</span><br></pre></td></tr></table></figure><ul><li>_blank 会新开一个窗口打开</li><li>_self 会在自己页面打开，如上结果会在index3页面打开</li><li>_parent 会在父页面打开，如上结果会在index2页面打开</li><li>_top 会在顶级窗口打开， 如上结果会在index页面打开</li></ul><h5 id="a标签之-download-属性"><a href="#a标签之-download-属性" class="headerlink" title="a标签之 download 属性"></a>a标签之 download 属性</h5><blockquote><p>download可以下载东西，可能是安装包可能是网页</p></blockquote><ul><li><p>如果不加download<br>服务器要设置 Content-Type:application/octet-stream</p></li><li><p>加了 download 就可以直接下载</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a  href=&quot;http://www.qq.com&quot; download&gt;下载&lt;/a&gt;</span><br></pre></td></tr></table></figure><h5 id="a标签纸-href属性"><a href="#a标签纸-href属性" class="headerlink" title="a标签纸 href属性"></a>a标签纸 href属性</h5><blockquote><p>只写qq.com会跳转到 qq.com的网页吗？  不会</p></blockquote><p>因为这是一个相对地址</p><blockquote><p>比如你在命令行里  touch 1.txt / open 1.txt 都是相对当前命令行的目录执行的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a  href=&quot;qq.com&quot;&gt;qq&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>修改 href=”//qq.com”</p><blockquote><p>代表以当前协议打开</p></blockquote><ul><li><p>如果你是一个本地文件打开是文件协议 file协议</p></li><li><p>如果你想打开qq.com的网页,你需要以http协议打开</p></li></ul><p>那么你要下载一个 http-server 的工具，这样就能本地开一个node服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#全局安装</span><br><span class="line">npm install http-server -g  </span><br><span class="line">#开启本地服务   -c-1代表不要缓存</span><br><span class="line">http-server -c-1</span><br></pre></td></tr></table></figure><h6 id="href-”-qq-com”是-无协议绝对地址自动继承协议"><a href="#href-”-qq-com”是-无协议绝对地址自动继承协议" class="headerlink" title="href=”//qq.com”是 无协议绝对地址自动继承协议"></a>href=”//qq.com”是 无协议绝对地址自动继承协议</h6><h6 id="href-”xxx-html”-相对路径"><a href="#href-”xxx-html”-相对路径" class="headerlink" title="href=”xxx.html” 相对路径"></a>href=”xxx.html” 相对路径</h6><ul><li>A /index.html/xxx.html</li><li>B /xxx.html √</li></ul><h6 id="href-”-name-hjx”"><a href="#href-”-name-hjx”" class="headerlink" title="href=”?name=hjx”"></a>href=”?name=hjx”</h6><ul><li>A 保存</li><li>B 这样很自然 √  如果你点击会发起get请求并把参数拼接到当前url上</li></ul><h6 id="href-”-sss”-锚点是不发请求了"><a href="#href-”-sss”-锚点是不发请求了" class="headerlink" title="href=”#sss” 锚点是不发请求了"></a>href=”#sss” 锚点是不发请求了</h6><h6 id="href-”javascript-”-伪协议"><a href="#href-”javascript-”-伪协议" class="headerlink" title="href=”javascript:;” 伪协议"></a>href=”javascript:;” 伪协议</h6><h4 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&quot;&gt;link&lt;/a&gt; 标签被点击后会发生什么？</span><br><span class="line">当前页面刷新</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;/..&quot;&gt;link&lt;/a&gt; 标签被点击后会发生什么？</span><br><span class="line">浏览器发起 GET / HTTP/1.1请求</span><br></pre></td></tr></table></figure><blockquote><p>我想写一个a标签,但是点击之后不要跳转</p></blockquote><ul><li>写#(锚点) 页面会动</li><li>不写href属性 a就跟span一样了</li><li>伪协议 href=”javascript:;”</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML</title>
      <link href="/2017/10/17/N008_HTML/"/>
      <url>/2017/10/17/N008_HTML/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML-Hypertext-Markup-Language"><a href="#HTML-Hypertext-Markup-Language" class="headerlink" title="HTML Hypertext Markup Language"></a>HTML Hypertext Markup Language</h3><p><a href="https://en.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">维基百科HTML</a></p><h4 id="HTML-的版本（W3C-组织制定规范）"><a href="#HTML-的版本（W3C-组织制定规范）" class="headerlink" title="HTML 的版本（W3C 组织制定规范）"></a>HTML 的版本（W3C 组织制定规范）</h4><ul><li>HTML 4.01</li><li>XHTML</li><li>HTML 5 √(我们从这里开始学)</li><li>HTML 5.1</li></ul><h4 id="规范文档（Specifications）"><a href="#规范文档（Specifications）" class="headerlink" title="规范文档（Specifications）"></a>规范文档（Specifications）</h4><blockquote><p>你可以google 搜  html spec <a href="https://www.w3.org/TR/html5/" target="_blank" rel="noopener">这个网址</a></p></blockquote><ol><li>由 W3C 写文档（李爵士）</li><li>W3C 根据浏览器的实际情况总结文档，并不是凭空想象<h4 id="DOCTYPE-文档头"><a href="#DOCTYPE-文档头" class="headerlink" title="DOCTYPE 文档头"></a>DOCTYPE 文档头</h4></li></ol><ul><li>用来选择文档类型</li><li>除了 HTML 5 的 DOCTYPE，其他都很难记：<a href="https://www.w3.org/QA/2002/04/valid-dtd-list.html" target="_blank" rel="noopener">https://www.w3.org/QA/2002/04/valid-dtd-list.html</a></li><li>如果你没写 DOCTYPE，那你就惨了</li></ul><h4 id="html-head-body"><a href="#html-head-body" class="headerlink" title="html / head / body"></a>html / head / body</h4><p>head可省略吗？ body可省略吗？ 可以</p><h4 id="省略标签"><a href="#省略标签" class="headerlink" title="省略标签"></a>省略标签</h4><h4 id="常见标签：a、form、input、button、h1、p、ul、ol、small、strong、div、span、kbd、video、audio、svg"><a href="#常见标签：a、form、input、button、h1、p、ul、ol、small、strong、div、span、kbd、video、audio、svg" class="headerlink" title="常见标签：a、form、input、button、h1、p、ul、ol、small、strong、div、span、kbd、video、audio、svg"></a>常见标签：a、form、input、button、h1、p、ul、ol、small、strong、div、span、kbd、video、audio、svg</h4><ul><li>基本上，你知道标签对应单词的意思，就知道这个标签怎么用了（语义化）</li><li>除了 div 和 span，其他标签都有默认样式</li><li>MDN 上有所有标签的文档</li></ul><h4 id="如何查看-MDN-文档"><a href="#如何查看-MDN-文档" class="headerlink" title="如何查看 MDN 文档"></a>如何查看 MDN 文档</h4><p>Google：关键词 + MDN</p><h4 id="HTML-中-b-标签和-strong-标签有什么区别"><a href="#HTML-中-b-标签和-strong-标签有什么区别" class="headerlink" title="HTML 中 b 标签和 strong 标签有什么区别"></a>HTML 中 b 标签和 strong 标签有什么区别</h4><p>b 表示样式上的加粗，strong 是逻辑状态表示内容重要。strong表示语气很强烈含有感情成分</p><h4 id="p-标签的英文全称是什么？"><a href="#p-标签的英文全称是什么？" class="headerlink" title="p 标签的英文全称是什么？"></a>p 标签的英文全称是什么？</h4><p>paragraph</p><h4 id="a-标签的英文全称是什么"><a href="#a-标签的英文全称是什么" class="headerlink" title="a 标签的英文全称是什么"></a>a 标签的英文全称是什么</h4><p>anchor</p><h4 id="什么是空元素"><a href="#什么是空元素" class="headerlink" title="什么是空元素"></a>什么是空元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input/img/meta/link/hr/br/col....</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%A9%BA%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">空元素</a></p><h4 id="HTML5推荐写法"><a href="#HTML5推荐写法" class="headerlink" title="HTML5推荐写法"></a>HTML5推荐写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;-- 更加严格的写法要自闭合 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;-- H5推荐的用法 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="div-span-可以写在head里吗？"><a href="#div-span-可以写在head里吗？" class="headerlink" title="div span 可以写在head里吗？"></a>div span 可以写在head里吗？</h4><p>答案是不可以，但是你写了HTML会自动纠错将你写的div放到body里</p><h4 id="可替换元素"><a href="#可替换元素" class="headerlink" title="可替换元素"></a>可替换元素</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element" target="_blank" rel="noopener">可替换元素</a></p><h4 id="w3cschool-html测试题"><a href="#w3cschool-html测试题" class="headerlink" title="w3cschool html测试题"></a>w3cschool html测试题</h4><p><a href="https://www.w3schools.com/quiztest/quiztest.asp?qtest=HTML" target="_blank" rel="noopener">测试题</a></p><h4 id="HTML究竟要不要管元素是不是块级元素还是内联元素"><a href="#HTML究竟要不要管元素是不是块级元素还是内联元素" class="headerlink" title="HTML究竟要不要管元素是不是块级元素还是内联元素"></a>HTML究竟要不要管元素是不是块级元素还是内联元素</h4><ul><li>HTML是不管块级元素和内联元素的区别的</li><li>HTML只定义这是什么，不管样式</li><li>样式由CSS控制     </li></ul><p>所以写HTML时候一定不要想样式问题 </p><h4 id="写页面千万别自己设计"><a href="#写页面千万别自己设计" class="headerlink" title="写页面千万别自己设计"></a>写页面千万别自己设计</h4><blockquote><p>你可以去 dribbble.com 你可以看到外国优秀设计师的作品</p></blockquote><h4 id="初学HTML时写页面你可能会这样想"><a href="#初学HTML时写页面你可能会这样想" class="headerlink" title="初学HTML时写页面你可能会这样想"></a>初学HTML时写页面你可能会这样想</h4><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note008_01.png" alt="想着上面两个一左一右下面是一个盒子"></p><blockquote><p>实际上这样的布局是很难实现的因为目前<br>CSS只支持横向布局和纵向布局</p></blockquote><p><img src="https://raw.githubusercontent.com/slTrust/note/master/img/note008_02.png" alt="实际应该这样"></p><blockquote><p>实际上应该上面两个左右的盒子外面包一个div当做一个整体</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络_ip_server</title>
      <link href="/2017/10/15/N007_%E7%BD%91%E7%BB%9C_ip_server/"/>
      <url>/2017/10/15/N007_%E7%BD%91%E7%BB%9C_ip_server/</url>
      
        <content type="html"><![CDATA[<h4 id="打电话是如何运作的"><a href="#打电话是如何运作的" class="headerlink" title="打电话是如何运作的"></a>打电话是如何运作的</h4><blockquote><p>1.将你的”音波”变成”电波”–调制器<br>2.电波传递到电话的另一边<br>3.电话那头将你的”电波”变成”音波”–解调器</p></blockquote><h4 id="网络与IP"><a href="#网络与IP" class="headerlink" title="网络与IP"></a>网络与IP</h4><blockquote><p>http（控制书写内容的）协议是建立在TCP（传输协议）和IP（控制连接）协议的基础之上的</p></blockquote><h4 id="TCP-传输控制协议（Transmission-Control-Protocol）"><a href="#TCP-传输控制协议（Transmission-Control-Protocol）" class="headerlink" title="TCP 传输控制协议（Transmission Control Protocol）"></a>TCP 传输控制协议（Transmission Control Protocol）</h4><h4 id="面试要点"><a href="#面试要点" class="headerlink" title="面试要点"></a>面试要点</h4><ol><li><p><a href="https://www.nowcoder.com/questionTerminal/63c8b45c91a544bd8febc1f1ff02e3b5?toCommentId=73766" title="null" target="_blank" rel="noopener">TCP 和 UDP 的区别是什么</a><br>简答：TCP 可靠、面向连接、相对 UDP 较慢；UDP 不可靠，不面向连接、相对 TCP 较快。搞定。</p><ol start="2"><li><a href="https://github.com/jawil/blog/issues/14" title="null" target="_blank" rel="noopener">TCP 的三次握手指的是什么</a><br>简答：每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 客户端：我要连接你了，可以吗</span><br><span class="line">2. 服务端：嗯，我准备好了，连接我吧</span><br><span class="line">3. 客户端：那我连接你咯。</span><br><span class="line">4. 开始后面步骤</span><br></pre></td></tr></table></figure></li></ol><ol><li>上面内容足以应付前端面试中关于 TCP 的考题 :)</li></ol><p>如果你想更了解 TCP 可以看 <a href="http://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html" title="null" target="_blank" rel="noopener">此文</a>，也可以买一本《TCP/IP 详解（卷一）》（共三卷，先只买一卷即可）。</p><p>不过再强调一遍，这不是前端的内容，以后的课程中我也不会再对 TCP 有任何涉及，你只需稍微了解一下 TCP 即可。</p><h2 id="IP-网络协议（英语：Internet-Protocol）"><a href="#IP-网络协议（英语：Internet-Protocol）" class="headerlink" title="IP 网络协议（英语：Internet Protocol）"></a>IP 网络协议（英语：Internet Protocol）</h2><p>只要你在互联网中，那么你就会有一个 IP。通俗上理解，IP 分为「内网 IP」 和「外网 IP」，以下图为例：<br><img src="https://sltrust.github.io/note/img/note007.png" alt="示意图"></p><ul><li>你从电信那里买来带宽，一年一千多。</li><li>电信为你提供 DNS 服务。</li><li>你买了一个路由器，然后用电脑和手机分别连接路由器广播出来的无线 WIFI。</li><li>只要路由器连上电信的服务器，那么路由器就会有一个「外网 IP」，比如「14.17.32.211」就是一个外网 IP。这就是你在互联网中的地址。</li><li>但是如果你重启路由器，那么你很有「可能」被重新分配一个「外网 IP」，也就是说 <strong>你的路由器没有「固定的外网 IP」</strong></li><li>你可以花每年几千块钱租用一个「固定的外网 IP」，但是显然不会这么浪费钱。像腾讯、阿里这样的大公司租用了很多外网 IP，这样才能对我们提供稳定的服务。</li><li>但是有个问题，你的路由器的外网 IP 如果是14.17.32.211，那么你的手机和电脑的 IP 又是什么呢？答案是「内网 IP」</li><li>路由器会在你家里创建一个内网，内网中的设备使用内网 IP，一般来说这个 IP 的格式都是 192.168.xxx.xxx。<ul><li>一般路由会给自己分配一个好记的内网 IP，如 192.168.1.1</li><li>然后路由会给每一个内网中的设备分配一个不同的内网 IP，如电脑是 192.168.1.2，手机是 192.168.1.3，以此类推。</li><li>现在路由器有两个 IP，一个外网 IP（14.17.32.211）和一个内网 IP（192.168.1.1）<ul><li>内网中的设备可以互相访问（比如你可以用电脑或手机进入 <a href="http://192.168.1.1/" title="null" target="_blank" rel="noopener">http://192.168.1.1</a> 来查看你的路由器），但是不能<strong>直接</strong>访问外网，内网设备想要访问外网，就必须经过路由器中转。</li><li>外网中的设备可以互相访问（比如 qq.com 可以把首页发送给你的路由器，你的路由器有外网 IP），但是外网中的设备无法访问你的内网设备（这很好理解，内网是一个封闭的网络，外人进不来，所以实际上 qq.com 无法直接把首页放送给你的电脑和手机）<ul><li>问题来了，那 qq.com 是怎么把首页发送到我的手机上的呢？答案是通过路由器来中转。</li><li>路由器接收到 qq.com 的页面后，把页面发送给你的电脑或手机。路由器知道如何给这些信息<strong>指路</strong>，路由器就是一个指路人，这就是「路由」两个字的来历。</li><li>路，就是「必由之路」中的路。由，就是「必由之路」中的由（由是经过、缘由的意思）。所有的信息都要经过路由器，然后被指向一条它该去的路。</li></ul></li><li>也就是说内网和外网就像两个隔绝的空间，无法互通，唯一的联通点就是路由器（因为路由器既有外网 IP 也有内网 IP），所以路由器有时候也被叫做「网关」，这个「关」是「一夫当关，万夫莫开」的「关」。如果路由器到电信的连接中断了，那么内网中所有的设备也就无法上网了。（这很好理解，相当于唯一一条出去的路断了）</li></ul></li></ul></li><li>除了内网 IP 和外网 IP，还有两个特别特殊的 IP，就是本地 IP：127.0.0.1。本地 IP 永远表示设备自己。不信你可以 ping 127.0.0.1 一下，会发现只需要 0.01 ms 就得到了响应（你 ping qq.com 需要几十毫秒才得到响应）<ul><li>默认情况下，hosts 文件里会有一行<code>127.0.0.1 localhost</code>，意思就是 localhost 指向 127.0.0.1，所以 localhost 也表示设备自己。不信你 ping localhost 试试，会发现实际上是在 ping 127.0.0.1</li></ul></li><li>还有一个特别特殊的 IP：0.0.0.0，它不表示任何设备。这个 IP 不同的地方含义不同，以后我们会用到，用到的时候再说意思。</li></ul><blockquote><p>内网之间可以相互访问<br>外网之间可以相互访问<br>内网和外网不可相互访问<br>内网想要与外网互相访问必须有一个路由器<br>路由器的主要功能就是内容分发<br> 0.0.0.0 不表示任何设备 它是一个不该使用的IP<br>127.0.0.1 表示本机<br>localhost 表示本机</p></blockquote><h5 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h5><p>你想要访问一个设备（前提是你使用的是 TCP 或 UDP 协议。还记得吗，HTTP 就使用了 TCP），只指定 IP 是不够的，还<strong>必须</strong>指定端口（Port）。</p><p>端口其实就是一个编号，并不是一种硬件。</p><p>一个服务器（硬件）不一定只提供一种服务，比如一个服务器既提供 HTTP 服务，又提供 FTP 服务，还提供 SMTP 服务（邮件服务），那么只用一个 IP 是无法告诉服务器你想要使用哪种服务。</p><blockquote><p>所以这里有一个重要的原则：一个端口对应一个服务。</p></blockquote><p>比如</p><ol><li>要提供 HTTP 服务你最好使用 80 端口（能不能使用别的端口？可以，不过不建议你违反约定）</li><li>要提供 HTTPS 服务你最好使用 443 端口（能不能使用别的端口？可以，不过不建议你违反约定）</li><li>要提供 FTP 服务你最好使用 21 端口（能不能使用别的端口？可以，不过不建议你违反约定）</li></ol><h3 id="问题1：我怎么知道应该使用什么端口？"><a href="#问题1：我怎么知道应该使用什么端口？" class="headerlink" title="问题1：我怎么知道应该使用什么端口？"></a>问题1：我怎么知道应该使用什么端口？</h3><p><a href="https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0.E5.88.B01023.E5.8F.B7.E7.AB.AF.E5.8F.A3" title="null" target="_blank" rel="noopener">维基百科</a> 把 0 到 1023 号端口对应的服务都告诉你了，点进去看看吧。</p><h3 id="问题2：一共有多少端口？"><a href="#问题2：一共有多少端口？" class="headerlink" title="问题2：一共有多少端口？"></a>问题2：一共有多少端口？</h3><p>每个机器一共有 65535（2的16次方减1）个端口（这是协议规定的）。不过这些端口的使用由一些规定</p><ol><li>0 到 1023（2的10次方减1）号端口是留给系统使用的，你只有拥有了管理员权限后，才能使用这 1024 个端口。</li><li>其他端口可以给普通用户使用</li><li>如果一个端口正在提供服务，也就是被占用了，那么就不能再使用这个端口。除非你先停掉正在占用这个端口的服务。以后你们会经常遇到这个问题。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面都是 TCP/IP 相关的知识，如果你记不住，就记住下面这句话：</p><blockquote><p>使用 HTTP 协议访问另一个 IP 时，比如同时提供 IP 和端口号，缺一不可。</p></blockquote><p>那么问题来了</p><blockquote><p>我访问<a href="http://qq.com/" target="_blank" rel="noopener">http://qq.com</a>时并没有提供端口号，为什么我依然可以访问</p></blockquote><p>答：因为<strong>浏览器</strong>帮你加了默认端口号 80。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP入门</title>
      <link href="/2017/10/12/N006_HTTP%E5%85%A5%E9%97%A8/"/>
      <url>/2017/10/12/N006_HTTP%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="www（World-Wide-Web）"><a href="#www（World-Wide-Web）" class="headerlink" title="www（World Wide Web）"></a>www（World Wide Web）</h3><blockquote><p>主要有三个概念</p><ul><li>URI 俗称网址</li><li>HTTP 两台电脑之间的传输协议</li><li>HTML 超文本标记语言，用于页面跳转<br>URL的作用是让你访问一个网页，HTTP的作用是让你能下载这个页面，HTML是让你能看懂这个网页。</li></ul></blockquote><h3 id="URI-是什么（统一资源标识符）"><a href="#URI-是什么（统一资源标识符）" class="headerlink" title="URI 是什么（统一资源标识符）"></a>URI 是什么（统一资源标识符）</h3><p>URI分为两种URL（统一资源定位符）和URN（统一资源名称）</p><h4 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h4><blockquote><p>ISBN:9934123123123 书号，这就是一个URN 可以确定一个”唯一的”资源</p></blockquote><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><blockquote><p><a href="https://www.baidu.com/s?wd=hello&amp;rev_spt=1#5" target="_blank" rel="noopener">https://www.baidu.com/s?wd=hello&amp;rev_spt=1#5</a></p></blockquote><ul><li>https代表–协议</li><li><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 代表–域名</li><li>/s代表–路径</li><li>wd=hello&amp;rev_spt=1代表–查询参数</li><li>“#5” 代表–锚点 </li></ul><blockquote><p>.com代表一级(顶级)域名 baidu代表二级域名 www是三级域名</p></blockquote><blockquote><p>但是一般的工程师都会把.com忽略掉,把baidu叫做一级域名 此时要脑补他说的是错的</p></blockquote><h3 id="URL的常见组成"><a href="#URL的常见组成" class="headerlink" title="URL的常见组成"></a>URL的常见组成</h3><h4 id="DNS-域名解析器"><a href="#DNS-域名解析器" class="headerlink" title="DNS 域名解析器"></a>DNS 域名解析器</h4><blockquote><p>命令行里输入 nslookup <a href="http://www.baidu.com就可以看见这个网址对应服务器相关信息" target="_blank" rel="noopener">www.baidu.com就可以看见这个网址对应服务器相关信息</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Server: 192.168.5.1   </span><br><span class="line">这个是我的路由(他去问的电信，电信帮你解析网址对应的ip电信为什么知道你花钱啦)</span><br><span class="line">Address:  192.168.5.1#53</span><br><span class="line"></span><br><span class="line">Name:  www.baidu.com </span><br><span class="line">Address:  119.75.213.61 这个服务器告诉你百度的ip 每个人返回的IP不一样</span><br></pre></td></tr></table></figure><blockquote><p>dns会根据一个域名返回一个ip<br>那我可以不可以指定一个ip（可以）这就是如何绕过dns自己指定一个ip<br>非常时期可以修改host文件(window系统)自己指定google的ip<br>因为电信返回的ip是错的。</p></blockquote><p><img src="https://sltrust.github.io/note/img/note006_1.png" alt="示意图"></p><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p><img src="https://sltrust.github.io/note/img/note006_2.png" alt="示意图"></p><h4 id="curl-命令"><a href="#curl-命令" class="headerlink" title="curl 命令"></a>curl 命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -v -H &quot;hjx:xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br></pre></td></tr></table></figure><ul><li>-s代表不显示进度</li><li>-v代表显示请求和响应</li><li>-H “hjx:xxx” 添加一个请求头</li><li>– ‘<a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a> ‘ 代表要请求的网址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">* Rebuilt URL to: https://www.baidu.com/</span><br><span class="line">*   Trying 119.75.216.20...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">...</span><br><span class="line">*  SSL certificate verify ok.</span><br><span class="line"></span><br><span class="line">&gt; GET / HTTP/1.1    &quot;/&quot;代表根目录 HTTP/1.1代表协议和版本号</span><br><span class="line">&gt; Host: www.baidu.com   就是访问的域名</span><br><span class="line">&gt; User-Agent: curl/7.55.1  我用的什么软件发起的响应</span><br><span class="line">&gt; Accept: */*   我接受你返回给我的任何内容</span><br><span class="line">&gt; hjx:xxx   可以删掉没有任何意义  删除 - H参数就可以</span><br><span class="line">&gt;    </span><br><span class="line"></span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Length: 2443</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Date: Tue, 02 Jan 2018 15:44:59 GMT</span><br><span class="line">&lt; Etag: &quot;588603ec-98b&quot;</span><br><span class="line">&lt; Last-Modified: Mon, 23 Jan 2017 13:23:56 GMT</span><br><span class="line">&lt; Pragma: no-cache</span><br><span class="line">&lt; Server: bfe/1.0.8.18</span><br><span class="line">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host www.baidu.com left intact</span><br></pre></td></tr></table></figure><ul><li>*开头的代表注释</li><li>“&gt;” 代表请求内容</li><li>”&lt;“ 代表响应内容</li></ul><blockquote><p>重新修改请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -s -v -H &quot;hjx:xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p>请求的内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.54.0</span><br><span class="line">Accept: */*</span><br><span class="line">hjx: xxx</span><br></pre></td></tr></table></figure></p><p>继续修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d &quot;1234567890&quot; -s -v -H &quot;hjx: xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.54.0</span><br><span class="line">Accept: */*</span><br><span class="line">hjx: xxx</span><br><span class="line">Content-Length: 10  代表上传数据的字节</span><br><span class="line">Content-Type: application/x-www-form-urlencoded 上传的格式</span><br><span class="line"></span><br><span class="line">1234567890</span><br></pre></td></tr></table></figure><h4 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h4><ul><li>get就是获取内容 </li><li>post就是上传内容<blockquote><p>疑问 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -s -v -H &quot;host:www.qq.com&quot; -- &quot;https://www.baidu.com&quot; 修改访问的域名</span><br><span class="line">相当于你去麦当劳问有没有老北京鸡肉卷</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="请求的格式"><a href="#请求的格式" class="headerlink" title="请求的格式"></a>请求的格式</h3><blockquote></blockquote><ol><li>动词 路径 协议/版本   第一部分路径随便写 一定要以”/“开头</li><li>第二部分 键值对<ul><li>Key1: value1     </li><li>Key2: value2</li><li>Key3: value3</li><li>Content-Type: application/x-www-form-urlencoded</li><li>Host: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>User-Agent: curl/7.54.0</li></ul></li><li>回车     就一个目的区分 第二部分和第四部分 </li><li>要上传的数据</li></ol><h4 id="请求包含的内容"><a href="#请求包含的内容" class="headerlink" title="请求包含的内容"></a>请求包含的内容</h4><ol><li>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）</li><li>第三部分永远都是一个回车（\n）</li><li><p>动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等</p><ul><li>PUT 代表 五行话替换成一行 整体更新</li><li>PATCH 代表 五行话里其中一行替换 一行 局部更新</li><li>DELETE 删除</li></ul></li><li><p>这里的路径包括「查询参数」，但不包括「锚点」</p></li><li>如果你没有写路径，那么路径默认为 /</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式<blockquote><p>x-www-form-urlencoded </p></blockquote></li></ol><ul><li>x 代表没有被写入规范的格式</li><li>www 万维网</li><li>urlencoded 解析中文</li></ul><h4 id="用-Chrome-查看响应"><a href="#用-Chrome-查看响应" class="headerlink" title="用 Chrome 查看响应"></a>用 Chrome 查看响应</h4><ol><li>打开 Network</li><li>输入网址</li><li>选中第一个响应</li><li>查看 Response Headers，点击「view source」，点击「view source」，点击「view source」</li><li>你会看到响应的前两部分</li><li>查看 Response 或者 Preview，你会看到响应的第 4 部分</li></ol><h4 id="http-和https"><a href="#http-和https" class="headerlink" title="http 和https"></a>http 和https</h4><blockquote><p>http是明文传输 就是你的登录密码，别人可以看到不是加密的</p></blockquote><blockquote><p>https 就是 密码这些东西是经过加密的 无法直接看到内容</p></blockquote><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了。</p><p>响应示例<br>上面三个请求示例，前两个请求对应的响应分别为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 2443</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Tue, 10 Oct 2017 09:14:05 GMT</span><br><span class="line">Etag: &quot;5886041d-98b&quot;</span><br><span class="line">Last-Modified: Mon, 23 Jan 2017 13:24:45 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line">Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略了……</span><br><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 17931</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Tue, 10 Oct 2017 09:19:47 GMT</span><br><span class="line">Etag: &quot;54d9749e-460b&quot;</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; 后面太长，省略了……</span><br></pre></td></tr></table></figure></p><p>GET 请求和 POST 请求对应的响应可以一样，也可以不一样<br>响应的第四部分可以很长很长很长<br>响应的格式</p><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 协议/版本号 状态码 状态解释</span><br><span class="line">2. Key1: value1</span><br><span class="line">2. Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text/html </span><br><span class="line">3</span><br><span class="line">4 要下载的内容</span><br></pre></td></tr></table></figure><h4 id="状态码要背，是服务器对浏览器说的话"><a href="#状态码要背，是服务器对浏览器说的话" class="headerlink" title="状态码要背，是服务器对浏览器说的话"></a>状态码要背，是服务器对浏览器说的话</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1xx 不常用</span><br><span class="line">2xx 表示成功  </span><br><span class="line">3xx 表示滚吧</span><br><span class="line">4xx 表示你丫错了</span><br><span class="line">5xx 表示好吧，我错了</span><br><span class="line">200 一般的成功  </span><br><span class="line">204 创建成功 一般post返回204</span><br><span class="line">301 表示你访问的资源已经不在了 迁移到其他域名返还给你新的地址</span><br><span class="line">302 表示你访问的资源只是临时不在了 敏感信息封禁了一段时间</span><br><span class="line">304 表示你访问的内容和上一次一样,返回上一次的内容</span><br><span class="line">404 未找到页面  网址错了</span><br><span class="line">502 服务器挂了</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">状态解释没什么用</span><br><span class="line">第 2 部分中的 Content-Type 标注了第 4 部分的格式</span><br><span class="line">第 2 部分中的 Content-Type 遵循 MIME 规范</span><br><span class="line">用 Chrome 查看响应</span><br><span class="line">打开 Network</span><br><span class="line">输入网址</span><br><span class="line">选中第一个响应</span><br><span class="line">查看 Response Headers，点击「view source」，点击「view source」，点击「view source」</span><br><span class="line">你会看到响应的前两部分</span><br><span class="line">查看 Response 或者 Preview，你会看到响应的第 4 部分</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单脚本的编写</title>
      <link href="/2017/10/11/N005_02%E7%AE%80%E5%8D%95%E8%84%9A%E6%9C%AC%E7%9A%84%E7%BC%96%E5%86%99/"/>
      <url>/2017/10/11/N005_02%E7%AE%80%E5%8D%95%E8%84%9A%E6%9C%AC%E7%9A%84%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="实现如下目标"><a href="#实现如下目标" class="headerlink" title="实现如下目标"></a>实现如下目标</h2><p>如下命令你应该看得懂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">mkdir demo</span><br><span class="line">cd demo</span><br><span class="line">echo &quot;hi&quot; &gt; index.html</span><br><span class="line">cd ~/Desktop</span><br></pre></td></tr></table></figure><p>脚本就是给计算机照着做的。这是我们对「脚本」的一个感性认识。接下来我们写一个脚本。</p><h2 id="写一个脚本"><a href="#写一个脚本" class="headerlink" title="写一个脚本"></a>写一个脚本</h2><ol><li>找个地方新建文件，后缀随意，一般来说脚本的后缀是 .sh。我喜欢把脚本放在 ~/local 目录里。（我知道你没有这个目录，创建这个目录不就行了）<ol><li><code>mkdir ~/local</code></li><li><code>cd ~/local</code></li><li><code>touch demo.txt</code></li></ol></li><li><p>编辑 demo.txt，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir demo</span><br><span class="line">cd demo</span><br><span class="line">mkdir css js</span><br><span class="line">touch index.html css/style.css js/main.js</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>（Windows 用户请跳过这一步）给 demo.sh 添加执行权限</p><p><code>chmod +x demo.txt</code></p></li><li><p>在任意位置执行</p><p><code>sh ~/local/demo.txt</code></p><p>即可运行此脚本</p><ol><li><code>cd ~/Desktop</code></li><li><code>sh ~/local/demo.txt</code></li><li>你会看到当前目录里多出一个 demo 目录，demo 目录里面还有一些文件<br>好了，这个 demo.txt 就是你写出的第一个 Bash 脚本了。</li></ol></li><li><p>将 ~/local 添加到 PATH 里</p><ol><li><p><code>cd ~/local; pwd</code></p><p>得到 local 的绝对路径</p></li><li>创建 ~/.bashrc：<code>touch ~/.bashrc</code></li><li><p>编辑 ~/.bashrc：<code>start ~/.bashrc</code>，在最后一行添加</p><p><code>export PATH=&quot;local的绝对路径:$PATH&quot;</code></p></li><li>source ~/.bashrc</li><li><p>之前你要运行</p><p><code>sh ~/local/demo.txt</code>，现在你只需要运行 demo.txt 就行了（想想为什么，道理显而易见）</p></li></ol></li><li><p>demo.txt 的后缀 .txt 很无聊，删掉它</p><ol><li><code>mv ~/local/demo.txt ~/local/demo</code></li><li><p>现在你只要运行</p><p><code>demo</code></p><p>就能执行该脚本了。</p></li></ol></li></ol><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ol><li>PATH 的作用<br>你每次在 Bash 里面输入一个命令时（比如 ls、cp、demo），Bash 都会去 PATH 列表里面寻找对应的文件，如果找到了就执行。</li><li>使用 type demo 可以看到寻找过程</li><li>使用 which demo 可以看到寻找结果</li><li>文件后缀的作用：毫无作用<br>你以为一个文件以 .exe 结尾就一定可以双击吗？你以为一个文件以 .png 结尾就一定是图片吗？图样图森破！</li></ol><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>demo 脚本只能创建名字为 demo 的目录，太无聊了，我们让目录名是可变的吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir $1</span><br><span class="line">cd $1</span><br><span class="line">mkdir css js</span><br><span class="line">touch index.html css/style.css js/main.js</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>$1 表示你传的第一个参数。</p><blockquote><p>老师你怎么知道 $1 表示第一个参数？</p></blockquote><p>好问题，答案是</p><blockquote><p>我 Google 出来的</p><p><a href="http://lmgtfy.com/?q=bash+first+param" title="null" target="_blank" rel="noopener">http://lmgtfy.com/?q=bash+first+param</a><br>用百度也行</p><p><a href="http://www.baidu-x.com/?q=bash+%E7%AC%AC%E4%B8%80%E4%B8%AA+%E5%8F%82%E6%95%B0" title="null" target="_blank" rel="noopener">http://www.baidu-x.com/?q=bash+%E7%AC%AC%E4%B8%80%E4%B8%AA+%E5%8F%82%E6%95%B0</a></p></blockquote><h2 id="判断目录是否已存在"><a href="#判断目录是否已存在" class="headerlink" title="判断目录是否已存在"></a>判断目录是否已存在</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if [ -d $1 ]; then</span><br><span class="line">  echo &apos;error: dir exists&apos;</span><br><span class="line">  exit</span><br><span class="line">else</span><br><span class="line">  mkdir $1</span><br><span class="line">  cd $1</span><br><span class="line">  mkdir css js</span><br><span class="line">  touch index.html css/style.css js/main.js</span><br><span class="line">  echo &apos;success&apos;</span><br><span class="line">  exit</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>你怎么知道 -d $1 可以判断目录是否存在？</p><p>我 Google 出来的</p><p><a href="http://lmgtfy.com/?q=bash+dir+exists" title="null" target="_blank" rel="noopener">http://lmgtfy.com/?q=bash+dir+exists</a></p></blockquote><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><ul><li><p><code>exit 0</code></p><p>表示没有错误</p></li><li><p><code>exit 1</code></p><p>表示错误代码为 1</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo &amp;&amp; echo &apos;结束&apos;</span><br></pre></td></tr></table></figure><p>只有在 demo 成功时，才会执行</p><p><code>echo &#39;结束&#39;</code></p><h2 id="Node-js-写脚本"><a href="#Node-js-写脚本" class="headerlink" title="Node.js 写脚本"></a>Node.js 写脚本</h2><p>上面我们写的脚本叫做 Bash Script（Bash脚本）。</p><p>JS 的全称叫做 JavaScript（Java脚本），虽然 JS 和 Java 没什么关系，但是 JS 依然是一种脚本。</p><ol><li>我们在 Bash 命令行里输入 Bash 命令，也可以在 Node.js 命令行里输入 JS 命令（<kbd>Ctrl</kbd> + <kbd>D</kbd> 退出）</li><li><p>Bash 脚本能做的事情，JS 脚本也能做。(<code>sh demo.sh</code></p><p>对应</p><p><code>node demo.js</code>）</p></li></ol><h3 id="用-JS-切换目录"><a href="#用-JS-切换目录" class="headerlink" title="用 JS 切换目录"></a>用 JS 切换目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(process.cwd()) // 打印当前目录</span><br><span class="line">// process.chdir(&apos;~/Desktop&apos;); // 这句话不行的，因为 JS 不认识 ~ 目录</span><br><span class="line">process.chdir(&quot;/Users/frank/Desktop&quot;)</span><br><span class="line">console.log(process.cwd()) // 打印当前目录</span><br></pre></td></tr></table></figure><p>console.log 就相当于 echo</p><h3 id="用-JS-脚本创建目录"><a href="#用-JS-脚本创建目录" class="headerlink" title="用 JS 脚本创建目录"></a>用 JS 脚本创建目录</h3><p>Google nodejs create dir</p><p>文档：<a href="https://nodejs.org/api/fs.html#fs_fs_mkdirsync_path_mode" title="null" target="_blank" rel="noopener">https://nodejs.org/api/fs.html#fs_fs_mkdirsync_path_mode</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let fs = require(&quot;fs&quot;)</span><br><span class="line">fs.mkdirSync(&quot;demo&quot;)</span><br></pre></td></tr></table></figure><h3 id="用-JS-脚本创建文件"><a href="#用-JS-脚本创建文件" class="headerlink" title="用 JS 脚本创建文件"></a>用 JS 脚本创建文件</h3><p>Google nodejs create file</p><p>文档：</p><p><a href="https://nodejs.org/api/fs.html#fs_fs_writefilesync_file_data_options" title="null" target="_blank" rel="noopener">https://nodejs.org/api/fs.html#fs_fs_writefilesync_file_data_options</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let fs = require(&apos;fs&apos;)</span><br><span class="line">fs.writeFileSync(&quot;./index.html&quot;, &quot;&quot;)</span><br></pre></td></tr></table></figure><h3 id="用-JS-脚本来重写-demo-sh"><a href="#用-JS-脚本来重写-demo-sh" class="headerlink" title="用 JS 脚本来重写 demo.sh"></a>用 JS 脚本来重写 demo.sh</h3><ol><li><p>创建 ~/local/jsdemo.js，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">var dirName = process.argv[2] // 你传的参数是从第 2 个开始的</span><br><span class="line"></span><br><span class="line">process.chdir(&quot;/Users/frank/Desktop&quot;) // cd ~/Desktop</span><br><span class="line">fs.mkdirSync(&quot;./&quot; + dirName) // mkdir $1</span><br><span class="line">process.chdir(&quot;./&quot; + dirName) // cd $1</span><br><span class="line">fs.mkdirSync(&apos;css&apos;) // mkdir css</span><br><span class="line">fs.mkdirSync(&apos;js&apos;) // mkdir js</span><br><span class="line"></span><br><span class="line">fs.writeFileSync(&quot;./index.html&quot;, &quot;&quot;)</span><br><span class="line">fs.writeFileSync(&quot;css/style.css&quot;, &quot;&quot;)</span><br><span class="line">fs.writeFileSync(&quot;./js/main.js&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">process.exit(0)</span><br></pre></td></tr></table></figure></li><li><p>（Windows 用户跳过这一步）给 jsdemo.js 加上执行权限</p><p><code>chmod +x ~/local/jsdemo.js</code></p></li><li><code>cd ~/Desktop</code></li><li><code>node ~/local/jsdemo.js zzz</code>，就可以看到 zzz 目录创建成功了</li></ol><h3 id="shebang"><a href="#shebang" class="headerlink" title="shebang"></a>shebang</h3><p>我们每次执行 ~/local/jsdemo.js 都要用 node 来执行，能不能做到不加 node 也能执行呢（也就是指定执行环境），可以，在 jsdemo.js 第一行加上这一句即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br></pre></td></tr></table></figure><p>（以下操作在 Windows 上可能失败，失败了就算了）</p><ol><li><p>然后你就可以直接用</p><p><code>~/local/jsdemo.js zzz</code></p><p>了（省得输入 node 了）。</p></li><li><p>如果你已经把 ~/local 加入了 PATH，那么甚至可以直接输入</p><p><code>jsdemo.js zzz</code></p><p>来执行。</p></li><li><p>如果你再把 jsdemo.js 的后缀 .js 去掉，就可以直接</p><p><code>jsdemo zzz</code></p><p>了。</p></li></ol><p>注意，你每次执行前最好删掉 zzz 目录，以免发生冲突。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>脚本</title>
      <link href="/2017/10/11/N005_01_%E8%84%9A%E6%9C%AC/"/>
      <url>/2017/10/11/N005_01_%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="理解脚本"><a href="#理解脚本" class="headerlink" title="理解脚本"></a>理解脚本</h3><p>如果你打开一本 JavaScript 教程，那么很可能在第一章就看到这句话：</p><blockquote><p>JavaScript 是一门动态类型、面向对象的脚本语言。</p></blockquote><p>然而很多工作一年都不清楚这个脚本是什么意思。</p><p>其实脚本原本来自戏剧舞台，比如下面这个脚本：</p><blockquote><p>公馆一室内<br>王妈：（小心翼翼地）小姐，您还是得注意身子，就吃点东西吧。<br>鸡小姐：（把碗砸在地上）不吃，我就是不吃。<br>（王妈下）</p></blockquote><p>脚本主要由人物对话和舞台提示组成。演员和道具组只需要按照脚本说的做即可。</p><p>编程领域的脚本也是类似的，计算机只要照着脚本上说的做即可，比如下面这个脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">mkdir demo</span><br><span class="line">cd demo</span><br><span class="line">echo &quot;hi&quot; &gt; index.html</span><br><span class="line">cd ~/Desktop</span><br></pre></td></tr></table></figure><p>所以说，脚本就是给计算机照着做的。这是我们对「脚本」的一个感性认识。接下来我们写一个脚本。</p><h4 id="自己写一个脚本"><a href="#自己写一个脚本" class="headerlink" title="自己写一个脚本"></a>自己写一个脚本</h4><p>默认你在window下并且安装了gitbash</p><ol><li>第一步</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/local   //切换到用户目录下的 local目录</span><br><span class="line">touch demo.txt   //新建一个txt文件  后续我们会改为.sh文件因为linux里sh后缀打开会认为是执行程序</span><br><span class="line">open demo.txt //window不支持  如果你会vim  可以vi demo.txt 不然你就双击好了</span><br></pre></td></tr></table></figure><ol start="2"><li>打开demo.txt后编辑</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir demo</span><br><span class="line">cd demo</span><br><span class="line">mkdir css js</span><br><span class="line">touch index.html css/style.css js/main.js</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ol start="3"><li>修改后缀为.sh（如果是非window 要添加可执行权限 chmod +x  demo.sh）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv demo.txt demo.sh</span><br></pre></td></tr></table></figure><ol start="4"><li>执行脚本,然后查看对应目录会有一个demo文件夹里面会有js css index.html</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ~/local/demo.sh</span><br></pre></td></tr></table></figure><h4 id="path是什么"><a href="#path是什么" class="headerlink" title="path是什么"></a>path是什么</h4><ul><li>你每次在 Bash 里面输入一个命令时（比如 ls、cp、demo），- Bash 都会去 PATH 列表里面寻找对应的文件，如果找到了就执行。</li><li>使用 type demo 可以看到寻找过程</li><li>使用 which demo 可以看到寻找结果</li><li>文件后缀的作用：毫无作用</li></ul><p>你以为一个文件以 .exe 结尾就一定可以双击吗？你以为一个文件以 .png 结尾就一定是图片吗？图样图森破！</p><h4 id="后续待更新"><a href="#后续待更新" class="headerlink" title="后续待更新"></a>后续待更新</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery_HelloWorld</title>
      <link href="/2017/10/10/JQ001_jQuery_HelloWorld/"/>
      <url>/2017/10/10/JQ001_jQuery_HelloWorld/</url>
      
        <content type="html"><![CDATA[<h3 id="What-is-jQuery"><a href="#What-is-jQuery" class="headerlink" title="What is jQuery?"></a>What is jQuery?</h3><p>jQuery is a fast, small, and feature-rich JavaScript library.</p><h4 id="ready"><a href="#ready" class="headerlink" title="ready()"></a>ready()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line">    //逻辑处理</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>ready() 的作用是等页面的文档（document）中的节点都加载完毕后，再执行后续的代码，因为我们在执行代码的时候，可能会依赖页面的某一个元素，我们要确保这个元素真正的的被加载完毕后才能正确的使用。</p></blockquote><h4 id="原生JS-和-jQ"><a href="#原生JS-和-jQ" class="headerlink" title="原生JS 和 jQ"></a>原生JS 和 jQ</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line">    var p = document.getElementById(&apos;#xxx&apos;);</span><br><span class="line">    p.innerHTML = &apos;hello 我是原生方式操作dom&apos;;</span><br><span class="line">    p.style.color = &apos;red&apos;;</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line">// jquery</span><br><span class="line"></span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">    var $p = $(&apos;#yyy&apos;);</span><br><span class="line">    $p.html(&apos;hello 我是jqery方式操作dom&apos;).css(&apos;color&apos;,&apos;red&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过jQuery方法包装后的对象，是一个类数组对象。它与DOM对象完全不同，唯一相似的是它们都能操作DOM。</p><h4 id="dom对象和-jq对象相互转换"><a href="#dom对象和-jq对象相互转换" class="headerlink" title="dom对象和 jq对象相互转换"></a>dom对象和 jq对象相互转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">// 返回一个类数组对象  包含三个div的jq对象</span><br><span class="line">var $div = $(&apos;div&apos;);</span><br><span class="line">// 转换为原生对象</span><br><span class="line">var oDiv = $div[0]</span><br><span class="line">oDiv.style.color = &apos;red&apos;;</span><br><span class="line"></span><br><span class="line">//也可以使用get(索引) 转换成dom对象</span><br><span class="line">var oDiv2 = $div.get(1);</span><br><span class="line"></span><br><span class="line">... dom对象转 jq对象</span><br><span class="line">//getElementsByTagName()  返回的是一个集合,dom对象数组  三个div</span><br><span class="line">var aDiv = document.getElementsByTagName(&apos;div&apos;);</span><br><span class="line">// 转换jq对象只需要这样</span><br><span class="line">var $div = $(aDiv)</span><br><span class="line">$div.first().css(&apos;background&apos;,&apos;red&apos;);</span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;oDiv&quot;&gt;&lt;/div&gt;</span><br><span class="line">//注意 id是唯一的  如果存在多个相同id的元素 ，则只返回第一个dom元素</span><br><span class="line">$(&apos;#oDiv&apos;)</span><br></pre></td></tr></table></figure><h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">//通过原生方法处理</span><br><span class="line">//样式是可以多选的，所以得到的是一个合集</span><br><span class="line">//需要通过循环给合集中每一个元素修改样式</span><br><span class="line">var aDiv = document.getElementsByClassName(&apos;xxx&apos;);</span><br><span class="line">for (var i = 0; i &lt; aDiv.length; i++) &#123;</span><br><span class="line">    aDiv[i].style.border = &quot;3px solid blue&quot;;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------</span><br><span class="line">//通过jQuery直接传入class</span><br><span class="line">//class选择器可以选择多个元素</span><br><span class="line">$(&quot;.xxx&quot;).css(&quot;border&quot;, &quot;3px solid red&quot;);</span><br><span class="line">//$(&quot;.xxx&quot;).css()方法内部肯定是带了一个隐式的循环处理</span><br></pre></td></tr></table></figure><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;xxx&quot;&gt;&lt;/div&gt;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">//通过原生方法处理</span><br><span class="line">//获取到所有的节点标记名为div的元素</span><br><span class="line">//给每一个div加上蓝色的边框</span><br><span class="line">var aDiv = document.getElementsByTagName(&apos;div&apos;);</span><br><span class="line">for (var i = 0; i &lt; aDiv.length; i++) &#123;</span><br><span class="line">    aDiv[i].style.border = &quot;3px solid blue&quot;;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------</span><br><span class="line">$(&quot;div&quot;).css(&quot;border&quot;, &quot;3px solid red&quot;);</span><br></pre></td></tr></table></figure><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>如果要获取文档中所有的元素，通过document.getElementsByTagName()中传递”*”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var elements1 = document.getElementsByTagName(&apos;*&apos;);</span><br><span class="line">//jquery</span><br><span class="line">var elements2 = $(&quot;*&quot;);</span><br></pre></td></tr></table></figure><h4 id="各种选择器"><a href="#各种选择器" class="headerlink" title="各种选择器"></a>各种选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;parent &gt; child&apos;) //子选择器  直接子集  父子关系  </span><br><span class="line">$(&apos;parent xxx&apos;) //后代选择器  儿子 孙子 曾孙子</span><br><span class="line">$(&apos;prev + next&apos;) //相邻兄弟选择器 选择紧邻在 prev元素后的 next元素</span><br><span class="line">$(&apos;prev ~ siblings&apos;) //匹配prev元素后的  所有siblings元素</span><br><span class="line"></span><br><span class="line">$(&quot;.div:first&quot;)</span><br><span class="line">$(&quot;.div:last&quot;)</span><br><span class="line">$(&quot;.div:even&quot;)</span><br><span class="line">$(&quot;.div:odd&quot;)</span><br><span class="line">$(&quot;.div:eq(2)&quot;)</span><br><span class="line">$(&quot;.div:gt(3)&quot;)</span><br><span class="line">$(&quot;.div:lt(4)&quot;)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">$(&apos;input:enabled&apos;)</span><br><span class="line">$(&apos;input:disabled&apos;)</span><br><span class="line">$(&apos;input:checked&apos;)</span><br><span class="line">$(&apos;option:selected&apos;)</span><br></pre></td></tr></table></figure><h3 id="this选择器"><a href="#this选择器" class="headerlink" title="this选择器"></a>this选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var aaa = &#123;</span><br><span class="line">    name:&quot;almost&quot;,</span><br><span class="line">    getName:function()&#123;</span><br><span class="line">        //this,就是aaa对象</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">aaa.getName(); //almost</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var p1 = document.getElementById(&apos;test1&apos;)</span><br><span class="line">p1.addEventListener(&apos;click&apos;,function()&#123;</span><br><span class="line">    // this === p1</span><br><span class="line">    //直接通过dom的方法改变颜色</span><br><span class="line">    this.style.color = &quot;red&quot;; </span><br><span class="line">&#125;,false);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(&apos;#test2&apos;).click(function()&#123;</span><br><span class="line">    //这里的this 是原生dom对象 需要转换为jquery对象才可以使用</span><br><span class="line">    //通过包装成jQuery对象改变颜色</span><br><span class="line">    $(this).css(&apos;color&apos;,&apos;blue&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="属性与样式"><a href="#属性与样式" class="headerlink" title="属性与样式"></a>属性与样式</h3><p>设置属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//找到第一个input，通过attr设置属性value的值</span><br><span class="line">$(&apos;input&apos;).attr(&apos;value&apos;,&apos;001&apos;)</span><br></pre></td></tr></table></figure><p>获取属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;input&apos;).attr(&apos;value&apos;)</span><br></pre></td></tr></table></figure><p>通过function设置属性值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;input&apos;).attr(&apos;value&apos;,function(i, val)&#123;</span><br><span class="line">    return &apos;通过function设置&apos; + val</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;input&apos;).removeAttr(&apos;aaa&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git入门</title>
      <link href="/2017/10/05/N004_1_git%E5%85%A5%E9%97%A8/"/>
      <url>/2017/10/05/N004_1_git%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>至少你得先安装git bash 然后才能启动</p></blockquote><h2 id="右键git-bash-here-依次输入下面的命令-不要管为啥-用多了自然而然就知道了"><a href="#右键git-bash-here-依次输入下面的命令-不要管为啥-用多了自然而然就知道了" class="headerlink" title="右键git bash here 依次输入下面的命令  不要管为啥  用多了自然而然就知道了"></a>右键git bash here 依次输入下面的命令  不要管为啥  用多了自然而然就知道了</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name xxx <span class="comment">#方便产品经理找（怼）你</span></span><br><span class="line">git config --global user.email yyy <span class="comment">#方便产品经理找（怼）你</span></span><br><span class="line">git config --global push.default matching <span class="comment"># 原因参考： https://stackoverflow.com/a/21865319/1262580</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span> <span class="comment">#防止文件名变成数字</span></span><br><span class="line">git config --global core.editor <span class="string">"vim"</span> <span class="comment"># 使用vim编辑提交信息</span></span><br></pre></td></tr></table></figure><h3 id="常用的只有几个"><a href="#常用的只有几个" class="headerlink" title="常用的只有几个"></a>常用的只有几个</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">git status -sb 查看文件信息</span><br><span class="line">git add . 添加当前目录里所有文件到暂存区</span><br><span class="line">git commit -m <span class="string">'提交信息'</span>  提交到本地仓库</span><br><span class="line">git pull 建议先执行  同步远程仓库的代码</span><br><span class="line">git push 提交到远程仓库</span><br><span class="line">git <span class="built_in">log</span> </span><br><span class="line">mkdir a  创建目录a</span><br><span class="line">mkdir -p  <span class="string">'a/b/c'</span>目录路径</span><br><span class="line">rm -r 递归删除目录  但是每次都会问你确认删除吗?</span><br><span class="line">rm -rf 强制删除目录  不停的问你确认删除吗？</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span>&gt;newFile.txt 创建文件</span><br><span class="line">rm newFile.txt 删除文件</span><br><span class="line">mv 1.txt 2.txt 重命名==》  把1.txt移动到2.txt</span><br><span class="line"><span class="built_in">pwd</span> 显示当前目录</span><br><span class="line">ls 查看路径  所有以.开头的都不显示</span><br><span class="line">ls -a 路径  显示所有文件及目录</span><br><span class="line">ls -l 路径  显示更多信息  读写权限 </span><br><span class="line">ls -al 路径 显示所有文件及目录  还有读写权限</span><br><span class="line">curl -L http://www.baidu.com &gt; baidu.html   下载文件</span><br></pre></td></tr></table></figure><h3 id="如果你不知道一个命令啥意思-又不想去查-可以安装插件tldr-to-long-don’t-read"><a href="#如果你不知道一个命令啥意思-又不想去查-可以安装插件tldr-to-long-don’t-read" class="headerlink" title="如果你不知道一个命令啥意思 又不想去查 可以安装插件tldr  to long don’t read"></a>如果你不知道一个命令啥意思 又不想去查 可以安装插件tldr  to long don’t read</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm  install -g tldr</span><br><span class="line">tldr cat 会告诉 cat命令的用法</span><br></pre></td></tr></table></figure><h3 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h3><p>1.进入 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a><br>2.如果页面里已经有一些 key，就点「delete」按钮把这些 key 全删掉。如果没有，就往下看<br>3.点击 New SSH key，你需要输入 Title 和 Key，但是你现在没有 key，往下看<br>4.打开 Git Bash<br>5.复制并运行 rm -rf ~/.ssh/* 把现有的 ssh key 都删掉，这句命令行如果你多打一个空格，可能就要重装系统了，建议复制运行。<br>6.运行 ssh-keygen -t rsa -b 4096 -C “你的邮箱”，注意填写你的邮箱！<br>7.按回车三次<br>8.运行 cat ~/.ssh/id_rsa.pub，得到一串东西，完整的复制这串东西<br>9.回到上面第 3 步的页面，在 Title 输入「我的第一个 key」<br>10.在 Key 里粘贴刚刚你你复制的那串东西<br>11.点击 Add SSH key<br>12.回到 Git Bash<br>13.运行 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，你可能会看到这样的提示：</p><pre><code>Are you sure you want to continue connecting (yes/no)?</code></pre><p>输入 yes 回车……问你话你就答，别傻在那<br>14.然后如果你看到 Permission denied (publickey). 就说明你失败了，请回到第 1 步重来，是的，回到第 1 步重来；如果你看到 Hi FrankFang! You’ve successfully authenticated, but GitHub does not provide shell access. 就说明你成功了！<br>好了，终于 TMD 添加了一个无聊的 SSH key，不要问我这个有什么用，因为一会儿你就会用到它，你想了解原理就看这篇 文章</p><blockquote><p>如果要讲清楚，太浪费时间了，我们只是想用用 GitHub 而已。</p></blockquote><p><em>一台电脑只需要一个 SSH key</em>一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题<br><em>如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上</em>如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key</p><h3 id="解释每个命令推荐你去这个"><a href="#解释每个命令推荐你去这个" class="headerlink" title="解释每个命令推荐你去这个"></a>解释每个命令推荐你去这个</h3><blockquote><p><a href="https://explainshell.com/explain?cmd=ls+-lrt" target="_blank" rel="noopener">https://explainshell.com/explain?cmd=ls+-lrt</a></p></blockquote><h3 id="如何上传更新"><a href="#如何上传更新" class="headerlink" title="如何上传更新"></a>如何上传更新</h3><h4 id="你在本地目录有任何改变就按下面的命令"><a href="#你在本地目录有任何改变就按下面的命令" class="headerlink" title="你在本地目录有任何改变就按下面的命令"></a>你在本地目录有任何改变就按下面的命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add 文件路径</span><br><span class="line">git commit -m &apos;提交信息&apos;</span><br><span class="line">git pull 相信我 你一定会忘记这个</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="如果你已经commit了-但是发现这次改的需要跟上次commit合并"><a href="#如果你已经commit了-但是发现这次改的需要跟上次commit合并" class="headerlink" title="如果你已经commit了 但是发现这次改的需要跟上次commit合并"></a>如果你已经commit了 但是发现这次改的需要跟上次commit合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修复之前的commit,和本次修改一并提交</span><br><span class="line">git commit --amend -v .</span><br><span class="line"># 上传到远程仓库</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="其他-中级命令"><a href="#其他-中级命令" class="headerlink" title="其他 中级命令"></a>其他 中级命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xxxxxxx.git 将本地仓库与远程仓库关联</span><br><span class="line">git remote set-url origin git@github.com:xxxxx.git 上一步手抖了，可以用这个命令来挽回</span><br><span class="line">git branch 新建分支</span><br><span class="line">git merge 合并分支</span><br><span class="line">git stash 通灵术</span><br><span class="line">git stash pop 反转通灵术</span><br><span class="line">git revert 后悔了</span><br><span class="line">git reset 另一种后悔了</span><br><span class="line">git diff 查看详细变化</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git分支操作</title>
      <link href="/2017/10/05/N004_4_git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/10/05/N004_4_git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h3><blockquote><p>如果你想更深入，可以看 <a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖学峰</a> 的git教学</p></blockquote><ol><li>查看分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><ol start="2"><li>新建分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch 「分支名称」</span><br><span class="line">#形如</span><br><span class="line">git branch a001</span><br></pre></td></tr></table></figure><ol start="3"><li>切换分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout 「分支名称」</span><br><span class="line">#形如</span><br><span class="line">git checkout a001</span><br></pre></td></tr></table></figure><ol start="4"><li>创建+切换分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 「分支名称」</span><br></pre></td></tr></table></figure><ol start="5"><li>合并某分支到当前分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge 「分支名称」</span><br><span class="line">#形如</span><br><span class="line">git merge a001</span><br></pre></td></tr></table></figure><ol start="6"><li>删除分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 「分支名称」</span><br><span class="line">#形如</span><br><span class="line">git branch -d a001</span><br></pre></td></tr></table></figure><ol start="7"><li>添加本地分支到远程分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin 「分支名称」</span><br></pre></td></tr></table></figure><ol start="8"><li>查看远程分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -ｒ</span><br></pre></td></tr></table></figure><ol start="9"><li>删除远程分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch -r -d origin/「分支名称」  </span><br><span class="line">git push origin :「分支名称」</span><br><span class="line">#形如</span><br><span class="line">git branch -r -d origin/a001</span><br><span class="line">git push origin :a001</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>场景如下</p><blockquote><p>你在github上新建了一个仓库   如 bbb </p></blockquote><blockquote><p>在你本地创建 bbb目录 并切换到 bbb目录</p></blockquote><blockquote><p>执行如下命令，你会初始化一个 README.md文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# bbb&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@github.com:slTrust/bbb.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ol><li>当前分支为master 创建 1.txt 输入 2222 并且提交到远程分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;2222&apos;&gt;1.txt</span><br><span class="line">git add 1.txt</span><br><span class="line">git commit -m &apos;add 1.txt&apos;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ol start="2"><li>新建分支并切换到新建的分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch a001</span><br><span class="line">git checkout a001</span><br></pre></td></tr></table></figure><blockquote><p>运行 git branch 你会发现  「a001」高亮了</p></blockquote><ol start="3"><li>新分支下「a001」新建 2.txt 并提交到本地仓库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;3333&apos;&gt;2.txt</span><br><span class="line">git add 2.txt </span><br><span class="line">git commit -m &apos;add 2.txt&apos;</span><br></pre></td></tr></table></figure><ol start="4"><li>如何把新分支提交到远程仓库并建立远程分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin a001</span><br></pre></td></tr></table></figure><blockquote><p>刷新浏览器你的github上就多了一个 a001 的分支</p></blockquote><ol start="5"><li>删除远程分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#你可以查看远程分支有哪些 然后再进行删除</span><br><span class="line">git branch -ｒ </span><br><span class="line"># 你会看到远程有哪些分支</span><br><span class="line"></span><br><span class="line">#删除远程分支</span><br><span class="line">git branch -r -d origin/a001</span><br><span class="line">git push origin :a001</span><br><span class="line"># 刷新浏览器你会发现你的 a001 分支已经不在了</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>新建分支的时候 git branch a001</li><li>会复制你当前分支(比如我的是master) 的所有内容复制到你的新分支里(a001分支)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo换主题</title>
      <link href="/2017/10/05/N004_3_hexo%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
      <url>/2017/10/05/N004_3_hexo%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="主题合集"><a href="#主题合集" class="headerlink" title="主题合集"></a>主题合集</h2><blockquote><p><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Themes </a></p></blockquote><h3 id="随便找一个主题，进入主题的-GitHub-首页，比如我找的是-Jacman"><a href="#随便找一个主题，进入主题的-GitHub-首页，比如我找的是-Jacman" class="headerlink" title="随便找一个主题，进入主题的 GitHub 首页，比如我找的是  Jacman"></a>随便找一个主题，进入主题的 GitHub 首页，比如我找的是  <a href="https://github.com/wuchong/jacman.git" target="_blank" rel="noopener">Jacman</a></h3><blockquote><p>复制它的 SSH 地址或 HTTPS 地址，假设地址为 <a href="https://github.com/wuchong/jacman.git" target="_blank" rel="noopener">https://github.com/wuchong/jacman.git</a></p></blockquote><blockquote><p>比如我现在在自己的hexo blog根目录  myBlog  </p></blockquote><h3 id="一-进入themes目录"><a href="#一-进入themes目录" class="headerlink" title="一 进入themes目录"></a>一 进入themes目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes</span><br></pre></td></tr></table></figure><h3 id="二-克隆该风格到你本地的主题"><a href="#二-克隆该风格到你本地的主题" class="headerlink" title="二 克隆该风格到你本地的主题"></a>二 克隆该风格到你本地的主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/wuchong/jacman.git</span><br></pre></td></tr></table></figure><h3 id="三-切换回项目目录"><a href="#三-切换回项目目录" class="headerlink" title="三 切换回项目目录"></a>三 切换回项目目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><h3 id="四-将-config-yml-的第-75-行改为-theme-jacman，保存"><a href="#四-将-config-yml-的第-75-行改为-theme-jacman，保存" class="headerlink" title="四 将 _config.yml 的第 75 行改为 theme: jacman，保存"></a>四 将 _config.yml 的第 75 行改为 theme: jacman，保存</h3><h3 id="五-重新初始化你的博客"><a href="#五-重新初始化你的博客" class="headerlink" title="五 重新初始化你的博客"></a>五 重新初始化你的博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="六-部署"><a href="#六-部署" class="headerlink" title="六 部署"></a>六 部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="七-等一分钟，然后刷新你的博客页面"><a href="#七-等一分钟，然后刷新你的博客页面" class="headerlink" title="七 等一分钟，然后刷新你的博客页面"></a>七 等一分钟，然后刷新你的博客页面</h3><p><a href="https://sltrust.github.io/index.html" target="_blank" rel="noopener">jacman这个主题的Blog</a></p><h2 id="上传源代码"><a href="#上传源代码" class="headerlink" title="上传源代码"></a>上传源代码</h2><blockquote><p>注意「你的用户名.github.io」上保存的知识博客，并没有保存 hexo 目录，你需要再创建一个名为 generate_hexoBlog 的空仓库，用来保存 myBlog 里面的代码。</p></blockquote><h3 id="1-在-GitHub-创建-generate-hexoBlog-空仓库"><a href="#1-在-GitHub-创建-generate-hexoBlog-空仓库" class="headerlink" title="1.在 GitHub 创建 generate_hexoBlog 空仓库"></a>1.在 GitHub 创建 generate_hexoBlog 空仓库</h3><blockquote><p>顺序执行第一个段落里的命令 …or create a new repository on the command line</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"# ddd"</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin git@github.com:slTrust/generate_hexoBlog.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="2-命令执行后，记住，千万别用-HTTPS-地址。"><a href="#2-命令执行后，记住，千万别用-HTTPS-地址。" class="headerlink" title="2.命令执行后，记住，千万别用 HTTPS 地址。"></a>2.命令执行后，记住，千万别用 HTTPS 地址。</h3><p>这样备份之后，你就不会因为误删 myBlog 目录而痛哭了。以后每次 hexo deploy 完之后，都要 push 一下代码，以备份。</p><p>这个 generate_hexoBlog 就是用来生成博客的程序，而「你的用户名.github.io」仓库就是你的博客页面。</p><h3 id="3-注意如果你-hexo-generate-会在public里生成文章页面-具体的就是index-html-如果内容为空"><a href="#3-注意如果你-hexo-generate-会在public里生成文章页面-具体的就是index-html-如果内容为空" class="headerlink" title="3.注意如果你 hexo generate 会在public里生成文章页面 具体的就是index.html 如果内容为空"></a>3.注意如果你 hexo generate 会在public里生成文章页面 具体的就是index.html 如果内容为空</h3><blockquote><p>那是因为你设置的主题依赖没安装  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">切换到 themes目录</span><br><span class="line">git <span class="built_in">clone</span> 你想要的风格仓库地址</span><br><span class="line"><span class="built_in">cd</span> ..   </span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo环境搭建</title>
      <link href="/2017/10/05/N004_2_hexo%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%A7%8B/"/>
      <url>/2017/10/05/N004_2_hexo%E5%8D%9A%E5%AE%A2%E5%88%9D%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>Welcome to  <a href="https://sltrust.github.io/index.html" target="_blank" rel="noopener">My First Hexo Blog</a>! </p><h2 id="hexo环境搭建"><a href="#hexo环境搭建" class="headerlink" title="hexo环境搭建"></a>hexo环境搭建</h2><p>前置条件</p><ol><li>请先确保你有node  一路next 不要手残把默认选中的add to path取消</li><li>请先确保你有 git bash 否则没有往下看的必要了</li></ol><h2 id="在-GitHub-上新建一个空仓库-repo"><a href="#在-GitHub-上新建一个空仓库-repo" class="headerlink" title="在 GitHub 上新建一个空仓库 repo"></a>在 GitHub 上新建一个空仓库 repo</h2><h3 id="仓库名称是你github账户名-比如我的是slTrust-那么你新建的仓库名就会是这个格式-slTrust-github-io"><a href="#仓库名称是你github账户名-比如我的是slTrust-那么你新建的仓库名就会是这个格式-slTrust-github-io" class="headerlink" title="仓库名称是你github账户名 比如我的是slTrust 那么你新建的仓库名就会是这个格式 slTrust.github.io"></a>仓库名称是你github账户名 比如我的是slTrust 那么你新建的仓库名就会是这个格式 slTrust.github.io</h3><h3 id="安装-Hexo-命令行工具"><a href="#安装-Hexo-命令行工具" class="headerlink" title="安装 Hexo 命令行工具"></a>安装 Hexo 命令行工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化你的博客比如-myBlog"><a href="#初始化你的博客比如-myBlog" class="headerlink" title="初始化你的博客比如 myBlog"></a>初始化你的博客比如 myBlog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init myBlog</span><br></pre></td></tr></table></figure><h3 id="进入你的博客目录"><a href="#进入你的博客目录" class="headerlink" title="进入你的博客目录"></a>进入你的博客目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span>  myBlog</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i</span><br></pre></td></tr></table></figure><h3 id="新建第一个博客-firstBlog"><a href="#新建第一个博客-firstBlog" class="headerlink" title="新建第一个博客 firstBlog"></a>新建第一个博客 firstBlog</h3><p>这样会出现一个 .md文件 在 source/_posts目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new  firstBlog</span><br></pre></td></tr></table></figure><h3 id="编辑这个文件-注意是markdown语法"><a href="#编辑这个文件-注意是markdown语法" class="headerlink" title="编辑这个文件,注意是markdown语法"></a>编辑这个文件,注意是markdown语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ start <span class="built_in">source</span>/_posts/firstBlog.md</span><br></pre></td></tr></table></figure><h3 id="start-config-yml，编辑网站配置"><a href="#start-config-yml，编辑网站配置" class="headerlink" title="start _config.yml，编辑网站配置"></a>start _config.yml，编辑网站配置</h3><ul><li>把第 6 行的 title 改成你想要的名字</li><li>把第 9 行的 author 就是作者</li><li>把最后一行的 type 改成 git</li><li>在最后一行，与 type 平齐，加上一行 repo: 仓库地址 如 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:slTrust/slTrust.github.io.git  <blockquote><p>注意这个配置的 repo参数 仓库名是  你新建的空仓库 一定一定一定是你账号名的格式 slTrust.github.io<br>这样你的 repo 参数就可以设置为这个 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:slTrust/slTrust.github.io.git </p></blockquote></li></ul><p><img src="https://raw.githubusercontent.com/slTrust/note/master/hexo/blog0_001.png" alt="step"></p><p><img src="https://raw.githubusercontent.com/slTrust/note/master/hexo/blog0_002.png" alt="step"></p><h3 id="安装-git-部署插件"><a href="#安装-git-部署插件" class="headerlink" title="安装 git 部署插件"></a>安装 git 部署插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  hexo deploy</span><br></pre></td></tr></table></figure><h3 id="进入你的github仓库"><a href="#进入你的github仓库" class="headerlink" title="进入你的github仓库"></a>进入你的github仓库</h3><p>注意注意 你刚刚新建的仓库名  一定是这个格式  你的github用户名.github.io  如 我的是 slTrust.github.io<br><a href="https://sltrust.github.io/index.html" target="_blank" rel="noopener">预览地址</a>! </p><h2 id="如何创建博客"><a href="#如何创建博客" class="headerlink" title="如何创建博客"></a>如何创建博客</h2><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  hexo new <span class="string">'test002'</span></span><br></pre></td></tr></table></figure><h3 id="编辑你的博客-复制显示的路径，使用-start-路径-来编辑它"><a href="#编辑你的博客-复制显示的路径，使用-start-路径-来编辑它" class="headerlink" title="编辑你的博客 复制显示的路径，使用 start 路径 来编辑它"></a>编辑你的博客 复制显示的路径，使用 start 路径 来编辑它</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  start <span class="string">'source/_posts/test002.md'</span></span><br></pre></td></tr></table></figure><h3 id="重新初始化你的博客"><a href="#重新初始化你的博客" class="headerlink" title="重新初始化你的博客"></a>重新初始化你的博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>命令行基础</title>
      <link href="/2017/09/25/N004_0_%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/09/25/N004_0_%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>###　为什么学命令行</p><ol><li>这关系到一个程序员的初始</li><li>现代的前端工具都没有提供图形界面、只有命令行界面、从使用角度、前端必须学会命令行</li></ol><ul><li>Gulp/Webpack/SASS/Node.js/Vue/React/Angular</li><li>这么多工具你不学咋混啊</li></ul><h4 id="基本概述-注意请使用gitbash的命令窗口"><a href="#基本概述-注意请使用gitbash的命令窗口" class="headerlink" title="基本概述(注意请使用gitbash的命令窗口)"></a>基本概述(注意请使用gitbash的命令窗口)</h4><ol><li>文件与目录(文件夹)</li><li>~ / . .. $的意思</li></ol><blockquote><p>~ 代表用户目录(linux/unix是没有盘符的概念的)</p></blockquote><p>windows前提安装了gitbash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~   //切换到用户目录</span><br><span class="line">pwd    //输出当前路径 ==&gt;  /c/Users/hjx</span><br></pre></td></tr></table></figure></p><blockquote><p>/ 代表硬盘(没有c d e f盘)</p></blockquote><blockquote><p>. 代表当前目录</p></blockquote><blockquote><p>.. 代表上一层目录</p></blockquote><blockquote><p>$ 代表没有实际意义只是提示你可以输入命令了</p></blockquote><h4 id="命令行难吗？"><a href="#命令行难吗？" class="headerlink" title="命令行难吗？"></a>命令行难吗？</h4><p>实际上命令行简单，你觉得难是因为你在命令行上待的时间还不足24小时，而你在window上待的时间超过了10年，简单你学了那么多年？</p><h4 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h4><p>首先背单词：</p><ul><li>英文    翻译</li><li>directory    目录、文件夹</li><li>file    文件</li><li>make    新建</li><li>remove    删除</li><li>move    移动</li><li>copy    复制</li><li>list    罗列</li><li>link    链接</li><li>find    查找</li><li>echo    发出回音、重复</li><li>touch    触摸</li><li>change    改变</li></ul><p>背下来了吗？每个单词都很短，应该不难背。好的，你基本已经学会命令行了。接下来我们学习这些单词的缩写</p><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><table><thead><tr><th>命令</th><th>全写</th><th>缩写</th></tr></thead><tbody><tr><td>创建目录</td><td>make directory</td><td>mkdir</td></tr><tr><td>删除</td><td>remove</td><td>rm</td></tr><tr><td>移动 / 重命名</td><td>move</td><td>mv</td></tr><tr><td>复制</td><td>copy</td><td>cp</td></tr><tr><td>罗列</td><td>list</td><td>ls</td></tr><tr><td>改变目录</td><td>change directory</td><td>cd</td></tr></tbody></table><p>缩写规则就是：删掉元音字幕（A E I O U），保留前 2 到 3 个辅音字母</p><p>好了，你已经学会 50% 了，接下来我们来试试。</p><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><ol><li>cd ~/Desktop 进入桌面</li><li>mkdir demo-1 创建目录，这时你可以切到桌面，看到 demo-1 目录</li><li>rm -rf demo-1 删除目录</li><li>touch 1.txt 创建文件，如果你发现文件后缀不见了，请让该死的 Windows 显示文件后缀</li><li>mv 1.txt 2.txt 这样我们就把 1.txt 移到 2.txt 了，也就是重命名</li></ol><h4 id="常见的自带命令"><a href="#常见的自带命令" class="headerlink" title="常见的自带命令"></a>常见的自带命令</h4><ul><li>操作    命令</li><li>进入目录    cd</li><li>显示当前目录    pwd</li><li>创建目录    mkdir 目录名</li><li>创建目录    mkdir -p 目录路径</li><li>我是谁    whoami</li></ul><hr><ul><li>查看路径    ls 路径</li><li>查看路径    ls -a 路径 包含隐藏的一些文件</li><li>查看路径    ls -l 路径 </li><li>查看路径    ls -al 路径</li></ul><hr><ul><li>创建文件    echo ‘1’ &gt; 文件路径</li><li>强制创建文件    echo ‘1’ &gt;! 文件路径</li><li>追加文件内容    echo ‘1’ &gt;&gt; 文件路径</li><li>创建文件    touch 文件名</li><li>改变文件更新时间    touch 文件名</li></ul><hr><ul><li>复制文件    cp 源路径 目标路径</li><li>复制目录    cp -r 源路径 目标路径 递归的复制一个目录和其内容</li></ul><hr><ul><li>移动节点    mv 源路径 目标路径</li></ul><hr><ul><li>删除文件    rm 文件路径</li><li>强制删除文件    rm -f 文件路径</li><li>删除目录    rm -r 目录路径 递归的删除目录每次删都问你一次</li><li>强制删除目录    rm -rf 目录路径 递归的删除目录而且不提示</li></ul><hr><ul><li>查看目录结构    tree</li><li>建立软链接    ln -s 真实文件 链接</li></ul><hr><ul><li>下载文件    curl -L <a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a> &gt; baidu.html</li><li>拷贝网页    wget -p -H -e robots=off <a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></li><li>磁盘占用    df -kh</li><li>当前目录大小    du -sh .</li><li>各文件大小    du -h</li></ul><p>如何学习我目前还没有掌握的命令？</p><p>Google: Linux 查看文件内容</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>↑↓ 上一命令 / 下一命令</li><li>!! 上一命令占位符</li><li>Tab 自动补全路径</li><li>Alt+. 上一命令的最后一个参数</li><li>&amp;&amp; 前面的执行成功了，再执行后面的</li><li>|| 前面的执行失败了，就执行后面的</li><li>; 前面执行完了，不管成功失败，就执行后面的</li><li>“&gt;” 重定向</li><li>| 管道<h3 id="命令行技巧"><a href="#命令行技巧" class="headerlink" title="命令行技巧"></a>命令行技巧</h3>~/.bashrc 文件的功能很强大。</li></ul><h3 id="自动运行"><a href="#自动运行" class="headerlink" title="自动运行"></a>自动运行</h3><ol><li>首先 touch ~/.bashrc 创建一下这个文件</li><li>start ~/.bashrc 选用编辑器编辑这个文件，内容为 echo ‘Hi’</li><li>你也可以用命令行编辑文件 echo “echo ‘hi’” &gt;&gt; ~/.bashrc</li><li>关闭退出 Git Bash，然后打开 Git Bash，是不是看到了 Hi，这说明每次进入 Git Bash，就会优先运行 ~/.bashrc 里面的命令</li><li>重新编辑 ~/.bashrc，内容改为 cd ~/Desktop，重启 Git Bash，有没有发现默认就进入桌面目录了？<br>你可以用 ~/.bashrc 在进入 Git Bash 前执行任何命令，十分方便。</li></ol><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>1.在 ~/.bashrc 里新增一行 alias f=”echo ‘frank is awesome’”，等于号两边不能有空格，你最好一个字都不要错。<br>2.运行 source ~/.bashrc，作用是执行 ~/.bashrc<br>3.运行 f，就会看到 frank is awesome<br>4.也就是说，现在 f 就是 echo ‘frank is awesome’ 的缩写了，利用这个技巧，我们可以把很多常见的命令缩写一下，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alias la=&apos;ls -a&apos;</span><br><span class="line">alias ll=&apos;ls -l&apos;</span><br><span class="line">alias gst=&apos;git status -sb&apos;</span><br><span class="line">alias ga=&apos;git add&apos;</span><br><span class="line">alias ga.=&apos;git add .&apos;</span><br><span class="line">alias gc=&apos;git commit&apos;</span><br><span class="line">alias gc.=&apos;git commit .&apos;</span><br></pre></td></tr></table></figure></p><p>保存退出，然后运行 source ~/.bashrc<br>这样一来，你的 Git 操作就会简单很多：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ga 1.txt</span><br><span class="line">ga .</span><br><span class="line">gc 1.txt</span><br><span class="line">gc.</span><br><span class="line">gst</span><br></pre></td></tr></table></figure></p><p>接下来说两个目前用不到的技巧。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>还可以在 ~/.bashrc 里面设置一些环境变量，比如你可以在 ~/.bashrc 里面添加一行</p><p>export SASS_BINARY_SITE=”<a href="https://npm.taobao.org/mirrors/node-sass&quot;" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node-sass&quot;</a><br>那么以后你安装 node-sass 的时候就不会因为被墙而报错了。以后会用到的，现在先说一下。</p><h3 id="设置-PATH"><a href="#设置-PATH" class="headerlink" title="设置 PATH"></a>设置 PATH</h3><p>export PATH=”目录的绝对路径:$PATH”<br>可以在 PATH 里添加一个目录，不要运行，等用到的时候再来查。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机是如何存数据的</title>
      <link href="/2017/09/22/N002_%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84/"/>
      <url>/2017/09/22/N002_%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h3 id="请看最后的结论"><a href="#请看最后的结论" class="headerlink" title="请看最后的结论"></a>请看最后的结论</h3><h2 id="第一步（内存）如何存0和1"><a href="#第一步（内存）如何存0和1" class="headerlink" title="第一步（内存）如何存0和1"></a>第一步（内存）如何存0和1</h2><p>实际就是晶体管里的电信号</p><ul><li>1就充电</li><li>0就不充电</li></ul><p>读取</p><ul><li>电量大于50%就是1</li><li>电量小于50%就是0</li></ul><h2 id="第二步-如何存数字"><a href="#第二步-如何存数字" class="headerlink" title="第二步 如何存数字"></a>第二步 如何存数字</h2><blockquote><p>十进制转二进制  （十进制）37 ==》（二进制）100101</p></blockquote><p>计算机只存0和1</p><h2 id="第三步-存字符"><a href="#第三步-存字符" class="headerlink" title="第三步 存字符"></a>第三步 存字符</h2><p>ASCⅡ码</p><ul><li>如果存 a 那么a对应的asc码就是 97 </li><li>而97对应的二进制就是0110 0001</li></ul><h2 id="第四步-存中文"><a href="#第四步-存中文" class="headerlink" title="第四步 存中文"></a>第四步 存中文</h2><p>GB2312 国标码 共收录6763个常用字</p><p>后来为了存储生僻字、繁体字、日语、韩语等微软推出了GBK</p><h2 id="第五步-如何存储所有字符"><a href="#第五步-如何存储所有字符" class="headerlink" title="第五步 如何存储所有字符"></a>第五步 如何存储所有字符</h2><p>Unicode 将全球所有字符编号</p><p>2016年6月总共存有12万个字符</p><h2 id="第六步-如何将Unicode存到计算机里"><a href="#第六步-如何将Unicode存到计算机里" class="headerlink" title="第六步 如何将Unicode存到计算机里"></a>第六步 如何将Unicode存到计算机里</h2><p>变长存储有可能一个字节有可能三个字节</p><blockquote><p>低性价比</p></blockquote><p>a  &gt; 00000000 00000000 00000000 01100001 = 0061<br>你 &gt; 00000000 00000000 01001111 01100000 = 4F60</p><blockquote><p>高性价比 UTF-8</p></blockquote><p>a &gt; 01100001<br>你 &gt; 11100100 10111101 10100000</p><blockquote><h3 id="utf-8的原理"><a href="#utf-8的原理" class="headerlink" title="utf-8的原理"></a>utf-8的原理</h3></blockquote><ol><li><p>if 你表示的数字小于七位</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0XXX XXXX</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>else if 你的数字大于七位加4位 也就是11位,前面110代表占用两字节的空间</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">110XXXXX 10XXXXXX</span><br></pre></td></tr></table></figure></li><li><p>else if 表示两个字节，前面1110代表占用三字节的空间</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1110XXXX 10XXXXXX 10XXXXXX  所有X位加一起16位 两个字节就可以表示所有的汉字</span><br></pre></td></tr></table></figure></li><li><p>else 11110代表占用四个字节的空间</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11110XXX 10XXXXXX 10XXXXXX 10XXXXXX</span><br></pre></td></tr></table></figure></li></ol><p>规律就是你由几个字节组成 最左面的冗余信息就是用来表示你占用几个字节</p><p>你实际占用两个字节就是11,三个字节就是111 四个字节就是1111</p><h3 id="UTF-8是一种编码方式，不是字符集"><a href="#UTF-8是一种编码方式，不是字符集" class="headerlink" title="UTF-8是一种编码方式，不是字符集"></a>UTF-8是一种编码方式，不是字符集</h3><h3 id="现实问题（这些字符集的发明时间）"><a href="#现实问题（这些字符集的发明时间）" class="headerlink" title="现实问题（这些字符集的发明时间）"></a>现实问题（这些字符集的发明时间）</h3><ul><li>1981年 GB2312</li><li>1993年 GB13000  unicode 1.1</li><li>1993 -1999 GBK</li><li>1995年 js诞生的时候 unicode3还没有出来</li><li>1999年 Unicode3.0 </li><li>2000年 GB18030 兼容GBK并扩展</li></ul><p>现在开发网站一定要使用UTF-8</p><h3 id="现实问题2"><a href="#现实问题2" class="headerlink" title="现实问题2"></a>现实问题2</h3><p>JS使用了Unicode字符集，但是没有使用UTF-8</p><blockquote><p>JS用的UCS-2编码(已经没人使用的编码)最多表示2个字节的汉字<br>因为1995年UTF-16还没有发明，JS也不想使用UTF-32</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;\u4f60&apos;  //代表 &apos;你&apos; 这是unicode</span><br></pre></td></tr></table></figure><p>后果</p><blockquote><p>ES5无法表示\uFFFF之后的字符,也就是大于2个字节的（如\u1D306）某些情况会出bug </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;\u1D306&apos;  </span><br><span class="line">str.length ?  //2</span><br><span class="line">//js会把 1D306看成一个字符 6是另一个字符</span><br></pre></td></tr></table></figure><h3 id="但是HTML支持utf-8"><a href="#但是HTML支持utf-8" class="headerlink" title="但是HTML支持utf-8"></a>但是HTML支持utf-8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=&quot;xxx&quot;&gt;&amp;#x1d306;&lt;/h1&gt; </span><br><span class="line"></span><br><span class="line">xxx.innerText.length = ?  //2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什么是前端</title>
      <link href="/2017/09/20/N001_%E4%BB%80%E4%B9%88%E6%98%AF%E5%89%8D%E7%AB%AF/"/>
      <url>/2017/09/20/N001_%E4%BB%80%E4%B9%88%E6%98%AF%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="前端行业介绍"><a href="#前端行业介绍" class="headerlink" title="前端行业介绍"></a>前端行业介绍</h4><blockquote><p>简单来说就是你看到的无处不在的网页<br>如果一个公司没有一个资深的前端坐镇，他都不能自称为”互联网公司”<br>互联网+ 的时代 微博、团购、P2P金融、微商、在线培训都是借助前端在传播<br>还有一个原因 就是从乔布斯开始一个词被提到了风口浪尖就是 “用户体验”</p></blockquote><h4 id="对用户体验的提升"><a href="#对用户体验的提升" class="headerlink" title="对用户体验的提升"></a>对用户体验的提升</h4><ul><li>以前你打开网页可能提示你浏览器等级太低建议安装更高版本</li><li>比如中国银行只能用ie打开 而招商银行能用chrome打开 这样我就首选用招商银行</li><li>你用过好的体验再去体验差的你自己就接受不了</li></ul><h4 id="如何自学前端"><a href="#如何自学前端" class="headerlink" title="如何自学前端"></a>如何自学前端</h4><p><img src="https://sltrust.github.io/note/img/note001_1.png" alt="现在要学的"></p><h4 id="自学前端难度如何？"><a href="#自学前端难度如何？" class="headerlink" title="自学前端难度如何？"></a>自学前端难度如何？</h4><blockquote><p>由于知识点过多你会出现不知道学习什么，哪里要学哪里不学的困境<br>知乎上的论调就是  给你一排的链接 并说你照着学就能会啦！（神经病和天才才能学会）</p></blockquote><h4 id="在学习一个技术时是要至少抱一次大腿的"><a href="#在学习一个技术时是要至少抱一次大腿的" class="headerlink" title="在学习一个技术时是要至少抱一次大腿的"></a>在学习一个技术时是要至少抱一次大腿的</h4><blockquote><p>说自学成功的肯定是隐藏了他抱大腿的行为<br>找能帮你自学的人</p></blockquote><h4 id="培训最快"><a href="#培训最快" class="headerlink" title="培训最快"></a>培训最快</h4><blockquote><p>节省时间精力：甄别知识，学80%公司里需要的<br>提高成功几率：学习圈子<br>避免误入歧途：错误知识、不良习惯</p></blockquote><h4 id="如何成为很厉害的程序员"><a href="#如何成为很厉害的程序员" class="headerlink" title="如何成为很厉害的程序员"></a>如何成为很厉害的程序员</h4><blockquote><p>那些NB的程序员一开始就很厉害，所以他以后也很厉害</p></blockquote><h4 id="记忆曲线"><a href="#记忆曲线" class="headerlink" title="记忆曲线"></a>记忆曲线</h4><p><img src="https://sltrust.github.io/note/img/note001_2.png" alt="现在要学的"></p><h4 id="如何巩固"><a href="#如何巩固" class="headerlink" title="如何巩固"></a>如何巩固</h4><p>冷笑话</p><blockquote><p>以前有一个概率学家，他为人特别谨慎，然后做什么事就特别小心安全，有一次他要参加演讲去坐飞机，他特别怕发生劫机事件（因为刚经历了911）于是他自己带了个炸药上飞机！</p></blockquote><blockquote><p>他为什么自己带炸药呢？因为他调查了飞机的事故记录，规律就是从来没有一架飞机上出现两拨劫匪！我自己带不就好了吗</p></blockquote><ul><li>很少有人能学习一次知识就记住它</li><li>为什么不直接进入第二次呢？</li><li>我先预习一下</li><li>别人指导的时候就是第二次</li><li>成功率会提高</li></ul><h4 id="学习顺序"><a href="#学习顺序" class="headerlink" title="学习顺序"></a>学习顺序</h4><p><img src="https://sltrust.github.io/note/img/note001_3.png" alt="更好的学"></p><p><img src="https://sltrust.github.io/note/img/note001_4.png" alt="推荐"></p><h4 id="名人案例"><a href="#名人案例" class="headerlink" title="名人案例"></a>名人案例</h4><blockquote><p>阮一峰：经济学博士有很多文章，涉及领域广泛，英文特别好</p></blockquote><blockquote><p>我很崇拜他，因为他敢于挑战自己从一个经济学的老师变成一个前端这已经很颠覆了。</p></blockquote><blockquote><p>他为什么当前端：他整理了10年来的博客，发现自己毫无建树，所以他想变一变，然后阿里的前端老大给他P7（50-80年薪）其实这对他没有吸引力，而且从老师到前端社会地位也降低了。来之前他去了沙哈拉沙漠，因为他想去一下从来没有去过的地方，因为他现在要去一个从来没去过的领域，他希望在沙漠里遇到一些没有看见过的东西，但是他去了之后发现很失望的。为什么？因为他以为去了沙漠以后就会特别渴，生活条件特别差，但是并不是这样的，他发现沙漠已经被商业化了，有水有旅馆有人给你拍照，然后发现“这根本不是我想要去的地方，而是我一直在的地方–现代社会”所以他就有一种更强烈的愿望—去我没有去过的地方！</p></blockquote><h4 id="如果你在一个地方待很久，然后你不是特别满意，那你最好换一个地方"><a href="#如果你在一个地方待很久，然后你不是特别满意，那你最好换一个地方" class="headerlink" title="如果你在一个地方待很久，然后你不是特别满意，那你最好换一个地方"></a>如果你在一个地方待很久，然后你不是特别满意，那你最好换一个地方</h4><h4 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h4><ul><li>搜google 不要搜百度(有广告)</li><li>搜MDN 不要搜w3school中文网</li></ul><p><img src="https://sltrust.github.io/note/img/note001_5.png" alt="推荐"></p><h4 id="如果是-HTML"><a href="#如果是-HTML" class="headerlink" title="如果是 HTML"></a>如果是 HTML</h4><p>你就搜MDN</p><h4 id="如果是-CSS"><a href="#如果是-CSS" class="headerlink" title="如果是 CSS"></a>如果是 CSS</h4><p>你就 CSS Tricks</p><h4 id="如果是-JS"><a href="#如果是-JS" class="headerlink" title="如果是 JS"></a>如果是 JS</h4><p>你就 MDN 或者 阮一峰的js教程 如果买书只推荐高程，如果你这本都看不完，买其他的也没用。</p><p><img src="https://sltrust.github.io/note/img/note001_6.png" alt="推荐"></p><blockquote><p>MDN全称是Mozilla Developer Network</p></blockquote><h4 id="知识分类"><a href="#知识分类" class="headerlink" title="知识分类"></a>知识分类</h4><ol><li>工具使用知识：把你能看到的按钮全点一次</li><li>概念知识：一些高级特性都建立在概念之上如闭包，回调函数(诸如物理公式，化学方程式)</li><li>工程实践知识：代码写得越多越好(img src属性写错成scr卡了一天/浏览器缓存没有清除卡了一天)</li><li>经验：（有一个工厂机器出了毛病，新来的工人都搞不定，然后就找老师傅来，老师傅来了看了一眼运作效果就说把某一个地方螺丝拧一下就好了，他为社么知道呢？他自己都不知道为什么知道，因为平时被坑多了，以至于看到有问题就知道为什么错了。人机合一，我们是人码合一）</li></ol><p>我们要做什么平时要总结，这就是经验。</p><h4 id="滚雪球原理"><a href="#滚雪球原理" class="headerlink" title="滚雪球原理"></a>滚雪球原理</h4><blockquote><p>fake it until you make it </p></blockquote><p>如果你想变成一个很厉害的人就一直假装你是一个很厉害的人</p><p>比如你看学霸平时都是在看书就连听歌都是为了学英语，那就以他的行为要求自己。</p><blockquote><p>学习的过程看一遍是不够的,做一遍也是不够的</p></blockquote><p>你至少看两遍</p><blockquote><p>你说看一遍高程就全会了的可能性？</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6_Promise(七)</title>
      <link href="/2017/03/15/ES6_007_ES6_Promise/"/>
      <url>/2017/03/15/ES6_007_ES6_Promise/</url>
      
        <content type="html"><![CDATA[<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function myAsync(callback)&#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(&apos;执行完成&apos;);</span><br><span class="line">        callback(&apos;data&apos;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myAsync(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-解决了什么痛点"><a href="#Promise-解决了什么痛点" class="headerlink" title="Promise 解决了什么痛点"></a>Promise 解决了什么痛点</h3><blockquote><p>回调地狱   代码如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">myAsync(function(data)&#123;</span><br><span class="line">    //第一个请求成功接收到数据  然后根据数据触发第二次请求</span><br><span class="line">    console.log(&apos;第一个请求完成！&apos;)</span><br><span class="line">    myAsync2(function(data)&#123;</span><br><span class="line">        console.log(&apos;第二个请求完成！&apos;)</span><br><span class="line">        myAsync3(function(data)&#123;</span><br><span class="line">            console.log(&apos;第三个请求完成！&apos;)</span><br><span class="line">             //一直一直的回调  排错是很困难的 代码也恶心</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="我的第一个Promise使用"><a href="#我的第一个Promise使用" class="headerlink" title="我的第一个Promise使用"></a>我的第一个Promise使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let myPromise = new Promise(function(resolve, reject)&#123;</span><br><span class="line">    //当异步代码执行成功时，我们才会调用resolve(...),</span><br><span class="line">    // 当异步代码失败时就会调用reject(...)</span><br><span class="line">    //使用setTimeout(...)来模拟异步代码  实际可以是Ajax请求</span><br><span class="line">    console.log(&apos;异步请求中&apos;);</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        resolve(&quot;成功!&quot;); //2秒后代码执行成功  调用resolve</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myPromise.then(function(successMessage)&#123;</span><br><span class="line">    //successMessage的值是上面调用resolve(...)方法传入的值.</span><br><span class="line">    console.log(&quot;success! &quot; + successMessage);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="解决回调地狱之链式操作"><a href="#解决回调地狱之链式操作" class="headerlink" title="解决回调地狱之链式操作"></a>解决回调地狱之链式操作</h3><blockquote><p>Promise的优势在于:</p><ul><li>可以在then方法中继续写Promise对象并返回，然后继续调用then来进行回调操作。 是不是有种jquery的感觉！</li></ul></blockquote><blockquote><p>链式操作的用法</p></blockquote><ul><li>Promise只是能够简化层层回调的写法，比传递callback的方式简单</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">function myAsync1()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&apos;异步1完成&apos;);</span><br><span class="line">            resolve(&apos;data1&apos;);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line">function myAsync2()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&apos;异步2完成&apos;);</span><br><span class="line">            resolve(&apos;data2&apos;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line">function myAsync3()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&apos;异步3完成&apos;);</span><br><span class="line">            resolve(&apos;data3&apos;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line">//依次的异步操作</span><br><span class="line">myAsync1()</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">        return myAsync2();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">        return myAsync3();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="reject-是什么鬼？"><a href="#reject-是什么鬼？" class="headerlink" title="reject( )是什么鬼？"></a>reject( )是什么鬼？</h3><blockquote><p>就是异步操作通常有两种结果一个是成功一个是失败</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function myAsync()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&apos;异步1完成&apos;);</span><br><span class="line">            var num = Math.random()*100;</span><br><span class="line">            if(num&gt;60)&#123;</span><br><span class="line">                 resolve(&apos;运气不错通过啦！&apos;+num);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                 reject(&apos;太差了，分不够！&apos;+num)</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line">myAsync()</span><br><span class="line">    .then(</span><br><span class="line">        function(data)&#123;</span><br><span class="line">            console.log(&apos;resolved&apos;);</span><br><span class="line">            console.log(data);//成功了  你手气不错！</span><br><span class="line">        &#125;, </span><br><span class="line">        function(reason, data)&#123;</span><br><span class="line">            console.log(&apos;rejected&apos;);</span><br><span class="line">            console.log(reason);//哎呦 挺倒霉啊！  再来一次吧！！</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="catch-你肯定听过-try-…catch…"><a href="#catch-你肯定听过-try-…catch…" class="headerlink" title="catch( ) 你肯定听过 try …catch…"></a>catch( ) 你肯定听过 try …catch…</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function myAsync()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">                //做一些异步操作</span><br><span class="line">                setTimeout(function()&#123;</span><br><span class="line">                    console.log(&apos;异步任务完成&apos;);</span><br><span class="line">                    resolve(&apos;data&apos;);</span><br><span class="line">                &#125;, 1000);</span><br><span class="line">            &#125;);</span><br><span class="line">    return p;    </span><br><span class="line">&#125;</span><br><span class="line">myAsync()</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">        console.log(&apos;resolved&apos;);</span><br><span class="line">        console.log(data);</span><br><span class="line">        console.log(xxxx.xxxx); //此处的xxxx.xxxx未定义  报错</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function(err)&#123;</span><br><span class="line">        console.log(&apos;rejected&apos;);</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="all"><a href="#all" class="headerlink" title="all( )"></a>all( )</h3><blockquote><p>Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Promise</span><br><span class="line">.all([myAsync1(), myAsync2(), myAsync3()])</span><br><span class="line">.then(function(results)&#123;</span><br><span class="line">    console.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>用Promise.all来执行，all接收一个数组参数，里面的值最终都算返回Promise对象。</li><li>这样，三个异步操作是并行执行的，等到它们都执行完后才会进到then里面。</li><li>那么，三个异步操作返回的数据哪里去了呢？</li><li>都在then里面呢，all会把所有异步操作的结果放进一个数组中传给then，就是上面的results。</li></ul><h3 id="race"><a href="#race" class="headerlink" title="race( )"></a>race( )</h3><blockquote><p>all( ) 的效果实际上是 ==&gt;以”执行时间最慢的”为准执行回调</p></blockquote><blockquote><p>race( ) 以最快的为准<br>race的用法与all一样，把上面myAsync3的延时改为0.5秒运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Promise</span><br><span class="line">.race([myAsync1(), myAsync2(), myAsync3()])</span><br><span class="line">.then(function(results)&#123;</span><br><span class="line">    //返回三个异步请求最快的那个</span><br><span class="line">    console.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6速学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6_模块化(六)</title>
      <link href="/2017/03/14/ES6_006_ES6_%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2017/03/14/ES6_006_ES6_%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="ES6自带模块化-但是浏览器还不支持"><a href="#ES6自带模块化-但是浏览器还不支持" class="headerlink" title="ES6自带模块化  但是浏览器还不支持"></a>ES6自带模块化  但是浏览器还不支持</h3><ul><li>使用webpack 前面已有文章总结了，这里就不说了</li><li>还可以使用Google公司的Traceur转码器，也可以将ES6代码转为ES5代码。必须在网页头部加载Traceur库文件。</li></ul><blockquote><p>注意！！注意！！ 要运行在服务器环境  </p></blockquote><blockquote><p>服务器是什么？你不会我没法详细和你说 </p></blockquote><h4 id="两个工具"><a href="#两个工具" class="headerlink" title="两个工具"></a>两个工具</h4><ul><li>wamp 搭建服务器 自行百度</li><li>cnpm install http-server 前提是安装了node 同时设置了淘宝镜像</li><li>然后在你当前目录打开命令行 输入 http-server -c-1<br>在显示的端口号访问就行了  你还要问细节怎么办？<br>那你就回答我 “回”字为什么有四种写法</li></ul><h4 id="新建mod-js"><a href="#新建mod-js" class="headerlink" title="新建mod.js"></a>新建mod.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let a=12;</span><br><span class="line">let b=5;</span><br><span class="line">export default &#123;</span><br><span class="line">    a:a,</span><br><span class="line">    b:b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="index-html文件"><a href="#index-html文件" class="headerlink" title="index.html文件"></a>index.html文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/traceur.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/bin/BrowserSystem.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://google.github.io/traceur-compiler/src/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;module&quot;&gt;</span><br><span class="line">    import mod from &apos;./mod.js&apos;;  </span><br><span class="line">    console.log(mod.a)    // 打印12</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6速学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6_面向对象(五)</title>
      <link href="/2017/03/14/ES6_005_ES6_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/03/14/ES6_005_ES6_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="ES6之前的面向对象使用函数模拟的-并非真正意义上的面向对象"><a href="#ES6之前的面向对象使用函数模拟的-并非真正意义上的面向对象" class="headerlink" title="ES6之前的面向对象使用函数模拟的 并非真正意义上的面向对象"></a>ES6之前的面向对象使用函数模拟的 并非真正意义上的面向对象</h3><blockquote><p> 始终坚信一句话  系统提供的API永远是最好的</p></blockquote><hr><blockquote><p>以前的面向对象<br>各种恶心复杂版本的实现我就不说了<br>我猜你肯定要问？（好奇害死猫）<br>自己看高三第六章</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.showName=function()&#123;</span><br><span class="line">    return this.name;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.showAge=function()&#123;</span><br><span class="line">    return this.age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//继承</span><br><span class="line">function Worker(name,age,job)&#123;</span><br><span class="line">    Person.apply(this,arguments);</span><br><span class="line">&#125;</span><br><span class="line">Worker.prototype=new Person();</span><br><span class="line">Worker.prototype.constructor=Worker;</span><br><span class="line"></span><br><span class="line">var p1=new Person(&apos;aaa&apos;,30);</span><br><span class="line">var w1=new Worker(&apos;bbb&apos;,10,&apos;上学&apos;);</span><br><span class="line"></span><br><span class="line">//alert(p1.showName());</span><br><span class="line">alert(w1.showName());</span><br></pre></td></tr></table></figure><h3 id="真正意义上的面向对象"><a href="#真正意义上的面向对象" class="headerlink" title="真正意义上的面向对象"></a>真正意义上的面向对象</h3><blockquote><p>简易版</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age)&#123;  //构造函数</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">   showName()&#123;</span><br><span class="line">       return this.name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p1=new Person(&apos;bbb&apos;,40);</span><br><span class="line">alert(p1.showName());</span><br></pre></td></tr></table></figure><blockquote><p>继承</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    constructor(name,age)&#123;  //构造函数</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    showName()&#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        //继承</span><br><span class="line">class Worker extends Person&#123;</span><br><span class="line">    constructor(name,age,job)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">        this.job=job;</span><br><span class="line">    &#125;</span><br><span class="line">    showJob()&#123;</span><br><span class="line">        return this.job;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p1=new Person(&apos;bbb&apos;,40);</span><br><span class="line">var w1=new Worker(&apos;aaa&apos;,10,&apos;学生&apos;);</span><br><span class="line"></span><br><span class="line">alert(p1.showJob);</span><br><span class="line">//alert(w1.showJob());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6速学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6_扩展运算符(四)</title>
      <link href="/2017/03/14/ES6_004_ES6_%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2017/03/14/ES6_004_ES6_%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="扩展运算符-gt-…"><a href="#扩展运算符-gt-…" class="headerlink" title="扩展运算符  =&gt; …"></a>扩展运算符  =&gt; …</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// var arr=[1,2,3,4,5];</span><br><span class="line">// var arr2=arr;</span><br><span class="line">// arr2.pop();</span><br><span class="line"></span><br><span class="line">// alert(arr);</span><br><span class="line"></span><br><span class="line">function show(...arr)&#123;</span><br><span class="line">    console.log(arr)</span><br><span class="line">&#125;</span><br><span class="line">show([1,2,3,4])  //  Array(1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function show(...a)&#123; </span><br><span class="line">    console.log(a.length);  //4</span><br><span class="line">&#125;</span><br><span class="line"> show(1,2,3,4)</span><br></pre></td></tr></table></figure><hr><h3 id="快速复制一个数组"><a href="#快速复制一个数组" class="headerlink" title="快速复制一个数组"></a>快速复制一个数组</h3><blockquote><p>ES6以前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr=[1,2,3,4,5];</span><br><span class="line">var arr2=[];</span><br><span class="line"></span><br><span class="line">for(var i=0; i&lt;arr.length; i++)&#123;</span><br><span class="line">    arr2.push(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Array.from()  详细使用请点击<br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">Array.from() MDN</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr=[1,2,3,4,5];</span><br><span class="line">        </span><br><span class="line">var arr2=Array.from(arr);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>用扩展运算符复制数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr=[1,2,3,4,5];</span><br><span class="line">var arr2=[...arr];</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ES6速学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6_对象简洁语法与解构赋值(三)</title>
      <link href="/2017/03/14/ES6_003_ES6_%E5%AF%B9%E8%B1%A1%E7%AE%80%E6%B4%81%E8%AF%AD%E6%B3%95%E4%B8%8E%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
      <url>/2017/03/14/ES6_003_ES6_%E5%AF%B9%E8%B1%A1%E7%AE%80%E6%B4%81%E8%AF%AD%E6%B3%95%E4%B8%8E%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="对象简洁语法"><a href="#对象简洁语法" class="headerlink" title="对象简洁语法"></a>对象简洁语法</h3><blockquote><p>赋值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var a=12;</span><br><span class="line">var b=5;</span><br><span class="line"></span><br><span class="line">/*var json=&#123;</span><br><span class="line">    a:a,</span><br><span class="line">    b:b</span><br><span class="line">&#125;;*/</span><br><span class="line">var json=&#123;</span><br><span class="line">    a,  //  a:a</span><br><span class="line">    b   //  b:b</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(json.a);</span><br></pre></td></tr></table></figure><blockquote><p>值是函数的形式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var a=12;</span><br><span class="line">/*var json=&#123;</span><br><span class="line">    a,</span><br><span class="line">    show:function()&#123;</span><br><span class="line">        alert(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;*/</span><br><span class="line">var json=&#123;</span><br><span class="line">    a,</span><br><span class="line">    show()&#123;</span><br><span class="line">        alert(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">json.show()</span><br></pre></td></tr></table></figure><hr><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">var [a,b,c]=[1,2,3];</span><br><span class="line">alert(a);</span><br><span class="line">*/</span><br><span class="line">var [a,b,[c,d]]=[1,2,[3,4]];</span><br><span class="line"></span><br><span class="line">alert(c);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var &#123;a,b&#125;=&#123;a:1,b:2&#125;;</span><br><span class="line">        </span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6速学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6_箭头函数（二）</title>
      <link href="/2017/03/14/ES6_002_ES6_%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2017/03/14/ES6_002_ES6_%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="基本使用-函数名-gt-’返回值’"><a href="#基本使用-函数名-gt-’返回值’" class="headerlink" title="基本使用    函数名 = ( )=&gt;’返回值’"></a>基本使用    函数名 = ( )=&gt;’返回值’</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">function show()&#123;</span><br><span class="line">        return 1;</span><br><span class="line">&#125;</span><br><span class="line">alert(show());</span><br><span class="line">*/</span><br><span class="line">   </span><br><span class="line">var show=()=&gt;&apos;welcome&apos;;</span><br><span class="line">alert(show());</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 带参数的形式</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">/*</span><br><span class="line">function show(a)&#123;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line">alert(show(12));</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">var show=(a,b)=&gt;a+b;</span><br><span class="line">alert(show(12,5));</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">function rnd(n,m)&#123;</span><br><span class="line">    return Math.floor(Math.random()*(m-n))+n;</span><br><span class="line">&#125;</span><br><span class="line">alert(rnd(12,90));</span><br><span class="line">*/</span><br><span class="line">//箭头函数的形式</span><br><span class="line">let rnd=(n,m)=&gt;Math.floor(Math.random()*(m-n))+n;</span><br><span class="line"></span><br><span class="line">alert(rnd(10,40));</span><br></pre></td></tr></table></figure><h3 id="内部有多个语句"><a href="#内部有多个语句" class="headerlink" title="内部有多个语句"></a>内部有多个语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var show=()=&gt;&#123;</span><br><span class="line">      alert(1);</span><br><span class="line">      alert(2);</span><br><span class="line">&#125;</span><br><span class="line">show();</span><br></pre></td></tr></table></figure><h3 id="与之前的差异"><a href="#与之前的差异" class="headerlink" title="与之前的差异"></a>与之前的差异</h3><blockquote><p>干掉了arguments</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> /*</span><br><span class="line">function show()&#123;</span><br><span class="line">    alert(arguments.length);</span><br><span class="line">&#125;</span><br><span class="line">show(1,2,3);</span><br><span class="line">*/</span><br><span class="line">//干掉了  arguments</span><br><span class="line">var show=()=&gt;&#123;</span><br><span class="line">    alert(arguments.length); //ReferenceError: arguments is not defined</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show(1,2,3);</span><br></pre></td></tr></table></figure><h3 id="在DOM事件上使用"><a href="#在DOM事件上使用" class="headerlink" title="在DOM事件上使用"></a>在DOM事件上使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">document.onclick=function()&#123;</span><br><span class="line">    alert(1);</span><br><span class="line">&#125;;</span><br><span class="line">*/</span><br><span class="line">document.onclick=()=&gt;&#123;</span><br><span class="line">    alert(1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6速学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6变量声明（一）</title>
      <link href="/2017/03/14/ES6_001_ES6_%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/"/>
      <url>/2017/03/14/ES6_001_ES6_%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><blockquote><p>代码在浏览器环境运行！代码在浏览器环境运行！代码在浏览器环境运行！</p></blockquote><blockquote><p> 我用的google！！！</p></blockquote><h3 id="变量声明-let"><a href="#变量声明-let" class="headerlink" title="变量声明 let"></a>变量声明 let</h3><blockquote><p>最最最基本用法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a = 11;</span><br><span class="line">alert(a);  // 11</span><br></pre></td></tr></table></figure><blockquote><p>let与var的区别 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//声明后未初始化,输出相同.</span><br><span class="line">var a;</span><br><span class="line"><span class="built_in">let</span> b;</span><br><span class="line">console.log(a); // undefined</span><br><span class="line">console.log(b); // undefined</span><br></pre></td></tr></table></figure><blockquote><p>使用在声明前的异同</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(a); //输出undefined  ==&gt; 变量提升</span><br><span class="line">var a= <span class="string">'test var'</span>;</span><br><span class="line"></span><br><span class="line">console.log(b); //直接报错：ReferenceError: b is not defined</span><br><span class="line"><span class="built_in">let</span> b = <span class="string">'test let'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>重复声明问题    在相同的函数或块作用域内重新声明同一个变量会引发SyntaxError</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a =5;</span><br><span class="line">var a =12;</span><br><span class="line">console.log(a);//必须注释下面的其中一个<span class="built_in">let</span>声明 </span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> b = 3;</span><br><span class="line"><span class="built_in">let</span> b = 666;  //报错 Identifier <span class="string">'b'</span> has already been declared </span><br><span class="line">console.log(b)</span><br></pre></td></tr></table></figure><hr><h3 id="作用域问题"><a href="#作用域问题" class="headerlink" title="作用域问题"></a>作用域问题</h3><blockquote><p>除了全局作用域和函数作用域,es6新增了块级作用域，即用{ }包裹的代码块。</p></blockquote><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><blockquote><p>内层变量和外层变量的值互不影响。内层无法读取外层，外层无法读取内层。</p></blockquote><h4 id="作用域问题-1"><a href="#作用域问题-1" class="headerlink" title="作用域问题"></a>作用域问题</h4><blockquote><p>问题1： 如果是let声明的初始化表达式 在for循环外 访问i会报错  如果var声明的就不会报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=0; i&lt;10; i++)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//报错</span><br><span class="line">alert(i);</span><br></pre></td></tr></table></figure><blockquote><p>问题2： 如果是let声明的初始化表达式 在for循环外 访问i会报错  如果var声明的就不会报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log(a); //报错</span><br><span class="line">    </span><br><span class="line">  &#123;<span class="built_in">let</span> a=12;&#125;</span><br><span class="line">    </span><br><span class="line">  console.log(a) //报错</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 问题3： 事件中的索引问题  ==&gt;简化内部函数代码</p></blockquote><blockquote><p>工作原理是因为（匿名）内部函数的3个实例引用了变量i的3个不同实例。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">            var aBtn=document.querySelectorAll(<span class="string">'input'</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">let</span> i=0; i&lt;aBtn.length; i++)&#123;</span><br><span class="line">                aBtn[i].onclick=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">                    alert(i);  //弹出对应的  索引   </span><br><span class="line">                    //如果换成var声明  就会弹出 aBtn.length ==&gt; 3</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"aaa"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"bbb"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"ccc"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>问题4：在程序或者函数的顶层，let并不会像var一样在全局对象上创造一个属性</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x = <span class="string">'global'</span>;</span><br><span class="line"><span class="built_in">let</span> y = <span class="string">'global'</span>;</span><br><span class="line">console.log(this.x); // <span class="string">"global"</span></span><br><span class="line">console.log(this.y); // undefined</span><br></pre></td></tr></table></figure><hr><h3 id="const-常量"><a href="#const-常量" class="headerlink" title="const 常量"></a>const 常量</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>声明时就需要赋值，否则报错；一旦声明不可重新赋值，否则报错；</li><li>块级作用域</li><li>不存在变量提升；</li><li>存在暂时性死区；</li><li>声明引用类型常量时，const保存的是地址，常量中的属性还是可以变的；</li></ul><blockquote><p>块级作用域</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    const a=12;</span><br><span class="line">&#125;</span><br><span class="line">//报错  常量的作用域</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><blockquote><p>重复赋值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const a=12;</span><br><span class="line">a=5;</span><br><span class="line">alert(a); // TypeError:Assignment to constant variable.</span><br></pre></td></tr></table></figure><blockquote><p>未初始化就使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const a;</span><br><span class="line">alert(a); // Uncaught SyntaxError: Missing initializer <span class="keyword">in</span> const declaration</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6速学 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
